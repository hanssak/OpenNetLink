-- Function: func_email_detail(bigint, BOOLEAN)

-- DROP FUNCTION func_email_detail(bigint, BOOLEAN);
-- 'MAIL_TEXT.TXT'를 제외하는 조건을 넣으면 안됨, Agent에서 본문보기를 할 수 없음

CREATE OR REPLACE FUNCTION func_email_detail_open(IN pemailseq bigint, IN sfm2is BOOLEAN)
  RETURNS TABLE(tag character varying, tagval character varying) AS
$BODY$
DECLARE
	sql varchar;	-- 쿼리

begin

sql:='WITH TBL_EMAIL_TRANSFER AS 
	( 
		SELECT * 
		FROM TBL_EMAIL_TRANSFER_HIS WHERE EMAIL_SEQ=##EMAIL_SEQ## 
		UNION ALL 
		SELECT * 
		FROM TBL_EMAIL_TRANSFER_INFO WHERE EMAIL_SEQ=##EMAIL_SEQ##
	) 
	, TBL_EMAIL_APPROVE AS 
	( 
		SELECT APPROVE_KIND AS APPROVEKIND, * 
		FROM   TBL_EMAIL_APPROVE_HIS WHERE EMAIL_SEQ=##EMAIL_SEQ## 
		UNION ALL 
		SELECT ''0'' AS APPROVEKIND, * 
		FROM   TBL_EMAIL_APPROVE_INFO WHERE EMAIL_SEQ=##EMAIL_SEQ## 
	) 
	, TBL_EMAIL_USER AS 
	( 
		SELECT * 
		FROM TBL_EMAIL_RECEIVER WHERE EMAIL_SEQ=##EMAIL_SEQ## 
	) 
	, TBL_USERINFO AS
	(
		SELECT ''H'' USERPOS, USER_SEQ, USER_ID, USER_NAME, DEPT_SEQ, USER_RANK
		FROM TBL_USER_INFO_HIS
		UNION ALL
		SELECT ''C'' USERPOS, USER_SEQ, USER_ID, USER_NAME, DEPT_SEQ, USER_RANK
		FROM TBL_USER_INFO
	)
	, TBL_EMAIL_APPROVE_REAL_HIS_DATA AS
	(
		SELECT REQ_SEQ, APPROVE_REAL_SEQ, APPROVE_REAL_ID, APPROVE_REAL_NAME, APPROVE_REAL_RANK
		FROM TBL_EMAIL_APPROVE_REAL_HIS WHERE EMAIL_SEQ=##EMAIL_SEQ## 	
	)
	SELECT  CAST(A.TAG AS VARCHAR) AS TAG, CAST(A.TALVAL AS VARCHAR) AS TAGVAL
	FROM (
		SELECT ''DATA'' AS  TAG, 
			( ''EMAILSEQ:''||E.EMAIL_SEQ 
			||''|TRANSKIND:''||(CASE WHEN SUBSTRING(E.SYSTEM_ID,1,1)=''I'' THEN ''0'' ELSE ''1'' END) 
			||''|REQDATE:''||E.REQUEST_TIME 
			||''|TRANSSTATUS:''||(CASE WHEN E.TRANS_FLAG=''1'' THEN ''W'' WHEN E.TRANS_FLAG=''2'' THEN ''W'' 
						WHEN E.TRANS_FLAG=''3'' THEN ''S'' WHEN E.TRANS_FLAG=''4'' THEN ''F'' 
						WHEN E.TRANS_FLAG=''7'' THEN ''S'' WHEN E.TRANS_FLAG=''8'' THEN ''F'' WHEN E.TRANS_FLAG=''9'' THEN ''W''
						WHEN E.TRANS_FLAG=''5'' THEN ''C'' WHEN E.TRANS_FLAG=''6'' THEN ''V'' ELSE ''N'' END) 
		        ||''|APPROVEKIND:''||A.APPROVEKIND 
			||''|APPROVESTATUS:''||E.APPROVE_FLAG 
			||''|MAILSENDER:''||(SELECT USER_NAME||(CASE WHEN USER_RANK IS NOT NULL THEN '' ''||USER_RANK ELSE '''' END) FROM TBL_USERINFO WHERE USER_SEQ=E.USER_SEQ)
			||''|USERPOS:''||(SELECT USERPOS FROM TBL_USERINFO WHERE USER_SEQ=E.USER_SEQ) 
			||''|ARPPROVEDATE:''||E.APPROVE_TIME 
			||''|FILEKEY:''||E.ENCRYPT_KEY ) AS TALVAL
		FROM TBL_EMAIL_TRANSFER E, 
			( 
			    SELECT EMAIL_SEQ, APPROVEKIND,COUNT(*) APPCNT 
			    FROM TBL_EMAIL_APPROVE 
			    GROUP BY EMAIL_SEQ, APPROVEKIND 
			) A 
		WHERE E.EMAIL_SEQ=##EMAIL_SEQ## 
		  AND E.EMAIL_SEQ=A.EMAIL_SEQ 
	  )A
	  
	UNION ALL 

	SELECT ''TITLE'', TITLE 
	FROM   TBL_EMAIL_TRANSFER 

	UNION ALL 

	SELECT ''RECIEVERRECORD'', CAST(COUNT(*) AS VARCHAR) 
	FROM TBL_EMAIL_USER 
	WHERE RECV_TYPE=''0'' 

	UNION ALL 

	SELECT ''RECIEVER'', M.ADDR
	FROM TBL_EMAIL_USER M
	WHERE  M.RECV_TYPE=''0''

	UNION ALL 

	SELECT ''CCRECORD'',CAST(COUNT(*) AS VARCHAR) 
	FROM TBL_EMAIL_USER 
	WHERE RECV_TYPE=''1'' 

	UNION ALL 

	SELECT ''CCUSER'', M.ADDR
	FROM TBL_EMAIL_USER M
	WHERE M.RECV_TYPE=''1''

	UNION ALL 

	SELECT ''HIDECCRECORD'',CAST(COUNT(*) AS VARCHAR) 
	FROM TBL_EMAIL_USER 
	WHERE RECV_TYPE=''2'' 

	UNION ALL 

	SELECT ''HIDECCUSER'', M.ADDR
	FROM TBL_EMAIL_USER M
	WHERE M.RECV_TYPE=''2''


	UNION ALL 

	SELECT ''APPROVERECORD'',CAST (COUNT(*) AS VARCHAR) 
	FROM TBL_EMAIL_APPROVE A,
	     TBL_EMAIL_TRANSFER T
	WHERE A.EMAIL_SEQ=T.EMAIL_SEQ
	      AND A.APPROVE_USER_SEQ <> T.USER_SEQ

	UNION ALL 
	(
	  SELECT ##APPROVE_INFO_REC##
	  FROM TBL_EMAIL_APPROVE AU
LEFT OUTER JOIN TBL_EMAIL_APPROVE_REAL_HIS_DATA H ON
	  H.REQ_SEQ=AU.REQ_SEQ,
	       TBL_EMAIL_TRANSFER T,
	       TBL_USER_INFO U
	  WHERE U.USER_SEQ=AU.APPROVE_USER_SEQ 
		AND AU.EMAIL_SEQ=T.EMAIL_SEQ
		AND AU.APPROVE_USER_SEQ <> T.USER_SEQ
	  ORDER BY AU.APPROVE_ORDER 
	)  

	UNION ALL 
	(
		SELECT ''FILERECORD'', CAST(COUNT(*) AS VARCHAR) 
		FROM TBL_EMAIL_ADD_FILE	F
		WHERE F.EMAIL_SEQ=##EMAIL_SEQ## 
			AND F.ADD_TYPE=''0''
		GROUP BY F.EMAIL_SEQ 
	)
	UNION ALL 
	
	SELECT ''FILE'',(F.FILE_SEQ||''|''||F.DLP||''|''||F.FILE_NAME||''|''||F.FILE_KIND||''|''||F.FILE_SIZE||''|''||(CASE WHEN VIRUS_FLAG=''1'' THEN VIRUS_DESC ELSE ''-'' END) || ''|''|| (CASE WHEN VIRUS_FLAG=''3'' THEN V.VIRUS_DESC ELSE ''-'' END) ) 
	FROM TBL_EMAIL_ADD_FILE F 
	 LEFT OUTER JOIN TBL_EMAIL_VIRUS_HIS V ON F.EMAIL_SEQ=V.EMAIL_SEQ AND F.FILE_SEQ=V.FILE_SEQ AND (V.VIRUS_FLAG=''1'' OR V.VIRUS_FLAG=''3'')
	WHERE F.EMAIL_SEQ=##EMAIL_SEQ##
		AND F.ADD_TYPE=''0'' 
	';

	IF sfm2is IS TRUE THEN
		-- sql:=Replace(sql, '##APPROVE_INFO_REC##', '''APPROVE'', AU.APPROVE_ORDER||''|''||(CASE WHEN AU.APPROVE_REAL_ID IS NULL THEN U.USER_ID ELSE AU.APPROVE_REAL_ID END)||''|''||(CASE WHEN AU.APPROVE_REAL_ID IS NULL THEN U.USER_NAME ELSE AU.APPROVE_REAL_NAME END)||''|''||(CASE WHEN AU.APPROVE_REAL_ID IS NULL THEN U.USER_RANK ELSE AU.APPROVE_REAL_RANK END)||''|''||AU.APPROVE_FLAG||''|''||AU.APPR_RES_TIME||''|''||(CASE WHEN AU.APPROVE_DESC IS NULL THEN '''' ELSE AU.APPROVE_DESC END)');
		sql:=Replace(sql, '##APPROVE_INFO_REC##', '''APPROVE'', AU.APPROVE_ORDER||''|''||(CASE WHEN H.APPROVE_REAL_ID IS NULL THEN U.USER_ID ELSE H.APPROVE_REAL_ID END)||''|''||(CASE WHEN H.APPROVE_REAL_ID IS NULL THEN U.USER_NAME ELSE H.APPROVE_REAL_NAME END)||''|''||(CASE WHEN H.APPROVE_REAL_ID IS NULL THEN U.USER_RANK ELSE H.APPROVE_REAL_RANK END)||''|''||AU.APPROVE_FLAG||''|''||AU.APPR_RES_TIME||''|''||(CASE WHEN AU.APPROVE_DESC IS NULL THEN '''' ELSE AU.APPROVE_DESC END)');		
	ELSE
		sql:=Replace(sql, '##APPROVE_INFO_REC##', '''APPROVE'', AU.APPROVE_ORDER||''|''||U.USER_ID||''|''||U.USER_NAME||''|''||U.USER_RANK||''|''||AU.APPROVE_FLAG||''|''||AU.APPR_RES_TIME||''|''||(CASE WHEN AU.APPROVE_DESC IS NULL THEN '''' ELSE AU.APPROVE_DESC END)');
	End IF;
	
	sql:=Replace(sql, '##EMAIL_SEQ##', CAST(pemailseq AS VARCHAR) );

	-- ''APPROVE'', AU.APPROVE_ORDER||''|''||U.USER_ID||''|''||U.USER_NAME||''|''||U.USER_RANK||''|''||AU.APPROVE_FLAG||''|''||AU.APPR_RES_TIME||''|''
	-- ''APPROVE'', AU.APPROVE_ORDER||''|''||U.USER_ID||''|''|| (CASE WHEN (AU.APPROVE_ORDER > 100 AND AU.APPROVE_ORDER < 200 AND AU.REQ_SEQ = H.REQ_SEQ AND AU.EMAIL_SEQ = H.EMAIL_SEQ) THEN (U.USER_NAME||''|''||U.USER_RANK) ELSE (U.USER_NAME||''|''||U.USER_RANK) END ) ||''|''||AU.APPROVE_FLAG||''|''||AU.APPR_RES_TIME||''|''||(CASE WHEN AU.APPROVE_DESC IS NULL THEN '''' ELSE AU.APPROVE_DESC END) 

RETURN QUERY EXECUTE
	sql;

end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION func_email_detail_open(bigint, BOOLEAN)
  OWNER TO hsck;
