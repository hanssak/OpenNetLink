
// SGClean.cpp : 응용 프로그램에 대한 클래스 동작을 정의합니다.
//

#include "stdafx.h"
#include "SGClean.h"
//#include "SGCleanDlg.h"
#include <WinInet.h>
#include <tlhelp32.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CSGCleanApp

BEGIN_MESSAGE_MAP(CSGCleanApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CSGCleanApp 생성

CSGCleanApp::CSGCleanApp()
{
	// 다시 시작 관리자 지원
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 여기에 생성 코드를 추가합니다.
	// InitInstance에 모든 중요한 초기화 작업을 배치합니다.
}


// 유일한 CSGCleanApp 개체입니다.

CSGCleanApp theApp;


// CSGCleanApp 초기화

BOOL CSGCleanApp::InitInstance()
{
	// 응용 프로그램 매니페스트가 ComCtl32.dll 버전 6 이상을 사용하여 비주얼 스타일을
	// 사용하도록 지정하는 경우, Windows XP 상에서 반드시 InitCommonControlsEx()가 필요합니다.
	// InitCommonControlsEx()를 사용하지 않으면 창을 만들 수 없습니다.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 응용 프로그램에서 사용할 모든 공용 컨트롤 클래스를 포함하도록
	// 이 항목을 설정하십시오.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();


	AfxEnableControlContainer();

	// 대화 상자에 셸 트리 뷰 또는
	// 셸 목록 뷰 컨트롤이 포함되어 있는 경우 셸 관리자를 만듭니다.
	CShellManager *pShellManager = new CShellManager;

	// 표준 초기화
	// 이들 기능을 사용하지 않고 최종 실행 파일의 크기를 줄이려면
	// 아래에서 필요 없는 특정 초기화
	// 루틴을 제거해야 합니다.
	// 해당 설정이 저장된 레지스트리 키를 변경하십시오.
	// TODO: 이 문자열을 회사 또는 조직의 이름과 같은
	// 적절한 내용으로 수정해야 합니다.
	//SetRegistryKey(_T("로컬 응용 프로그램 마법사에서 생성된 응용 프로그램"));
	SetRegistryKey(_T("Application generated by the local application wizard"));


#ifdef _OPENNETLINK_KILL_

	CString strKillProcName = _T("OpenNetLinkApp.exe");
	if (__argc == 2)
	{
		strKillProcName = __targv[1];
	}

	//AfxMessageBox(strKillProcName);

	ProcessKill(strKillProcName);

	//string strPath = GetModulePath();
	//strPath = strPath.substr(0, strPath.length() - 1);
	//KillFullPathApplication(strKillProcName.data(), (char*)strPath.data());

#else
	int iMode = ParamCheck();
	switch (iMode)
	{
		//#ifdef _PCURL_BHPARK_
	case 1: // 1:PCtoURL Proxy off
		if (OffProxyRegistry() == TRUE)
			SetIniProxyStatus(_T("0"));
		break;
		//#endif //_PCURL_BHPARK_
	case 2: // 2:재시작
	{
		CSGCleanDlg dlg;
		m_pMainWnd = &dlg;
		Sleep(1000);
		dlg.SetReRun(true);
		INT_PTR nResponse = dlg.DoModal();
		if (nResponse == IDOK)
		{
			// TODO: 여기에 [확인]을 클릭하여 대화 상자가 없어질 때 처리할
			//  코드를 배치합니다.
		}
		else if (nResponse == IDCANCEL)
		{
			// TODO: 여기에 [취소]를 클릭하여 대화 상자가 없어질 때 처리할
			//  코드를 배치합니다.
		}
	}
	break;
#ifdef _UPDATE_POLICY_
	case 3: // 3:재시작 후 자동로그인(파라메타 U로 실행)
	{
		CSGCleanDlg dlg;
		m_pMainWnd = &dlg;
		Sleep(1000);
		dlg.SetReRun(true);
		// 정책 업데이트 후 자동로그인 필요한 사이트일 경우만 사용
//			dlg.SetAutoLogin(true);
		INT_PTR nResponse = dlg.DoModal();
		if (nResponse == IDOK)
		{
			// TODO: 여기에 [확인]을 클릭하여 대화 상자가 없어질 때 처리할
			//  코드를 배치합니다.
		}
		else if (nResponse == IDCANCEL)
		{
			// TODO: 여기에 [취소]를 클릭하여 대화 상자가 없어질 때 처리할
			//  코드를 배치합니다.
		}
	}
	break;
#endif
	default:// 0:SecureGate.exe종료 
	{
		CSGCleanDlg dlg;
		m_pMainWnd = &dlg;
		INT_PTR nResponse = dlg.DoModal();
		if (nResponse == IDOK)
		{
			// TODO: 여기에 [확인]을 클릭하여 대화 상자가 없어질 때 처리할
			//  코드를 배치합니다.
		}
		else if (nResponse == IDCANCEL)
		{
			// TODO: 여기에 [취소]를 클릭하여 대화 상자가 없어질 때 처리할
			//  코드를 배치합니다.
		}

	}
	break;
	}
#endif // !_OPENNETLINK_KILL_

	// 위에서 만든 셸 관리자를 삭제합니다.
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// 대화 상자가 닫혔으므로 응용 프로그램의 메시지 펌프를 시작하지 않고  응용 프로그램을 끝낼 수 있도록 FALSE를
	// 반환합니다.
	return FALSE;
}


string CSGCleanApp::GetModulePath()
{
	char szpath[1024] = { 0, }, szdrive[64] = { 0, }, szdir[512] = { 0, };
	::GetModuleFileNameA(NULL, szpath, sizeof(szpath));

	_splitpath(szpath, szdrive, szdir, NULL, NULL);

	string strPath = szdrive;
	strPath.append(szdir);

	return strPath;
}

BOOL CSGCleanApp::GetProcessModule(DWORD dwPID, CString sProcessName)
{

	if (sProcessName.IsEmpty())
		return FALSE;

	HANDLE hModuleSnap = NULL;
	MODULEENTRY32 me32 = { 0 };
	hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID);
	if (hModuleSnap == (HANDLE)-1)
		return (FALSE);
	me32.dwSize = sizeof(MODULEENTRY32);

	//해당 프로세스의 모듈리스트를 루프로 돌려서 프로세스이름과 동일하면
	//true를 리턴한다.
	if (Module32First(hModuleSnap, &me32))
	{
		do
		{
			if (me32.szModule[0] != NULL && sProcessName.CompareNoCase(me32.szModule) == 0)
			{
				CloseHandle(hModuleSnap);
				return true;
			}
		} while (Module32Next(hModuleSnap, &me32));
	}
	CloseHandle(hModuleSnap);
	return false;
}

BOOL CSGCleanApp::ProcessKill(CString strProcessName)
{

	if (strProcessName.IsEmpty())
		return FALSE;

	HANDLE hProcessSnap = NULL;
	BOOL bRet = FALSE;
	PROCESSENTRY32 pe32 = { 0 };

	hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (hProcessSnap == (HANDLE)-1)
		return false;
	pe32.dwSize = sizeof(PROCESSENTRY32);

	//프로세스가 메모리상에 있으면 첫번째 프로세스를 얻는다
	if (Process32First(hProcessSnap, &pe32))
	{
		BOOL bCurrent = FALSE;
		MODULEENTRY32 me32 = { 0, };
		DWORD dwCurPid = GetCurrentProcessId();

		do
		{

			bCurrent = FALSE;
			if (pe32.th32ProcessID != 0 && pe32.th32ProcessID != 4 && pe32.th32ProcessID != dwCurPid)
				bCurrent = (strProcessName.CompareNoCase(pe32.szExeFile) == 0);
				//bCurrent = GetProcessModule(pe32.th32ProcessID, strProcessName);

			if (bCurrent)
			{
				HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pe32.th32ProcessID);
				if (hProcess != NULL)
				{
					if (TerminateProcess(hProcess, 0))
					{
						unsigned long nCode; //프로세스 종료 상태
						GetExitCodeProcess(hProcess, &nCode);
					}
					CloseHandle(hProcess);
				}
			}
		} while (Process32Next(hProcessSnap, &pe32));
	}

	CloseHandle(hProcessSnap);
	return true;
}

