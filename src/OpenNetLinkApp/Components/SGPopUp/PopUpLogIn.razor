@using System.Diagnostics
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.PageEvent
@using AgLogManager
@using HsNetWorkSGData;
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using System.Net.NetworkInformation
@using OpenNetLinkApp.Data.SGQuery
@using System.Threading

@inherits LayoutComponentBase
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject WebWindow Window
@inject PageStatusService pageService
@inject OSXcmdService OSxCmdService

<div class="modal fade" id="PopUpLogIn" style="z-index:9999;">
    <div class="modal-dialog">
        <div class="modal-content">
            <!--s login popup-->

            <div class="login-box">
                <div class="row1">
                    <div class="col-md-6 sub_visual_wrap" style=" height:420px;">
                        <ul class="login_bg_w logbg_blue">
                            <li><img src="/images/adminlte/SecureGate_logo.png" class="mb-3"></li>
                            <li>
                                <span>
                                    This is a solution providing the data transmission service <br>among networks with the highest level of security <br>in the separated network environment.
                                </span>
                            </li>
                        </ul>
                    </div>
                    <div class="col-md-6 login-card-body" style="background-color:none !important;">

                        <div class="modal-header1">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>

                        <p class="login-box-msg1">파일전송시스템 <i class="fas fa-cloud-download-alt fa-lg ml-1"></i></p>

                        <div class="login_w">

                            <div class="input-group mb-2">
                                <input type="text" class="form-control-login" placeholder="ID" @bind="id" disabled=@bUIBtnDisable tabindex="1">
                            </div>
                            @if (pageService.m_nLoginType != 5) //OTP PW 필요없음
                            {
                                <div class="input-group mb-2">
                                    <input type="password" class="form-control-login" placeholder="Password" @bind="pw" @onkeyup="keyCheck" disabled=@bUIBtnDisable tabindex="2">
                                </div>
                            }
                            @if (pageService.m_nLoginType == 4 || pageService.m_nLoginType == 5) //PW_OTP(4), OTP(5)
                            {
                                <div class="input-group mb-2">
                                    <input id="otp" type="text" class="full-input mb-3 password" placeholder="OTP" @bind="otp" @onkeyup="keyCheck" tabindex="3" autocomplete="off">
                                </div>
                            }
                            <div class="row">
                                @if (bAutoLogin && eLoginUITypeData == eLoginType.eLOGINTYPE_ORIGIN)
                                {
                                    <div class="col-12 pt-1 pr-4 text-right ">
                                        <div class="icheck-primary">
                                            <input type="checkbox" id="remember" @onclick="CheckStateChange" checked=@bAutoLoginCheck disabled=@bUIBtnDisable>
                                            <label for="remember">
                                                @XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX")
                                            </label>
                                        </div>
                                    </div>
                                }
                                <div class="col-12  pt-2">
                                    <button class="btn btn-login btn-block btn_blue" @onclick="doLogIn" disabled=@bUIBtnDisable>LOGIN</button>
                                </div>
                                <div class="col-12 text-center pt-3">Copyright &copy  HANSSAK Corp.  All rights reserved.</div>

                            </div>
                        </div>

                    </div>
                </div>

            </div>
            <!--/.e login popup-->
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<!-- <PWChange2 @ref="refPWChange"></PWChange2>
<PWChangeDefaultPW2 @ref="refPWChangeDefaultPW"></PWChangeDefaultPW2> -->

<SGAlert @ref="refSGloginDuplicate" Guid="modal-alert-popuplogin" OnCancel="SessionAlertCancelpopup" OnConfirm="SessionAlertConfirmpopup"></SGAlert>

@code {

    SGAlert refSGloginDuplicate;

    [Parameter]
    public EventCallback<int> goToPage { get; set; }

    public bool bAutoLogin = true;                          // 자동로그인 CheckBox 표현 및 사용유무
    public bool bAutoLoginCheck = false;                    // 자동로그인 check 상태 설정
    public bool bUIBtnDisable = false;
    public int nGroupID = -1;                       // 현재 사용할 GroupID
    public int nDrawPageGroupID = -1;              // Draw하는 GroupID

    public eLoginType eLoginUITypeData = eLoginType.eLOGINTYPE_ORIGIN;    // 로그인 Type에 따라서 UI창 변경위해 사용
    public eIDPWresultJob eResultIdPwAfterJob = eIDPWresultJob.eNone;

    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGSiteConfigService siteConfig;
    ISGAppConfigService AppConfigSvc;

    //    PWChange2 refPWChange;
    //    PWChangeDefaultPW2 refPWChangeDefaultPW;
    SGSettingsDBProc sgSettingProc = null;

    public string id { get; set; }
    public string pw { get; set; }
    public string url { get; set; }
    public string otp { get; set; }

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<PopUpLogIn>();

    public async Task openPopUp()
    {
        object[] param = { "PopUpLogIn" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void initUIdata()
    {
        bUIBtnDisable = false;
        id = "";
        pw = "";
    }

    /// <summary>
    /// PopUpLogin UI만 닫음
    /// </summary>
    public void closeUIPopup()
    {
        object[] param = { "PopUpLogIn" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public void closePopUp()
    {
        initUIdata();

        closeUIPopup();
    }

    /// <summary>
    /// 세션중복 로그인 포기 처리
    /// </summary>
    private void SessionAlertCancelpopup()
    {
        JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        //refSGloginDuplicate.closePopUp();
        initUIdata();
    }

    /// <summary>
    /// 세션중복 로그인 진행 처리
    /// </summary>
    private void SessionAlertConfirmpopup()
    {
        HSCmdCenter.SetAllowSessionDuplicate(refSGloginDuplicate.groupId);
        doLogIn();
        bUIBtnDisable = false;
    }

    /// <summary>
    /// 세션중복시 보여주는 이벤트 팝업
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    private async void ShowSessionCountPopup(int groupID, PageEventArgs e)
    {
        await refSGloginDuplicate.openPopUp(XmlConf.GetTitle("T_LOGIN_DUPLICATE"), XmlConf.GetTitle("T_LOGIN_DUPLICATE_GUIDE"), 2, groupID);
    }

    private void doLogIn()
    {
        try
        {

            HSCmdCenter.sgPageEvent.SetLoginEventAdd(nGroupID, LoginpopUpResult);
            HSCmdCenter.sgPageEvent.SetSessionDuplicateEventAdd(nGroupID, ShowSessionCountPopup);

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;
                //strConfirmID = AppConfigSvc.GetSWCommitId();
                //strCurCliVersion = "OpenNetLink " + strCurCliVersion + "+" + strConfirmID;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
                //strCurCliVersion = strCurCliVersion + ":" + "debian";
            }

            if (strCurCliVersion.Equals(""))
                return;
            HSCmdCenter.SetCliVersion(strCurCliVersion);

            if (pageService.m_bMultiLoginDo)
            {
                SGSvrData sgSvrData = null;
                sgSvrData = (SGSvrData)HSCmdCenter.GetSGSvrData(nGroupID);
                if (sgSvrData == null)
                    return;


                eLoginType tmpLoginType;

                //사용자 지정 로그인 사용 시 서버로그인 타입은 Origin이여야 적용이 됨
                //사용자 지정 로그인 사용할 경우 해당 로그인 타입으로 지정
                //tmpLoginType = SGAppMgrSvc.OpConfigInfoService.GetUseAppLoginType() ? (eLoginType)SGAppMgrSvc.OpConfigInfoService.GetAppLoginType() : sgSvrData.GetLoginType();
                tmpLoginType = SGAppMgrSvc.SiteConfigInfoService.GetUseAppLoginType(nGroupID) ? (eLoginType)SGAppMgrSvc.SiteConfigInfoService.GetAppLoginType(nGroupID) : sgSvrData.GetLoginType();

                @*if (AppConfigSvc.GetUseAppLoginType())
                        tmpLoginType = (eLoginType)AppConfigSvc.GetAppLoginType();
                    else
                        tmpLoginType = sgSvrData.GetLoginType();*@


                CLog.Here().Information($"PopUPLogin Dologin m_bMultiLoginDo logintype: {tmpLoginType}   group ID : {nGroupID}");


                if (tmpLoginType == eLoginType.eLOGINTYPE_AD)
                    HSCmdCenter.LoginAD(nGroupID, id, pw, strCurCliVersion, otp, (int)tmpLoginType);
                else
                    HSCmdCenter.Login(nGroupID, id, pw, strCurCliVersion, otp, (int)tmpLoginType);
            }
            else
            {
                if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
                    HSCmdCenter.LoginAD(nGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType); // (int)eLoginUITypeData
                else
                    HSCmdCenter.Login(nGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType); // (int)eLoginUITypeData
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Information("doLogin - Exception - Msg : {0}", ex.Message);
            Debug.WriteLine(ex.Message);
        }

	// 로그결과 받을때 닫음
        //closeUIPopup();

        @*if (CloseUI)
            closeUIPopup();*@

        //MyNavigationManager.NavigateTo(url);
    }

    /// <summary>
    /// KeyBoard 입력에 따른 동작 정의하는 함수
    /// </summary>
    /// <param name="arg"></param>
    private void keyCheck(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
            doLogIn();
    }

    /// <summary>
    /// 자동로그인 checkBox 상태가 변경될때 마다 호출
    /// </summary>
    public void CheckStateChange()
    {

        bAutoLoginCheck = (!bAutoLoginCheck);
        //        if (!bAutoLoginCheck)
        //        {
        //            bUIBtnDisable = false;
        //            StateHasChanged();
        //        }

    }

    protected override void OnInitialized()
    {

        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

        sgSettingProc = SGSettingsDBProc.Instance;

        CLog.Information("PopUpLogin - OnInitialized!");
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        // 지정한 그룹ID로 로그인
        // 첫로그인에는 popup 사용못함
        if ((nDrawPageGroupID < 0 || nDrawPageGroupID != nGroupID) && nGroupID > -1)
        {
            AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
            CLog.Here().Information("PopUpLogin - OnAfterRenderAsync - GroupID : {0}", nGroupID);

            nDrawPageGroupID = nGroupID;

            bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID);
            // bAutoLoginCheck = siteConfig.GetUseAutoLoginCheck(nGroupID);

            //사용자 지정 로그인 사용 시 서버로그인 타입은 Origin이여야 적용이 됨
            //사용자 지정 로그인 사용할 경우 해당 로그인 타입으로 지정
            @*if (AppConfigSvc.GetUseAppLoginType())
                eLoginUITypeData = (eLoginType)AppConfigSvc.GetAppLoginType();*@
            if (SGAppMgrSvc.SiteConfigInfoService.GetUseAppLoginType(nGroupID))
                eLoginUITypeData = (eLoginType)SGAppMgrSvc.SiteConfigInfoService.GetAppLoginType(nGroupID);


            // IDPW 로그인
            if (eLoginUITypeData == eLoginType.eLOGINTYPE_ORIGIN)
            {
                // ID저장 사용
                //if (siteConfig.GetUseLoginIDSave(nGroupID) == true)   // json으로 설정이동
                if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(nGroupID))
                {
                    string strEncID = "";
                    strEncID = sgSettingProc.GetSettingUID(nGroupID);
                    if (strEncID == null || strEncID.Equals(""))
                        return;
                    string strID = "";
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    sgRSACrypto.ValueDecrypt(strEncID, out strID);
                    id = strID;
                    StateHasChanged();
                }

                // IDPW 자동로그인
                // if (siteConfig.GetUseAutoLogin(nGroupID) == true)    // json으로 이동
                if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID))
                {

                    // siteConfig. json으로 이동
                    bAutoLoginCheck = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLoginCheck(nGroupID);

                    bool bAutoLoginContinue = sgSettingProc.GetSettingAutoLogin(nGroupID);
                    if (bAutoLoginContinue)
                        bAutoLoginCheck = true;

                    if (bAutoLoginCheck)
                        StateHasChanged();

                    if (bAutoLoginContinue)
                    {
                        string strEncID = "";
                        string strEncPW = "";
                        strEncID = sgSettingProc.GetSettingUID(nGroupID);
                        strEncPW = sgSettingProc.GetSettingUPW(nGroupID);
                        if ((strEncID == null || strEncID.Equals("")) || (strEncPW == null || strEncPW.Equals("")))
                        {
                            bUIBtnDisable = false;
                            StateHasChanged();
                            return;
                        }

                        SGRSACrypto sgRSACrypto = new SGRSACrypto();
                        string strID = "";
                        string strPW = "";
                        sgRSACrypto.ValueDecrypt(strEncID, out strID);
                        sgRSACrypto.ValueDecrypt(strEncPW, out strPW);
                        id = strID;
                        pw = strPW;
                        StateHasChanged();
                        await Task.Delay(500);
                        doLogIn();
                        StateHasChanged();
                    }

                } // if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID))

            } // if (eLoginUITypeData == eLoginType.eLOGINTYPE_ORIGIN)
            else if (eLoginUITypeData == eLoginType.eLOGINTYPE_AD)
            {
                // AD로그인
                // Mac Test 결과에 따라 변경
                id = Environment.UserName;
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                    pw = IPGlobalProperties.GetIPGlobalProperties().DomainName;
                else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                    pw = OSxCmdService.GetOSXADConfig("Active Directory Domain");
    #if DEBUG
                pw = "HsckAD.com";
    #endif
                StateHasChanged();
                await Task.Delay(100);
                doLogIn();
                StateHasChanged();
            } // if (eLoginUITypeData == eLoginType.eLOGINTYPE_AD)

        }

        await base.OnAfterRenderAsync(firstRender);

    }

    /// <summary>
    /// 초기 password Login인지 를 알려줌
    /// </summary>
    /// <param name="groupID"></param>
    /// <returns></returns>
    public bool GetInitPWLogin(int groupID)
    {
        // siteConfig. json으로 이동
        string strInitPW = SGAppMgrSvc.SiteConfigInfoService.GetInitPasswordInfo(groupID);  // SGAppMgrSvc.OpConfigInfoService

        SGRSACrypto sgRSACrypto = new SGRSACrypto();

        string strEncPW = "";
        sgRSACrypto.ValueEncrypt(pw, out strEncPW);
        if (strEncPW.Equals(strInitPW))
            return true;
        return false;
    }

    /// <summary>
    /// GPKI Login Type일때에 result 처리
    /// </summary>
    /// <param name="groupId"></param>
    /// <returns></returns>
    private bool ProcessLoginResultGpki(int groupId)
    {

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
        SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
            pageService.SetCurUserPassWD(groupId, pw);
        }

        if (GetInitPWLogin(groupId) == true)
        {
            eResultIdPwAfterJob = eIDPWresultJob.eInitPW;
            pageService.SetPassWDChgType(groupId, ePassWDType.eINITPASSWDCHG);
            goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
            closePopUp();
            return false;
        }

        if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eNone)
        {
            // 완료 처리!!!

            eResultIdPwAfterJob = eIDPWresultJob.eNone;
            //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
            Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
            return true;
        }
        else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eEnforce)
        {
            eResultIdPwAfterJob = eIDPWresultJob.eEnforced;
            pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
            goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
            closePopUp();
            return false;
        }
        else
        {

            string strTime = "";
            SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupId);
            if (sgSettingData == null)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
                closePopUp();
                return false;
            }

            strTime = sgSettingProc.GetSettingDelayDspPw(groupId);
            if (strTime.Equals(""))
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
                closePopUp();
                return false;
            }

            SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
            string strUserSeq = sgUserData.GetUserSequence();
            strTime = sgPassWDData.LoaclPassWDDelayLoadString(strTime, strUserSeq);

            if (strTime.Equals(""))
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
                closePopUp();
                return false;
            }

            DateTime dtLocalTime = DateTime.Parse(strTime);
            DateTime svrDt = sgLoginData.GetSvrTimeDayConvert();

            if (DateTime.Compare(dtLocalTime, svrDt) < 0)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
                closePopUp();
                return false;
            }

            // 완료 처리!!!
            eResultIdPwAfterJob = eIDPWresultJob.eNone;
            //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
            Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
        }

        return true;

    }

    /// <summary>
    /// 3망일때에는 NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 수정해서 표현
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="dicSystemIdName"></param>
    public void ChangeNetOverTitle(int nGroupID, Dictionary<string, SGNetOverData> dicSystemIdName)
    {

        if (dicSystemIdName == null || dicSystemIdName.Count < 2)
            return;

        // string strNetOverDestTitle = "";

        // NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 전부 수정해서 표현
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        /*for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                listNetWork[nIdx].FromName = "";
                listNetWork[nIdx].ToName = "";

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx != 0 && item.Key.Length > 0)
                    {
                        if (strNetOverDestTitle.Length > 0)
                            strNetOverDestTitle += ",";

                        strNetOverDestTitle += item.Key;
                    }

                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }
                }

                if (strNetOverDestTitle.Length > 0)
                    listNetWork[nIdx].ToName = strNetOverDestTitle;
            }
        }*/

        // 왼쪽 SideBar 에서 도착하는 곳만 "다중망"으로 표현, 시작하는 곳 이름은 Server에서 받은 망이름(NETOVERMODE) 사용
        // Welcome(대쉬보드)에서 표현은 시작망이름은 망이름(NETOVERMODE) 사용, 도착망이름은 망이름(NETOVERMODE)에서 1번째 도달하는 망이름 사용
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }

                    if (item.Value.nIdx == 1 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].ToName = item.Key;
                    }
                }

                // 다중망 양 끝단이 아닐때는 도착지를 "다중망"으로 표기하지 않음
                if (pageService.m_bIsMultiNetWork == false)
                    listNetWork[nIdx].ToName = XmlConf.GetTitle("T_RECV_SIDE_TITLE");
                return;
            }
        }

    }


    /// <summary>
    /// Type 상관없이 일때에 result 처리 진행(true : 이함수 호출한곳에서 이후에도 동작실행, false : 이후에 바로 return 처리)
    /// </summary>
    /// <param name="groupId"></param>
    /// <returns></returns>
    private bool ProcessLoginResultAll(int groupId)
    {

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
        SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
            pageService.SetCurUserPassWD(groupId, pw);
        }

        eResultIdPwAfterJob = eIDPWresultJob.eNone;

        SGSettingData sgSettingData = null;
        sgSettingData = sgSettingProc.SelectSettingData(groupId);
        if (sgSettingData == null)
            sgSettingProc.InsertSettingData(groupId, "", "", "", "", 0);

        // IDPW UI 형태일때에만 사용
        if (eLoginUITypeData == eLoginType.eLOGINTYPE_ORIGIN)
        {

            //if (siteConfig.GetUseAutoLogin(groupId) == true)  // json으로 설정이동
            if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID))
            {
                if (bAutoLoginCheck)
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncID = "";
                    string strEncPW = "";
                    if ((!id.Equals("")) & (id != null) & (!pw.Equals("")) & (pw != null))
                    {
                        sgRSACrypto?.ValueEncrypt(id, out strEncID);
                        sgRSACrypto?.ValueEncrypt(pw, out strEncPW);

                        sgSettingProc.SetSettingUID(groupId, strEncID);
                        sgSettingProc.SetSettingUPW(groupId, strEncPW);
                        sgSettingProc.SetSettingAutoLogin(groupId, true);
                    }
                }
                else
                {
                    sgSettingProc.SetSettingAutoLogin(groupId, false);
                }

            }
            else
            {
                //if (siteConfig.GetUseLoginIDSave(groupId) == true)    // json으로 설정이동
                if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(nGroupID))
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncID = "";
                    sgRSACrypto.ValueEncrypt(id, out strEncID);
                    if (sgSettingData != null)
                        sgSettingProc.SetSettingUID(groupId, strEncID);
                }
            }

            pw = "";
            bAutoLoginCheck = false;

            if (GetInitPWLogin(groupId) == true)
            {
                pageService.SetPassWDChgType(groupId, ePassWDType.eINITPASSWDCHG);
                eResultIdPwAfterJob = eIDPWresultJob.eInitPW;
                goToPage.InvokeAsync((int)eLoginUITypeData);
                closePopUp();
                return false;
            }

            if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eNone)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eNone;
                //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
                Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                goToPage.InvokeAsync((int)eLoginUITypeData);
                return true;
            }
            else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eEnforce)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eEnforced;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginUITypeData);
                closePopUp();
                return false;
            }

            string strTime = "";
            //SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupId);
            if (sgSettingData == null)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginUITypeData);
                closePopUp();
                return false;
            }

            strTime = sgSettingProc.GetSettingDelayDspPw(groupId);
            if (strTime.Equals(""))
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginUITypeData);
                closePopUp();
                return false;
            }

            SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
            string strUserSeq = sgUserData.GetUserSequence();
            strTime = sgPassWDData.LoaclPassWDDelayLoadString(strTime, strUserSeq);
            if (strTime.Equals(""))
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginUITypeData);
                closePopUp();
                return false;
            }

            DateTime dtLocalTime = DateTime.Parse(strTime);
            DateTime svrDt = sgLoginData.GetSvrTimeDayConvert();

            if (DateTime.Compare(dtLocalTime, svrDt) < 0)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync((int)eLoginUITypeData);
                closePopUp();
                return false;
            }

        }
        else if (eLoginUITypeData == eLoginType.eLOGINTYPE_AD)
        {

        }

        eResultIdPwAfterJob = eIDPWresultJob.eNone;
        //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
        Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
        goToPage.InvokeAsync((int)eLoginUITypeData);

        return true;

    }


    /// <summary>
    /// 수신 다운로드 사용자이름이 포함된 정해진 경로로 설정
    /// </summary>
    /// <param name="groupID"></param>
    public void SetStaticUserNameRecvDownLoad(int groupID)
    {
        ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        string strPath = "";

        if (SGAppMgrSvc.SiteConfigInfoService.GetUseAccessAllDrive(groupID))
            strPath = AppConfigSvc.GetRecvDownPath(groupID);
        else
        {
            SGUserData sgUserInfo = null;
            sgUserInfo = (SGUserData)HSCmdCenter.GetUserData(groupID);
            if (sgUserInfo == null)
                return;

            strPath = $@"K:\개인 폴더\다운로드";
            //strPath = $@"K:\\{sgUserInfo.GetUserName()}\\다운로드";

        }

        HSCmdCenter.SetDownLoadPath(groupID, strPath);
        HSCmdCenter.SetBaseDownLoadPath(groupID, strPath);
    }

    /// <summary>
    /// 수신 다운로드 설정
    /// </summary>
    /// <param name="groupID">그룹ID</param>
    /// <param name="strPath">다운경로</param>
    public void SetUserIDRecvDownLoad(int groupID)
    {
        ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        string strPath = AppConfigSvc.GetRecvDownPath(groupID);
        if (SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupID))
        {
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

            // ISGCtrlSideUIService CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;

            if (sgLoginData != null)
            {
                //공영홈쇼핑에서 MAC/Window 모두 ID 적용요청하여 사용

                string strAddFolder = "";
                strAddFolder = sgLoginData.GetUserID();

                strPath = Path.Combine(strPath, strAddFolder);
                HSCmdCenter.SetDownLoadPath(groupID, strPath);
                HSCmdCenter.SetBaseDownLoadPath(groupID, strPath);
                //CtrlSideUISvc.SetRecvDownPath(groupID, strPath);
            }
        }
    }

    /// <summary>
    /// Login 이후 result 처리 진행
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void LoginpopUpResult(int groupId, PageEventArgs e)
    {

        int ret = e.result;
        if (ret == 0)
        {

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);

            pageService.ConnectCountAdd(groupId);
            pageService.SetConnectStatus(groupId, true);
            pageService.SetLogoutStatus(groupId, false);

            CLog.Here().Information($"groupID : {groupId} - User Do Login(idpw-popup), UrlRedirection LogIn State ReSet !!!");
            HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupId, true);

            /*
            if (ClientPatch(sgLoginData))
            {
                string strSvrVersion = sgLoginData.GetServClientVersion();
                refUpdate_PopUp.SetVersionText(strSvrVersion);
                refUpdate_PopUp.SetType(0);
                refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                await refUpdate_PopUp.openPopUp();
                return;
            }
            */

            SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
            SGData sfmData = HSCmdCenter.GetSFMListData(groupId);

            while (true)
            {
                sfmData = HSCmdCenter.GetSFMListData(groupId);
                if (sfmData != null)
                    break;
                Thread.Sleep(50);
            }
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData, sfmData);

            
            HSCmdCenter.SetUseUserRecvDownPath(groupId, SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupId));
            SetStaticUserNameRecvDownLoad(groupId); //사용자별 수신 다운로드 설정

            Dictionary<string, SGNetOverData> dicSysIdName = null;
            dicSysIdName = new Dictionary<string, SGNetOverData>();

            if (sgLoginData.GetUseOverNetwork2())
            {

                if (sgLoginData.GetOverNetwork2Data(ref dicSysIdName, pageService.m_bIsMultiNetWork))
                {
                    pageService.SetTargetSystemList(groupId, dicSysIdName);

                    // 3중망이상일때, 왼쪽Sidebar 포함 도착망이름 변경
                    if (dicSysIdName != null && dicSysIdName.Count > 1)
                    {
                        ChangeNetOverTitle(groupId, dicSysIdName);
                    }
                }
            }

            // CLIENT_ZIP_DEPTH 정보 가져옴
            SGQueryExtend sgQueryExtend = null;
            sgQueryExtend = new SGQueryExtend();
            if (sgQueryExtend != null)
            {
	    
		        string strGetinfoTagName = "";
		        strGetinfoTagName = "'CLIENT_ZIP_DEPTH'";
		        strGetinfoTagName += ", 'CS_EXCEPTION_EXT_REASON_TYPE'";
                strGetinfoTagName += ", 'CLIENT_DOCUMENT_EXTRACT_TYPE'";

		        string strQuery = sgQueryExtend.GetsystemEnvDataS(strGetinfoTagName); // sgQueryExtend.GetZipDepthSQLsystemEnv : CLIENT_ZIP_DEPTH 값만구할때 사용
		        HSCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);	    
	    
                // string strQuery = sgQueryExtend.GetZipDepthSQLsystemEnv();
                // HSCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);
            }


            bool bUseClipBoard = sgLoginData.GetClipboard();
            if (bUseClipBoard)
            {
                List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                    bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                    bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                    bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                    Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                }
                else
                {
                    Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKey);
                }

                // clipboard 선택전송기능 사용유무설정
                if (SGAppMgrSvc.SiteConfigInfoService.GetUseClipTypeSelectSend(groupId))
                    Window.UseClipBoardSelect(groupId);

                // ClipBoard(Type Mixed 일때) Text 우선송신 사용
                if (SGAppMgrSvc.SiteConfigInfoService.GetUseClipTypeTextFirstSend(groupId))
                    Window.UseClipFirstSendType(groupId);

                // 자동전송기능 위해
                if (SGAppMgrSvc.OpConfigInfoService.GetClipCopyAutoSend())
                {
                    Window.SetNativeClipboardHotKey(groupId, listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKey, 0);
                }
            }


        DateTime dt =(SGAppMgrSvc.SiteConfigInfoService.GetUseOneAClockChangeAgentTimer()) ? DateTime.Now : sgLoginData.GetSvrTimeConvert();
        pageService.SetSvrTime(groupId, dt, sgLoginData);
        bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
        bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
        pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
        pageService.SetAfterApprEnable(groupId, bAfterApprEnable);

            bool bAfterCheck = false;
            if (!bAfterApprEnable)
                bAfterCheck = false;
            else
                bAfterCheck = SGAppMgrSvc.OpConfigInfoService.GetAfterBasicChk();

            pageService.SetAfterApproveCheck(groupId, bAfterCheck);

            Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
            int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
            Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
            int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
            pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);


            ScreenTimeInitNotiEvent screenTimeInitEvent = HSCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
            if (screenTimeInitEvent != null)
            {
                ConfigArgs config = new ConfigArgs();
                config.ScreenTime = sgLoginData.GetSCRLimit();
                screenTimeInitEvent(groupId, config);
            }

            // 이후 동작 처리
            if (ProcessLoginResultAll(groupId) == false)
                return;


            CtrlSideEvent ctrlSideEvent = null;
            ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
            if (ctrlSideEvent != null)
                ctrlSideEvent();

            // 로그인 완료 -

            // 성공했을대에만 닫음
            closePopUp();

        }
        else
        {
            bUIBtnDisable = false;
            string strPopupMsg = "";
            // 다중망일때에는 실패한 망이름 표현
            if (pageService.m_bIsMultiNetWork)
            {
                string strFromNet = "";
                string strToNet = "";
                XmlConf.GetNetworkTitle(groupId, out strFromNet, out strToNet);
                strPopupMsg = $"{strFromNet}<i class=\"fas fa-long-arrow-alt-right p-1\"></i> {strToNet}<br/>";
            }

            strPopupMsg += e.strMsg;

            strPopupMsg = strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
            HSCmdCenter.SendLogOut(groupId, "");
            StateHasChanged();
        }


    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="strMsg"></param>
    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

}
