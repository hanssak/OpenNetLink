@using System.Diagnostics
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.PageEvent
@using AgLogManager
@using HsNetWorkSGData;
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using System.Net.NetworkInformation
@using OpenNetLinkApp.Data.SGQuery
@using System.Threading
@using OpenNetLinkApp.Common
@using System.Text.Json;

@inherits LayoutComponentBase
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject WebWindow Window
@inject PageStatusService pageService
@inject OSXcmdService OSxCmdService

<div class="modal fade" id="PopUpLogIn" style="z-index:9999;" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <!--s login popup-->

            <div class="login-box">
                <div class="row1">
                    <div class="col-md-6 sub_visual_wrap" style=" height:420px;">
                        <ul class="login_bg_w logbg_blue">
                            <li><img src="/images/adminlte/SecureGate_logo.png" class="mb-3"></li>
                            <li>
                                <span>
                                    This is a solution providing the data transmission service <br>among networks with the highest level of security <br>in the separated network environment.
                                </span>
                            </li>
                        </ul>
                    </div>
                    <div class="col-md-6 login-card-body" style="background-color:none !important;">

                        <div class="modal-header1">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>

                        <p class="login-box-msg1">@XmlConf.GetTitle("T_SYSTEMNAME_POPUPTITLE") <i class="fas fa-cloud-download-alt fa-lg ml-1"></i></p>

                        <div class="login_w">

                            <div class="input-group mb-2">
                                <input type="text" class="form-control-login" placeholder="ID" value="@id" @oninput="@(e=>id = e.Value.ToString())" disabled=@bUIBtnDisable tabindex="1">
                            </div>
                            @if (eLoginUITypeData != eLoginType.eLOGINTYPE_OTP) //OTP PW 필요없음
                            {
                                <div class="input-group mb-2">
                                    @*AD 로그인은 PW 사용자 입력 불가 (Readonly)*@
                                    <input type="password" class="form-control-login" placeholder="Password" readonly="@(eLoginUITypeData== eLoginType.eLOGINTYPE_AD)" value="@pw" @oninput="@(e => pw = e.Value.ToString())" @onkeyup="keyCheck" disabled=@bUIBtnDisable tabindex="2">
                                </div>
                            }
                            @if (eLoginUITypeData == eLoginType.eLOGINTYPE_PW_OTP || eLoginUITypeData == eLoginType.eLOGINTYPE_OTP) //PW_OTP(4), OTP(5)
                            {
                                <div class="input-group mb-2">
                                    <input id="otp" type="text" class="full-input mb-3 password" placeholder="OTP" value="@otp" @oninput="@(e => otp= e.Value.ToString())" @onkeyup="keyCheck" tabindex="3" autocomplete="off">
                                </div>
                            }
                            <div class="row">
                                @if (nGroupID > -1 && bAutoLogin && eLoginUITypeData != eLoginType.eLOGINTYPE_AD)
                                {
                                    <div class="col-12 pt-1 pr-4 text-right ">
                                        <div class="icheck-primary">
                                            <input type="checkbox" id="remember" @onclick="CheckStateChange" checked=@bAutoLoginCheck disabled=@bUIBtnDisable>
                                            <label for="remember">
                                                @XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX")
                                            </label>
                                        </div>
                                    </div>
                                }
                                <div class="col-12  pt-2">
                                    <button class="btn btn-login btn-block btn_blue" @onclick="doLogInByBtn" disabled=@bUIBtnDisable>LOGIN</button>
                                </div>
                                <div class="col-12 text-center pt-3">COPYRIGHT &copy HANSSAK. ALL RIGHTS RESERVED</div>

                            </div>
                        </div>

                    </div>
                </div>

            </div>
            <!--/.e login popup-->
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<!-- <PWChange2 @ref="refPWChange"></PWChange2>
<PWChangeDefaultPW2 @ref="refPWChangeDefaultPW"></PWChangeDefaultPW2> -->

<SGAlert @ref="refSGloginDuplicate" Guid="modal-alert-popuplogin" OnCancel="SessionAlertCancelpopup" OnConfirm="SessionAlertConfirmpopup"></SGAlert>
<GoogleOTP @ref="refGoogleOTP" Guid="modal-googleotp-popuplogin" OnCancel="GoogleOtpCancel" OnConfirm="GoogleOtpConfirm"></GoogleOTP>

@code {

    SGAlert refSGloginDuplicate;
    GoogleOTP refGoogleOTP;

    [Parameter]
    public EventCallback<string> goToPage { get; set; }

    public bool bStartedLogin = false;//중복으로 로그인버튼 클릭 방지에 사용하는 상태

    public bool bLoginTryOver1auth = false;
    public bool bAutoLogin = true;                          // 자동로그인 CheckBox 표현 및 사용유무
    public bool bAutoLoginCheck = false;                    // 자동로그인 check 상태 설정
    public bool bUIBtnDisable = false;
    public int nGroupID = -1;                       // 현재 사용할 GroupID
    public int nDrawPageGroupID = -1;              // Draw하는 GroupID

    public eLoginType eLoginUITypeData = eLoginType.eLOGINTYPE_ORIGIN;    // 로그인 Type에 따라서 UI창 변경위해 사용
    public eIDPWresultJob eResultIdPwAfterJob = eIDPWresultJob.eNone;

    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;
    ISGCtrlSideUIService CtrlSideUISvc;

    //    PWChange2 refPWChange;
    //    PWChangeDefaultPW2 refPWChangeDefaultPW;
    SGSettingsDBProc sgSettingProc = null;

    public string id { get; set; }
    public string pw { get; set; }
    public string url { get; set; }
    public string otp { get; set; }

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<PopUpLogIn>();

    CsGoogleQRcode QRcode = new CsGoogleQRcode();
    string str2FactorAuthType = "";
    string strOtpUrlCode = "";

    private void GoogleOtpCancel()
    {
        QRcode.Dispose();
        CLog.Here().Information($"SGCtrlSideUI, GoogleOtpCancel - GroupID:{refGoogleOTP.nGroupID} - LogInType: {pageService.m_nLoginType.ToString()}");

        JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        bUIBtnDisable = false;
        bStartedLogin = false;
        refGoogleOTP.strUserOTP = "";

        closePopUp();
    }

    private void GoogleOtpConfirm()
    {
        QRcode.Dispose();

        CLog.Here().Information($"SGCtrlSideUI, GoogleOtpCancel - GroupID:{refGoogleOTP.nGroupID} - LogInType: {pageService.m_nLoginType.ToString()}");

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(refGoogleOTP.nGroupID);
        if (hsNetWork != null)
        {
            // 구글Otp 값 어느 Tag에 보낼것인지 협의후 동작            
            hsNetWork.SetGoogleOtp(refGoogleOTP.strUserOTP);

            hsNetWork.SendSeedKeyBindFor2FactorAuth();
        }

        // 다중망에 맞춰서 작업
        JSRuntime.InvokeAsync<object>("loginCursorChange");
        //bStartedLogin = true;
        //bLoginBtnDisable = true;

        refGoogleOTP.strUserOTP = "";
    }



    /// <summary>
    /// 2Factor 인증이 필요한 시기에 호출됨
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    private async void Show2FactorAuth(int groupID, PageEventArgs e)
    {


        if (e.strDummy == "google_otp")
        {

            // Server에서 받아서 동작하도록 수정
            string strSecureKey = "";

            //if (QRcode.GenerateQRsecureKey())
            //    strSecureKey = QRcode.strSecureKey; // "MARNVBMEK06VCXXK";
            if (QRcode.GetSecureKeyFromOtpUrl(e.strMsg, out strSecureKey) == false)
                CLog.Here().Information($"Show2FactorAuth, otpauth Type Error ################## : {e.strMsg}");

            CLog.Here().Information($"Show2FactorAuth, Otp-Key : {strSecureKey}");

            refGoogleOTP.strKeyMessage = strSecureKey;
            refGoogleOTP.nGroupID = groupID;
            //bool rWriteQRimg = QRcode.GenerateQRimg("SecureGate", id, strSecureKey);
            bool rWriteQRimg = QRcode.GenerateQRimg(e.strMsg, true);  // Server에서 받은 Url로 바로 생성
            Thread.Sleep(1000);
            refGoogleOTP.RedrawUI();

            // login이 가능항 상태로 ui 변경
            await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
            //bStartedLogin = false;
            //bUIBtnDisable = false;
            StateHasChanged();

            await refGoogleOTP.openPopUp();
        }

    }


    public async Task openPopUp()
    {
        HSCmdCenter.SetAllowSessionDuplicate(nGroupID, (SGAppMgrSvc.OpConfigInfoService.GetSessionDuplicateBlock(nGroupID) == 1));
        object[] param = { "PopUpLogIn" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void initUIdata()
    {
        bUIBtnDisable = false;
        id = "";
        pw = "";
    }

    /// <summary>
    /// PopUpLogin UI만 닫음
    /// </summary>
    public void closeUIPopup()
    {
        object[] param = { "PopUpLogIn" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public void closePopUp()
    {
        initUIdata();

        closeUIPopup();
    }

    /// <summary>
    /// 세션중복 로그인 포기 처리
    /// </summary>
    private void SessionAlertCancelpopup()
    {
        CLog.Here().Information($"[PopupLogin] SessionAlertCancelpopup - GroupID:{refSGloginDuplicate.groupId} - LogInType: {pageService.GetGroupIDLoginType(nGroupID).ToString()}");

        JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        bUIBtnDisable = false;
        bStartedLogin = false;
        //refSGloginDuplicate.closePopUp();
        //initUIdata();

        closePopUp();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { strType, XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /// <summary>
    /// 세션중복 로그인 진행 처리
    /// </summary>
    private void SessionAlertConfirmpopup()
    {
        HSCmdCenter.SetAllowSessionDuplicate(refSGloginDuplicate.groupId); // 강제로그인 진행
        CLog.Here().Information($"[PopupLogin] SessionAlertConfirm - LogInType: {refSGloginDuplicate.groupId.ToString()}");

        if (str2FactorAuthType == "google_otp" && strOtpUrlCode.Length > 0)
        {
            PageEventArgs e = new PageEventArgs();
            e.strDummy = str2FactorAuthType;
            e.strMsg = strOtpUrlCode;
            str2FactorAuthType = "";
            strOtpUrlCode = "";

            Show2FactorAuth(refSGloginDuplicate.groupId, e);
        }
        else
        {
            doLogIn(true);
        }
        bUIBtnDisable = false;
    }

    /// <summary>
    /// 세션중복시 보여주는 이벤트 팝업
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    private async void ShowSessionCountPopup(int groupID, PageEventArgs e)
    {
        bStartedLogin = false;

        if (SGAppMgrSvc.OpConfigInfoService.GetSessionDuplicateBlock(groupID) == -1)
        {
            // await JSRuntime.InvokeVoidAsync("setElementValue", new object[] { "popUploginPw", "" });
            pw = "";
            ShowLoginFail(XmlConf.GetWarnMsg("W_0039"));
            await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
            bUIBtnDisable = false;
            bStartedLogin = false;
            StateHasChanged();
            return;
        }


        if (e.strDummy == "google_otp")
        {
            str2FactorAuthType = e.strDummy;
            strOtpUrlCode = e.strMsg;
        }
        await refSGloginDuplicate.openPopUp(XmlConf.GetTitle("T_LOGIN_DUPLICATE"), XmlConf.GetTitle("T_LOGIN_DUPLICATE_GUIDE"), 2, groupID);
    }



    /// <summary>
    /// UI상에 로그인 버튼을 눌러서 로그인할때 호출
    /// </summary>
    private void doLogInByBtn()
    {

        CLog.Here().Information($"PopupLogin - doLogInByBtn - groupid : {nGroupID}");

        doLogIn();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="ngroupid"></param>
    /// <returns></returns>
    private bool doADLoginLocalCheck(int ngroupid)
    {
        try
        {

            if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(ngroupid) == false)
                return false;

            string strPW = "";

            //Linux는 아직 실제값 확인해보지 못함
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                strPW = IPGlobalProperties.GetIPGlobalProperties().DomainName;
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                strPW = OSxCmdService.GetOSXADConfig("Active Directory Domain");

#if DEBUG
            strPW = "HsckAD.com";
#endif

            List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
            if (listNetWork[ngroupid].ADDomain == null || listNetWork[ngroupid].ADDomain.Count < 1)
            {
                CLog.Here().Information($"doADLoginLocalCheck - Agent ADDomain Data Empty(groupID : {ngroupid}) - Do IDPW!");
                return false;
            }

            foreach (string strDomain in listNetWork[ngroupid].ADDomain)
            {
                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                //string strEncID = "";
                //sgRSACrypto?.ValueEn(strPW, out strDescPW);
                string strDescPW = "";
                sgRSACrypto?.ValueDecrypt(strDomain, out strDescPW);

                // hash 값으로 비교하면 대소문자 가려서 비교하게 되므로
                if (listNetWork.Count > 0 && String.Compare(strPW, strDescPW, true) == 0)
                {
                    CLog.Here().Information($"doADLoginLocalCheck - Can Login ADType(groupID : {ngroupid}) - Do!");
                    return true;
                }
            }

            CLog.Here().Information($"doADLoginLocalCheck - PC Ad Domain : {strPW} - Can't Login AD TYPE(#####), groupID : {ngroupid}");

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"doADLoginLocalCheck - Exception - Msg : {ex.Message}");
        }

        return false;
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="groupid"></param>
    /// <returns></returns>
    bool isWasAuth(int groupid)
    {

        if (groupid < 0)
        {
            CLog.Here().Error($"isWasAuth - InValid - groupid : {groupid}");
            return false;
        }

        bool bRet = false;
        string strIP = "";

        try
        {
            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;

            foreach (ISGNetwork netlist in listNetWork)
            {
                if (netlist.GroupID == groupid)
                {
                    strIP = netlist.IPAddress;
                    break;
                }
            }

            if ((strIP?.Length ?? 0) < 1)
            {
                CLog.Here().Error($"isWasAuth - InValid - IP");
                return false;
            }

            // strIP = "172.16.3.250"; // KKW - 사내TEST
            SessionWebClient web = new SessionWebClient();
            string strUrl = @$"https://{strIP}:1310/v2/sso/db/login";
            string strEncID = "";
            string strEncPW = "";

            SGCrypto crypt = new SGCrypto();
            // 실제사용
            crypt.Aes256EncryptIVkey(id, out strEncID);
            crypt.Aes256EncryptIVkey(pw, out strEncPW);

            string strJsonData = CsWASfunc.stringIDpwJsonString(strEncID, strEncPW);
            string stRtn = "";
            int nCode = 0;
            string strMsg = "";
            string strData = "";
            int nData = 0;

#if DEBUG  // SITE배포용도
            //#if false  // SITE배포용도
            CLog.Here().Information($"doLogIn - IDPW - (사무실 TEST용도) 무조건 로그인!");
            strData = "1";
            stRtn = "1";
#else

        stRtn = web.RequestUsePostJson(strUrl, strJsonData, "application/json");
        if (stRtn == null || (1 > stRtn.Length))
        {
            CLog.Here().Information($"Result - json, Data is null OR 0 Size");
            ShowLoginFail(XmlConf.GetErrMsg("E_0257"));
            return false;
        }

        // json으로 온 Data에서 실제 data 뽑아내는 동작
        using (JsonDocument document = JsonDocument.Parse(stRtn))
        {
            JsonElement jroot = document.RootElement;
            nCode = jroot.GetProperty("code").GetInt32();
            strMsg = jroot.GetProperty("msg").GetString();
            strData = jroot.GetProperty("data").GetString();
        }
#endif

            CLog.Here().Information($"Result - json, code : {nCode}, Server-msg : {strMsg}, data : {strData}");

            if (stRtn != null && stRtn.Length > 0 && strData == "1")
            {
                pageService.SetGroupIDLoginType(pageService.m_nCurViewPageGroupID, (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(pageService.m_nCurViewPageGroupID) ? eLoginType.eLOGINTYPE_AD : (eLoginType)pageService.m_nLoginType));
                CLog.Here().Information($"doLogIn - IDPW - Web Certificate Done!");
                bRet = true;
            }
            else
            {
                strMsg = CsWASfunc.GetErrorCodeToStr(strData);
                CLog.Here().Information($"doLogIn - IDPW - Web Certificate(@@@@@@@@@) Failed : {strMsg}");
                ShowLoginFail(strMsg);
                bRet = false;
            }


        }
        catch (Exception ex)
        {
            CLog.Here().Error($"isWasAuth - Exception(MSG) : {ex.Message}");
            bRet = false;
        }

        return bRet;

    }


    /// <summary>
    /// 로그인 Type 상관없이 2번째 망이상에서는 이함수로 Login 진행
    /// </summary>
    /// <param name="DoLoginForce"></param>
    private void doLogIn(bool DoLoginForce = false)
    {
        try
        {

            if (bStartedLogin)
                return;

            if ((id?.Length ?? 0) < 1)
            {
                ShowLoginFail(XmlConf.GetWarnMsg("W_0030"));
                return;
            }

            if ((pw?.Length ?? 0) < 1)
            {
                ShowLoginFail(XmlConf.GetWarnMsg("W_0029"));
                return;
            }

            ShowMessage("info", XmlConf.GetInfoMsg(DoLoginForce ? "I_0237" : "I_0238"));

            HSCmdCenter.sgPageEvent.SetLoginEventAdd(nGroupID, LoginpopUpResult);
            HSCmdCenter.sgPageEvent.SetSessionDuplicateEventAdd(nGroupID, ShowSessionCountPopup);
            HSCmdCenter.sgPageEvent.Set2FactorAuthEventAdd(nGroupID, Show2FactorAuth);

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;
                //strConfirmID = AppConfigSvc.GetSWCommitId();
                //strCurCliVersion = "OpenNetLink " + strCurCliVersion + "+" + strConfirmID;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
                //strCurCliVersion = strCurCliVersion + ":" + "debian";
            }

            if (strCurCliVersion.Equals(""))
                return;
            HSCmdCenter.SetCliVersion(strCurCliVersion);

            pageService.SetGroupIDLoginType(nGroupID, eLoginUITypeData);

            bStartedLogin = true;

            CLog.Here().Information($"doLogin, try Login Type : {eLoginUITypeData}");

            if (eLoginUITypeData == eLoginType.eLOGINTYPE_AD)
                HSCmdCenter.LoginAD(nGroupID, id, pw, strCurCliVersion, otp, (int)eLoginUITypeData);
            else
                HSCmdCenter.Login(nGroupID, id, pw, strCurCliVersion, otp, (int)eLoginUITypeData);

        }
        catch (Exception ex)
        {
            CLog.Here().Information($"doLogin - Exception(Msg) : {ex.Message}");
            Debug.WriteLine(ex.Message);
        }


        //MyNavigationManager.NavigateTo(url);
    }

    /// <summary>
    /// KeyBoard 입력에 따른 동작 정의하는 함수
    /// </summary>
    /// <param name="arg"></param>
    private void keyCheck(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
            doLogIn();
    }

    /// <summary>
    /// 자동로그인 checkBox 상태가 변경될때 마다 호출
    /// </summary>
    public void CheckStateChange()
    {

        bAutoLoginCheck = (!bAutoLoginCheck);
        //        if (!bAutoLoginCheck)
        //        {
        //            bUIBtnDisable = false;
        //            StateHasChanged();
        //        }

    }

    protected override void OnInitialized()
    {

        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;

        sgSettingProc = SGSettingsDBProc.Instance;

        CLog.Information("PopUpLogin - OnInitialized!");
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        // 지정한 그룹ID로 로그인
        // 첫로그인에는 popup 사용못함
        if ((nDrawPageGroupID < 0 || nDrawPageGroupID != nGroupID) && nGroupID > -1)
        {
            AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
            CLog.Here().Information("PopUpLogin - OnAfterRenderAsync - GroupID : {0}", nGroupID);

            nDrawPageGroupID = nGroupID;

            bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID);
            // bAutoLoginCheck = siteConfig.GetUseAutoLoginCheck(nGroupID);

            if (pageService.m_bMultiLoginDo)
            {
                SGSvrData sgSvrData = null;
                sgSvrData = (SGSvrData)HSCmdCenter.GetSGSvrData(nGroupID);
                if (sgSvrData == null)
                {
                    eLoginUITypeData = (eLoginType)pageService.m_nLoginType;
                }
                else
                    eLoginUITypeData = sgSvrData.GetLoginType();
            }
            else
                eLoginUITypeData = (eLoginType)pageService.m_nLoginType;


            //사용자 지정 로그인 사용 시 서버로그인 타입은 Origin이여야 적용이 됨
            //사용자 지정 로그인 사용할 경우 해당 로그인 타입으로 지정
            if (SGAppMgrSvc.OpConfigInfoService.GetUseAppLoginType(nGroupID))
                eLoginUITypeData = (eLoginType)SGAppMgrSvc.OpConfigInfoService.GetAppLoginType(nGroupID);

            if (eLoginUITypeData == eLoginType.eLOGINTYPE_AD)
            {
                if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(nGroupID))
                {
                    if (doADLoginLocalCheck(nGroupID))
                    {
                        eLoginUITypeData = eLoginType.eLOGINTYPE_AD;
                    }
                    else
                    {
                        ShowLoginFail(XmlConf.GetErrMsg("E_0254")); // "ID/PW 인증을 통해 Login 하셔야 합니다."
                                                                    //AD 로그인이 안될 경우 ID/PW 로그인
                        eLoginUITypeData = eLoginType.eLOGINTYPE_ORIGIN;
                        StateHasChanged();
                    }
                }
                else
                    eLoginUITypeData = eLoginType.eLOGINTYPE_AD;
            }

            // IDPW 로그인
            if (eLoginUITypeData != eLoginType.eLOGINTYPE_AD)
            {
                // ID저장 사용
                //if (siteConfig.GetUseLoginIDSave(nGroupID) == true)   // json으로 설정이동
                if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(nGroupID))
                {
                    string strEncID = "";
                    strEncID = sgSettingProc.GetSettingUID(nGroupID);
                    if (strEncID == null || strEncID.Equals(""))
                        return;
                    string strID = "";
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    sgRSACrypto.ValueDecrypt(strEncID, out strID);
                    id = strID;
                    StateHasChanged();
                }

                // IDPW 자동로그인
                // if (siteConfig.GetUseAutoLogin(nGroupID) == true)    // json으로 이동
                if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID))
                {

                    // siteConfig. json으로 이동
                    bAutoLoginCheck = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLoginCheck(nGroupID);

                    bool bAutoLoginContinue = sgSettingProc.GetSettingAutoLogin(nGroupID);
                    if (bAutoLoginContinue)
                        bAutoLoginCheck = true;

                    if (bAutoLoginCheck)
                        StateHasChanged();

                    if (bAutoLoginContinue)
                    {
                        string strEncID = "";
                        string strEncPW = "";
                        strEncID = sgSettingProc.GetSettingUID(nGroupID);
                        strEncPW = sgSettingProc.GetSettingUPW(nGroupID);
                        if ((strEncID == null || strEncID.Equals("")) || (strEncPW == null || strEncPW.Equals("")))
                        {
                            bUIBtnDisable = false;
                            StateHasChanged();
                            return;
                        }

                        SGRSACrypto sgRSACrypto = new SGRSACrypto();
                        string strID = "";
                        string strPW = "";
                        sgRSACrypto.ValueDecrypt(strEncID, out strID);
                        sgRSACrypto.ValueDecrypt(strEncPW, out strPW);
                        id = strID;
                        pw = strPW;
                        StateHasChanged();
                        await Task.Delay(500);
                        doLogIn();
                        StateHasChanged();
                    }
                }

                CLog.Here().Information($"PopupLogin, nGroupID :{nGroupID}, ###### - Use LoginType : {eLoginUITypeData}");

            }
            else if (eLoginUITypeData == eLoginType.eLOGINTYPE_AD)
            {
                // AD로그인
                // Mac Test 결과에 따라 변경
                id = Environment.UserName;
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                    pw = IPGlobalProperties.GetIPGlobalProperties().DomainName;
                else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                    pw = OSxCmdService.GetOSXADConfig("Active Directory Domain");

#if DEBUG
                pw = "HsckAD.com";
#endif
                pw = pw.ToLower();

                // PW 암호화해서 Log남김
                string strCheckData = "";
                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                sgRSACrypto?.ValueEncrypt(pw, out strCheckData);
                CLog.Here().Information($"PopupLogin(nGroupID :{nGroupID}) - ADLogin - ###### - PWCheck : {strCheckData}");

                StateHasChanged();
                await Task.Delay(100);
                doLogIn();
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);

    }

    /// <summary>
    /// 초기 password Login인지 를 알려줌
    /// </summary>
    /// <param name="groupID"></param>
    /// <returns></returns>
    public bool GetInitPWLogin(int groupID)
    {
        // siteConfig. json으로 이동
        string strInitPW = SGAppMgrSvc.OpConfigInfoService.GetInitPasswordInfo(groupID);

        SGRSACrypto sgRSACrypto = new SGRSACrypto();

        string strEncPW = "";
        sgRSACrypto.ValueEncrypt(pw, out strEncPW);
        if (strEncPW.Equals(strInitPW))
            return true;
        //옵션에 따라, ID와 동일할 경우 초기 비밀번호로 인지
        if (SGAppMgrSvc.OpConfigInfoService.GetUseIDAsInitPassword(groupID) && id == pw)
            return true;
        return false;
    }

    /// <summary>
    /// GPKI Login Type일때에 result 처리
    /// </summary>
    /// <param name="groupId"></param>
    /// <returns></returns>
    private bool ProcessLoginResultGpki(int groupId)
    {

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
        SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
            pageService.SetCurUserPassWD(groupId, pw);
        }

        if (SGAppMgrSvc.OpConfigInfoService.GetUseUserPWChange(groupId))
        {

            string strInvokeSendParam = "";
            strInvokeSendParam += groupId.ToString();
            strInvokeSendParam += ":";
            strInvokeSendParam += ((int)eLoginType.eLOGINTYPE_GPKI).ToString();

            if (GetInitPWLogin(groupId) == true)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eInitPW;
                pageService.SetPassWDChgType(groupId, ePassWDType.eINITPASSWDCHG);
                // goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);                
                goToPage.InvokeAsync(strInvokeSendParam);
                closePopUp();
                return false;
            }

            if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eNone)
            {
                // 완료 처리!!!

                eResultIdPwAfterJob = eIDPWresultJob.eNone;
                //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
                HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg);//Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                                                                                                                                                  //goToPage.InvokeAsync((int)eLoginType.eLOGINTYPE_GPKI);
                goToPage.InvokeAsync(strInvokeSendParam);
                return true;
            }
            else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eEnforce)
            {
                eResultIdPwAfterJob = eIDPWresultJob.eEnforced;
                pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                goToPage.InvokeAsync(strInvokeSendParam);
                closePopUp();
                return false;
            }
            else
            {

                string strTime = "";
                SGSettingData sgSettingData = null;
                sgSettingData = sgSettingProc.SelectSettingData(groupId);
                if (sgSettingData == null)
                {
                    eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                    pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                    goToPage.InvokeAsync(strInvokeSendParam);
                    closePopUp();
                    return false;
                }

                strTime = sgSettingProc.GetSettingDelayDspPw(groupId);
                if (strTime.Equals(""))
                {
                    eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                    pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                    goToPage.InvokeAsync(strInvokeSendParam);
                    closePopUp();
                    return false;
                }

                SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
                string strUserSeq = sgUserData.GetUserSequence();
                strTime = sgPassWDData.LoaclPassWDDelayLoadString(strTime, strUserSeq);

                if (strTime.Equals(""))
                {
                    eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                    pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                    goToPage.InvokeAsync(strInvokeSendParam);
                    closePopUp();
                    return false;
                }

                DateTime dtLocalTime = DateTime.Parse(strTime);
                DateTime svrDt = sgLoginData.GetSvrTimeDayConvert();

                if (DateTime.Compare(dtLocalTime, svrDt) < 0)
                {
                    eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                    pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                    goToPage.InvokeAsync(strInvokeSendParam);
                    closePopUp();
                    return false;
                }

                // 완료 처리!!!
                eResultIdPwAfterJob = eIDPWresultJob.eNone;
                HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");//Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                goToPage.InvokeAsync(strInvokeSendParam);
            }
        }

        return true;

    }

    /// <summary>
    /// 3망일때에는 NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 수정해서 표현
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="dicSystemIdName"></param>
    public void ChangeNetOverTitle(int nGroupID, Dictionary<string, SGNetOverData> dicSystemIdName)
    {

        if (dicSystemIdName == null || dicSystemIdName.Count < 2)
            return;

        // string strNetOverDestTitle = "";

        // NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 전부 수정해서 표현
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        /*for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                listNetWork[nIdx].FromName = "";
                listNetWork[nIdx].ToName = "";

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx != 0 && item.Key.Length > 0)
                    {
                        if (strNetOverDestTitle.Length > 0)
                            strNetOverDestTitle += ",";

                        strNetOverDestTitle += item.Key;
                    }

                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }
                }

                if (strNetOverDestTitle.Length > 0)
                    listNetWork[nIdx].ToName = strNetOverDestTitle;
            }
        }*/

        // 왼쪽 SideBar 에서 도착하는 곳만 "다중망"으로 표현, 시작하는 곳 이름은 Server에서 받은 망이름(NETOVERMODE) 사용
        // Welcome(대쉬보드)에서 표현은 시작망이름은 망이름(NETOVERMODE) 사용, 도착망이름은 망이름(NETOVERMODE)에서 1번째 도달하는 망이름 사용
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }

                    if (item.Value.nIdx == 1 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].ToName = item.Key;
                    }
                }

                // 다중망 양 끝단이 아닐때는 도착지를 "다중망"으로 표기하지 않음
                if (pageService.m_bIsMultiNetWork == false)
                    listNetWork[nIdx].ToName = XmlConf.GetTitle("T_RECV_SIDE_TITLE");
                return;
            }
        }

    }


    /// <summary>
    /// Type 상관없이 일때에 result 처리 진행(true : 이함수 호출한곳에서 이후에도 동작실행, false : 이후에 바로 return 처리)
    /// </summary>
    /// <param name="groupId"></param>
    /// <returns></returns>
    private bool ProcessLoginResultAll(int groupId)
    {

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
        SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
            pageService.SetCurUserPassWD(groupId, pw);
        }

        eResultIdPwAfterJob = eIDPWresultJob.eNone;

        SGSettingData sgSettingData = null;
        sgSettingData = sgSettingProc.SelectSettingData(groupId);
        if (sgSettingData == null)
            sgSettingProc.InsertSettingData(groupId, "", "", "", "", 0);

        string strInvokeSendParam = "";
        strInvokeSendParam += groupId.ToString();
        strInvokeSendParam += ":";
        strInvokeSendParam += ((int)eLoginUITypeData).ToString();

        // IDPW UI 형태일때에만 사용
        if (eLoginUITypeData != eLoginType.eLOGINTYPE_AD)
        {

            //if (siteConfig.GetUseAutoLogin(groupId) == true)  // json으로 설정이동
            if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(nGroupID))
            {
                if (bAutoLoginCheck)
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncID = "";
                    string strEncPW = "";
                    if ((!id.Equals("")) & (id != null) & (!pw.Equals("")) & (pw != null))
                    {
                        sgRSACrypto?.ValueEncrypt(id, out strEncID);
                        sgRSACrypto?.ValueEncrypt(pw, out strEncPW);

                        sgSettingProc.SetSettingUID(groupId, strEncID);
                        sgSettingProc.SetSettingUPW(groupId, strEncPW);
                        sgSettingProc.SetSettingAutoLogin(groupId, true);
                    }
                }
                else
                {
                    sgSettingProc.SetSettingAutoLogin(groupId, false);
                }

            }
            else
            {
                //if (siteConfig.GetUseLoginIDSave(groupId) == true)    // json으로 설정이동
                if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(nGroupID))
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncID = "";
                    sgRSACrypto.ValueEncrypt(id, out strEncID);
                    if (sgSettingData != null)
                        sgSettingProc.SetSettingUID(groupId, strEncID);
                }
            }

            //암호 체크는 ID/PW일 경우에만 해당
            if (eLoginUITypeData == eLoginType.eLOGINTYPE_ORIGIN)
            {
                if (SGAppMgrSvc.OpConfigInfoService.GetUseUserPWChange(groupId))
                {

                    if (GetInitPWLogin(groupId) == true)
                    {
                        pageService.SetPassWDChgType(groupId, ePassWDType.eINITPASSWDCHG);
                        eResultIdPwAfterJob = eIDPWresultJob.eInitPW;
                        // goToPage.InvokeAsync(groupId, (int)eLoginUITypeData);
                        goToPage.InvokeAsync(strInvokeSendParam);
                        closePopUp();
                        return false;
                    }

                    pw = "";
                    bAutoLoginCheck = false;

                    if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eNone)
                    {
                        eResultIdPwAfterJob = eIDPWresultJob.eNone;
                        //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
                        HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                        goToPage.InvokeAsync(strInvokeSendParam);
                        return true;
                    }
                    else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eEnforce)
                    {
                        eResultIdPwAfterJob = eIDPWresultJob.eEnforced;
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        goToPage.InvokeAsync(strInvokeSendParam);
                        closePopUp();
                        return false;
                    }

                    string strTime = "";
                    //SGSettingData sgSettingData = null;
                    sgSettingData = sgSettingProc.SelectSettingData(groupId);
                    if (sgSettingData == null)
                    {
                        eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        goToPage.InvokeAsync(strInvokeSendParam);
                        closePopUp();
                        return false;
                    }

                    strTime = sgSettingProc.GetSettingDelayDspPw(groupId);
                    if (strTime.Equals(""))
                    {
                        // pw 변경날짜 정보가 없는 첫Login시
                        eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        goToPage.InvokeAsync(strInvokeSendParam);
                        closePopUp();
                        return false;
                    }

                    SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
                    string strUserSeq = sgUserData.GetUserSequence();
                    strTime = sgPassWDData.LoaclPassWDDelayLoadString(strTime, strUserSeq);
                    if (strTime.Equals(""))
                    {
                        eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        goToPage.InvokeAsync(strInvokeSendParam);
                        closePopUp();
                        return false;
                    }

                    DateTime dtLocalTime = DateTime.Parse(strTime);
                    DateTime svrDt = sgLoginData.GetSvrTimeDayConvert();

                    if (DateTime.Compare(dtLocalTime, svrDt) < 0)
                    {
                        eResultIdPwAfterJob = eIDPWresultJob.eAfterWard;
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        goToPage.InvokeAsync(strInvokeSendParam);
                        closePopUp();
                        return false;
                    }
                }
            }
            else
            {
                pw = "";
                bAutoLoginCheck = false;
            }

        }
        else
        {

        }

        eResultIdPwAfterJob = eIDPWresultJob.eNone;
        //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
        HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
        goToPage.InvokeAsync(strInvokeSendParam);

        return true;

    }

    /// <summary>
    /// 수신 다운로드 설정
    /// </summary>
    /// <param name="groupID">그룹ID</param>
    /// <param name="strPath">다운경로</param>
    public string SetUserIDRecvDownLoad(int groupID)
    {
        ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        string strPath = AppConfigSvc.GetRecvDownPath(groupID);
        if (SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupID))
        {
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

            // ISGCtrlSideUIService CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;

            if (sgLoginData != null)
            {
                //공영홈쇼핑에서 MAC/Window 모두 ID 적용요청하여 사용
                string strAddFolder = "";
                strAddFolder = sgLoginData.GetUserID();

                strPath = Path.Combine(strPath, strAddFolder);
                HSCmdCenter.SetDownLoadPath(groupID, strPath);
                HSCmdCenter.SetBaseDownLoadPath(groupID, strPath);
                //CtrlSideUISvc.SetRecvDownPath(groupID, strPath);
            }            
        }
        return strPath;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="groupId"></param>
    public void SetReconnectStart(int groupId)
    {
        // Reconnect 동작하게 적용
        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            hsNetWork.SetReconnectStop(false);
        }
    }

    /// <summary>
    /// Login 이후 result 처리 진행
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void LoginpopUpResult(int groupId, PageEventArgs e)
    {

        try
        {

            int ret = e.result;
            if (ret == 0)
            {

                SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);

                pageService.ConnectCountAdd(groupId);
                pageService.SetConnectStatus(groupId, true);
                pageService.SetLogoutStatus(groupId, false);

                CLog.Here().Information($"LoginpopUpResult, groupID : {groupId}, UrlRedirection LogIn State ReSet !!!");
                HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupId, true);

                /*
                if (ClientPatch(sgLoginData))
                {
                    string strSvrVersion = sgLoginData.GetServClientVersion();
                    refUpdate_PopUp.SetVersionText(strSvrVersion);
                    refUpdate_PopUp.SetType(0);
                    refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                    await refUpdate_PopUp.openPopUp();
                    return;
                }
                */

                SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
                SGData sfmData = HSCmdCenter.GetSFMListData(groupId);

                while (true)
                {
                    sfmData = HSCmdCenter.GetSFMListData(groupId);
                    if (sfmData != null)
                        break;
                    Thread.Sleep(50);
                }
                CLog.Here().Information($"LoginResultOnetoAll, groupID : {groupId}, Recved Sfm Data !!!");
                sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData, sfmData);


                HSCmdCenter.SetUseUserRecvDownPath(groupId, SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupId));
                string recvPath =SetUserIDRecvDownLoad(groupId); //사용자별 수신 다운로드 설정
                
                if(SGAppMgrSvc.OpConfigInfoService.GetMakeRecvDownPathShortCut(groupId))//바탕화면 바로가기 설정
                {
                    string linkName = string.Format("{0}{1}.lnk", XmlConf.GetTitle("T_RECV_DOWNLOAD_LINK_NAME"), NetWorkSvc.NetWorkInfo?[groupId]?.ToName);
                    CtrlSideUISvc.ChangeRecvDownPathLink(linkName, recvPath);
                }
                Dictionary<string, SGNetOverData> dicSysIdName = null;
                dicSysIdName = new Dictionary<string, SGNetOverData>();

                if (sgLoginData.GetUseOverNetwork2())
                {

                    if (sgLoginData.GetOverNetwork2Data(ref dicSysIdName, pageService.m_bIsMultiNetWork))
                    {
                        pageService.SetTargetSystemList(groupId, dicSysIdName);

                        // 3중망이상일때, 왼쪽Sidebar 포함 도착망이름 변경
                        if (dicSysIdName != null && dicSysIdName.Count > 1)
                        {
                            ChangeNetOverTitle(groupId, dicSysIdName);
                        }
                    }
                }

                // CLIENT_ZIP_DEPTH 정보 가져옴
                SGQueryExtend sgQueryExtend = null;
                sgQueryExtend = new SGQueryExtend();
                if (sgQueryExtend != null)
                {

                    string strGetinfoTagName = "";
                    strGetinfoTagName = "'CLIENT_ZIP_DEPTH'";
                    strGetinfoTagName += ", 'CS_EXCEPTION_EXT_REASON_TYPE'";
                    strGetinfoTagName += ", 'CLIENT_OLE_EXTRACT'";
                    //strGetinfoTagName += ", 'CLIENT_OLE_EXTRACT_MTYPE'";       // Table 이름 따로 정해졌음
                    strGetinfoTagName += ", 'CLIENT_PREVIEW_VIEWER_EXT'";
                    strGetinfoTagName += ", 'FORWARD_AUTODOWN'";

                    if (SGAppMgrSvc.OpConfigInfoService.GetUseMinLengthTitleDesc(groupId))
                    {
                        strGetinfoTagName += ", 'CLIENT_TITLE_MIN_LENGTH'";
                        strGetinfoTagName += ", 'CLIENT_DESC_MIN_LENGTH'";
                    }

                    string strQuery = sgQueryExtend.GetsystemEnvDataS(strGetinfoTagName); // sgQueryExtend.GetZipDepthSQLsystemEnv : CLIENT_ZIP_DEPTH 값만구할때 사용
                    HSCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);

                    // string strQuery = sgQueryExtend.GetZipDepthSQLsystemEnv();
                    // HSCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);
                }


                bool bUseClipBoard = sgLoginData.GetClipboard();
                if (bUseClipBoard)
                {
                    List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                    char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                        bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                        bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                        bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                        Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                    }
                    else
                    {
                        Window.RegClipboardHotKey(groupId,
                                        listModKey[(int)HOTKEY_MOD.ALT],
                                        listModKey[(int)HOTKEY_MOD.CTRL],
                                        listModKey[(int)HOTKEY_MOD.SHIFT],
                                        listModKey[(int)HOTKEY_MOD.WINDOW],
                                        chVKey);
                    }

                    // clipboard 선택전송기능 사용유무설정
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseClipTypeSelectSend(groupId))
                        Window.UseClipBoardSelect(groupId);

                    // ClipBoard(Type Mixed 일때) Text 우선송신 사용
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseClipTypeTextFirstSend(groupId))
                        Window.UseClipFirstSendType(groupId);

                    // 자동전송기능 위해
                    if (SGAppMgrSvc.AppConfigInfoService.GetClipCopyAutoSend())
                    {
                        Window.SetNativeClipboardHotKey(groupId, listModKey[(int)HOTKEY_MOD.ALT],
                                        listModKey[(int)HOTKEY_MOD.CTRL],
                                        listModKey[(int)HOTKEY_MOD.SHIFT],
                                        listModKey[(int)HOTKEY_MOD.WINDOW],
                                        chVKey, 0);
                    }
                }

                DateTime dt = (SGAppMgrSvc.OpConfigInfoService.GetUseOneAClockChangeAgentTimer(groupId)) ? DateTime.Now : sgLoginData.GetSvrTimeConvert();
                pageService.SetSvrTime(groupId, dt, sgLoginData);
                bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
                bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
                pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
                pageService.SetAfterApprEnable(groupId, bAfterApprEnable);

                bool bAfterCheck = false;
                if (!bAfterApprEnable)
                    bAfterCheck = false;
                else
                    bAfterCheck = SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();

                pageService.SetAfterApproveCheck(groupId, bAfterCheck);

                // 
                LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
                loginAfterSGHeaderUI = HSCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
                if (loginAfterSGHeaderUI != null)
                    loginAfterSGHeaderUI(groupId);

                LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
                loginAfterSGSideBar = HSCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
                if (loginAfterSGSideBar != null)
                    loginAfterSGSideBar(groupId);

                Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
                int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
                Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
                int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
                pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);


                ScreenTimeInitNotiEvent screenTimeInitEvent = HSCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
                if (screenTimeInitEvent != null)
                {
                    ConfigArgs config = new ConfigArgs();
                    config.ScreenTime = sgLoginData.GetSCRLimit();
                    screenTimeInitEvent(groupId, config);
                }

                // ID/PW 로그인 AD 로그인한것처럼 동일하게 처리
                // 최종 로그인 형식이 어떻게 되는지에 따라 그 Type을 따라간다 (20230109)
                //if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(nGroupID))
                //{
                //    pageService.SetGroupIDLoginType(nGroupID, eLoginType.eLOGINTYPE_AD);
                //    eLoginUITypeData = eLoginType.eLOGINTYPE_AD;
                //}

                SetReconnectStart(groupId);

                // 이후 동작 처리
                if (ProcessLoginResultAll(groupId) == false)
                    return;


                CtrlSideEvent ctrlSideEvent = null;
                ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
                if (ctrlSideEvent != null)
                    ctrlSideEvent(groupId);

                // 로그인 완료 -

                // 성공했을대에만 닫음
                closePopUp();

            }
            else
            {
                bUIBtnDisable = false;

                // sessionCheck 동작하게 적용
                HsNetWork hsNetWork = null;
                hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
                if (hsNetWork != null)
                {
                    hsNetWork.SetLoginSessionCheckDo();
                }

                string strPopupMsg = "";
                // 다중망일때에는 실패한 망이름 표현
                if (pageService.m_bIsMultiNetWork)
                {
                    string strFromNet = "";
                    string strToNet = "";
                    XmlConf.GetNetworkTitle(groupId, out strFromNet, out strToNet);
                    strPopupMsg = $"{strFromNet}<i class=\"fas fa-long-arrow-alt-right p-1\"></i> {strToNet}<br/>";
                }

                strPopupMsg += e.strMsg;

                strPopupMsg = strPopupMsg.Replace("/r/n", "<br/>");
                ShowLoginFail(strPopupMsg);
                HSCmdCenter.SendLogOut(groupId, "");
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"LoginpopUpResult, Exception(MSG) : {ex.Message}");
        }
        finally
        {
            bStartedLogin = false;
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="strMsg"></param>
    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

}
