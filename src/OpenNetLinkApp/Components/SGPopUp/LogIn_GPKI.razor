@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGGpki
@using AgLogManager
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HsCmdCenter
@using HsNetWorkSGData;


<div class="modal fade" id="GPKIPopUp" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header2 modal-outline2">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-shield-alt"></i> @strGPKILogin</h5>                   <!--인증서 로그인-->
            </div>
            <div class="modal-body pt-0">
                <!-- content -->

                <div class="card-body pt-0">
                    <div class="modal-sub-title1 mb-2"> @strGPKISelInfo </div>                               <!--인증서 저장위치를 선택해 주세요.-->
                    <div class="col-md-12 p-0">

                        <button class="btn btn-outline-blue1 col-md-6 p-0 pt-3 pb-2 @(stMedia == "hard" ? "active1" : "")" @onclick="@(e=>LocationSelect("hard"))">

                            <label class="mt-80">@strHardDisk</label>                                                           <!--하드디스크-->
                        </button>

                        <button class="btn btn-outline-blue2 col-md-6 p-0 pt-3 pb-2 @(stMedia == "usb" ? "active2" : "")" @onclick="@(e=>LocationSelect("usb"))">
                            <!--  active2 -->

                            <label class="mt-80">@strMoveDisk</label>                                                         <!--이동식디스크-->
                        </button>
                    </div>
                </div>

                <div class="card-body pt-0">
                    <div class="col-md-12 p-0">
                        <div class="col-md-6 p-0 float-right">
                            <select class="form-control" id="DiskSelect" @onchange="SelectMoveDisk">
                                @foreach (string strDriveName in driveList)
                                {
                                    <option>@strDriveName</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <div class="card-body pt-0 pb-0">
                    <div class="modal-sub-title1 mb-2"> @strCertSelInfo </div>                                        <!--인증서를 선택해 주세요.-->

                    <table class="table table-head-fixed table-bordered table-hover white_pop table-responsive p-0" style="height:131px;">
                        <colgroup>
                            <col width="160">
                            <col width="80">
                            <col width="140">
                            <col width="120">
                        </colgroup>
                        <thead class="text-center">
                            <tr>
                                <th>@strGPKIID </th>                                                                        <!--인증서아이디-->
                                <th>@strGPKIExpireDay </th>                                                                            <!--만료일자-->
                                <th>@strGPKIUse </th>                                                                                <!--용도-->
                                <th>@strGPKIBescheiniger </th>                                                                              <!--발급자-->
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (GPKIFileInfo item in listViewGpkiFileList)
                            {
                                <tr style="cursor:pointer;" class="@item.m_selected" @onclick="@(e => selectGPKIItem(item.m_strUserID))">
                                    @if (item.m_nRemainDay > 0)
                                    {
                                        <td><img src="/images/gpki_icon.png" class="p-1">@item.m_strUserID</td>
                                    }
                                    else
                                    {
                                        <td><img src="/images/gpki_expired_icon.png" class="p-1">@item.m_strUserID</td>
                                    }
                                    <td>@item.m_strExpiredDate</td>
                                    <td>@item.m_strKeyUse</td>
                                    <td>@item.m_strOrg</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="col-md-12 mt-3 p-0">
                        <div class="row m-0 p-0">
                            <label class=" pt-2 p-0 pr-2 ">@strGPKIPW</label>                                               <!--인증서 암호-->
                            <input type="password" class="form-control col-md-9 mb-2" id="1" placeholder="" @bind="strUserinputGPKIPW" @onkeyup="HandleKeyEvent">
                            <div style="padding-left:70px;"><i class="fas fa-star-of-life fa-xs mb-2"></i> @strInfo</div>       <!--인증서를 선택하고 암호를 입력하세요.-->
                        </div>
                    </div>

                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer">
                @if (Mode == "1")
                {
                    <button @onclick="RegisterGpki" type="button" class="btn btn-md btn-navy mr-0"><i class="fas fa-file-upload"></i>@strGPKIReg</button> <!--인증서 등록-->
                }
                <button @onclick="identifyGPki" type="button" class="btn btn-md btn-blue mr-0"><i class="fas fa-check"></i>@strGPKIOK</button>
                <button @onclick="closePopUp" type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>@strGPKICancle</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>


@code {
    [Parameter]
    public string Mode { get; set; } //1:로그인 모드 2: 인증서 등록모드

    private string stMedia = "hard";
    //private List<GPKIMedia> listMedia = new List<GPKIMedia>();
    private List<GPKIFileInfo> listViewGpkiFileList = new List<GPKIFileInfo>();

    public bool bGetResponseGpkiCNatServer = false;         // 서버에서 gpki 파일들 등록되었는지 유무 response를 받았는지 유무

    public bool bIsGpkiCNatServer = false;                  // 목록에 gpki 파일들중 하나라도 서버에 등록되어 있는지 유무

    public string strGPKILogin = "";
    public string strGPKISelInfo = "";
    public string strHardDisk = "";
    public string strMoveDisk = "";
    public string strCertSelInfo = "";
    public string strGPKIID = "";
    public string strGPKIExpireDay = "";
    public string strGPKIUse = "";
    public string strGPKIBescheiniger = "";
    public string strGPKIPW = "";
    public string strUserinputGPKIPW = "";
    public string strInfo = "";
    public string strGPKIReg = "";
    public string strGPKIOK = "";
    public string strGPKICancle = "";

    public string strCurSelDriveName = "";

    public GPKIFileInfo objUserSelectedGpki;

    public List<string> driveList = new List<string>();

    SGGpkiLib sgGpkiLib = new SGGpkiLib();

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<LogIn_GPKI>();

    /**
    *@brief
    *@param e
    */
    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            identifyGPki();
        }
    }

    /**
    *@brief
    *@param userId
    */
    private void selectGPKIItem(string userId)
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            if (item.m_strUserID == userId)
            {
                item.m_selected = "select-row";
                UserSelectItem(item);
            }
            else
                item.m_selected = "";
        }
        StateHasChanged();
    }

    /**
    *@brief
    */
    private void selectGPKIItemClean()
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            item.m_selected = "";
        }

        objUserSelectedGpki = null;

        StateHasChanged();
    }

    /**
    *@brief
    *@param strType
    *@param strMsg
    */
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /*
    *@brief
    *@param strSelectGpki
    */
    private void UserSelectItem(GPKIFileInfo strSelectGpki)
    {
        objUserSelectedGpki = strSelectGpki;
    }

    /**
    *@brief
    */
    public async Task openPopUp()
    {
        object[] param = { "GPKIPopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    /**
    *@brief
    */
    public void closePopUp()
    {
        sgGpkiLib.GPKI_Finish();
        object[] param = { "GPKIPopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    /**
    *@brief
    */
    public void identifyGPki()
    {

        string strReason = "";

        // 인증서 선택 실패
        if (objUserSelectedGpki == null)
        {
            // 인증서를 선택하고 암호를 입력하세요
            CLog.Information("인증 실패 : 인증서를 선택하지 않고 시도!");
            ShowMessage("error", strInfo);
            return;
        }

        // 인증서 passWord 검증동작 실패
        /*if (sgGpkiLib.IsValiedGPKIFile(objUserSelectedGpki, strUserinputGPKIPW, ref strReason) == false)
        {
            CLog.Information("인증 실패 : 인증서 패스워드 틀림!");
            ShowMessage("error", strReason);
            return;
        }*/

        // 인증서 등록유무 서버에서 아직 결과값 받지 못했음.
        if (bGetResponseGpkiCNatServer == false)
        {
            CLog.Information("인증 실패 : 인증서가 서버에 등록됐는지 유무 결과를 받지 못했음!");
            ShowMessage("error", "인증서 등록유무를 알수 없습니다. 잠시후 다시 시도하세요.");
            return;
        }


        // 등록확인.1
        if (bIsGpkiCNatServer == false)
        {
            CLog.Information("인증 실패 : 해당 드라이브의 모든 인증서가 등록되어 있지 않음!");
            ShowMessage("error", "등록된 인증서가 없습니다.");
            return;
        }


        // 등록확인.2
        if (objUserSelectedGpki.m_bIsRegisteredServer == false)
        {
            CLog.Information("인증 실패 : 선택된 인증서는 서버에 등록되어 있지 않음!");
            ShowMessage("error", "선택된 인증서는 등록되어 있지 않습니다.");
            return;
        }


        ShowMessage("error", "해당 인증서는 등록되어 있습니다 - OOO");

        // 종료 처리
        // closePopUp();
    }

    /**
    *@brief
    */
    public void RegisterGpki()
    {

        string strReason = "";

        if (objUserSelectedGpki == null)
        {
            // 인증서를 선택하고 암호를 입력하세요
            CLog.Information("인증서 등록 실패 : 인증서를 선택하지 않고 시도!");
            ShowMessage("error", strInfo);
            return;
        }

        // 인증서 및 passWord 검증동작
        /*if (sgGpkiLib.IsValiedGPKIFile(objUserSelectedGpki, strUserinputGPKIPW, ref strReason) == false)
        {
            CLog.Information("인증서 등록 실패 : 인증서를 선택하지 않고 시도!");
            ShowMessage("error", strReason);
            return;
        }*/


        // 종료 처리
        closePopUp();
    }



    /**
    *@brief
    */
    protected override void OnInitialized()
    {
        sgGpkiLib.GPKI_Init();
        InitDriveList();
        InitText();
        HsCmdCenter.sgPageEvent.SetSvrGPKIEventAdd(0, GPKIInfoResult);
        LocationSelect("hard");
        base.OnInitialized();

        CLog.Information("Login_Gpki - OnInitialized!");
    }

    /**
    *@brief
    */
    public void InitDriveList()
    {
        driveList.Clear();

        string strOSDrive = Path.GetPathRoot(Environment.SystemDirectory);
        var dList = DriveInfo.GetDrives();
        foreach (DriveInfo drive in dList)
        {
            if (drive.Name.Equals(strOSDrive))
                continue;
            driveList.Add(drive.Name.Substring(0, drive.Name.Length - 1));
        }

        if (driveList.Count > 0)
            strCurSelDriveName = driveList[0];
    }

    /**
    *@brief
    */
    public bool GetRegisteredGpkiCNdata()
    {

        if (listViewGpkiFileList.Count > 0)
        {

            string strGpkiCnRegisterFind = "";

            foreach (GPKIFileInfo item in listViewGpkiFileList)
            {
                if (item.m_strUserID.Length > 0)
                {
                    strGpkiCnRegisterFind += item.m_strUserID;
                    strGpkiCnRegisterFind += "\x2";
                }
            }

            //HSCmdCenter.SendSVRGPKIRegInfo(0, "619유강희001\x2031이재혁002\x2");
            //031이재혁002031이창협001619유강희001999드림시큐리티001
            bGetResponseGpkiCNatServer = false;
            bIsGpkiCNatServer = false;
            HsCmdCenter.SendSVRGPKIRegInfo(0, strGpkiCnRegisterFind);


            return true;
        }

        return false;
    }

    /**
    *@brief
    */
    public void InitGPKIHardDiskFileList()
    {
        sgGpkiLib.LoadHardDiskGPKICertWithKeyFile();
        sgGpkiLib.RequestGPKILocalCNStatus();

        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Information("HardDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }

    /**
    *@brief
    */
    public void InitGPKIMoveDiskFileList()
    {
        sgGpkiLib.LoadMoveDiskGPKICertWithKeyFile(strCurSelDriveName);
        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Information("MoveDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }

    /**
    *@brief
    *@param e
    */
    public void SelectMoveDisk(ChangeEventArgs e)
    {
        strCurSelDriveName = e.Value.ToString();

        selectGPKIItemClean();

        LocationSelect("usb");
    }

    /**
    *@brief Drive 선택
    *@param media 선택된 드라이브 종류
    */
    private void LocationSelect(string media)
    {
        stMedia = media;

        selectGPKIItemClean();

        listViewGpkiFileList.Clear();
        if (stMedia == "hard")
        {
            InitGPKIHardDiskFileList();
        }
        else if (stMedia == "usb")
        {
            InitGPKIMoveDiskFileList();
        }

        StateHasChanged();
    }

    /*
    public class GPKIMedia
    {
        public GPKIMedia(string id, string expired, string usage, string pub)
        {
            Id = id;
            Expird = DateTime.ParseExact(expired, "yyyy/MM/dd", null);
            Usage = usage;
            Publisher = pub;
        }
        public GPKIMedia()
        {
            Id = Usage = Publisher = "";
            Expird = DateTime.Now;
        }
        public string Id { get; set; }
        public DateTime Expird { get; set; }
        public string Usage { get; set; }
        public string Publisher { get; set; }
    }
    */

    public void InitText()
    {
        strGPKILogin = XmlConf.GetTitle("T_ETC_GPKILOGIN");             // 인증서 로그인
        strGPKISelInfo = XmlConf.GetInfoMsg("I_0187");                  // 인증서 저장위치를 선택해 주세요.
        strHardDisk = XmlConf.GetTitle("T_COMMON_DRIVEFIXED");          // 하드디스크
        strMoveDisk = XmlConf.GetTitle("T_COMMON_DRIVEREMOVABLE");      // 이동식디스크
        strCertSelInfo = XmlConf.GetInfoMsg("I_0188");                  // 인증서를 선택해 주세요.
        strGPKIID = XmlConf.GetTitle("T_GPKI_LIST_ID");                 // 인증서아이디
        strGPKIExpireDay = XmlConf.GetTitle("T_GPKI_LIST_EXPIREDATE");  // 만료일자
        strGPKIUse = XmlConf.GetTitle("T_GPKI_LIST_USE");               // 용도
        strGPKIBescheiniger = XmlConf.GetTitle("T_GPKI_LIST_ISSUER");   // 발급자
        strGPKIPW = XmlConf.GetTitle("T_GPKI_CERT_PASSWD");             // 인증서 암호
        strInfo = XmlConf.GetInfoMsg("I_0124");                         // 인증서를 선택하고 암호를 입력하세요.
        strGPKIReg = XmlConf.GetTitle("T_GPKI_CERT_REGISTER");          // 인증서 등록
        strGPKIOK = XmlConf.GetTitle("T_COMMON_OK");                    // 확인
        strGPKICancle = XmlConf.GetTitle("T_COMMON_CANCEL");            // 취소
    }

    public void GPKIInfoResult(int groupID)
    {

        bIsGpkiCNatServer = false;
        bGetResponseGpkiCNatServer = true;

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGSvrData(0);
        if (tmpData != null)
        {
            string strGpkiCN = tmpData.GetBasicTagData("GPKI_CN");


            if (strGpkiCN.Length > 0)
            {

                // ex)
                // strGpkiCN = "031이재혁002\x20\x1619유강희001\x21\x1";

                string[] words = strGpkiCN.Split('\x1');


                foreach (string strWordOne in words)
                {

                    string[] strCNreg = strWordOne.Split('\x2');
                    if (strCNreg.Length == 2 && Convert.ToInt32(strCNreg[1]) > 0)
                    {

                        foreach (GPKIFileInfo item in listViewGpkiFileList)
                        {
                            if (item.m_strUserID == strCNreg[0])
                            {
                                item.m_bIsRegisteredServer = true;
                                bIsGpkiCNatServer = true;
                            }
                        }
                    }
                }

            }// if (strGpkiCN.Length > 0)

        }

    } // public void GPKIInfoResult(int groupID)

}
