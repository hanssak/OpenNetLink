@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGGpki
@using OpenNetLinkApp.PageEvent
@using AgLogManager
@using HsNetWorkSGData;
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using OpenNetLinkApp.Data.SGQuery

@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject PageStatusService pageService
@inject HSCmdCenter HsCmdCenter


<div class="modal fade" id="GPKIPopUp" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1" style="width:680px !important;">
        <div class="modal-content">
            <div class="modal-header2 modal-outline2">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-shield-alt"></i> @XmlConf.GetTitle("T_ETC_GPKILOGIN")</h5>                   <!--인증서 로그인-->
            </div>
            <div class="modal-body pt-0">
                <!-- content -->

                <div class="card-body pt-0">
                    <div class="modal-sub-title1 mb-2"> @XmlConf.GetInfoMsg("I_0187") </div>                               <!--인증서 저장위치를 선택해 주세요.-->
                    <div class="col-md-12 p-0">

                        <button class="btn btn-outline-blue1 col-md-6 p-0 pt-3 pb-2 @(stMedia == "hard" ? "active1" : "")" disabled=@bGpkiBtnDisable @onclick="@(e=>LocationSelect("hard"))">
                            <label class="mt-80">@XmlConf.GetTitle("T_COMMON_DRIVEFIXED")</label>                                                           <!--하드디스크-->
                        </button>

                        <button class="btn btn-outline-blue2 col-md-6 p-0 pt-3 pb-2 @(stMedia == "usb" ? "active2" : "")" disabled=@bGpkiBtnDisable @onclick="@(e=>LocationSelect("usb"))">
                            <!--  active2 -->

                            <label class="mt-80">@XmlConf.GetTitle("T_COMMON_DRIVEREMOVABLE")</label>                                                         <!--이동식디스크-->
                        </button>
                    </div>
                </div>

                <div class="card-body pt-0">
                    <div class="col-md-12 p-0">
                        <div class="col-md-6 p-0 float-right">
                            <select class="form-control" id="DiskSelect" disabled=@bGpkiBtnDisable @onchange="SelectMoveDisk">
                                @foreach (string strDriveName in driveList)
                                {
                                    <option>@strDriveName</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <div class="card-body pt-0 pb-0">
                    <div class="modal-sub-title1 mb-2">@XmlConf.GetInfoMsg("I_0188")</div>                                        <!--인증서를 선택해 주세요.-->
                    <div style="height:150px;overflow:auto;">
                        <table class="table table-head-fixed table-bordered table-hover white_pop p-0" style="width:100%;table-layout: fixed; overflow: auto;height: 131px;" disabled="@bGpkiBtnDisable">
                            <thead class="text-center">
                                <tr>
                                    <th style="width:28%;padding-left:0px;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_ID")</th>
                                    <th style="width:16%;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_EXPIREDATE") </th>
                                    <th style="width:20%;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_USE") </th>
                                    <th style="width:20%;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_ISSUER") </th>
                                    <th style="width:16%;padding-right:0px;text-align:center;">@XmlConf.GetTitle("T_GPKI_CERT_REGISTER_YN") </th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (GPKIFileInfo item in listViewGpkiFileList)
                                {
                                    <tr style="cursor:pointer;" class="@item.m_selected" @onclick="@(e => selectGPKIItem(item.m_strUserID))">
                                        @if (item.m_nRemainDay > 0)
                                        {
                                            <td style="text-align:left;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><img src="/images/gpki_icon.png" class="p-1">@item.m_strUserID</td>
                                        }
                                        else
                                        {
                                            <td style="text-align:left;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><img src="/images/gpki_expired_icon.png" class="p-1">@item.m_strUserID</td>
                                        }
                                        <td style="text-align:center;">@item.m_strExpiredDate</td>
                                        <td style="text-align:center;">@item.m_strKeyUse</td>
                                        <td style="text-align:center;">@item.m_strOrg</td>
                                        <td style="text-align:center;">@XmlConf.GetCommon(bGetResponseGpkiCNatServer ? (item.m_bIsRegisteredServer ? "T_YES" : "T_NO") : "T_IDENTIFING")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-12 mt-3 p-0">
                        <div class="row m-0 p-0">
                            <label class=" pt-2 p-0 pr-2 ">@XmlConf.GetTitle("T_GPKI_CERT_PASSWD")</label>                                               <!--인증서 암호-->
                            <input type="password" class="form-control col-md-9 mb-2" id="1" disabled=@bGpkiBtnDisable placeholder="" @bind="strUserinputGPKIPW" @onkeyup="HandleKeyEvent">
                            <div style="padding-left:70px;"><i class="fas fa-star-of-life fa-xs mb-2"></i> @XmlConf.GetInfoMsg("I_0124")</div>       <!--인증서를 선택하고 암호를 입력하세요.-->
                        </div>
                    </div>

                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer">
                <button @onclick="RegisterGpki" type="button" class="btn btn-md btn-navy mr-1" disabled="@bGpkiBtnDisable"><i class="fas fa-file-upload"></i>@XmlConf.GetTitle("T_GPKI_CERT_REGISTER")</button> <!--인증서 등록-->
                @if (Mode == "1")
                {
                    <button @onclick="identifyGPki" type="button" class="btn btn-md btn-blue mr-1" disabled="@bGpkiBtnDisable"><i class="fas fa-check"></i>@XmlConf.GetTitle("T_GPKI_CERT_LOGIN")</button> <!--인증서 로그인-->
                }
                <!-- <button @onclick="closePopUp" type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_COMMON_CANCEL")</button> -->
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    //[Parameter]
    public string Mode { get; set; } //1:로그인 모드 2: 인증서 등록모드
    [Parameter]
    public EventCallback<int> goToPageGPKI { get; set; }

    public int nGroupID = -1;                // 현재 사용할 GroupID
    public int nDrawPageGroupID = -1;               // Draw하는 GroupID

    private string stMedia = "hard";
    private List<GPKIFileInfo> listViewGpkiFileList = new List<GPKIFileInfo>();

    public bool bGetResponseGpkiCNatServer = false;         // 서버에서 gpki 파일들 등록되었는지 유무 response를 받았는지 유무

    public bool bIsGpkiCNatServer = false;                  // 목록에 gpki 파일들중 하나라도 서버에 등록되어 있는지 유무

    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGSiteConfigService siteConfig;
    ISGNetworkService NetWorkSvc;

    public string strUserinputGPKIPW = "";          // 사용자가 입력한 gpki-password
    public bool bGpkiBtnDisable = false;              // true : 사용못함, false : 사용함, 버튼 사용 disable 유무 설정
    public string strCurSelDriveName = "";          // 현재 사용자가 선택한 드라이브명
    public GPKIFileInfo objUserSelectedGpki;        // 사용자가 선택한 GPKI 인증서 정보

    public List<string> driveList = new List<string>();

    SGGpkiLib sgGpkiLib = new SGGpkiLib();

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<LogIn_GPKI>();


    /// <summary>
    ///
    /// </summary>
    /// <param name="userId"></param>
    private void selectGPKIItem(string userId)
    {

        if (bGpkiBtnDisable)
        {
            ShowMessage("info", XmlConf.GetInfoMsg("I_0211"));
            return;
        }

        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            if (item.m_strUserID == userId)
            {
                item.m_selected = "select-row";
                UserSelectItem(item);
            }
            else
                item.m_selected = "";
        }
        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (Mode == "1")
                identifyGPki();
            else
                RegisterGpki();
        }
    }


    /// <summary>
    ///
    /// </summary>
    public void identifyGPki()
    {

        if (GPkiFiltering() == false)
            return;

        ShowMessage("info", XmlConf.GetTitle("T_GPKI_LOGIN_DO"));

        // RandomKey 요청
        if (nGroupID > 0)
            HsCmdCenter.SendSVRGPKIRandomKey(nGroupID, objUserSelectedGpki.m_strUserID);

        bGpkiBtnDisable = true;
    }


    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public async Task openPopUp()
    {
        object[] param = { "GPKIPopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    /// <summary>
    ///
    /// </summary>
    public void closePopUp()
    {

        bGpkiBtnDisable = false;

        sgGpkiLib.GPKI_Finish();
        object[] param = { "GPKIPopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    /// <summary>
    ///
    /// </summary>
    public void RegisterGpki()
    {

        if (Mode == "2")
        {

            // 등록 창으로 떴을때

            // 배포후 설정변경(KKW)
            if (GPkiFiltering(false, true, false, false) == false)
                return;

            if (objUserSelectedGpki.m_strUserID.Length < 1)
            {
                CLog.Information("선택한 인증서의 Gpki cn을 알 수 없습니다!");
                ShowMessage("error", XmlConf.GetErrMsg("E_0223"));
                return;
            }

            bGpkiBtnDisable = true;

            // 먼저 입력된 data에서 얻은 사용자정보
            if (RequestGpkiCNregisterNchange())
            {
                CLog.Information("Gpki 인증서 서버에 등록 진행합니다!");
                ShowMessage("info", XmlConf.GetInfoMsg("I_0210"));
            }

        }
        else
        {

            CLog.Information("인증 모드에서 GPKI 등록버튼 누름 - IDPW 로그인부터 진행!");

            // Login 인증모드 창으로 떴을때
            goToPageGPKI.InvokeAsync(2);

            // 종료 처리
            closePopUp();
        }

    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="bCheckPassWord"></param>
    /// <param name="bCheckGetResponse"></param>
    /// <param name="bCheckDriveAllReg"></param>
    /// <param name="bCheckSelectRegistered"></param>
    /// <returns></returns>
    public bool GPkiFiltering(bool bCheckPassWord = true, bool bCheckGetResponse = true, bool bCheckDriveAllReg = true, bool bCheckSelectRegistered = true)
    {

        // 인증서 선택 실패
        if (objUserSelectedGpki == null)
        {
            CLog.Information("인증 실패 : 인증서를 선택하지 않고 시도!");
            ShowMessage("error", XmlConf.GetInfoMsg("I_0124"));     // 인증서를 선택하고 암호를 입력하세요.
            return false;
        }

        string strReason = "";

        // 인증서 passWord 검증동작 실패
        if (bCheckPassWord && sgGpkiLib.IsValiedGPKIFile(objUserSelectedGpki, strUserinputGPKIPW, ref strReason) == false)
        {
            CLog.Information("인증 실패 : 인증서 패스워드 틀림!");
            ShowMessage("error", strReason);
            return false;
        }

        // 인증서 등록유무 서버에서 아직 결과값 받지 못했음.
        if (bCheckGetResponse && bGetResponseGpkiCNatServer == false)
        {
            CLog.Information("인증 실패 : 인증서가 서버에 등록됐는지 유무 결과를 받지 못했음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0224"));
            return false;
        }


        // 등록확인.1
        if (bCheckDriveAllReg && bIsGpkiCNatServer == false)
        {
            CLog.Information("인증 실패 : 해당 드라이브의 모든 인증서가 등록되어 있지 않음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0225"));
            return false;
        }


        // 등록확인.2
        if (bCheckSelectRegistered && objUserSelectedGpki.m_bIsRegisteredServer == false)
        {
            CLog.Information("인증 실패 : 선택된 인증서는 서버에 등록되어 있지 않음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0226"));
            return false;
        }
        else if (bCheckSelectRegistered == false && objUserSelectedGpki.m_bIsRegisteredServer)
        {
            CLog.Information("등록 실패 : 선택된 인증서는 서버에 이미 등록되어 있음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0227"));
            return false;
        }


        return true;

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="strSelectGpki"></param>
    private void UserSelectItem(GPKIFileInfo strSelectGpki)
    {
        objUserSelectedGpki = strSelectGpki;
    }

    /// <summary>
    /// Drive 선택 (media : 선택된 드라이브 종류, hard, usb)
    /// </summary>
    /// <param name="media"></param>
    private void LocationSelect(string media)
    {
        stMedia = media;

        selectGPKIItemClean();

        listViewGpkiFileList.Clear();
        if (stMedia == "hard")
        {
            InitGPKIHardDiskFileList();
        }
        else if (stMedia == "usb")
        {
            InitGPKIMoveDiskFileList();
        }

        StateHasChanged();
    }


    /// <summary>
    /// nGroupID 값이 새롭게 할당되고 이후에 1번만 실행됨
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
        }

        if ((nDrawPageGroupID < 0 || nDrawPageGroupID != nGroupID) && nGroupID > 0)
        {
            nDrawPageGroupID = nGroupID;
            CLog.Here().Information("Login_GPKI - OnAfterRenderAsync - GroupID : {0}", nGroupID);

            HsCmdCenter.sgPageEvent.SetSvrGPKIEventAdd(nGroupID, GPKIInfoResult);              // gpki 등록여부 확인
            HsCmdCenter.sgPageEvent.SetSvrGPKIRandomEventAdd(nGroupID, GPKIRandomKeyResult);   // gpki Random Key 요청
            HsCmdCenter.sgPageEvent.SetSvrGPKICertEventAdd(nGroupID, GPKICertResult);          // gpki 인증 결과 확인
            HsCmdCenter.sgPageEvent.SetSvrGPKIRegEventAdd(nGroupID, GPKIRegChangeResult);          // gpki 등록요청 결과 확인
            HsCmdCenter.sgPageEvent.SetLoginEventAdd(nGroupID, GpkiLoginResult);
            // nGroupID 정상적으로 지정되고 나서 최초 확인
            GetRegisteredGpkiCNdata();
        }

    }


    /// <summary>
    ///
    /// </summary>
    private void selectGPKIItemClean()
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            item.m_selected = "";
        }

        objUserSelectedGpki = null;

        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    public void InitGPKIHardDiskFileList()
    {
        sgGpkiLib.LoadHardDiskGPKICertWithKeyFile();
        sgGpkiLib.RequestGPKILocalCNStatus();

        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Information("HardDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    public void InitGPKIMoveDiskFileList()
    {
        sgGpkiLib.LoadMoveDiskGPKICertWithKeyFile(strCurSelDriveName);
        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Information("MoveDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }


    /// <summary>
    /// GPKI CN이 등록되어 있는지 확인한다.
    /// </summary>
    /// <returns></returns>
    public bool GetRegisteredGpkiCNdata()
    {

        if (listViewGpkiFileList.Count > 0)
        {

            string strGpkiCnRegisterFind = "";

            foreach (GPKIFileInfo item in listViewGpkiFileList)
            {
                if (item.m_strUserID.Length > 0)
                {
                    strGpkiCnRegisterFind += item.m_strUserID;
                    strGpkiCnRegisterFind += "\x2";
                }
            }

            //HSCmdCenter.SendSVRGPKIRegInfo(0, "619유강희001\x2031이재혁002\x2");
            //031이재혁002031이창협001619유강희001999드림시큐리티001
            bGetResponseGpkiCNatServer = false;
            bIsGpkiCNatServer = false;

            if (nGroupID > 0)
                HsCmdCenter.SendSVRGPKIRegInfo(nGroupID, strGpkiCnRegisterFind);


            return true;
        }

        return false;
    }


    protected override void OnInitialized()
    {
        sgGpkiLib.GPKI_Init();
        InitDriveList();

        LocationSelect("hard");
        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;

        CLog.Information("Login_Gpki - OnInitialized!");
    }


    /// <summary>
    /// DriveList 를 얻어
    /// </summary>
    public void InitDriveList()
    {
        driveList.Clear();

        string strOSDrive = Path.GetPathRoot(Environment.SystemDirectory);
        var dList = DriveInfo.GetDrives();
        foreach (DriveInfo drive in dList)
        {
            if (drive.Name.Equals(strOSDrive))
                continue;
            driveList.Add(drive.Name.Substring(0, drive.Name.Length - 1));
        }

        if (driveList.Count > 0)
            strCurSelDriveName = driveList[0];
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKIInfoResult(int groupID)
    {

        bIsGpkiCNatServer = false;
        bGetResponseGpkiCNatServer = true;

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGSvrData(nGroupID);
        if (tmpData != null)
        {

            string strGpkiCN = tmpData.GetBasicTagData("GPKI_CN");

            if (strGpkiCN.Length > 0)
            {

                // ex)
                // strGpkiCN = "031이재혁002\x20\x1619유강희001\x21\x1";

                string[] words = strGpkiCN.Split('\x1');


                foreach (string strWordOne in words)
                {

                    string[] strCNreg = strWordOne.Split('\x2');
                    if (strCNreg.Length == 2 && Convert.ToInt32(strCNreg[1]) > 0)
                    {

                        foreach (GPKIFileInfo item in listViewGpkiFileList)
                        {
                            if (item.m_strUserID == strCNreg[0])
                            {
                                item.m_bIsRegisteredServer = true;
                                bIsGpkiCNatServer = true;
                            }
                        }
                    }
                }

            }// if (strGpkiCN.Length > 0)

        }

        StateHasChanged();

    } // public void GPKIInfoResult(int groupID)


    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void SelectMoveDisk(ChangeEventArgs e)
    {
        strCurSelDriveName = e.Value.ToString();

        selectGPKIItemClean();

        LocationSelect("usb");
    }


    /// <summary>
    /// 서버에서 RandomKey 결과값 받아 Cert 인증 요청하는 함수
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKIRandomKeyResult(int groupID)
    {

        CLog.Information("$GPKI_RANDOM_ACK - Result!!");

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(groupID);
        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strSessionKey = tmpData.GetBasicTagData("SESSIONKEY");
            string strRandomKey = tmpData.GetBasicTagData("RANDOM");

            if (strResult == "2")
            {
                bGpkiBtnDisable = false;
                ShowMessage("error", XmlConf.GetErrMsg("E_0228"));
                return;
            }

            // 진짜 인증서 받고는 20 혹은 21로 값조정
            byte[] pDataRandom = Convert.FromBase64String(strRandomKey);
            if (pDataRandom.Length > 21)
            {
                byte[] pByteTmp = new byte[20];
                System.Buffer.BlockCopy(pDataRandom, 0, pByteTmp, 0, 20);
                pDataRandom = pByteTmp;
            }

            byte[] pSignedData = null;

            //pSignedData.hsClear();
            // string strSignedData = "";

            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);
            strLog = "SESSIONKEY: " + strSessionKey;
            CLog.Information(strLog);
            strLog = "RANDOM: " + strRandomKey;
            CLog.Information(strLog);

            // ref pSignedData
            if (sgGpkiLib.GetGpkiSignedData(objUserSelectedGpki, ref pDataRandom, ref pSignedData) == false)
            {
                CLog.Information("sgGpkiLib.GetGpkiSignedData error : 서명된 인증 데이티 가져오기 실패.");
                ShowMessage("error", XmlConf.GetErrMsg("E_0229"));
                bGpkiBtnDisable = false;
                StateHasChanged();
                return;
            }

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);
            strLog = "SESSIONKEY: " + strSessionKey;
            CLog.Information(strLog);
            strLog = "RANDOM: " + strRandomKey;
            CLog.Information(strLog);

            HsCmdCenter.SendSVRGPKICert(groupID, objUserSelectedGpki.m_strUserID, strSessionKey, pSignedData);

        }




    }


    /// <summary>
    /// 인증서로 알아낸 사용자ID로 로그인 진행
    /// </summary>
    /// <param name="strID"></param>
    /// <returns></returns>
    public bool Login_GPKI(string strID)
    {

        try
        {
            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;
                //strConfirmID = AppConfigSvc.GetSWCommitId();
                //strCurCliVersion = "OpenNetLink " + strCurCliVersion + "+" + strConfirmID;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
                //strCurCliVersion = strCurCliVersion + ":" + "debian";
            }

            if (strCurCliVersion.Equals(""))
                return false;

            HsCmdCenter.SetCliVersion(strCurCliVersion);

            CLog.Here().Information("Login Platform  : {0}", strPlatform);
            CLog.Here().Information("Login strCurCliVersion {0}", strCurCliVersion);
            if (nGroupID > 0)
                HsCmdCenter.LoginGpki(nGroupID, strID, strCurCliVersion);
            //HSCmdCenter.Login(0, id, pw, "NetLink 2.01");
        }
        catch (Exception ex)
        {
            //Debug.WriteLine(ex.Message);
            string strMsg = "Login_Gpki - Exception : ";
            strMsg += ex.Message;
            CLog.Information(strMsg);
        }


        return true;
    }


    /// <summary>
    /// GPKI Cert 인증 결과 확인 / 처리
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKICertResult(int groupID)
    {

        CLog.Information("$GPKI_CERT_ACK - Result!!");


        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(nGroupID);
        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strUserID = tmpData.GetBasicTagData("USERID");
            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);
            strLog = "USERID: " + strUserID;
            CLog.Information(strLog);


            if (strResult != "0")
            {
                bGpkiBtnDisable = false;
                ShowMessage("error", XmlConf.GetErrMsg("E_0230"));
                return;
            }

            CLog.Information("Login_GPKI - 실행!!");

            if (Login_GPKI(strUserID) == false)
            {
                bGpkiBtnDisable = false;
                CLog.Information("Login_GPKI - 인증 실패!");
                ShowMessage("error", XmlConf.GetErrMsg("E_0230") + "(1)");
                return;
            }

        }


    }


    /// <summary>
    /// GPKI Cert 인증 결과 확인 / 처리
    /// </summary>
    /// <returns></returns>
    public bool RequestGpkiCNregisterNchange()
    {
        CLog.Information("$CHANGEGPKI_CN - Request!!");

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        if (curUserID.Length < 1)
            return false;

        if (nGroupID > 0)
            HsCmdCenter.SendSVRGPKIRegChange(nGroupID, curUserID, objUserSelectedGpki.m_strUserID);
        return true;
    }


    /// <summary>
    /// GPKI Cert 인증 결과 확인 / 처리
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKIRegChangeResult(int groupID)
    {

        CLog.Information("CHANGEGPKI_CN_ACK - Result!!");


        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(groupID);
        bGpkiBtnDisable = false;

        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);


            if (strResult != "0")
            {
                ShowMessage("error", XmlConf.GetErrMsg("E_0231"));
                return;
            }

            CLog.Information("Register_GPKI - 실행!!");
            ShowMessage("info", XmlConf.GetErrMsg("E_0232"));

        }

        // 종료 처리
        closePopUp();

    }


    /// <summary>
    /// 로그인이후 처리
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void GpkiLoginResult(int groupId, PageEventArgs e)
    {

        CLog.Information("Login_Gpki Result 받음!!");

        int ret = e.result;
        if (ret == 0)
        {

            SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);

            pageService.ConnectCountAdd(groupId);
            pageService.SetConnectStatus(groupId, true);
            pageService.SetLogoutStatus(groupId, false);

            CLog.Here().Information($"groupID : {groupId} - User Do Login(gpki-popup), UrlRedirection LogIn State ReSet !!!");
            HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupId, true);

            /*if (ClientPatch(sgLoginData))
            {
                string strSvrVersion = sgLoginData.GetServClientVersion();
                refUpdate_PopUp.SetVersionText(strSvrVersion);
                refUpdate_PopUp.SetType(0);
                refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                await refUpdate_PopUp.openPopUp();
                return;
            }*/


            SGUserData sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupId);
            SGData sfmData = HsCmdCenter.GetSFMListData(groupId);
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData, sfmData);
            ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

            // CLIENT_ZIP_DEPTH 정보 가져옴
            SGQueryExtend sgQueryExtend = null;
            sgQueryExtend = new SGQueryExtend();
            if (sgQueryExtend != null)
            {
                string strQuery = sgQueryExtend.GetZipDepthSQLsystemEnv();
                HsCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);
            }

            bool bUseClipBoard = sgLoginData.GetClipboard();
            if (bUseClipBoard)
            {
                List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                    bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                    bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                    bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                    Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                }
                else
                {
                    Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKey);
                }

                // clipboard 선택전송기능 사용유무설정
                if (SGAppMgrSvc.SiteConfigInfoService.GetUseClipTypeSelectSend(groupId))
                    Window.UseClipBoardSelect(groupId);

                // ClipBoard(Type Mixed 일때) Text 우선송신 사용
                if (SGAppMgrSvc.SiteConfigInfoService.GetUseClipTypeTextFirstSend(groupId))
                    Window.UseClipFirstSendType(groupId);
            }


            DateTime dt = sgLoginData.GetSvrTimeConvert();
            pageService.SetSvrTime(groupId, dt, sgLoginData.GetAfterChkHide);
            bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
            bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
            pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
            pageService.SetAfterApprEnable(groupId, bAfterApprEnable);

            Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
            int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
            Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
            int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
            pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);


            ScreenTimeInitNotiEvent screenTimeInitEvent = HsCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
            if (screenTimeInitEvent != null)
            {
                ConfigArgs config = new ConfigArgs();
                config.ScreenTime = sgLoginData.GetSCRLimit();
                screenTimeInitEvent(groupId, config);
            }

            // 자동로그인 관련 소스 제거

            HsNetWork hsNetWork = null;
            hsNetWork = HsCmdCenter.GetConnectNetWork(groupId);
            if (hsNetWork != null)
            {
                pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());

                SGData tmpData = null;
                // tmpData = HsCmdCenter.GetSGSvrData(groupId);
                tmpData = HsCmdCenter.GetUserData(groupId);
                if (tmpData != null)
                {
                    // gpki_login때는 id 사용
                    pageService.SetCurUserPassWD(groupId, sgLoginData.GetUserID());
                }

            }

            // 이미 Navigate되어 있음

            // 초기 password 관련 소스 제거

            // password 만기 관련 소스 제거

            CtrlSideEvent ctrlSideEvent = null;
            ctrlSideEvent = HsCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
            if (ctrlSideEvent != null)
                ctrlSideEvent();

            // Move WebWindow To Tray.
            //if (SGAppMgrSvc.OpConfigInfoService.GetStartTrayMove()) Window.MoveWebWindowToTray();

            // MyNavigationManager.NavigateTo(strNavigateWithGroupID);

            Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");

            CLog.Here().Information($"Login_Gpki 인증 완료!!");

            // Login 인증 완료!
            goToPageGPKI.InvokeAsync(1);

            // 종료 처리
            closePopUp();

        }
        else
        {

            bGpkiBtnDisable = false;
            string strPopupMsg = e.strMsg;
            strPopupMsg = strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
            HsCmdCenter.SendLogOut(groupId, "");

            CLog.Here().Information($"Login_Gpki 인증 error-Msg: {strPopupMsg}");

            StateHasChanged();
        }

        bGpkiBtnDisable = false;

    }

    /// <summary>
    /// error 메세지 띄우는 함수
    /// </summary>
    /// <param name="strMsg"></param>
    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

}
