@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGGpki
@using OpenNetLinkApp.PageEvent
@using AgLogManager
@using HsNetWorkSGData;
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices


@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HsCmdCenter
@inject WebWindow Window
@inject PageStatusService pageService


<div class="modal fade" id="GPKIPopUp" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header2 modal-outline2">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-shield-alt"></i> @strGPKILogin</h5>                   <!--인증서 로그인-->
            </div>
            <div class="modal-body pt-0">
                <!-- content -->

                <div class="card-body pt-0">
                    <div class="modal-sub-title1 mb-2"> @strGPKISelInfo </div>                               <!--인증서 저장위치를 선택해 주세요.-->
                    <div class="col-md-12 p-0">

                        <button class="btn btn-outline-blue1 col-md-6 p-0 pt-3 pb-2 @(stMedia == "hard" ? "active1" : "")" @onclick="@(e=>LocationSelect("hard"))">

                            <label class="mt-80">@strHardDisk</label>                                                           <!--하드디스크-->
                        </button>

                        <button class="btn btn-outline-blue2 col-md-6 p-0 pt-3 pb-2 @(stMedia == "usb" ? "active2" : "")" @onclick="@(e=>LocationSelect("usb"))">
                            <!--  active2 -->

                            <label class="mt-80">@strMoveDisk</label>                                                         <!--이동식디스크-->
                        </button>
                    </div>
                </div>

                <div class="card-body pt-0">
                    <div class="col-md-12 p-0">
                        <div class="col-md-6 p-0 float-right">
                            <select class="form-control" id="DiskSelect" @onchange="SelectMoveDisk">
                                @foreach (string strDriveName in driveList)
                                {
                                    <option>@strDriveName</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <div class="card-body pt-0 pb-0">
                    <div class="modal-sub-title1 mb-2"> @strCertSelInfo </div>                                        <!--인증서를 선택해 주세요.-->

                    <table class="table table-head-fixed table-bordered table-hover white_pop table-responsive p-0" style="height:131px;" disabled="@bGpkiBtnDisable">
                        <colgroup>
                            <col width="120">
                            <col width="80">
                            <col width="140">
                            <col width="120">
                            <col width="80">
                        </colgroup>
                        <thead class="text-center">
                            <tr>
                                <th>@strGPKIID </th>                                                                        <!--인증서아이디-->
                                <th>@strGPKIExpireDay </th>                                                                            <!--만료일자-->
                                <th>@strGPKIUse </th>                                                                                <!--용도-->
                                <th>@strGPKIBescheiniger </th>                                <!--발급자-->
                                <th>등록여부</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (GPKIFileInfo item in listViewGpkiFileList)
                            {
                                <tr style="cursor:pointer;" class="@item.m_selected" @onclick="@(e => selectGPKIItem(item.m_strUserID))">
                                    @if (item.m_nRemainDay > 0)
                                    {
                                        <td><img src="/images/gpki_icon.png" class="p-1">@item.m_strUserID</td>
                                    }
                                    else
                                    {
                                        <td><img src="/images/gpki_expired_icon.png" class="p-1">@item.m_strUserID</td>
                                    }
                                    <td>@item.m_strExpiredDate</td>
                                    <td>@item.m_strKeyUse</td>
                                    <td>@item.m_strOrg</td>
                                    <td>@(item.m_bIsRegisteredServer?"예":"아니요")</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="col-md-12 mt-3 p-0">
                        <div class="row m-0 p-0">
                            <label class=" pt-2 p-0 pr-2 ">@strGPKIPW</label>                                               <!--인증서 암호-->
                            <input type="password" class="form-control col-md-9 mb-2" id="1" placeholder="" @bind="strUserinputGPKIPW" @onkeyup="HandleKeyEvent">
                            <div style="padding-left:70px;"><i class="fas fa-star-of-life fa-xs mb-2"></i> @strInfo</div>       <!--인증서를 선택하고 암호를 입력하세요.-->
                        </div>
                    </div>

                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer">
                @if (Mode == "1")
                {
                    <button @onclick="RegisterGpki" type="button" class="btn btn-md btn-navy mr-0" disabled="@bGpkiBtnDisable"><i class="fas fa-file-upload"></i>@strGPKIReg</button> <!--인증서 등록-->
                }
                <button @onclick="identifyGPki" type="button" class="btn btn-md btn-blue mr-0" disabled="@bGpkiBtnDisable"><i class="fas fa-check"></i>@strGPKIOK</button>
                <button @onclick="closePopUp" type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>@strGPKICancle</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    [Parameter]
    public string Mode { get; set; } //1:로그인 모드 2: 인증서 등록모드

    private string stMedia = "hard";
    //private List<GPKIMedia> listMedia = new List<GPKIMedia>();
    private List<GPKIFileInfo> listViewGpkiFileList = new List<GPKIFileInfo>();

    public bool bGetResponseGpkiCNatServer = false;         // 서버에서 gpki 파일들 등록되었는지 유무 response를 받았는지 유무

    public bool bIsGpkiCNatServer = false;                  // 목록에 gpki 파일들중 하나라도 서버에 등록되어 있는지 유무

    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGSiteConfigService siteConfig;
    ISGNetworkService NetWorkSvc;

    public string strGPKILogin = "";
    public string strGPKISelInfo = "";
    public string strHardDisk = "";
    public string strMoveDisk = "";
    public string strCertSelInfo = "";
    public string strGPKIID = "";
    public string strGPKIExpireDay = "";
    public string strGPKIUse = "";
    public string strGPKIBescheiniger = "";
    public string strGPKIPW = "";

    // 필요
    public string strUserinputGPKIPW = "";
    public string strUserIDbyServerGpki = "";


    public string strInfo = "";
    public string strGPKIReg = "";
    public string strGPKIOK = "";
    public string strGPKICancle = "";
    public string strUserID = "";                    // 사용자가 직접입력한 UserID : 등록 작업할때 사용

    public bool bUIGpkiRegMode = true;              // true : 등록모드, false : 인증서 인증모드

    // 필요
    public bool bGpkiBtnDisable;                        // true : 사용못함, false : 사용함, 버튼 사용 disable 유무 설정

    public string strCurSelDriveName = "";

    public GPKIFileInfo objUserSelectedGpki;

    public List<string> driveList = new List<string>();

    SGGpkiLib sgGpkiLib = new SGGpkiLib();

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<LogIn_GPKI>();

    /**
    *@brief
    *@param e
    */
    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            identifyGPki();
        }
    }

    /**
    *@brief
    *@param userId
    */
    private void selectGPKIItem(string userId)
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            if (item.m_strUserID == userId)
            {
                item.m_selected = "select-row";
                UserSelectItem(item);
            }
            else
                item.m_selected = "";
        }
        StateHasChanged();
    }

    /**
    *@brief
    */
    private void selectGPKIItemClean()
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            item.m_selected = "";
        }

        objUserSelectedGpki = null;

        StateHasChanged();
    }

    /**
    *@brief
    *@param strType
    *@param strMsg
    */
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /*
    *@brief
    *@param strSelectGpki
    */
    private void UserSelectItem(GPKIFileInfo strSelectGpki)
    {
        objUserSelectedGpki = strSelectGpki;
    }

    /**
    *@brief
    */
    public async Task openPopUp()
    {
        object[] param = { "GPKIPopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    /**
    *@brief
    */
    public void closePopUp()
    {

        bGpkiBtnDisable = false;

        sgGpkiLib.GPKI_Finish();
        object[] param = { "GPKIPopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    /**
    *@brief
    */
    public bool GPkiFiltering(bool bCheckPassWord = true, bool bCheckGetResponse = true, bool bCheckDriveAllReg = true, bool bCheckSelectRegistered = true)
    {

        // 인증서 선택 실패
        if (objUserSelectedGpki == null)
        {
            // 인증서를 선택하고 암호를 입력하세요
            CLog.Information("인증 실패 : 인증서를 선택하지 않고 시도!");
            ShowMessage("error", strInfo);
            return false;
        }

        string strReason = "";

        // 인증서 passWord 검증동작 실패 - KKW(임시제거) - 나중에 사용함
        if (bCheckPassWord && sgGpkiLib.IsValiedGPKIFile(objUserSelectedGpki, strUserinputGPKIPW, ref strReason) == false)
        {
            CLog.Information("인증 실패 : 인증서 패스워드 틀림!");
            ShowMessage("error", strReason);
            return false;
        }

        // 인증서 등록유무 서버에서 아직 결과값 받지 못했음.
        if (bCheckGetResponse && bGetResponseGpkiCNatServer == false)
        {
            CLog.Information("인증 실패 : 인증서가 서버에 등록됐는지 유무 결과를 받지 못했음!");
            ShowMessage("error", "인증서 등록유무를 알수 없습니다. 잠시후 다시 시도하세요.");
            return false;
        }


        // 등록확인.1
        if (bCheckDriveAllReg && bIsGpkiCNatServer == false)
        {
            CLog.Information("인증 실패 : 해당 드라이브의 모든 인증서가 등록되어 있지 않음!");
            ShowMessage("error", "등록된 인증서가 없습니다.");
            return false;
        }


        // 등록확인.2
        if (bCheckSelectRegistered && objUserSelectedGpki.m_bIsRegisteredServer == false)
        {
            CLog.Information("인증 실패 : 선택된 인증서는 서버에 등록되어 있지 않음!");
            ShowMessage("error", "선택된 인증서는 등록되어 있지 않습니다.");
            return false;
        }
        else if (bCheckSelectRegistered == false && objUserSelectedGpki.m_bIsRegisteredServer)
        {
            CLog.Information("등록 실패 : 선택된 인증서는 서버에 이미 등록되어 있음!");
            ShowMessage("error", "선택된 인증서는 이미 등록되어 있습니다.");
            return false;
        }

        return true;
    }


    /**
    *@brief 인증서로 알아낸 사용자ID로 로그인 진행
    */
    public bool Login_GPKI(string strID)
    {

        try
        {
            ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (AppConfigSvc != null)
            {
                strCurCliVersion = AppConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;
                //strConfirmID = AppConfigSvc.GetSWCommitId();
                //strCurCliVersion = "OpenNetLink " + strCurCliVersion + "+" + strConfirmID;

                strPlatform = AppConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
                //strCurCliVersion = strCurCliVersion + ":" + "debian";
            }

            if (strCurCliVersion.Equals(""))
                return false;

            HsCmdCenter.SetCliVersion(strCurCliVersion);

            CLog.Here().Information("Login Platform  : {0}", strPlatform);
            CLog.Here().Information("Login strCurCliVersion {0}", strCurCliVersion);
            HsCmdCenter.LoginGpki(0, strID, strCurCliVersion);
            //HSCmdCenter.Login(0, id, pw, "NetLink 2.01");
        }
        catch (Exception ex)
        {
            //Debug.WriteLine(ex.Message);
            string strMsg = "Login_Gpki - Exception : ";
            strMsg += ex.Message;
            CLog.Information(strMsg);
        }


        return true;
    }

    /**
    *@brief
    */
    public void identifyGPki()
    {

        if (GPkiFiltering() == false)
            return;


        // RandomKey 요청
        HsCmdCenter.SendSVRGPKIRandomKey(0, objUserSelectedGpki.m_strUserID);


        bGpkiBtnDisable = true;

        ShowMessage("error", "해당 인증서는 등록되어 있습니다 - OOO");

    }

    /**
    *@brief
    */
    public void RegisterGpki()
    {

        // string strReason = "";
        if (bUIGpkiRegMode)
        {

            // 등록 창으로 떴을때

            // 임시로 이 설정 사용
            if (GPkiFiltering(false, true, false, false) == false)
                return;

            bGpkiBtnDisable = true;

            if (objUserSelectedGpki.m_strUserID.Length < 1)
            {
                CLog.Information("해당 파일의 Gpki cn을 알 수 없습니다!");
                ShowMessage("error", "사용자.(RESULT : 2)");
                return;
            }

            // 먼저 입력된 data에서 얻은 사용자정보
            if (RequestGpkiCNregisterNchange(0))
            {
                CLog.Information("Gpki 인증서 등록을 진행합니다!");
                ShowMessage("info", "인증서 등록을 서버에 요청했습니다.");
            }



        }
        else
        {

            // Login 인증모드 창으로 떴을때



            // 종료 처리
            closePopUp();
        }

    }



    /**
    *@brief
    */
    protected override void OnInitialized()
    {
        sgGpkiLib.GPKI_Init();
        InitDriveList();
        InitText();
        HsCmdCenter.sgPageEvent.SetSvrGPKIEventAdd(0, GPKIInfoResult);              // gpki 등록여부 확인
        HsCmdCenter.sgPageEvent.SetSvrGPKIRandomEventAdd(0, GPKIRandomKeyResult);   // gpki Random Key 요청
        HsCmdCenter.sgPageEvent.SetSvrGPKICertEventAdd(0, GPKICertResult);          // gpki 인증 결과 확인
        HsCmdCenter.sgPageEvent.SetSvrGPKIRegEventAdd(0, GPKIRegChangeResult);          // gpki 등록요청 결과 확인
        HsCmdCenter.sgPageEvent.SetLoginEventAdd(0, LoginResult);

        LocationSelect("hard");
        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;

        CLog.Information("Login_Gpki - OnInitialized!");
    }

    /**
    *@brief
    */
    public void InitDriveList()
    {
        driveList.Clear();

        string strOSDrive = Path.GetPathRoot(Environment.SystemDirectory);
        var dList = DriveInfo.GetDrives();
        foreach (DriveInfo drive in dList)
        {
            if (drive.Name.Equals(strOSDrive))
                continue;
            driveList.Add(drive.Name.Substring(0, drive.Name.Length - 1));
        }

        if (driveList.Count > 0)
            strCurSelDriveName = driveList[0];
    }

    /**
    *@brief GPKI CN이 등록되어 있는지 확인한다.
    */
    public bool GetRegisteredGpkiCNdata()
    {

        if (listViewGpkiFileList.Count > 0)
        {

            string strGpkiCnRegisterFind = "";

            foreach (GPKIFileInfo item in listViewGpkiFileList)
            {
                if (item.m_strUserID.Length > 0)
                {
                    strGpkiCnRegisterFind += item.m_strUserID;
                    strGpkiCnRegisterFind += "\x2";
                }
            }

            //HSCmdCenter.SendSVRGPKIRegInfo(0, "619유강희001\x2031이재혁002\x2");
            //031이재혁002031이창협001619유강희001999드림시큐리티001
            bGetResponseGpkiCNatServer = false;
            bIsGpkiCNatServer = false;
            HsCmdCenter.SendSVRGPKIRegInfo(0, strGpkiCnRegisterFind);


            return true;
        }

        return false;
    }

    /**
    *@brief
    */
    public void InitGPKIHardDiskFileList()
    {
        sgGpkiLib.LoadHardDiskGPKICertWithKeyFile();
        sgGpkiLib.RequestGPKILocalCNStatus();

        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Information("HardDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }

    /**
    *@brief
    */
    public void InitGPKIMoveDiskFileList()
    {
        sgGpkiLib.LoadMoveDiskGPKICertWithKeyFile(strCurSelDriveName);
        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Information("MoveDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }

    /**
    *@brief
    *@param e
    */
    public void SelectMoveDisk(ChangeEventArgs e)
    {
        strCurSelDriveName = e.Value.ToString();

        selectGPKIItemClean();

        LocationSelect("usb");
    }

    /**
    *@brief Drive 선택
    *@param media 선택된 드라이브 종류
    */
    private void LocationSelect(string media)
    {
        stMedia = media;

        selectGPKIItemClean();

        listViewGpkiFileList.Clear();
        if (stMedia == "hard")
        {
            InitGPKIHardDiskFileList();
        }
        else if (stMedia == "usb")
        {
            InitGPKIMoveDiskFileList();
        }

        StateHasChanged();
    }

    /*
    public class GPKIMedia
    {
        public GPKIMedia(string id, string expired, string usage, string pub)
        {
            Id = id;
            Expird = DateTime.ParseExact(expired, "yyyy/MM/dd", null);
            Usage = usage;
            Publisher = pub;
        }
        public GPKIMedia()
        {
            Id = Usage = Publisher = "";
            Expird = DateTime.Now;
        }
        public string Id { get; set; }
        public DateTime Expird { get; set; }
        public string Usage { get; set; }
        public string Publisher { get; set; }
    }
    */

    public void InitText()
    {
        strGPKILogin = XmlConf.GetTitle("T_ETC_GPKILOGIN");             // 인증서 로그인
        strGPKISelInfo = XmlConf.GetInfoMsg("I_0187");                  // 인증서 저장위치를 선택해 주세요.
        strHardDisk = XmlConf.GetTitle("T_COMMON_DRIVEFIXED");          // 하드디스크
        strMoveDisk = XmlConf.GetTitle("T_COMMON_DRIVEREMOVABLE");      // 이동식디스크
        strCertSelInfo = XmlConf.GetInfoMsg("I_0188");                  // 인증서를 선택해 주세요.
        strGPKIID = XmlConf.GetTitle("T_GPKI_LIST_ID");                 // 인증서아이디
        strGPKIExpireDay = XmlConf.GetTitle("T_GPKI_LIST_EXPIREDATE");  // 만료일자
        strGPKIUse = XmlConf.GetTitle("T_GPKI_LIST_USE");               // 용도
        strGPKIBescheiniger = XmlConf.GetTitle("T_GPKI_LIST_ISSUER");   // 발급자
        strGPKIPW = XmlConf.GetTitle("T_GPKI_CERT_PASSWD");             // 인증서 암호
        strInfo = XmlConf.GetInfoMsg("I_0124");                         // 인증서를 선택하고 암호를 입력하세요.
        strGPKIReg = XmlConf.GetTitle("T_GPKI_CERT_REGISTER");          // 인증서 등록
        strGPKIOK = XmlConf.GetTitle("T_COMMON_OK");                    // 확인
        strGPKICancle = XmlConf.GetTitle("T_COMMON_CANCEL");            // 취소
    }

    /**
    *@brief
    *@param
    */
    public void GPKIInfoResult(int groupID)
    {

        bIsGpkiCNatServer = false;
        bGetResponseGpkiCNatServer = true;

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGSvrData(0);
        if (tmpData != null)
        {

            string strGpkiCN = tmpData.GetBasicTagData("GPKI_CN");

            if (strGpkiCN.Length > 0)
            {

                // ex)
                // strGpkiCN = "031이재혁002\x20\x1619유강희001\x21\x1";

                string[] words = strGpkiCN.Split('\x1');


                foreach (string strWordOne in words)
                {

                    string[] strCNreg = strWordOne.Split('\x2');
                    if (strCNreg.Length == 2 && Convert.ToInt32(strCNreg[1]) > 0)
                    {

                        foreach (GPKIFileInfo item in listViewGpkiFileList)
                        {
                            if (item.m_strUserID == strCNreg[0])
                            {
                                item.m_bIsRegisteredServer = true;
                                bIsGpkiCNatServer = true;
                            }
                        }
                    }
                }

            }// if (strGpkiCN.Length > 0)

            StateHasChanged();
        }

    } // public void GPKIInfoResult(int groupID)


    /**
    *@brief 로그인이후 화면처리
    *@param
    */
    public void LoginResult(int groupId, PageEventArgs e)
    {

        CLog.Information("Login_Gpki - LoginResult - 실행!!");

        int ret = e.result;
        if (ret == 0)
        {
            //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.");
            SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);

            pageService.ConnectCountAdd(groupId);
            pageService.SetConnectStatus(groupId, true);
            pageService.SetLogoutStatus(groupId, false);

            /*if (ClientPatch(sgLoginData))
            {
                string strSvrVersion = sgLoginData.GetServClientVersion();
                refUpdate_PopUp.SetVersionText(strSvrVersion);
                refUpdate_PopUp.SetType(0);
                refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                await refUpdate_PopUp.openPopUp();
                return;
            }*/


            SGUserData sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupId);
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData);
            InitSideMenu(groupId);
            // MyNavigationManager.NavigateTo("/Welcome");
            ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

            bool bUseClipBoard = sgLoginData.GetClipboard();
            if (bUseClipBoard)
            {
                List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                    bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                    bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                    bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                    Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                }


                else
                {
                    Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKey);
                }
            }


            DateTime dt = sgLoginData.GetSvrTimeConvert();
            pageService.SetSvrTime(groupId, dt);
            bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
            bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
            pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
            pageService.SetAfterApprEnable(groupId, bAfterApprEnable);

            Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
            int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
            Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
            int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
            pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);


            ScreenTimeInitNotiEvent screenTimeInitEvent = HsCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
            if (screenTimeInitEvent != null)
            {
                ConfigArgs config = new ConfigArgs();
                config.ScreenTime = sgLoginData.GetSCRLimit();
                screenTimeInitEvent(groupId, config);
            }

            // 자동로그인 관련 소스 제거

            HsNetWork hsNetWork = null;
            hsNetWork = HsCmdCenter.GetConnectNetWork(groupId);
            if (hsNetWork != null)
            {
                pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
                pageService.SetCurUserPassWD(groupId, strUserIDbyServerGpki);

            }

            // 초기 password 관련 소스 제거

            // password 만기 관련 소스 제거
            {
                if (siteConfig.GetUseDashBoard())
                    MyNavigationManager.NavigateTo("/Welcome");
                else
                    MyNavigationManager.NavigateTo("/Transfer");
                if (AppConfigSvc.GetStartTrayMove())
                {
                    if (pageService.GetConnectCount(groupId) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                    {
                        string strTitle = XmlConf.GetTitle("T_ETC_TRAYMOVE");                                                   // 트레이 이동.
                        string strInfoMsg = XmlConf.GetInfoMsg("I_0051");                                                       // 트레이 아이콘으로 이동합니다.
                        Window.Notification(OS_NOTI.ONLINE, strTitle, strInfoMsg);
                        Window.MoveWebWindowToTray();
                    }
                    else
                        Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");
                }
                else
                {
                    Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.", "");

                }

            }

            CtrlSideEvent ctrlSideEvent = null;
            ctrlSideEvent = HsCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
            if (ctrlSideEvent != null)
                ctrlSideEvent();

            // Move WebWindow To Tray.
            //if (AppConfigSvc.GetStartTrayMove()) Window.MoveWebWindowToTray();


            MyNavigationManager.NavigateTo("/Transfer");    // Welcome - Transfer

            // 종료 처리
            closePopUp();

        }
        else
        {
            bGpkiBtnDisable = false;
            string strPopupMsg = e.strMsg;
            strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
            HsCmdCenter.SendLogOut(groupId, "");
            StateHasChanged();
        }
    }

    /**
    *@brief 로그인실패시 처리
    *@param
    */
    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /**
    *@brief 왼쪽 Side 메뉴 설정
    *@param
    */
    public void InitSideMenu(int groupid)
    {
        string strDataTrans = XmlConf.GetTitle("T_COMMON_FILETRANS_BASIC");                     // 자료전송
        string strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                           // 파일전송
        string strTransManage = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                       // 전송관리
        string strApprManage = XmlConf.GetTitle("T_COMMON_APPROVEMANAGE");                      // 결재관리
        string strSecurityApprManage = XmlConf.GetTitle("T_COMMON_APPROVESECURITY");            // 보안결재
        string strClipboard = XmlConf.GetTitle("T_COMMON_CLIPBOARD");                           // 클립보드
        string strClipboardTransManage = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                // 클립보드 관리
        string strClipboardApprManage = XmlConf.GetTitle("T_COMMON_CLIPAPPR");                  // 클립보드 결재
        string strEmail = XmlConf.GetTitle("T_COMMON_EMAIL");                                   // 메일
        string strEmailTransManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");              // 메일 관리
        string strEmailApprManage = XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP");              // 메일 결재
        string strPCURL = XmlConf.GetTitle("T_COMMON_URL");                                     // PCURL
        string strPCURLTransManage = XmlConf.GetTitle("T_COMMON_URLMANAGE");                    // PCURL 관리
        string strPCURLApprManage = XmlConf.GetTitle("T_COMMON_URLAPPROVE");                    // PCURL 결재
        string strEnvSetInfo = XmlConf.GetTitle("T_COMMON_OPTION");                             // 환경설정.
        string strNetSetInfo = XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE");                         // 접속환경
        string strBasicSetInfo = XmlConf.GetTitle("T_ETC_BASICSET_TITLE");                      // 기본설정.
        string strBoardNotiInfo = XmlConf.GetTitle("T_COMMON_NOTIFY");                          // 공지사항

        SideBarUISvc.DeleteAllItem();
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int count = listNetWork.Count;
        //count = 1;
        for (int i = 0; i < count; i++)
        {
            int gID = listNetWork[i].GroupID;
            string strNetFromName = listNetWork[i].FromName;
            string strNetToName = listNetWork[i].ToName;

            bool bExpand = false;
            bool bActived = false;
            if (groupid == gID)
            {
                bExpand = true;
                bActived = true;
            }

            SGLoginData sgLoginData = null;
            SGUserData sgUserData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(i);
            sgUserData = (SGUserData)HsCmdCenter.GetUserData(i);

            bool bFileTransMenuUse = false;
            bool bApprMenuUse = false;
            bool bSecurityApprMenuUse = false;
            bool bPCURLUse = false;
            bool bClipBoardApprUse = false;
            bool bEmailUse = false;
            bool bPublicBoard = false;
            bool bBasicConf = false;

            if ((sgLoginData != null) && (sgUserData != null))
            {
                bFileTransMenuUse = sgLoginData.GetFileTrans();
                if (sgLoginData.GetApprove() == true)
                    if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                        bApprMenuUse = true;

                bSecurityApprMenuUse = sgUserData.GetUserPrivacyApprPos();
                bPCURLUse = sgLoginData.GetPCURLUse();
            }


            string strRootPath = "/Welcome";
            if (!siteConfig.GetUseDashBoard())
                strRootPath = "/Transfer";

            bEmailUse = siteConfig.GetUseEmailApprove(groupid);
            bPCURLUse = siteConfig.GetUsePCURL(groupid);
            bClipBoardApprUse = siteConfig.GetUseClipApprove(groupid);
            bPublicBoard = siteConfig.GetUsePublicBoard(groupid);

            bool bDeputyApprove = false;
            if (sgLoginData != null)
                bDeputyApprove = sgLoginData.GetDeputyApprove();
            bool bCertSend = siteConfig.GetUseCertSend(groupid);
            bool bAutoLogin = siteConfig.GetUseAutoLogin(groupid);

            bBasicConf = (bDeputyApprove | bCertSend | bAutoLogin);

            int nParentID = 0;

            // 우선 모든 메뉴가 나오도록 임시 설정.
            //bFileTransMenuUse = bApprMenuUse = bSecurityApprMenuUse = bPCURLUse = bClipBoardApprUse = bEmailUse = bPublicBoard = true;

            SideBarUISvc.AddRoot(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: strRootPath, badgeType: "right badge badge-danger", badgeValue: "N", "", bActived, bExpand)
                .AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: bFileTransMenuUse)                                                                     // 파일전송
                .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strFileTrans, icon: "fas fa-copy", path: "/transfer", badgeType: "right badge badge-warning", bUse: bFileTransMenuUse)                                                                     // 파일전송
                .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strTransManage, icon: "fas fa-copy", path: "/transManage", badgeType: "right badge badge-warning")                                                                // 전송관리
                .AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strApprManage, icon: "fas fa-copy", path: "/transferApprove", badgeType: "right badge badge-warning", bUse: bApprMenuUse)                      // 결재관리
                .AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strSecurityApprManage, icon: "fas fa-copy", path: "/securityApprove", badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse);                          // 보안결재관리                                                 // 보안결재관리

            if (bEmailUse)
            {
                nParentID++;
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse)                                                                 // 메일 관리
                    .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailTransManage, icon: "fas fa-envelope", path: "/mailManage", badgeType: "right badge badge-warning", bUse: bEmailUse)                                                                 // 메일 관리
                    .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailApprManage, icon: "fas fa-envelope", path: "/mailApprove", badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse));                                                               // 메일 결재
            }

            if (bPCURLUse)
            {
                nParentID++;
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse)                                                       // PCURL 관리
                    .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLTransManage, icon: "fas fa-globe", path: "/pcurlManage", badgeType: "right badge badge-warning", bUse: bPCURLUse)                                                       // PCURL 관리
                    .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLApprManage, icon: "fas fa-globe", path: "/pcurlApprove", badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse));                                                       // PCURL 결재
            }

            if (bClipBoardApprUse)
            {
                nParentID++;
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bClipBoardApprUse)                                                          // 클립보드 관리
                    .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardTransManage, icon: "fas fa-object-ungroup", path: "/clipBoardManage", badgeType: "right badge badge-warning", bUse: bClipBoardApprUse)                                                          // 클립보드 관리
                    .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardApprManage, icon: "fas fa-object-ungroup", path: "/clipBoardApprove", badgeType: "right badge badge-warning", bUse: (bClipBoardApprUse & bApprMenuUse));                                                         // 클립보드 결재
            }
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: "/viewConf", badgeType: "right badge badge-warning", bUse: true)                                                                         // 접속환경
                .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBoardNotiInfo, icon: "fas fa-cog", path: "/publicBoard", badgeType: "right badge badge-warning", bUse: bPublicBoard)                                     // 공지사항
                .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: "/viewConf", badgeType: "right badge badge-warning", bUse: true)                                                              // 접속환경
                .AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBasicSetInfo, icon: "fas fa-cog", path: "/netConf", badgeType: "right badge badge-warning", bUse: bBasicConf);                                                                     // 기본설정
        }
        SideBarUISvc.EmitNotifyStateChangedActMenu();

    }


    /**
    *@brief 서버에서 RandomKey 결과값 받아 Cert 인증 요청하는 함수
    *@param
    */
    public void GPKIRandomKeyResult(int groupID)
    {

        CLog.Information("$GPKI_RANDOM_ACK - Result!!");

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(0);
        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strSessionKey = tmpData.GetBasicTagData("SESSIONKEY");
            string strRandomKey = tmpData.GetBasicTagData("RANDOM");

            if (strResult == "2")
            {
                ShowMessage("error", "해당 인증서는 등록되어 있지 않습니다.(RESULT : 2)");
                return;
            }

            // 진짜 인증서 받고는 20 혹은 21로 값조정
            byte[] pDataRandom = Convert.FromBase64String(strRandomKey);
            if (pDataRandom.Length > 21)
            {
                byte[] pByteTmp = new byte[20];
                System.Buffer.BlockCopy(pDataRandom, 0, pByteTmp, 0, 20);
                pDataRandom = pByteTmp;
            }

            byte[] pSignedData = null;

            //pSignedData.hsClear();
            // string strSignedData = "";

            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);
            strLog = "SESSIONKEY: " + strSessionKey;
            CLog.Information(strLog);
            strLog = "RANDOM: " + strRandomKey;
            CLog.Information(strLog);

            // ref pSignedData
            if (sgGpkiLib.GetGpkiSignedData(objUserSelectedGpki, ref pDataRandom, ref pSignedData) == false)
            {
                CLog.Information("sgGpkiLib.GetGpkiSignedData error : 서명된 인증 데이티 가져오기 실패.");
                ShowMessage("error", "서명된 인증 데이티 가져오기 실패.");
                bGpkiBtnDisable = false;
                StateHasChanged();
                return;
            }

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);
            strLog = "SESSIONKEY: " + strSessionKey;
            CLog.Information(strLog);
            strLog = "RANDOM: " + strRandomKey;
            CLog.Information(strLog);

            HsCmdCenter.SendSVRGPKICert(0, objUserSelectedGpki.m_strUserID, strSessionKey, pSignedData);


        }


    }


    /**
    *@brief GPKI Cert 인증 결과 확인 / 처리
    *@param
    */
    public void GPKICertResult(int groupID)
    {

        CLog.Information("$GPKI_CERT_ACK - Result!!");


        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(0);
        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strUserID = tmpData.GetBasicTagData("USERID");
            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);
            strLog = "USERID: " + strUserID;
            CLog.Information(strLog);


            if (strResult != "0")
            {
                ShowMessage("error", "인증서 인증 오류.");
                return;
            }

            CLog.Information("Login_GPKI - 실행!!");

            if (Login_GPKI(strUserID) == false)
            {
                CLog.Information("Login_GPKI - 인증 실패!");
                ShowMessage("error", "GPKI 인증 실패!");
                return;
            }

        }

        /*SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGSvrData(0);
        if (tmpData != null)
        {
            string strLog = "";
            string strResult = tmpData.GetBasicTagData("Result");
            string strReason = tmpData.GetBasicTagData("Reason");
            string strRegisteredUserID = tmpData.GetBasicTagData("USERID");

            strLog = "strResult :";
            strLog += strResult;
            CLog.Information(strLog);
            strLog = "Reason :";
            strLog += strReason;
            CLog.Information(strLog);
            strLog = "USERID :";
            strLog += strRegisteredUserID;
            CLog.Information(strLog);


            if (Login_GPKI(strRegisteredUserID) == false)
            {
                CLog.Information("인증 실패 : 인증서 패스워드 틀림!");
                ShowMessage("error", "인증 실패!");
                return;
            }
        }*/


    }


    public bool RequestGpkiCNregisterNchange(int groupID)
    {
        CLog.Information("$CHANGEGPKI_CN - Request!!");

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        if (curUserID.Length < 1)
            return false;

        HsCmdCenter.SendSVRGPKIRegChange(0, curUserID, objUserSelectedGpki.m_strUserID);
        return true;
    }

    /**
    *@brief GPKI Cert 인증 결과 확인 / 처리
    *@param
    */
    public void GPKIRegChangeResult(int groupID)
    {

        CLog.Information("CHANGEGPKI_CN_ACK - Result!!");


        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(0);
        bGpkiBtnDisable = false;

        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Information(strLog);


            if (strResult != "0")
            {
                ShowMessage("error", "인증서 등록 실패!");
                return;
            }

            CLog.Information("Register_GPKI - 실행!!");
            ShowMessage("info", "인증서 등록 완료");

        }

        // 종료 처리
        closePopUp();

    }

}
