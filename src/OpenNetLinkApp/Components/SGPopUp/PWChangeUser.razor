@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService
@using System.Diagnostics
@using System.Text.RegularExpressions
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
<div class="modal fade" id="modal-pwchangeuser" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header2 modal-outline2">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-lock-open pr-1"></i> @XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body pt-0">
                <!-- content -->
                <div class="card-body pt-0 pb-0">
                    <div class="col-md-12 mt-3 mb-3 p-0">
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NOWPASSWORD")</label>
                            <input @bind="stCurrentPW" type="password" class="pw_control col-md-8 mb-2" id="1" placeholder="">
                        </div>
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NEWPASSWORD")</label>
                            <input @bind="stNewPW" type="password" class="pw_control col-md-8 mb-2" id="1" placeholder="">
                        </div>
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NEWPASSWORDCONFIRM")</label>
                            <input @bind="stNewPWConfirm" type="password" class="pw_control col-md-8 mb-2" id="1" placeholder="">
                        </div>
                    </div>

                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer text-center">
                <button type="button" class="btn btn-md btn-navy mr-0" @onclick="doChangePW"><i class="fas fa-key"></i>@XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</button>
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="changeLater"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_COMMON_CANCEL")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    private string stCurrentPW;
    private string stNewPW;
    private string stNewPWConfirm;
    ISGSideBarUIService SideBarUISvc;
    ISGSiteConfigService siteConfig;
    SGSettingsDBProc sgSettingProc;

    public async Task openPopUp()
    {
        object[] param = { "modal-pwchangeuser" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        object[] param = { "modal-pwchangeuser" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }
    public async Task doChangePW()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strInfoMsg = "";

        //1.To Do : 사용자 비밀번호 체크 필요함(2020/08/14 YKH)
        //2.To Do : 비밀번호 복잡도 검사 필요함
        //3.비밀번호 실제 변경 요청 구현 필요
        if (stCurrentPW == null || stCurrentPW.Length == 0)
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_OLD_PASSWORD_NEEDED") };            // 기존 비밀번호를 입력하세요.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        string strCurPW = pageService.GetCurUserPassWD(groupID);
        if (!stCurrentPW.Equals(strCurPW))
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetWarnMsg("W_0044") };                     //  현재 비밀번호를 잘못 입력했습니다.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        if (stNewPW == null || stNewPW.Length == 0)
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_NEW_PASSWORD_NEEDED") };            // 새로운 비밀번호를 입력하세요.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }
        if (stNewPWConfirm == null || stNewPWConfirm.Length == 0)
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_COMFIRM_PASSWORD_NEEDED") };            // 새 비밀번호 확인을 입력하세요.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }
        if (stCurrentPW.Equals(stNewPW))
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetWarnMsg("W_0046") };         // 새로운 비밀번호가 이전 비밀번호와 같습니다.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }
        if (stNewPW != stNewPWConfirm)
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_PASSWORD_INCORRECT_FOR_NEW") };         // 새비밀번호화 비밀번호 확인이 일치하지 않습니다.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        //정규표현식을 이용한 패스워드 복잡도 체크
        int MaxLen = siteConfig.GetPWChangeApplyCnt(groupID);

        if (stNewPW.Length < MaxLen)                         //길이체크
        {
            strInfoMsg = XmlConf.GetWarnMsg("W_0045");                                              // 비밀번호는 {0}자리 이상 입력해야 합니다.
            strInfoMsg = String.Format(strInfoMsg, MaxLen);
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg };
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }
        Regex regex = new Regex(@"^.*([ ]+).*$");       //공백체크
        if (regex.IsMatch(stNewPW))
        {
            object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_PASSWORD_BLANK_ERROR") };               // 패스워드는 공백을 포함할 수 없습니다.
            await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }
        int nComplexCnt = 0;
        Regex regex2 = new Regex(@"^.*([A-Z]+).*$");    //대문자 존재 체크
        if (regex2.IsMatch(stNewPW))
            nComplexCnt++;
        Regex regex3 = new Regex(@"^.*([a-z]+).*$");    //소문자 존재 체크
        if (regex3.IsMatch(stNewPW))
            nComplexCnt++;
        Regex regex4 = new Regex(@"^.*([0-9]+).*$");    //숫자 존재 체크
        if (regex4.IsMatch(stNewPW))
            nComplexCnt++;
        Regex regex5 = new Regex(@"^.*([^A-Za-z0-9]+).*$");    //특수문자 존재 체크
        if (regex5.IsMatch(stNewPW))
            nComplexCnt++;

        bool bComplexCheck = false;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {
            bComplexCheck = sgLoginData.GetPasswordRule();                      // 복잡도 확인 설정 여부를 확인한다.
        }
        if (bComplexCheck)
        {
            if (nComplexCnt < 3)
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_GUIDE_INFO");                             // 비밀번호를 영문 대문자/소문자/숫자/특수문자 중 3가지 이상을 조합하여 9자리 이상으로 입력하세요.(스페이스 사용 불가).
                strInfoMsg = String.Format(strInfoMsg, MaxLen);
                object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg };
                await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }
        }
        //Debug.WriteLine("PW:" + stCurrentPW);
        //Debug.WriteLine("new PW:" + stNewPW);
        //Debug.WriteLine("confirm PW:" + stNewPWConfirm);
        //closePopUp();
        string strUserID = sgLoginData.GetUserID();
        HSCmdCenter.SendChangePasswd(groupID, strUserID, stCurrentPW, stNewPW);
    }
    public void changeLater()
    {
        closePopUp();
    }
    public void tweWeeksLater()
    {
        closePopUp();
    }

    protected override void OnInitialized()
    {

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        sgSettingProc = SGSettingsDBProc.Instance;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        pageService.SetUserPassWDCHGEvent(groupID, UserPassWordChangeNoti);

    }

    public void UserPassWordChangeNoti(int groupID, PageEventArgs e)
    {
        closePopUp();
        string strMsg = "";
        if (e.result != 0)
        {
            return;
        }
        strMsg = XmlConf.GetInfoMsg("I_0011");              // 비밀번호가 변경되었습니다.
        ShowMessage("info", strMsg);
        pageService.SetCurUserPassWD(groupID, stNewPW);
        HSCmdCenter.SetPassWord(groupID, stNewPW);
        if (siteConfig.GetUseAutoLogin(groupID) == true)
        {
            SGRSACrypto sgRSACrypto = new SGRSACrypto();
            string strEncPW = "";
            sgRSACrypto?.ValueEncrypt(stNewPW, out strEncPW);
            SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupID);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);    // groupID

            sgSettingProc.SetSettingUPW(groupID, strEncPW);
        }
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void Init()
    {
        stCurrentPW = stNewPW = stNewPWConfirm = "";
        StateHasChanged();
    }
}