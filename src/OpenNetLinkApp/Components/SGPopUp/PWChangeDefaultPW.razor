@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager
@inject WebWindow Window
@using System.Diagnostics
@using System.Text.RegularExpressions
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Common
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using AgLogManager

<div class="modal fade" id=@Guid data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header2 modal-outline2">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-lock-open pr-1"></i> @XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</h5>
                <!--<button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>-->
            </div>
            <div class="modal-body pt-0">
                <!-- content -->
                <div class="card-body pt-0 pb-0">
                    <div class="pw_title pt-3 pb-3">@strInfo1<br />@strInfo2</div>

                    <div class="col-md-12 mt-3 mb-3 p-0">
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NOWPASSWORD")</label>
                            <input @bind="stCurrentPW" type="password" class="pw_control col-md-8 mb-2" id="1" placeholder="">
                        </div>
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NEWPASSWORD")</label>
                            <input @bind="stNewPW" type="password" class="pw_control col-md-8 mb-2" id="1" placeholder="">
                        </div>
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NEWPASSWORDCONFIRM")</label>
                            <input @bind="stNewPWConfirm" type="password" class="pw_control col-md-8 mb-2" id="1" placeholder="">
                        </div>
                    </div>

                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer text-center">
                <button type="button" class="btn btn-md btn-navy mr-0" @onclick="doChangePW"><i class="fas fa-key"></i>@XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {

    [Parameter]
    public EventCallback<int> goToPagePWInitAfter { get; set; }

    [Parameter]
    public string Guid { get; set; }

    [Parameter]
    public int basicPageType { get; set; }

    public eLoginType eLoginProcessType = eLoginType.eLOGINTYPE_ORIGIN;    // 어떤 로그인 진행과정에 뜨는 비번변경 창인지저장

    public int nGroupID = -1;                // 현재 사용할 GroupID
    private string stCurrentPW;
    private string stNewPW;
    private string stNewPWConfirm;
    ISGSideBarUIService SideBarUISvc;
    public string strInfo1 = "";
    public string strInfo2 = "";
    ISGAppConfigService AppConfigSvc;
    SGSettingsDBProc sgSettingProc;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<PWChangeDefaultPW>();

    CsPasswdValidCheckfunc objCheckPWstring = new CsPasswdValidCheckfunc();


    //[Parameter]
    //public EventCallback<int> goToPage { get; set; }

    public async Task openPopUp()
    {
        object[] param = { Guid };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        if (basicPageType == (int)Enums.EnumBasicPageType.SideBar)
        {
            if (eLoginProcessType == eLoginType.eLOGINTYPE_GPKI)
            {
                goToPagePWInitAfter.InvokeAsync((int)eLoginProcessType);
            }
        }

        object[] param = { Guid };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public async Task doChangePW()
    {
        //1.To Do : 사용자 비밀번호 체크 필요함(2020/08/14 YKH)
        //2.To Do : 비밀번호 복잡도 검사 필요함
        //3.비밀번호 실제 변경 요청 구현 필요

        if (nGroupID < 0) return;

        int groupID = nGroupID;
        string strInfoMsg = "";

        pageService.SetInitPassWDCHGEvent(groupID, InitPassWordChangeNoti);

        //1.To Do : 사용자 비밀번호 체크 필요함(2020/08/14 YKH)
        //2.To Do : 비밀번호 복잡도 검사 필요함
        //3.비밀번호 실제 변경 요청 구현 필요
        if (stCurrentPW == null || stCurrentPW.Length == 0)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_OLD_PASSWORD_NEEDED"); //  기존 비밀번호를 입력하세요.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, Now PW is empty, Msg : {strInfoMsg}");
            // object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_OLD_PASSWORD_NEEDED") };            // 기존 비밀번호를 입력하세요.
            // await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        string strCurPW = pageService.GetCurUserPassWD(groupID);
        if (!stCurrentPW.Equals(strCurPW))
        {
            strInfoMsg = XmlConf.GetWarnMsg("W_0044"); //  현재 비밀번호를 잘못 입력했습니다.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, incorrect PW, Msg : {strInfoMsg}");
            //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetWarnMsg("W_0044") };                     //  현재 비밀번호를 잘못 입력했습니다.
            //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        if (stNewPW == null || stNewPW.Length == 0)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_NEW_PASSWORD_NEEDED"); // 새 비밀번호을 입력하세요.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW is empty, Msg : {strInfoMsg}");
            // object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_NEW_PASSWORD_NEEDED") };            // 새로운 비밀번호를 입력하세요.
            // await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        if (stNewPWConfirm == null || stNewPWConfirm.Length == 0)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_COMFIRM_PASSWORD_NEEDED"); // 새 비밀번호 확인을 입력하세요.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW confirm is empty, Msg : {strInfoMsg}");
            //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_COMFIRM_PASSWORD_NEEDED") };
            //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        // "T_ETC_PASSWORD_NOW_PW"
        if (strCurPW.Equals(stNewPW))
        {
            strInfoMsg = XmlConf.GetWarnMsg("W_0046");  // 새로운 비밀번호가 이전 비밀번호와 같습니다.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW is equre  Now PW, Msg : {strInfoMsg}");
            //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetWarnMsg("W_0046") };
            //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        if (stNewPW != stNewPWConfirm)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_INCORRECT_FOR_NEW");
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW is not equre  New-PW-Confirm, Msg : {strInfoMsg}");
            //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"),  };         // 새비밀번호화 비밀번호 확인이 일치하지 않습니다.
            //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        // 비밀번호 최소 자리수
        int MaxLen = SGAppMgrSvc.OpConfigInfoService.GetPWChangeApplyCnt(groupID);

        if (stNewPW.Length < MaxLen)                         //길이체크
        {
            strInfoMsg = XmlConf.GetWarnMsg("W_0045");                                              // 비밀번호는 {0}자리 이상 입력해야 합니다.
            strInfoMsg = String.Format(strInfoMsg, MaxLen);
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, PW's Length is less {MaxLen}, Msg : {strInfoMsg}");
            //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg };
            //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        // 공백문자 불허(우리규칙)
        if (objCheckPWstring.GetEmptyString(stNewPW))
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_BLANK_ERROR");
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, PW have Empty String, Msg : {strInfoMsg}");
            //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_PASSWORD_BLANK_ERROR") };               // 패스워드는 공백을 포함할 수 없습니다.
            //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
            return;
        }

        bool bComplexCheck = false;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {
            bComplexCheck = sgLoginData.GetPasswordRule();                      // 복잡도 확인 설정 여부를 확인한다.
        }

        string strUserID = sgLoginData.GetUserID();
        // 보안기능 확인서에서 요구한 사항 적용
        if (bComplexCheck)
        {

            // 사용자ID인지 check
            if (string.Compare(strUserID, stNewPW) == 0)
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_NO_ID");
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"doChangePW, PW Change Err, PW is UserID, Msg : {strInfoMsg}");
                //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_PASSWORD_NO_ID") };               // 패스워드는 공백을 포함할 수 없습니다.
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }

            // 현재PW인지 check
            if (string.Compare(strCurPW, stNewPW) == 0)
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_NOW_PW");
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"doChangePW, PW Change Err, New PW is equre Now PW, Msg : {strInfoMsg}");
                //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), XmlConf.GetTitle("T_ETC_PASSWORD_NOW_PW") };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }

            // 동일한 문자·숫자의 연속적인 반복입력 금지
            if (objCheckPWstring.GetSameCharCheck(stNewPW, SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID)))
            {

                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_SAMECHAR_MSG"); // 연속된 문자는 {0}자리까지만 입력이 가능합니다.
                strInfoMsg = String.Format(strInfoMsg, SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID)-1);
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"doChangePW, PW Change Err, SameCharCount : {SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID)}, Msg : {strInfoMsg}");
                //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }

            // 키보드상의 연속된 문자 또는 숫자의 순차적 입력금지
            if (objCheckPWstring.GetKeyBoardContinuousWord(stNewPW, SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID)))
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_KEYBOARD_LINEAR_MSG"); // 키보드상의 연속된 문자는 {0}개 이상 사용할 수 없습니다.
                strInfoMsg = String.Format(strInfoMsg, SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID));
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"doChangePW, PW Change Err, KeyBoardLinearChar-Count : {SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID)}, Msg : {strInfoMsg}");
                //object[] param = { "waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }

            // 숫자, 대문자(영문), 소문자(영문), 특수문자가 각 1개 이상 포함
            if (objCheckPWstring.GetComplexCnt(stNewPW) < SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID))
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_GUIDE_INFO_EX1");     // 비밀번호를 영문 대문자/소문자/숫자/특수문자 중 {0}가지 이상을 조합하여 {1}자리 이상으로 입력하세요.(스페이스 사용 불가).
                strInfoMsg = String.Format(strInfoMsg, SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID), MaxLen);
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"doChangePW, PW Change Err, Rule-Count : {SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID)}, Msg : {strInfoMsg}");
                //object[] param = { "waring", , strInfoMsg };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }

            // 직전 사용된 패스워드 재사용 금지 - Server의 결과값으로만 알수 있음
	    
        }

        //Debug.WriteLine("PW:" + stCurrentPW);
        //Debug.WriteLine("new PW:" + stNewPW);
        //Debug.WriteLine("confirm PW:" + stNewPWConfirm);
        //closePopUp();

        if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
        {
            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            foreach(ISGNetwork Net in listNetWork)
            {
                if (pageService.GetConnectStatus(Net.GroupID))
                {
                    HSCmdCenter.SendChangePasswd(Net.GroupID, strUserID, stCurrentPW, stNewPW);
                }
            }
        }
        else
        {
            HSCmdCenter.SendChangePasswd(groupID, strUserID, stCurrentPW, stNewPW);
        }

    }

    /// <summary>
    /// 다중망 1번에 동시로그인일때에 왼쪽SideBar가 nGroupID로 선택되게 동작
    /// </summary>
    public void MoveSiderBarFocusTogroupid()
    {

        if (nGroupID < 0) return;

        // 로그인한 groupID 선택되게 적용
        if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
        {
            foreach (var MenuItem in SideBarUISvc.MenuList)
            {
                if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == nGroupID))
                {
                    KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                    eventArgs.Key = "Enter";
                    //SideBarUISvc.ActiveMenu = MenuItem;

                    MenuItem.Expanded = false;  // 반대값을 넣어야 반전되며 펼저짐
                    pageService.m_nCurViewPageGroupID = MenuItem.GroupId;
                    SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem);
                    CLog.Here().Information($"1 to ALL Login, GroupID : {nGroupID}, SideBarUI(#######) Select / Expand  !");
                    break;
                }
            }
        }
    }


    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        sgSettingProc = SGSettingsDBProc.Instance;

        InitText();
    }


    public void InitPassWordChangeNoti(int groupID, PageEventArgs e)
    {

        // Test 필요
        if (e.result != 0)
        {

            string strMsgData = "";

            if (e.result == 2)
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_USED"); // 이전 사용된 비밀번호는 사용할 수 없습니다.
            else if (e.result == 3)
            {
                int MaxLen = SGAppMgrSvc.OpConfigInfoService.GetPWChangeApplyCnt(groupID);
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_LENGTH_MSG"); // 비밀번호는 {0}자리 이상 입력해야 합니다.
                strMsgData = String.Format(strMsgData, MaxLen);
            }
            else if (e.result == 5)
            {
                // 자리수에 대해 Server와의 interface 생기면 수정필요
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_SAMECHAR_MSG"); // 연속된 문자는 {0}자리까지만 입력이 가능합니다.
                strMsgData = String.Format(strMsgData, SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID)-1);
            }
            else if (e.result == 4 || e.result == 6)
            {
                // 자리수에 대해 Server와의 interface 생기면 수정필요
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_GUIDE_INFO_EX1"); // 비밀번호를 영문 대문자/소문자/숫자/특수문자 중 {0}가지 이상을 조합하여 {1}자리 이상으로 입력하세요.(스페이스 사용 불가).
                strMsgData = String.Format(strMsgData,
                    SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID),
                    SGAppMgrSvc.OpConfigInfoService.GetPWChangeApplyCnt(groupID));
            }
            else if (e.result == 7)
            {
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_KEYBOARD_LINEAR_MSG"); // 키보드상의 연속된 문자는 {0}개 이상 사용할 수 없습니다.
                strMsgData = String.Format(strMsgData, SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID));
            }
            else // 1 : 변경실패와 동일
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_CHANGE_ERROR"); // 비밀번호 변경 중 오류가 발생 하였습니다. 잠시후 다시 시도하십시오.

            ShowMessage("waring", strMsgData);
            CLog.Here().Error($"InitPassWordChangeNoti, groupID : {groupID}, Result : {e.result}, Err-Msg: {strMsgData}");
            return;
        }

        closePopUp();


        //string strNavigateWithGroupID = "";
        //if (SGAppMgrSvc.OpConfigInfoService.GetUseDashBoard())
        //    strNavigateWithGroupID = "/Welcome/";
        //else
        //    strNavigateWithGroupID = "/Transfer/";

        //string strNavigateWithGroupID = AppConfigSvc.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";

        string strNavigateWithGroupID = String.Empty;
        if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        {
            strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
            string strNavigateUrl = strNavigateWithGroupID.ToLower();
            if (strNavigateUrl.IndexOf("transfer") > 0)
            {
                strNavigateUrl = pageService.GetFileTransPage(groupID);
                if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                    strNavigateWithGroupID = strNavigateUrl;
                else
                    strNavigateWithGroupID = "/Transfer/";
            }
            strNavigateWithGroupID += groupID.ToString();
            MyNavigationManager.NavigateTo(strNavigateWithGroupID);
        }

        MoveSiderBarFocusTogroupid();

        ShowMessage("info", XmlConf.GetInfoMsg("I_0011")); // 비밀번호가 변경되었습니다.
        CLog.Here().Information($"InitPassWordChangeNoti, PW changed-Success, groupID : {groupID}");

        pageService.SetCurUserPassWD(groupID, stNewPW);
        HSCmdCenter.SetPassWord(groupID, stNewPW);
        if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        {
            //if (siteConfig.GetUseAutoLogin(groupID) == true)
            if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupID))
            {
                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                string strEncPW = "";
                sgRSACrypto?.ValueEncrypt(stNewPW, out strEncPW);
                SGSettingData sgSettingData = null;
                sgSettingData = sgSettingProc.SelectSettingData(groupID);
                if (sgSettingData == null)
                    sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);    // groupID

                sgSettingProc.SetSettingUPW(groupID, strEncPW);
            }

            //if (AppConfigSvc.GetStartTrayMove())
            if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginAfterTray(groupID))
            {
                if (pageService.GetConnectCount(groupID) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                {
                    string strTitle = XmlConf.GetTitle("T_ETC_TRAYMOVE");                                                   // 트레이 이동.
                    string strInfoMsg = XmlConf.GetInfoMsg("I_0051");                                                       // 트레이 아이콘으로 이동합니다.
                    Window.Notification(OS_NOTI.ONLINE, strTitle, strInfoMsg);
                    Window.MoveWebWindowToTray();
                }
                else
                    Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            }
            else
            {
                Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            }
        }
        else
        {
            if (eLoginProcessType == eLoginType.eLOGINTYPE_GPKI)
            {
                //if (siteConfig.GetUseAutoLogin(groupID) == true)
                if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupID))
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncPW = "";
                    sgRSACrypto?.ValueEncrypt(stNewPW, out strEncPW);
                    SGSettingData sgSettingData = null;
                    sgSettingData = sgSettingProc.SelectSettingData(groupID);
                    if (sgSettingData == null)
                        sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);    // groupID

                    sgSettingProc.SetSettingUPW(groupID, strEncPW);
                }
            }

            Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
        }

        pageService.ConnectCountAdd(groupID);
        pageService.SetConnectStatus(groupID, true);
        pageService.SetLogoutStatus(groupID, false);

        CLog.Here().Information($"groupID : {groupID} - User Do Login(PWChangeDefaultPW), UrlRedirection LogIn State ReSet !!!");
        HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupID, true);


        CtrlSideEvent ctrlSideEvent = null;
        ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
        if (ctrlSideEvent != null)
            ctrlSideEvent();
    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        object[] param = { strType, XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg }; // 망연계 솔루션
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void ShowMessage(string strType, string strTitle, string strMsg)
    {
        object[] param = { strType, strTitle, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void InitText()
    {
        strInfo1 = XmlConf.GetInfoMsg("I_0196");                                     // 초기 비밀번호로 로그인 되었습니다.
        strInfo2 = XmlConf.GetInfoMsg("I_0197");                                     // 비밀번호를 변경하십시오.
    }
}