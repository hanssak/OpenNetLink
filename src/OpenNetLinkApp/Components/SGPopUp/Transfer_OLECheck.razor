@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using Radzen
@using Radzen.Blazor
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService

<div class="modal fade" id="Transfer_OLECheck" data-backdrop="static" data-keyboard="false" style="z-index:5000;">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold ">@strOLECheckList</h5>                                      <!-- 문서파일 내 검출된 OLE 개체 리스트 -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card  col-md-12 p-0 mb-3" style="height:200px;  border:0px solid #ddd; background-color:#fff;">
                    <table class="table table-head-fixed table-hover ">
                        <thead>
                            <tr>
                                <th>@strFileName</th>                                                                           <!--파일명-->
                                <th>@strOLEObjectCount</th>                                                                         <!--검출된 OLE객체 갯수-->
                                <th>@strOLECheckResult</th>                                                                         <!--검출 결과코드-->
                                <th>@strFilePath</th>                                                                         <!--파일경로-->
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (FileOLEObject item in listOLE)
                            {
                                @*<tr class="@(item.bSub == false ? "filezip" : "")">*@
                                <tr>
                                    <td>@item.FileName</td>
                                    <td>@(item.ChildrenFiles?.Count)</td>
                                    <td>@item.ResultCode</td>
                                    <td>@item.FilePath</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card col-md-12 p-0 mb-3" style="height:220px; background-color:#fff;">
                    <RadzenTree Data="@listOLE" Style="width: 100%;height:100%;overflow:auto">
                        @*<RadzenTreeLevel TextProperty="FileName" ChildrenProperty="FileAddErr" HasChildren="@((data) => false)" />                                *@
                        <RadzenTreeLevel HasChildren="@((data) => false)" ChildrenProperty="ChildrenFiles" TextProperty="FileName" Template="OLETemplate" />
                    </RadzenTree>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="closePopUp"><i class="fas fa-check"></i>확인</button>
            </div>
        </div>
    </div>

</div>

@code {
    /// <summary>
    /// 문서파일 내 검출된 OLE 개체 리스트
    /// </summary>
    public string strOLECheckList = "";
    /// <summary>
    /// 파일명
    /// </summary>
    public string strFileName ="";
    /// <summary>
    /// 파일명 또는 상대경로명
    /// </summary>
    public string strFilePath = "";

    /// <summary>
    /// 검출된 OLE 개체 갯수
    /// </summary>
    public string strOLEObjectCount="";
    /// <summary>
    /// 검출 결과코드
    /// </summary>
    public string strOLECheckResult = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitText();
    }
    public void InitText()
    {
        strOLECheckList = XmlConf.GetTitle("T_OLE_CHECK_LIST");                     //문서파일 내 검출된 OLE 개체 리스츠
        strOLEObjectCount =XmlConf.GetTitle("T_OLE_OBJECT_COUNT");                  //검출된 OLE 개체 갯수
        strOLECheckResult = XmlConf.GetTitle("T_OLE_CHECK_RESULT");                 //검출 결과 코드
        
        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                        // 파일명
        strFilePath = XmlConf.GetTitle("T_FILE_FILEORRELATIVEPATH");                          // 파일명 또는 상대경로명
        
    }
    RenderFragment<RadzenTreeItem> OLETemplate = (context) => builder =>
    {
        FileOLEObject oleInfo = context.Value as FileOLEObject;

        builder.OpenComponent<RadzenIcon>(0);

        string style = "";
        if (oleInfo.OLEErrType != eFileAddErr.eFANone)  //OLE 검사하는 과정에서 오류 발생
        {
            builder.AddAttribute(1, "Icon", "cancel");
            style += "color: #D44867;";
        }
        else if (oleInfo.HasChildrenErr)                 //OLE개체 중
        {
            builder.AddAttribute(1, "Icon", "info");
            style += "color: #FFAA54;";
        }
        else                                                //OLE 검사하여 검촐된 개체 파일 없음 (정상 문서)
        {
            builder.AddAttribute(1, "Icon", "check_circle");
            style += "color: #327AD9;";
        }

        if (oleInfo.ChildrenFiles == null || oleInfo.ChildrenFiles.Count <= 0)
            style += "margin-left: 15px;";

        builder.AddAttribute(3, "Style", style);
        builder.CloseComponent();

    @*builder.AddContent(3, context.Text);*@
        string htmlString = "<div class=\"p-0 m-0\" style=\"width:100%;\">" +
                                                    "<div class=\"p-0 m-0\" style=\"width:60%;float:left;\">" + context.Text + "</div>"
                                                +
                                                "<div class=\"p-0 m-0\" style=\"width:40%;float:right;font-style:italic;color:#D44867\">" + oleInfo.OLEErrReason + "</div>"
                                + "</div>";
        builder.AddContent(3, (MarkupString)htmlString);
    };

    public List<FileOLEObject> listOLE = new List<FileOLEObject>();

    public async Task openPopUp()
    {
        object[] param = { "Transfer_OLECheck" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        SendFileAddList();
        listOLE.Clear();
        object[] param = { "Transfer_OLECheck" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public void CopyData(List<FileOLEObject> list)
    {
        listOLE.Clear();
        listOLE.AddRange(list);

        StateHasChanged();
    }

    void SendFileAddList()
    {

    }

}
