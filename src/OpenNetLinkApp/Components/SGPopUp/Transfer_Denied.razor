@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService

<div class="modal fade" id="Transfer_Denied" data-backdrop="static" data-keyboard="false" style="z-index:5000;">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold ">@strExceptionList</h5>                                      <!-- *파일 추가 시 제외된 파일 리스트 -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-body pt-0 pb-0">


                    <!--s table -->
                    <div class="col-md-12 p-0 mb-3">

                        <div class=" w-100 mb-3 " style="height:28px;border:0px solid #ddd;">
                            <!--<label class="p-1">*파일 추가 시 제외된 파일 리스트</label>-->
                            <button type="button" class="btn bg-gradient-secondary" @onclick="ZipExamContentChange"><i class="fas fa-layer-group pr-1"></i>@strZipExam</button>           <!--압축파일 간략보기-->
                        </div>


                        <div class="card-body table-responsive p-0 text-nowrap" style="height:331px; border:0px solid #ddd; background-color:#fff;">
                            <table class="table table-head-fixed table-bordered table-hover ">

                                <thead>
                                    <tr>
                                        <th>@strFileName</th>                                                                           <!--파일명-->
                                        <th>@strExceptionReason</th>                                                                         <!--제외사유-->
                                        <th>@strFilePath</th>                                                                         <!--파일경로-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (FileAddErr item in listDenied)
                                    {
                                        if ((!m_bZipExamDetail) && (item.bSub == true))
                                            continue;
                                        <tr class="@(item.bSub == false ? "filezip" : "")">
                                            <td><i class="@(item.bSub == true ? "fas fa-long-arrow-alt-right mr-2" : "")"></i>@item.FileName</td>
                                            <td>@item.ExceptionReason</td>
                                            <td>@item.FilePath</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>
                    <!--e table -->
                    <!--s text -->

                    <div class="col-md-12 p-0 mb-3 ">

                        <div class="col-sm-10">
                            <h6>@strExceptionContent</h6>                                                                                       <!--제외내역-->
                            <ul class="container-fluid ml-3" style="letter-spacing: 0px !importnat;}">
                            @foreach (string strReason in listDeniedReason)
                            {
                                if (strReason.Contains("=>"))
                                {
                                    <li class="li_no">@strReason</li>
                                }
                                else
                                {
                                    <li>@strReason</li>
                                }
                            }
                            </ul>
                        </div>

                    </div>
                    <!--e text -->
                </div>
                <!--/. content -->
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="closePopUp"><i class="fas fa-check"></i>@strOK</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    public List<FileAddErr> listDenied = new List<FileAddErr>();
    //List<DeniedFile> listDenied = new List<DeniedFile>();
    public List<string> listDeniedReason = new List<string>();

    public string strExceptionList = "";
    public string strZipExam = "";
    public string strFileName = "";
    public string strExceptionReason = "";
    public string strFilePath = "";
    public string strExceptionContent = "";
    public string strOK = "";
    public string strCancel = "";
    ISGSideBarUIService SideBarUISvc;

    public bool m_bZipExamDetail = false;

    public void InitText()
    {
        if(m_bZipExamDetail)
            strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_INTERMISSION");                // 압축파일 간략보기
        else
            strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_DETAIL");                    // 압축파일 상세보기
        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                        // 파일명
        strExceptionReason = XmlConf.GetTitle("T_EXCEPTION_REASON");                // 제외사유
                                                                                    //strFilePath = XmlConf.GetTitle("T_FILE_FILEPATH");                          // 파일경로
        strFilePath = XmlConf.GetTitle("T_FILE_FILEORRELATIVEPATH");                          // 파일명 또는 상대경로명
        strExceptionContent = XmlConf.GetTitle("T_EXCEPTION_REASON");               // 제외내역
        strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
        strCancel = XmlConf.GetTitle("T_FILE_FOLD");                                // 닫기
        strExceptionList = XmlConf.GetTitle("T_EXCEPTION_FILE_LIST");               // 파일 추가에 제외된 파일 리스트
    }

    public async Task openPopUp()
    {
        object[] param = { "Transfer_Denied" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        SendFileAddList();
        listDenied.Clear();
        object[] param = { "Transfer_Denied" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    protected override void OnInitialized()
    {
        /*
        listDenied.Add(new DeniedFile(1, "11111111111.zip", "확장자 제한 파일", "/root/sdfsaaa/dddddddddddddddddddddddddddddddsfsfsfsdfsdfsdfsdfsdbbb/11111111.zip", false, 0));
        listDenied.Add(new DeniedFile(2, "1@@1111111111.zip", "확장자 제한 파일", "/root/sdfsdfdsfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(3, "11111@@111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bsdfsdfsdfsdfsdfsdfsdbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(4, "11111@@@111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(5, "111@@11111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(6, "111111@@11111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(7, "1111dd1111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(8, "1111sdf1111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(9, "1111sdf1111111.zip", "확장자 제한 파일", "/root/sdfsdfsdfsdfsdfsdfsdfaaa/dddddddddddddddddddddddddddddddddddbbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(10, "111sdf11111111.zip", "확장자 제한 파일", "/root/asdfsdfsdfsdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(11, "111sd11111111.zip", "확장자 제한 파일", "/root/aaa/sdfsdfsdfbbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(12, "1111sdf1111111.zip", "확장자 제한 파일", "/root/aaa/sdfsdddddddddddddddddddddddddddddddddddddddddddddddddddfsdbbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(13, "1111sdf1111111.zip", "확장자 제한 파일", "/root/asdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(14, "1111sdf1111111.zip", "확장자 제한 파일", "/root/asdfsdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(15, "1111sd1111111.zip", "확장자 제한 파일", "/root/asdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(16, "1sd1111111111.zip", "확장자 제한 파일", "/root/asdfsdfsdfsdfsdfaa/bbb/11111111.zip", true, 1));


        listDeniedReason.Add("압축파일내 검사가 불가능한 파일 1개");
        listDeniedReason.Add("압축파일내 확장자 변경 포함 1623개");
        listDeniedReason.Add("압축파일내 알수 없는 형식 포함 132개");
        */
        base.OnInitialized();

        InitText();
    }

    public void CopyData(List<FileAddErr> list)
    {
        listDenied.Clear();
        listDenied = new List<FileAddErr>(list);
        StateHasChanged();
    }
    public void CopyReason(List<string> list)
    {
        listDeniedReason.Clear();
        listDeniedReason = new List<string>(list);
        StateHasChanged();
    }
    public void SendFileAddList()
    {
        if (listDenied.Count <= 0)
            return;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            return;
        }
        string strUserID = sgLoginData.GetUserID();
        string strSystemType = "E";
        if (sgLoginData.GetSystemPosition())
            strSystemType = "I";

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if(sgUserData==null)
        {
            return;
        }
        string strUserSeq = sgUserData.GetUserSequence();

        List<string> listQuery = new List<string>();
        SGQueryExtend sgQuery = new SGQueryExtend();
        for (int i=0;i< listDenied.Count;i++)
        {
            int nType = (int)listDenied[i].eErrType;
            eFileAddErr errType = listDenied[i].eErrType;
            string strFileName = listDenied[i].FileName;
            string strReason = listDenied[i].GetFileAddErrContent(strFileName, errType);
            string strUnitQuery = sgQuery.GetAgentBlock(strUserSeq, strSystemType, nType.ToString(), strReason);
            listQuery.Add(strUnitQuery);
        }

        int nTotalLen = 0;
        string strTotalQuery = "Hsck_Transaction:";
        nTotalLen = strTotalQuery.Length;
        string strQuery = "";
        for(int i=0;i<listQuery.Count;i++)
        {
            strQuery = listQuery[i];
            int nLen = strQuery.Length;
            nTotalLen += nLen;
            if (nTotalLen >= 3000)
            {
                HSCmdCenter.SendFileAddErr(groupID, strUserID, strTotalQuery);
                i--;
                nTotalLen = 0;
                strTotalQuery = "Hsck_Transaction:";
            }
            else
                strTotalQuery += strQuery;

        }
        if (pageService.GetConnectStatus(groupID) == true)
            HSCmdCenter.SendFileAddErr(groupID, strUserID, strTotalQuery);
        return;
    }

    public void ZipExamContentChange()
    {
        m_bZipExamDetail = !(m_bZipExamDetail);
        if (m_bZipExamDetail)
        {
            strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_INTERMISSION");                // 압축파일 간략보기
        }
        else
            strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_DETAIL");                    // 압축파일 상세보기

        StateHasChanged();
    }
    /*
    public class DeniedFile
    {
        public DeniedFile(long fileseq, string name, string reason, string path, bool sub, long pseq)
        {
            FileSeq = fileseq;
            FileName = name;
            Reason = reason;
            Path = path;
            Sub = sub;
            ParentSeq = pseq;
        }

        public long FileSeq { get; set; }
        public string FileName { get; set; }
        public string Reason { get; set; }
        public string Path { get; set; }
        public bool Sub { get; set; }
        public long ParentSeq { get; set; }
    }
    */
}
