@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using Radzen
@using Radzen.Blazor
@using AgLogManager

@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService

<div class="modal fade" id="Transfer_Denied" data-backdrop="static" data-keyboard="false" style="z-index:5000;">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold ">@strExceptionList</h5>                                      <!-- *파일 추가 시 제외된 파일 리스트 -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-body pt-0 pb-0">
                    <div class="col-md-12 p-0 mb-3">
                        @*압축파일상세보기 구현안되서 주석처리함 -> 실제로 구현은 되지만 드래그&드롭 시 정확한 파일경로를 알 수 없어 메모리 성능 이슈 발생 인해 주석처리함*@
                        @*<div class=" w-100 mb-3 " style="height:28px;border:0px solid #ddd;">
                            <button type="button" class="btn bg-gradient-secondary" @onclick="ZipExamContentChange"><i class="fas fa-layer-group pr-1"></i>@strZipExam</button>           압축파일 간략보기
                            </div>*@

                        <div class="card table-responsive text-nowrap" style="height:160px; border:0px solid #ddd; background-color:#fff; padding:0px 5px 5px 5px">
                            <table class="table table-head-fixed table-hover ">
                                <thead>
                                    <tr>
                                        <th>@strFileName</th>                                                                           <!--파일명-->
                                        <th>@strExceptionReason</th>                                                                         <!--제외사유-->
                                        <th>@strFilePath</th>                                                                         <!--파일경로-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (FileAddErr item in listDenied)
                                    {
                                        @*<tr class="@(item.bSub == false ? "filezip" : "")">*@
                                        <tr>
                                            <td>@item.FileName</td>
                                            <td>@((item.eErrType == eFileAddErr.eFANone && item.HasChildrenErr) ? strInnerErrorInfoMsg : item.ExceptionReason)</td>
                                            <td>@item.FilePath</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>
                    <!--e table -->

                    <div class="card col-md-12 p-0 mb-3" style="height:160px; background-color:#fff;">
                        <RadzenTree Change="@selectFile" Data="@listDenied" Style="width: 100%;height:100%;overflow:auto">
                            @*<RadzenTreeLevel TextProperty="FileName" ChildrenProperty="FileAddErr" HasChildren="@((data) => false)" />                                *@
                            <RadzenTreeLevel HasChildren="@((data) => false)" ChildrenProperty="ChildrenFiles" TextProperty="FileName" Template="DenyTemplate" />
                        </RadzenTree>
                    </div>

                    <!--s text -->
                    <div class="card col-md-12 text-nowrap" style="height:100px; background-color:#fff; overflow:auto; padding:0px 5px 5px 5px">
                        <table class="table table-head-fixed table-hover">
                            <thead>
                                <tr>
                                    <th style=" width:40%">@strErrorReasonSummary</th>                                                                           <!--파일명-->
                                    <th style=" width:10%">@strErrorTotalCountSummary</th>                                                                          <!--제외사유-->
                                    <th style=" width:40%">@strErrorReasonSummary</th>                                                                     <!--파일명-->
                                    <th style=" width:10%">@strErrorTotalCountSummary</th>                                                                          <!--제외사유-->
                                </tr>
                            </thead>
                            <tbody>
                                @for (int idx = 0; idx < listDeniedReason.Count; idx += 2)
                                {
                                    <tr>
                                        <td>@listDeniedReason[idx].Item1</td>
                                        <td>@listDeniedReason[idx].Item2</td>

                                        @if (idx + 2 <= listDeniedReason.Count)
                                        {
                                            <td>@listDeniedReason[idx + 1].Item1</td>
                                            <td>@listDeniedReason[idx + 1].Item2</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                            <td></td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <!--e text -->
                </div>
                <!--/. content -->
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="closePopUp"><i class="fas fa-check"></i>@strOK</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<Transfer_Denied>();
    public List<FileAddErr> listDenied = new List<FileAddErr>();

    @*public List<FileAddErr> listTreeDenied = new List<FileAddErr>();*@

    //List<DeniedFile> listDenied = new List<DeniedFile>();
    public List<(string reason, string count)> listDeniedReason = new List<(string reason, string count)>();

    public string strExceptionList = "";
    public string strZipExam = "";
    public string strFileName = "";
    public string strExceptionReason = "";
    public string strFilePath = "";
    public string strExceptionContent = "";
    public string strOK = "";
    public string strCancel = "";
    private string strErrorReasonSummary = "";
    private string strErrorTotalCountSummary = "";
    private string strInnerErrorInfoMsg = "";


    ISGSideBarUIService SideBarUISvc;

    public bool m_bZipExamDetail = false;

    RenderFragment<RadzenTreeItem> DenyTemplate = (context) => builder =>
    {
        FileAddErr errInfo = context.Value as FileAddErr;

        builder.OpenComponent<RadzenIcon>(0);

        string style = "";
        if (errInfo.eErrType != eFileAddErr.eFANone)    //오류난 항목은 빨간색
        {
            builder.AddAttribute(1, "Icon", "cancel");
            style += "color: #D44867;";
        }
        else if(errInfo.ChildrenFiles != null && errInfo.ChildrenFiles.Count > 0)        //하위항목이 있는 항목은 폴더아이콘
        {
            builder.AddAttribute(1, "Icon", "folder");
        }
        //else if (errInfo.HasChildrenErr)                
        //{
        //    builder.AddAttribute(1, "Icon", "info");
        //    style += "color: #FFAA54;";
        //}
        else        //정상
        {
            builder.AddAttribute(1, "Icon", "check_circle");
            style += "color: #327AD9;";

        }

        if (errInfo.ChildrenFiles == null || errInfo.ChildrenFiles.Count <= 0)
            style += "margin-left: 15px;";

        builder.AddAttribute(3, "Style", style);
        builder.CloseComponent();

        @*builder.AddContent(3, context.Text);*@
        string htmlString = "<div class=\"p-0 m-0\" style=\"width:100%;\">" +
                                                "<div class=\"p-0 m-0\" style=\"width:60%;float:left;\">" + context.Text + "</div>"
                                                +
                                                "<div class=\"p-0 m-0\" style=\"width:40%;float:right;font-style:italic;color:#D44867\">" + errInfo.ExceptionReason + "</div>"
                                            + "</div>";
        builder.AddContent(3, (MarkupString)htmlString);

    @*builder.OpenComponent<Radzen>(0);*@
    @*builder.OpenComponent<RadzenContent>(0);
        builder.AddAttribute(1, "Style", "color: red");
        builder.CloseComponent();*@
    };


    public void InitText()
    {
        if (m_bZipExamDetail)
            strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_INTERMISSION");                // 압축파일 간략보기
        else
            strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_DETAIL");                    // 압축파일 상세보기
        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                        // 파일명
        strExceptionReason = XmlConf.GetTitle("T_EXCEPTION_REASON");                // 제외사유
                                                                                    //strFilePath = XmlConf.GetTitle("T_FILE_FILEPATH");                          // 파일경로
        strFilePath = XmlConf.GetTitle("T_FILE_FILEORRELATIVEPATH");                          // 파일명 또는 상대경로명
        strExceptionContent = XmlConf.GetTitle("T_EXCEPTION_REASON");               // 제외내역
        strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
        strCancel = XmlConf.GetTitle("T_FILE_FOLD");                                // 닫기
        strExceptionList = XmlConf.GetTitle("T_EXCEPTION_FILE_LIST");               // 파일 추가에 제외된 파일 리스트

        strErrorReasonSummary = XmlConf.GetTitle("T_ERROR_REASON_SUMMARY");             //제외사유
        strErrorTotalCountSummary = XmlConf.GetTitle("T_ERROR_TOTALCOUNT_SUMMARY");     //총 수량
        strInnerErrorInfoMsg = XmlConf.GetInfoMsg("I_0231");                                    //내부파일 확인
    }

    public void FileAddFailLog()
    {
        doDisplayFileAddErr(listDenied, 0);
    }


    /// <summary>
    /// 파일추가 error 원인 SubFolder에 있는 파일들도 찾아서 출력(폴더우클릭 전송때 확인)
    /// </summary>
    /// <param name="listFileErrorLevel"></param>
    /// <param name="nDepth"></param>
    public void doDisplayFileAddErr(List<FileAddErr> listFileErrorLevel, int nDepth)
    {

        string strReason = "";

        for (int i = 0; i < listFileErrorLevel.Count; i++)
        {

            if (listFileErrorLevel[i].eErrType != eFileAddErr.eFANone)
            {
                strReason = listFileErrorLevel[i].GetFileAddErrContent(strFileName, listFileErrorLevel[i].eErrType);
                CLog.Here().Information($"### - 파일추가 실패 원인(추가한파일-Depth:{nDepth}) - FileAddErr : {listFileErrorLevel[i].eErrType}, " +
                    $"ParentFileName : {listFileErrorLevel[i].ParentFileName}, FileName : {listFileErrorLevel[i].FileName}, Reason : {strReason}");
            }

            if (listFileErrorLevel[i].HasChildrenErr && (listFileErrorLevel[i].ChildrenFiles?.Count ?? 0) > 0)
            {
                doDisplayFileAddErr(listFileErrorLevel[i].ChildrenFiles, ++nDepth);
            }
        }
    }


    public async Task openPopUp()
    {
        FileAddFailLog();

        object[] param = { "Transfer_Denied" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        SendFileAddList();
        listDenied.Clear();
        object[] param = { "Transfer_Denied" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    protected override void OnInitialized()
    {
        /*
        listDenied.Add(new DeniedFile(1, "11111111111.zip", "확장자 제한 파일", "/root/sdfsaaa/dddddddddddddddddddddddddddddddsfsfsfsdfsdfsdfsdfsdbbb/11111111.zip", false, 0));
        listDenied.Add(new DeniedFile(2, "1@@1111111111.zip", "확장자 제한 파일", "/root/sdfsdfdsfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(3, "11111@@111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bsdfsdfsdfsdfsdfsdfsdbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(4, "11111@@@111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(5, "111@@11111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(6, "111111@@11111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(7, "1111dd1111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(8, "1111sdf1111111.zip", "확장자 제한 파일", "/root/sdfsdaaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(9, "1111sdf1111111.zip", "확장자 제한 파일", "/root/sdfsdfsdfsdfsdfsdfsdfaaa/dddddddddddddddddddddddddddddddddddbbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(10, "111sdf11111111.zip", "확장자 제한 파일", "/root/asdfsdfsdfsdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(11, "111sd11111111.zip", "확장자 제한 파일", "/root/aaa/sdfsdfsdfbbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(12, "1111sdf1111111.zip", "확장자 제한 파일", "/root/aaa/sdfsdddddddddddddddddddddddddddddddddddddddddddddddddddfsdbbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(13, "1111sdf1111111.zip", "확장자 제한 파일", "/root/asdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(14, "1111sdf1111111.zip", "확장자 제한 파일", "/root/asdfsdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(15, "1111sd1111111.zip", "확장자 제한 파일", "/root/asdfsdaa/bbb/11111111.zip", true, 1));
        listDenied.Add(new DeniedFile(16, "1sd1111111111.zip", "확장자 제한 파일", "/root/asdfsdfsdfsdfsdfaa/bbb/11111111.zip", true, 1));


        listDeniedReason.Add("압축파일내 검사가 불가능한 파일 1개");
        listDeniedReason.Add("압축파일내 확장자 변경 포함 1623개");
        listDeniedReason.Add("압축파일내 알수 없는 형식 포함 132개");
        */
        base.OnInitialized();

        InitText();
    }

    public void CopyData(List<FileAddErr> list)
    {
        listDenied.Clear();
        listDenied = new List<FileAddErr>(list);

        @*listTreeDenied = getTreeData(list);*@

        StateHasChanged();
    }


    public void CopyReason(List<(string reason, string count)> list)
    {
        listDeniedReason.Clear();
        listDeniedReason = new List<(string, string)>(list);
        StateHasChanged();
    }

    public void SendFileAddList()
    {
        if (listDenied.Count <= 0)
            return;

        //err가 없거나, 하위 파일들에도 err가 없는 경우엔 Return 처리
        if (!listDenied.Exists(file => file.eErrType != eFileAddErr.eFANone || file.HasChildrenErr))
            return;

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();
        string strSystemType = "E";
        if (sgLoginData.GetSystemPosition())
            strSystemType = "I";

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();

        List<string> listQuery = new List<string>();
        SGQueryExtend sgQuery = new SGQueryExtend();

        // WebManager에서 값이 표현이 되도록 적당히 변경해서 올림(NetLink에 맞춤)
        bool useAgentBlockValueChange = SGAppMgrSvc.SiteConfigInfoService.GetUseAgentBlockValueChange();
        for (int i = 0; i < listDenied.Count; i++)
        {
            addBlockQuery(listDenied[i]);
        }

        //지역함수 - 파일 내 포함된 하위 파일도 함께 error 쿼리 생성하는 함수
        void addBlockQuery(FileAddErr deniedValue)
        {
            if (deniedValue.eErrType != eFileAddErr.eFANone)
            {
                int nType = (int)deniedValue.eErrType;
                eFileAddErr errType = deniedValue.eErrType;
                string strFileName = deniedValue.FileName;
                string strReason = deniedValue.GetFileAddErrContent(strFileName, errType, strMIMEType: deniedValue.MimeType, strParentFileName: deniedValue.ParentFileName);

                // WebManager에서 값이 표현이 되도록 적당히 변경해서 올림(NetLink에 맞춤)
                if (nType < 100 && useAgentBlockValueChange)
                {
                    if (errType == eFileAddErr.eFAZIP
                    || (errType > eFileAddErr.eFADLPERR && errType != eFileAddErr.eFADAYCOUNTOVER && errType != eFileAddErr.eFADAYSIZEOVER))
                        nType = 4;
                }

                string strUnitQuery = sgQuery.GetAgentBlock(strUserSeq, strSystemType, nType.ToString(), strReason);
                listQuery.Add(strUnitQuery);
            }

            //OLE 개체가 있는 파일인 경우, OLE 개체에 대한 Block 데이터도 생성
            if (deniedValue.HasChildrenErr)
            {
                foreach (FileAddErr child in deniedValue.ChildrenFiles)
                {
                    addBlockQuery(child);
                }
            }
        }

        int nTotalLen = 0;
        string strTotalQuery = "Hsck_Transaction:";
        nTotalLen = strTotalQuery.Length;
        string strQuery = "";
        for (int i = 0; i < listQuery.Count; i++)
        {
            strQuery = listQuery[i];
            int nLen = strQuery.Length;
            nTotalLen += nLen;
            if (nTotalLen >= 3000)
            {
                HSCmdCenter.SendFileAddErr(groupID, strUserID, strTotalQuery);
                i--;
                nTotalLen = 0;
                strTotalQuery = "Hsck_Transaction:";
            }
            else
                strTotalQuery += strQuery;

        }
        if (pageService.GetConnectStatus(groupID) == true)
            HSCmdCenter.SendFileAddErr(groupID, strUserID, strTotalQuery);
        return;
    }

    @*    public void ZipExamContentChange()
        {
        m_bZipExamDetail = !(m_bZipExamDetail);
        if (m_bZipExamDetail)
        {
        strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_INTERMISSION");                // 압축파일 간략보기
        }
        else
        strZipExam = XmlConf.GetTitle("T_ETC_ZIPEXAM_DETAIL");                    // 압축파일 상세보기

        StateHasChanged();
        }*@



    /// <summary>
    /// 선택된 부서로 조회
    /// </summary>
    /// <param name="args"></param>
    void selectFile(TreeEventArgs args)
    {
        FileAddErr selectedFile = args.Value as FileAddErr;

        Console.WriteLine(selectedFile.ExceptionReason);
    }


}
