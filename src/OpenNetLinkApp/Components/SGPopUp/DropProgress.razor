@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject PageStatusService pageService
<div class="modal fade" id="modal-dropprogress">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header-default">
                <div class="modal-title"><i class="fas fa-file-export blue-txt mr-2 "></i>@strTitle</div>            <!--파일전송-->
                <!--<button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>-->
            </div>
            <div class="modal-body-default">

                <div class=" alert_txt ">
                    <label class="mb-1">
                        @strInfo                                     <!--파일전송 중입니다. 전송이 완료될 때까지 기다려 주세요.-->
                    </label>
                    <p>@strProgress : @Progress </p>                                                                     <!--진행률-->


                    <div class="progress progress-xs mb-2" style="border-radius: 3px">
                        <div class="progress-bar progress-bar-danger" style="width: @Progress;  border-radius: 3px"></div>
                    </div>
                </div>
            </div>
            <div class="form-group " style="padding:10px 10px 10px 10px;">
                <label class="pb-2">파일처리 현황</label>
                <div id="logTracer" class="form-control" style="padding:10px 10px 10px 10px;font:bold;font-size:14px;overflow:auto;margin-bottom: 0px; height: 100px; text-align:left !important;"></div>
            </div>

            <div class="modal-footer-default">
                <button @onclick="closePopUp" type="button" class="btn bg-gradient-secondary pl-4 pr-4 mr-0  float-right">취소</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    public string strTitle = "";
    public string strInfo = "";
    public string strProgress = "";

    public bool bOpen = false;

    public string Progress { get; set; }
    public async Task openPopUp()
    {
        pageService.SetFileExaming(true);
        bOpen = true;
        object[] param = { "modal-dropprogress" };
        ChangeProgress(0,"");
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public async Task closePopUp()
    {
        appendLogClear();
        pageService.SetFileExaming(false);
        bOpen = false;
        object[] param = { "modal-dropprogress" };
        ChangeProgress(100,"");
        System.Threading.Thread.Sleep(1000);
        await JSRuntime.InvokeAsync<object>("closePopUp", param);
    }
    protected override void OnInitialized()
    {
        InitText();
        Progress = "0%";
        base.OnInitialized();
    }

    public void ChangeProgress(int pg,string strFileName)
    {
        if (pageService.GetFileExaming() == false)
            return;
        Progress = pg + "%";
        StateHasChanged();
        System.Threading.Thread.Sleep(1);

        if(!strFileName.Equals(""))
            appendLog(strFileName);
    }

    public void InitText()
    {
        strTitle = XmlConf.GetTitle("T_ETC_FILESEND");                  // 파일 전송
        strInfo = XmlConf.GetInfoMsg("I_0072");                     // 파일 검사 중입니다. 잠시만 기다려 주십시오.
        strProgress = XmlConf.GetTitle("T_FILEEXAM_PER");           // 파일 검사 진행률
    }

    public void SetProgressText(bool bFileSend, bool bFileCompress = false)
    {
        if (pageService.GetFileExaming() == false)
            return;
        if (bFileSend)
        {
            strInfo = XmlConf.GetInfoMsg("I_0096");                     // 파일전송 중입니다. 전송이 완료될 때까지 기다려 주십시오.
            if (bFileCompress)
                strProgress = XmlConf.GetTitle("T_FILESENDHSZIP_PER");  // 압축 및 암호화 진행률
            else
                strProgress = XmlConf.GetTitle("T_FILESEND_PER");       // 파일 전송 진행률
        }
        else
        {
            strInfo = XmlConf.GetInfoMsg("I_0072");                     // 파일 검사 중입니다. 잠시만 기다려 주십시오.
            strProgress = XmlConf.GetTitle("T_FILEEXAM_PER");           // 파일 검사 진행률
        }
        StateHasChanged();
    }

    public bool GetOpen()
    {
        return bOpen;
    }

    private void appendLog(string stLog)
    {
        object[] param = { stLog };
        JSRuntime.InvokeAsync<object>("appendTextArea", param);
    }
    private void appendLogClear()
    {
        object[] param = { "logTracer","" };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
    }
}
