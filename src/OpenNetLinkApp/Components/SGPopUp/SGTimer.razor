@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@using System.Timers;

<div class="modal fade" id=@Guid data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header3 modal-outline2 border-bottom">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-cog mr-1"></i> @title </h5>
            </div>
            <div class="modal-body1">
                <div class="card-body pt-2 pb-2">
                    <div class="alert_txt">
                        @Time
                    </div>
                </div>
            </div>
            <div class="modal-footer1">
                <button type="button" class="btn bg-gradient-secondary pl-4 pr-4 mr-0  float-right" @onclick="Cancel">@XmlConf.GetTitle("T_COMMON_CANCEL")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    public string title { get; set; }
    public string message { get; set; }
    public int groupId = 0;
    public string strOk = "";

    private System.Timers.Timer _timer = null;
    private int _secondsToRun = 0;

    protected string Time { get; set; } = "00:00";

    public void Cancel()
    {
        closePopUp();
    }

    [Parameter]
    public string Guid { get; set; }

    /// <summary>
    /// Alert 팝업
    /// </summary>
    /// <param name="tle"></param>
    /// <param name="msg"></param>
    /// <param name="md">0: none / 1:confirm / 2: confirm && cancel </param>
    /// <param name="gid"></param>
    /// <param name="argument">전달인자</param>
    /// <param name="okMsg">확인 버튼 문구</param>
    /// <returns></returns>
    public async Task openPopUp(string tle, string msg, int gid, int minute, string okMsg = "")
    {
        title = tle;
        message = msg;
        groupId = gid;
        if (String.IsNullOrEmpty(okMsg))
            strOk = XmlConf.GetTitle("T_COMMON_OK");
        else
            strOk = okMsg;

        StateHasChanged();

        object[] param = { Guid };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);

        int secondsToRun = minute * 60;

        _secondsToRun = secondsToRun;

        if (_secondsToRun > 0)
        {
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
            _timer.Elapsed += OnTimedEvent;
            _timer.Start();
        }

    }

    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        _secondsToRun--;

        await InvokeAsync(() =>
        {
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
        });

        if (_secondsToRun <= 0)
        {
            _timer.Stop();
        }
    }

    public void closePopUp()
    {
        object[] param = { Guid };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }
}
