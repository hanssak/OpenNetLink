@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager
@inject WebWindow Window

@using System.Diagnostics
@using System.Text.RegularExpressions
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Common
@using System.Runtime.InteropServices
@using HsNetWorkSG
@using AgLogManager
@using System.Text

<div class="modal fade" id=@Guid data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header2 modal-outline2">
                <h5 class="modal-title pt-1 text-bold"><i class="fas fa-lock-open pr-1"></i> @XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</h5>
                <!--<button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>-->
            </div>
            <div class="modal-body pt-0">
                <!-- content -->
                <div class="card-body pt-0 pb-0">
                    <div class="pw_title pt-3 pb-3"> "@strPWChangeInfo" </div>

                    <div class="col-md-12 mt-3 mb-3 p-0">
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NOWPASSWORD")</label>
                            <input id=@currentPW type="password" class="pw_control col-md-8 mb-2" autocomplete="off">
                        </div>
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NEWPASSWORD")</label>
                            <input id=@newPW type="password" class="pw_control col-md-8 mb-2" autocomplete="off">
                        </div>
                        <div class="row m-0 p-0">
                            <label class=" col-md-4 pt-2 p-0 pl-3 ">@XmlConf.GetTitle("T_ETC_NEWPASSWORDCONFIRM")</label>
                            <input id=@newConfirmPW type="password" class="pw_control col-md-8 mb-2" autocomplete="off">
                        </div>
                    </div>

                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer text-center">
                <button type="button" class="btn btn-md btn-navy mr-0" @onclick="doChangePW"><i class="fas fa-key"></i>@XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</button>
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="changeLater">@strBtnText</button>
                @if (!bBtnHide)
                {
                    <button type="button" class="btn btn-md btn-black mr-0" @onclick="tweWeeksLater">@XmlConf.GetTitle("T_ETC_PASSWORDEX_NOT_DISPLAY")</button>
                }
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {

    [Parameter]
    public EventCallback<int> goToPagePWChgAfter { get; set; }

    [Parameter]
    public string Guid { get; set; }

    [Parameter]
    public int basicPageType { get; set; }

    public eLoginType eLoginProcessType = eLoginType.eLOGINTYPE_ORIGIN;    // 어떤 로그인 진행과정에 뜨는 비번변경 창인지저장

    public int nGroupID = -1;                // 현재 사용할 GroupID

    //팝업 사용이 2개 이상이므로, 고유한 id 부여
    string currentPW { get { return Guid + "-currentPW"; } }
    string newPW { get { return Guid + "-newPW"; } }
    string newConfirmPW { get { return Guid + "-newConfirmPW"; } }

    //private string stCurrentPW;
    //private string stNewPW;
    //private string stNewPWConfirm;
    string protectedPWCurrent;
    string protectedPWNew;
    string protectedPWNewConfirm;

    ISGSideBarUIService SideBarUISvc;

    public string strPWChangeInfo = "";
    public string strBtnText = "";
    public bool bBtnHide = false;
    SGSettingsDBProc sgSettingProc;
    ISGAppConfigService AppConfigSvc;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<PWChange>();

    CsPasswdValidCheckfunc objCheckPWstring = new CsPasswdValidCheckfunc();


    //[Parameter]
    //public EventCallback<int> goToPage { get; set; }
    
    //[Parameter]
    //public EventCallback<int> goToPage { get; set; }
    /// <summary>
    /// 암호화된 PW 변수저장 및 UI 컨트롤에 적용
    /// </summary>
    public async void SetProtectedPWCurrent(string getProtectedCurrent)
    {
        protectedPWCurrent = getProtectedCurrent;
        await JSRuntime.InvokeVoidAsync("setElementValue", new object[] { currentPW, protectedPWCurrent });
    }
    /// <summary>
    /// 암호화된 PW 변수저장 및 UI 컨트롤에 적용
    /// </summary>
    public async void SetProtectedPWNew(string getProtectedNew)
    {
        protectedPWNew = getProtectedNew;
        await JSRuntime.InvokeVoidAsync("setElementValue", new object[] { newPW, protectedPWNew });
    }
    /// <summary>
    /// 암호화된 PW 변수저장 및 UI 컨트롤에 적용
    /// </summary>
    public async void SetProtectedPWNewConfirm(string getProtectedNewConfirm)
    {
        protectedPWNewConfirm = getProtectedNewConfirm;
        await JSRuntime.InvokeVoidAsync("setElementValue", new object[] { newConfirmPW, protectedPWNewConfirm });
    }
    /// <summary>
    /// UI Element PW를 암호화하여 가지고와서 DEK로 암호화하여 ProtectedPW로 저장
    /// </summary>
    public async Task SetProtectedPWsFromUI()
    {
        byte[] originalPWCurrent = new byte[1];
        byte[] originalPWNew = new byte[1];
        byte[] originalPWConfirm = new byte[1];
        OpenSSL.Crypto.RSA rsa = new OpenSSL.Crypto.RSA();
        try
        {
            rsa.GenerateKeys(2048, 3, null, null);
            var encPWCurrent = await JSRuntime.InvokeAsync<object>("GetProtectedPW", new object[] { currentPW, rsa.PublicKey });
            if (string.IsNullOrEmpty(encPWCurrent.ToString()))
                SetProtectedPWCurrent(string.Empty);
            else
            {
                originalPWCurrent = rsa.PrivateDecrypt(Convert.FromBase64String(encPWCurrent.ToString()), OpenSSL.Crypto.RSA.Padding.PKCS1);
                SetProtectedPWCurrent(SGCrypto.AESEncrypt256WithDEK(originalPWCurrent));
            }

            var encPWNew = await JSRuntime.InvokeAsync<object>("GetProtectedPW", new object[] { newPW, rsa.PublicKey });
            if (string.IsNullOrEmpty(encPWNew.ToString()))
                SetProtectedPWNew(string.Empty);
            else
            {
                originalPWNew = rsa.PrivateDecrypt(Convert.FromBase64String(encPWNew.ToString()), OpenSSL.Crypto.RSA.Padding.PKCS1);
                SetProtectedPWNew(SGCrypto.AESEncrypt256WithDEK(originalPWNew));
            }

            var encPWConfirm = await JSRuntime.InvokeAsync<object>("GetProtectedPW", new object[] { newConfirmPW, rsa.PublicKey });
            if (string.IsNullOrEmpty(encPWConfirm.ToString()))
                SetProtectedPWNewConfirm(string.Empty);
            else
            {
                originalPWConfirm = rsa.PrivateDecrypt(Convert.FromBase64String(encPWConfirm.ToString()), OpenSSL.Crypto.RSA.Padding.PKCS1);
                SetProtectedPWNewConfirm(SGCrypto.AESEncrypt256WithDEK(originalPWConfirm));
            }
        }
        catch (Exception ex)
        {
            CLog.Here().Error($"SetProtectedPWFromUI - Exception - Msg : {ex.Message}");
        }
        finally
        {
            originalPWCurrent.hsClear(3);
            originalPWNew.hsClear(3);
            originalPWConfirm.hsClear(3);
            rsa.Dispose();
        }
    }

    public async Task openPopUp()
    {
        object[] param = { Guid };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }


    public void closePopUp()
    {
        if (basicPageType == (int)Enums.EnumBasicPageType.SideBar)
        {
            if (eLoginProcessType == eLoginType.eLOGINTYPE_GPKI)
            {
                goToPagePWChgAfter.InvokeAsync((int)eLoginProcessType);
            }
        }


        object[] param = { Guid };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public bool CheckValidationNewPW(int groupID, string userID, bool bComplexCheck)
    {
        string strInfoMsg = "";
        byte[] pwNew = new byte[0];
        try
        {
            SGCrypto.AESDecrypt256WithDEK(protectedPWNew, ref pwNew);
            // 비밀번호 최소 자리수
            int MaxLen = SGAppMgrSvc.OpConfigInfoService.GetPWChangeApplyCnt(groupID);

            if (pwNew.Length < MaxLen)                         //길이체크
            {
                strInfoMsg = XmlConf.GetWarnMsg("W_0045");                                              // 비밀번호는 {0}자리 이상 입력해야 합니다.
                strInfoMsg = String.Format(strInfoMsg, MaxLen);
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"CheckValidationNewPW, PW's Length is less {MaxLen}, Msg : {strInfoMsg}");
                return false;
            }

            // 공백문자 불허(우리규칙)
            foreach (byte pw in pwNew)
            {
                //if (objCheckPWstring.GetEmptyString(stNewPW))
                if (pw == Convert.ToByte(' '))
                {
                    strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_BLANK_ERROR");
                    ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                    CLog.Here().Information($"CheckValidationNewPW, PW have Empty String, Msg : {strInfoMsg}");
                    return false;
                }
            }

            // 보안기능 확인서에서 요구한 사항 적용
            if (bComplexCheck)
            {
                // 사용자ID인지 check
                string strProtectedID = SGCrypto.AESEncrypt256WithDEK(Encoding.UTF8.GetBytes(userID));

                if (string.Compare(strProtectedID, protectedPWNew) == 0)
                {
                    strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_NO_ID");
                    ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                    CLog.Here().Information($"CheckValidationNewPW, PW Change Err, PW is UserID, Msg : {strInfoMsg}");
                    return false;
                }

                // 현재PW인지 check
            if (string.Compare(protectedPWCurrent, protectedPWNew) == 0)
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_NOW_PW");
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"CheckValidationNewPW, PW Change Err, New PW is equre Now PW, Msg : {strInfoMsg}");
                return false;
            }

            // 동일한 문자·숫자의 연속적인 반복입력 금지
            if (objCheckPWstring.GetSameCharCheck(ref pwNew, SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID)))
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_SAMECHAR_MSG"); // 연속된 문자는 {0}자리까지만 입력이 가능합니다.
                strInfoMsg = String.Format(strInfoMsg, SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID) - 1);
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"CheckValidationNewPW, PW Change Err, SameCharCount : {SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID)}, Msg : {strInfoMsg}");
                return false;
            }

            // 키보드상의 연속된 문자 또는 숫자의 순차적 입력금지
            if (objCheckPWstring.GetKeyBoardContinuousWord(ref pwNew, SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID)))
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_KEYBOARD_LINEAR_MSG"); // 키보드상의 연속된 문자는 {0}개 이상 사용할 수 없습니다.
                strInfoMsg = String.Format(strInfoMsg, SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID));
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"CheckValidationNewPW, PW Change Err, KeyBoardLinearChar-Count : {SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID)}, Msg : {strInfoMsg}");
                return false;
            }

            // 숫자, 대문자(영문), 소문자(영문), 특수문자가 각 1개 이상 포함
            if (objCheckPWstring.GetComplexCnt(ref pwNew) < SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID))
            {
                strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_GUIDE_INFO_EX1");     // 비밀번호를 영문 대문자/소문자/숫자/특수문자 중 {0}가지 이상을 조합하여 {1}자리 이상으로 입력하세요.(스페이스 사용 불가).
                strInfoMsg = String.Format(strInfoMsg, SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID), MaxLen);
                ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
                CLog.Here().Information($"CheckValidationNewPW, PW Change Err, Rule-Count : {SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID)}, Msg : {strInfoMsg}");
                return false;
            }
            // 직전 사용된 패스워드 재사용 금지 - Server의 결과값으로만 알수 있음

            }
            return true;
        }
        catch (Exception ex)
        {
            throw;
        }
        finally
        {
            pwNew.hsClear(3);
        }
    }
    public async Task doChangePW()
    {
        //1.To Do : 사용자 비밀번호 체크 필요함(2020/08/14 YKH)
        //2.To Do : 비밀번호 복잡도 검사 필요함
        //3.비밀번호 실제 변경 요청 구현 필요

        if (nGroupID < 0) return;

        int groupID = nGroupID;
        string strInfoMsg = "";

        await SetProtectedPWsFromUI();
        //1.To Do : 사용자 비밀번호 체크 필요함(2020/08/14 YKH)
        //2.To Do : 비밀번호 복잡도 검사 필요함
        //3.비밀번호 실제 변경 요청 구현 필요
        if (protectedPWCurrent == null || protectedPWCurrent.Length == 0)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_OLD_PASSWORD_NEEDED"); //  기존 비밀번호를 입력하세요.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, Now PW is empty, Msg : {strInfoMsg}");
            return;
        }

        string strCurProtectedPW = HSCmdCenter.GetProtectedPassword(groupID);
        if (!protectedPWCurrent.Equals(strCurProtectedPW))
        {
            strInfoMsg = XmlConf.GetWarnMsg("W_0044"); //  현재 비밀번호를 잘못 입력했습니다.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, incorrect PW, Msg : {strInfoMsg}");
            return;
        }

        if (protectedPWNew == null || protectedPWNew.Length == 0)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_NEW_PASSWORD_NEEDED"); // 새 비밀번호을 입력하세요.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW is empty, Msg : {strInfoMsg}");
            return;
        }

        if (protectedPWNewConfirm == null || protectedPWNewConfirm.Length == 0)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_COMFIRM_PASSWORD_NEEDED"); // 새 비밀번호 확인을 입력하세요.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW confirm is empty, Msg : {strInfoMsg}");
            return;
        }

        // "T_ETC_PASSWORD_NOW_PW"
        if (strCurProtectedPW.Equals(protectedPWNew))
        {
            strInfoMsg = XmlConf.GetWarnMsg("W_0046");  // 새로운 비밀번호가 이전 비밀번호와 같습니다.
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW is equre  Now PW, Msg : {strInfoMsg}");
            return;
        }

        if (protectedPWNew != protectedPWNewConfirm)
        {
            strInfoMsg = XmlConf.GetTitle("T_ETC_PASSWORD_INCORRECT_FOR_NEW");
            ShowMessage("waring", XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD"), strInfoMsg);
            CLog.Here().Information($"doChangePW, New PW is not equre  New-PW-Confirm, Msg : {strInfoMsg}");
            return;
        }

        
        bool bComplexCheck = false;
        string userID = string.Empty;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {
            userID = sgLoginData.GetUserID();
            bComplexCheck = sgLoginData.GetPasswordRule();                      // 복잡도 확인 설정 여부를 확인한다.
        }

        if (!CheckValidationNewPW(groupID, userID, bComplexCheck))
            return;
        //Debug.WriteLine("PW:" + stCurrentPW);
        //Debug.WriteLine("new PW:" + stNewPW);
        //Debug.WriteLine("confirm PW:" + stNewPWConfirm);
        //closePopUp();

        if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
        {
            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            foreach (ISGNetwork Net in listNetWork)
            {
                if (pageService.GetConnectStatus(Net.GroupID))
                    HSCmdCenter.SendChangePasswd(Net.GroupID, userID, protectedPWCurrent, protectedPWNew);
            }
        }
        else
        {
            HSCmdCenter.SendChangePasswd(groupID, userID, protectedPWCurrent, protectedPWNew);
        }

    }

    /// <summary>
    /// 다중망 1번에 동시로그인일때에 왼쪽SideBar가 nGroupID로 선택되게 동작
    /// </summary>
    public void MoveSiderBarFocusTogroupid()
    {

        if (nGroupID < 0) return;

        // 로그인한 groupID 선택되게 적용
        if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
        {
            foreach (var MenuItem in SideBarUISvc.MenuList)
            {
                if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == nGroupID))
                {
                    KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                    eventArgs.Key = "Enter";
                    //SideBarUISvc.ActiveMenu = MenuItem;

                    MenuItem.Expanded = false;  // 반대값을 넣어야 반전되며 펼저짐
                    pageService.m_nCurViewPageGroupID = MenuItem.GroupId;
                    SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem);
                    CLog.Here().Information($"1 to ALL Login, GroupID : {nGroupID}, SideBarUI(#######) Select / Expand  !");
                    break;
                }
            }
        }
    }

    /// <summary>
    /// 다음에 변경함 선택
    /// </summary>
    public void changeLater()
    {
        // ISGSideBarUI 생성시기 상관없이 입력Popup 하기전에 입력해줌
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        if (nGroupID < 0) return;
        int groupID = nGroupID;

        CLog.Here().Information($"changeLater (#############) - groupID : {groupID}  !");

        closePopUp();
        if (bBtnHide)
            Window.ProgramExit();
        else
        {
            //string strNavigateWithGroupID = "";
            //if (siteConfig.GetUseDashBoard())
            //    strNavigateWithGroupID = "/Welcome/";
            //else
            //    strNavigateWithGroupID = "/Transfer/";

            //string strNavigateWithGroupID = AppConfigSvc.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";
            if (basicPageType == (int)Enums.EnumBasicPageType.Main)
            {
                string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
                string strNavigateUrl = strNavigateWithGroupID.ToLower();
                if (strNavigateUrl.IndexOf("transfer") > 0)
                {
                    strNavigateUrl = pageService.GetFileTransPage(groupID);
                    if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                        strNavigateWithGroupID = strNavigateUrl;
                    else
                        strNavigateWithGroupID = "/Transfer/";
                }
                strNavigateWithGroupID += groupID.ToString();
                MyNavigationManager.NavigateTo(strNavigateWithGroupID);

                MoveSiderBarFocusTogroupid();

            } // if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        }

        pageService.ConnectCountAdd(groupID);
        pageService.SetConnectStatus(groupID, true);
        pageService.SetLogoutStatus(groupID, false);

        CLog.Here().Information($"groupID : {groupID} - User Do Login(PWChange), UrlRedirection LogIn State ReSet !!!");
        HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupID, true);

        CtrlSideEvent ctrlSideEvent = null;
        ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
        if (ctrlSideEvent != null)
            ctrlSideEvent();
    }

    /// <summary>
    /// 2주후 변경함 선택
    /// </summary>
    public void tweWeeksLater()
    {

        if (nGroupID < 0) return;
        int groupID = nGroupID;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);

        //Main일 경우 페이지를 정해서 이동
        string strNavigateWithGroupID = String.Empty;
        if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        {
            strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";

            string strNavigateUrl = strNavigateWithGroupID.ToLower();

            if (strNavigateUrl.IndexOf("transfer") > 0)
            {
                strNavigateUrl = pageService.GetFileTransPage(groupID);
                if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                    strNavigateWithGroupID = strNavigateUrl;
                else
                    strNavigateWithGroupID = "/Transfer/";
            }
            strNavigateWithGroupID += groupID.ToString();

            if (sgLoginData == null || sgUserData == null)
            {
                closePopUp();

                MyNavigationManager.NavigateTo(strNavigateWithGroupID);

                MoveSiderBarFocusTogroupid();

                //if (groupID ==0 && AppConfigSvc.GetStartTrayMove())
                if (groupID == 0 && SGAppMgrSvc.OpConfigInfoService.GetUseLoginAfterTray(groupID))
                {
                    if (pageService.GetConnectCount(groupID) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                    {
                        HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, XmlConf.GetTitle("T_ETC_TRAYMOVE"), XmlConf.GetInfoMsg("I_0051"));
                        Window.MoveWebWindowToTray();
                    }
                    else
                        HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                }
                else
                {
                    HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                }
                return;
            }
        }
        else //SideBar일 경우 이미 바닥 페이지가 정해져 있기 때문에 따로 이동하지 않는다.
        {
            if (sgLoginData == null || sgUserData == null)
            {
                closePopUp();
                HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                return;
            }
        }


        DateTime time = sgLoginData.GetSvrTimeDayConvert();
        time = time.AddDays(14);
        string strDateTime = time.ToString();
        SGSettingData sgSettingData = null;
        sgSettingData = sgSettingProc.SelectSettingData(groupID);
        if (sgSettingData == null)
            sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);

        SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
        string strUserSeq = sgUserData.GetUserSequence();
        string strTime = "";
        strTime = sgSettingProc.GetSettingDelayDspPw(groupID);
        strTime = sgPassWDData.LoaclPassWDDelaySaveString(strTime, strUserSeq, strDateTime);

        CLog.Here().Information($"PwChange - tweWeeksLater - groupID : {groupID}, Time : {strTime} ");

        if (!strTime.Equals(""))
        {
            if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
            {
                List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
                foreach (ISGNetwork Net in listNetWork)
                {
                    sgSettingProc.SetSettingDelayDspPw(Net.GroupID, strTime);
                }
            }
            else
                sgSettingProc.SetSettingDelayDspPw(groupID, strTime);
        }

        closePopUp();

        if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        {
            MyNavigationManager.NavigateTo(strNavigateWithGroupID);
            MoveSiderBarFocusTogroupid();
            //if (AppConfigSvc.GetStartTrayMove())
            if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginAfterTray(groupID))
            {
                if (pageService.GetConnectCount(groupID) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                {
                    string strTitle = XmlConf.GetTitle("T_ETC_TRAYMOVE");                                                   // 트레이 이동.
                    string strInfoMsg = XmlConf.GetInfoMsg("I_0051");                                                       // 트레이 아이콘으로 이동합니다.
                    HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, strTitle, strInfoMsg);
                    Window.MoveWebWindowToTray();
                }
                else
                    HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");

            }
            else
            {
                HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                //Window.Notification(OS_NOTI.ONLINE, "Login Complete", "Success!!\nLogin to SecureGate Server.");
            }
        }
        else
        {
            HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
        }

        pageService.ConnectCountAdd(groupID);
        pageService.SetConnectStatus(groupID, true);
        pageService.SetLogoutStatus(groupID, false);

        CLog.Here().Information($"groupID : {groupID} - User Do Login(PWChange), UrlRedirection LogIn State ReSet !!!");
        HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupID, true);

        CtrlSideEvent ctrlSideEvent = null;
        ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
        if (ctrlSideEvent != null)
            ctrlSideEvent();

        MoveSiderBarFocusTogroupid();

    }


    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        //pageService.SetDayPassWDCHGEvent(nGroupID, DayPassWordChangeNoti);
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        sgSettingProc = SGSettingsDBProc.Instance;
        Init();
    }

    /// <summary>
    /// 비밀번호 변경완료시 noti 받는 함수
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    public void DayPassWordChangeNoti(int groupID, PageEventArgs e)
    {
        // Test 필요
        if (e.result != 0)
        {
            string strMsgData = "";

            if (e.result == 2)
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_USED"); // 이전 사용된 비밀번호는 사용할 수 없습니다.
            else if (e.result == 3)
            {
                int MaxLen = SGAppMgrSvc.OpConfigInfoService.GetPWChangeApplyCnt(groupID);
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_LENGTH_MSG"); // 비밀번호는 {0}자리 이상 입력해야 합니다.
                strMsgData = String.Format(strMsgData, MaxLen);
            }
            else if (e.result == 5)
            {
                // 자리수에 대해 Server와의 interface 생기면 수정필요
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_SAMECHAR_MSG"); // 연속된 문자는 {0}자리까지만 입력이 가능합니다.
                strMsgData = String.Format(strMsgData, SGAppMgrSvc.OpConfigInfoService.GetPWsameCharCnt(groupID) - 1);
            }
            else if (e.result == 4 || e.result == 6)
            {
                // 자리수에 대해 Server와의 interface 생기면 수정필요
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_GUIDE_INFO_EX1"); // 비밀번호를 영문 대문자/소문자/숫자/특수문자 중 {0}가지 이상을 조합하여 {1}자리 이상으로 입력하세요.(스페이스 사용 불가).
                strMsgData = String.Format(strMsgData,
                    SGAppMgrSvc.OpConfigInfoService.GetPWchangeRuleCnt(groupID),
                    SGAppMgrSvc.OpConfigInfoService.GetPWChangeApplyCnt(groupID));
            }
            else if (e.result == 7)
            {
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_KEYBOARD_LINEAR_MSG"); // 키보드상의 연속된 문자는 {0}개 이상 사용할 수 없습니다.
                strMsgData = String.Format(strMsgData, SGAppMgrSvc.OpConfigInfoService.GetPWkeyBoardLinearCharCnt(groupID));
            }
            else // 1 : 변경실패와 동일
                strMsgData = XmlConf.GetTitle("T_ETC_PASSWORD_CHANGE_ERROR"); // 비밀번호 변경 중 오류가 발생 하였습니다. 잠시후 다시 시도하십시오.

            ShowMessage("waring", strMsgData);
            CLog.Here().Error($"DayPassWordChangeNoti, groupID : {groupID}, Result : {e.result}, Err-Msg: {strMsgData}");
            return;
        }

        closePopUp();



        //Main에서 패스워드 변경일 경우 Page 이동이 필요하다.
        if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        {

            string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
            string strNavigateUrl = strNavigateWithGroupID.ToLower();
            if (strNavigateUrl.IndexOf("transfer") > 0)
            {
                strNavigateUrl = pageService.GetFileTransPage(groupID);
                if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                    strNavigateWithGroupID = strNavigateUrl;
                else
                    strNavigateWithGroupID = "/Transfer/";
            }
            strNavigateWithGroupID += groupID.ToString();
            MyNavigationManager.NavigateTo(strNavigateWithGroupID);
        }

        MoveSiderBarFocusTogroupid();

        ShowMessage("info", XmlConf.GetInfoMsg("I_0011")); // 비밀번호가 변경되었습니다.
        CLog.Here().Information($"DayPassWordChangeNoti, PW changed-Success, groupID : {groupID}");

        //pageService.SetCurUserPassWD(groupID, stNewPW);
        HSCmdCenter.SetProtectedPassWord(groupID, protectedPWNew);

        //if (siteConfig.GetUseAutoLogin(groupID) == true)  // json 으로 이동
        if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupID))
        {
            SGRSACrypto sgRSACrypto = new SGRSACrypto();
            string strEncPW = "";
            sgRSACrypto?.ValueEncrypt(protectedPWNew, out strEncPW);
            SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupID);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);    // groupID

            sgSettingProc.SetSettingUPW(groupID, strEncPW);
        }

        //Main에서 Tray일 경우 페이지 이동
        if (basicPageType == (int)Enums.EnumBasicPageType.Main)
        {
            if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginAfterTray(groupID))
            {
                if (pageService.GetConnectCount(groupID) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                {
                    string strTitle = XmlConf.GetTitle("T_ETC_TRAYMOVE");                                                   // 트레이 이동.
                    string strInfoMsg = XmlConf.GetInfoMsg("I_0051");                                                       // 트레이 아이콘으로 이동합니다.
                    HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, strTitle, strInfoMsg);
                    Window.MoveWebWindowToTray();
                }
                else
                    HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            }
            else
            {
                HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            }
        }
        else
        {
            HSCmdCenter.sgPageEvent.OSNotification(groupID, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
        }

        pageService.ConnectCountAdd(groupID);
        pageService.SetConnectStatus(groupID, true);
        pageService.SetLogoutStatus(groupID, false);

        CLog.Here().Information($"groupID : {groupID} - User Do Login(PWChange), UrlRedirection LogIn State ReSet !!!");
        HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupID, true);

        CtrlSideEvent ctrlSideEvent = null;
        ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
        if (ctrlSideEvent != null)
            ctrlSideEvent();
    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        object[] param = { strType, XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg }; // 망연계 솔루션
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void ShowMessage(string strType, string strTitle, string strMsg)
    {
        object[] param = { strType, strTitle, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /// <summary>
    ///
    /// </summary>
    public void Init()
    {
        if (nGroupID < 0) return;
        int groupID = nGroupID;

        strPWChangeInfo = XmlConf.GetTitle("T_ETC_PASSWORDEX_DAY");  // {0}일 동안
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        pageService.SetDayPassWDCHGEvent(nGroupID, DayPassWordChangeNoti);

        int nDay = sgLoginData.GetPasswordExpiredDay();
        strPWChangeInfo = String.Format(strPWChangeInfo, nDay);
        string strText = XmlConf.GetTitle("T_ETC_PASSWORDEX_TITLE");        // 비밀번호를 변경하지 않으셨습니다.
        strPWChangeInfo = Path.Combine(strPWChangeInfo, strText);
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            strPWChangeInfo = strPWChangeInfo.Replace("\\", "");
        }
        else
        {
            strPWChangeInfo = strPWChangeInfo.Replace("/", "");
        }
        //strPWChangeInfo = strPWChangeInfo.Replace("\\", "");
        ePassWDChgType ePassChgType = sgLoginData.GetPasswordExpired();
        if (ePassChgType == ePassWDChgType.eEnforce)
        {
            strBtnText = XmlConf.GetTitle("T_ETC_PASSWORDEX_EXIT");                         // 종료
            bBtnHide = true;
        }
        else if (ePassChgType == ePassWDChgType.eAfterward)
        {
            strBtnText = XmlConf.GetTitle("T_ETC_PASSWORDEX_NEXT_CHANGE");                  // 다음에 변경
            bBtnHide = false;
        }
        else
        {
            strBtnText = XmlConf.GetTitle("T_ETC_PASSWORDEX_NEXT_CHANGE");                  // 다음에 변경
            bBtnHide = false;
        }

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
    }


}