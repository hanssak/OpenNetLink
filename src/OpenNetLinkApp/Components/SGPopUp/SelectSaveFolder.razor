@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HsCmdCenter
@using System.Runtime.InteropServices
@*@using System.Runtime.CompilerServices*@
@using Microsoft.AspNetCore.Components.CompilerServices
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics
@using Serilog
@using Serilog.Events
@using AgLogManager
@using System.Text
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Common;

<div class="modal fade" id="modal-selectsavefolder" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                @*<h5 class="modal-title pt-1 text-bold "> <i class="fas fa-search pr-2"></i>@XmlConf.GetTitle("T_COMMON_FOLDER_SEARCH")</h5>*@
                <h5 class="modal-title pt-1 text-bold" style="color: black; text-overflow: ellipsis;">
                    @* white-space: nowrap; overflow: hidden;*@
                    <i class="fas fa-folder-open fa-lg  pl-1 pr-1" style="color:#ffb100;"></i>
                    @stDisplayPath
                </h5>
                <button @onclick="closePopUp" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body ">
                <div class="card-body  mb-3" style="border:1px solid #b3c8e4; background-color:#fff; border-radius:3px; padding:.3rem !important;">

                    <!-- s 결재라인 -->

                    <div class="col-md-12 p-0">
                        <div class="row">
                            <div class="col-md-12" style="letter-spacing:.3px !important; ">
                                @*<select style="width:200px;" @bind="_stCurrentDrive">
                                    @foreach (string item in rootDrives)
                                    {
                                    <option value="@item">@item</option>
                                    }
                                    </select>*@
                                <div class="dropdown">
                                    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="width:200px; text-align:left">
                                        @_stCurrentDrive
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="dropdownMenu1" style="min-width:200px;">
                                        @foreach (string str in rootDrives)
                                        {
                                            <button class="dropdown-item text-xs p-1" style="text-align:left" type="button" @onclick="@(()=>SetCurrentDrive(str))">@str</button>
                                        }
                                    </div>
                                </div>
                            </div>
                            @*<div class="col-md-12" style="letter-spacing:.3px !important; ">
                                <i class="fas fa-folder-open fa-lg  pl-1 pr-1" style="color:#ffb100;"></i>
                                @stDisplayPath
                                </div>*@
                        </div>
                    </div>
                </div>

                <div class="card-bod">

                    <div class="row">
                        <div class="col-md-12">
                            <fieldset class="ui-fieldset ui-widget ui-widget-content ui-corner-all">

                                <div class="ui-fieldset-content-wrapper" role="region" id="ui-fieldset-0-content" aria-hidden="false" style="display: block;">
                                    <div class="ui-fieldset-content">

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="card-body table-responsive" style="height:300px; border:1px solid #c6ceda; background-color:#fff;overflow:hidden;padding:0 0 0 0;overflow:auto">


                                                    @*상위 루트로 이동하는 기능 제거*@
                                                    <div @onclick="toUpperTree">
                                                        <i class="fas fa-folder align-items-center" style="padding-left:17px;cursor:pointer;"></i><span style="cursor:pointer;">&nbsp;..</span>
                                                    </div>
                                                    <div>
                                                        <RadzenTree Change="@OnSelectPath" Data="@entries" Expand="@LoadFiles" Style="width: 100%;height:100%;overflow:auto">
                                                            <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate" />  @*Expanded="@((data) => false)" HasChildren="@((data) => false)" *@
                                                        </RadzenTree>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>

                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer clearfix pl-4 pr-4 pt-3 pb-3">
                <div class="col-md-12  p-0">
                    <div class="row  p-0">
                        <div class="col-md-9 text-left">
                            <table>
                                <tr>
                                    <td>
                                        <input type="text" class="form-control p-2 border-0" style="border-radius:0px;width:150px;" @bind="stMakeDirName" id="1" placeholder="@XmlConf.GetTitle("L_FOLDER_NAME_IS_NEEDED")" />
                                    </td>
                                    <td>
                                        <button @onclick="CreateNewFolder" type="button" class="btn btn-md btn-navy">
                                            <i class="fas fa-folder"></i>@XmlConf.GetTitle("L_MAKE_NEW_FOLDER")
                                        </button>

                                    </td>
                                </tr>
                            </table>
                        </div>

                        <div class="col-md-3 text-right p-0">
                            <button @onclick="Confirm" type="button" class="btn btn-md btn-blue mr-0 "><i class="fas fa-check"></i>@XmlConf.GetTitle("T_COMMON_OK")</button>
                            <button @onclick="closePopUp" type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_COMMON_CANCEL")</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {

    public int nGroupid = 0;

    /// <summary>
    /// 탐색된 TreeList 의 Root Path를 저장
    /// </summary>
    private string stTreeDir = String.Empty;

    /// <summary>
    /// 탐색된 TreeList 의 목록들 저장
    /// </summary>
    IEnumerable<string> entries = null;

    /// <summary>
    /// double click을 위해 사용되는 값
    /// </summary>
    static DateTime timeInterval = DateTime.Now;

    /// <summary>
    /// double click을 위해 사용되는 값
    /// </summary>
    static string lastSelectPath = "";

    /// <summary>
    /// double click을 위해 사용되는 값
    /// </summary>
    static private int doubleClickMaxTime = 500; //밀리세컨

    public int dragLabel = 1;

    /// <summary>
    /// 사용자가 생성하는 Folder 이름
    /// </summary>
    private string stMakeDirName = String.Empty;

    /// <summary>
    /// 상단에 표시되는 Path 경로
    /// </summary>
    private string stDisplayPath = String.Empty;

    /// <summary>
    /// groupID 전달받은 index(groupid와 동일)
    /// </summary>
    private int nNetIdx = 0;
    private string stOriginPath = String.Empty;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SelectSaveFolder>();


    /// <summary>
    /// 사용자가 접근,선택 가능한 드라이브 볼륨 목록(C,D,..Z) 저장
    /// </summary>
    private string[] rootDrives = null;

    private string stCurrentDrive = "";
    public string _stCurrentDrive
    {
        get { return stCurrentDrive; }
        set
        {
            stCurrentDrive = value;
            changeDrive();
        }
    }

    private static Action<string> actionDoubleClickListitem;
    List<SGFileInfo> sgFile = new List<SGFileInfo>();

    //private static Action<string> actionTargetSelect;

    [Parameter]
    public EventCallback<string> OnSaveDirPath { get; set; }


    public void SetCurrentDrive(string value)
    {
        _stCurrentDrive = value;
        //StateHasChanged();
    }

    /// <summary>
    /// 더블클릭때 java script에서 실행해주는 함수
    /// </summary>
    /// <param name="value"></param>
    @*[JSInvokable("SelectSaveFolderDoubleClick")]
        public static void SelectSaveFolderDoubleClick(string value)
        {
            CLog.Here().Information($"JS-SelectSaveFolderDoubleClick, Path : {value}");
            actionDoubleClickListitem.Invoke(value);
        }*@

    /// <summary>
    /// 더블클릭때 실행되는 마지막 함수
    /// </summary>
    /// <param name="value"></param>
    private void DoubleClickItem(string value)
    {
        CLog.Here().Information($"DoubleClickItem(#####), Path : {value}");
        EnumerateFolder(false, value);
        //stTreeDir = stDisplayPath;

        JSRuntime.InvokeAsync<object>("RadzenTreeCollapse", null);

        StateHasChanged();
    }


    /// <summary>
    /// 사용자 ProFile 경로를 system 환경설정 형태로 변경하는 함수
    /// </summary>
    /// <param name="strOriginPath"></param>
    /// <param name="strOriginSavePath"></param>
    /// <param name="strSystemVarType"></param>
    /// <returns></returns>
    private bool ChangePathToSystemVarType(string strOriginPath, string strOriginSavePath, out string strSystemVarType)
    {
        strOriginPath = strOriginPath.ToLower();
        strSystemVarType = strOriginSavePath.ToLower();

        int nPos = strSystemVarType.IndexOf(strOriginPath);
        if (nPos != 0)
            return false;

        strSystemVarType.Replace(strOriginPath, "%USERPATH%");

        return true;
    }

    /// <summary>
    /// 확인 눌러서 변경된 경로 저장
    /// </summary>
    public void Confirm()
    {

        CLog.Here().Information($"SelectSaveFolder-Confirm, DisPlayPath : {stDisplayPath}, PathRoot : {Path.GetPathRoot(stDisplayPath)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, UserProfile Path : {Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, Desktop Path : {Environment.GetFolderPath(Environment.SpecialFolder.Desktop)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, Windows Path : {Environment.GetFolderPath(Environment.SpecialFolder.Windows)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, ProgramFiles Path : {Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, ProgramFilesX86 Path : {Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, System Path : {Environment.GetFolderPath(Environment.SpecialFolder.System)}");
        CLog.Here().Information($"SelectSaveFolder-Confirm, SystemX86 Path : {Environment.GetFolderPath(Environment.SpecialFolder.SystemX86)}");

        string strSystemVarType = "";
        string strTempPath = "";
        string strMsg = "";
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {

            // Black 방식

            if (Path.GetPathRoot(stDisplayPath).Equals(stDisplayPath))
            {
                CLog.Here().Error($"Confirm, OS:Windows, is RootPath, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0018"), stDisplayPath.ToString()));
                return;
            }

            if (stDisplayPath.Equals(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)))
            {
                CLog.Here().Error($"Confirm, OS:Windows, is UserProfile, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }
            else if (stDisplayPath.Equals(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)))
            {
                CLog.Here().Error($"Confirm, OS:Windows, is Desktop, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is Windows, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is ProgramFiles, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString()));
                return;
            }

            // 빈문자열 나와서 무조건 여기서 차단됨 : Linux, MAC
            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is ProgramFilesX86, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is System, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString()));
                return;
            }

            // 빈문자열 나와서 무조건 여기서 차단됨 : Linux, MAC
            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.SystemX86);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is SystemX86, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString()));
                return;
            }

            OnSaveDirPath.InvokeAsync(stDisplayPath + "|" + nNetIdx);

        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
        {
            // White 방식
            // '/Users/......' 경로에만 지정가능
            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

            CLog.Here().Error($"Confirm, OS:Mac OSX, UserProfile - Path : {strTempPath}");

            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, true) != 0)
            {
                CLog.Here().Error($"Confirm, OS:Mac OSX, is UserProfile, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }

            if (ChangePathToSystemVarType(strTempPath, stDisplayPath, out strSystemVarType) == false)
            {
                CLog.Here().Error($"Confirm, OS:Mac OSX, UserProfile - error, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }

            CLog.Here().Error($"Confirm, OS:Mac OSX, UserProfile - Path : {strSystemVarType}");

            OnSaveDirPath.InvokeAsync(strSystemVarType + "|" + nNetIdx);

        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
        {
            // White 방식
            // '/home/......' 경로에만 지정가능
            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

            CLog.Here().Error($"Confirm, OS:Mac OSX, UserProfile - Path : {strTempPath}");

            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, true) != 0)
            {
                CLog.Here().Error($"Confirm, OS:Linux, is UserProfile, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }

            if (ChangePathToSystemVarType(strTempPath, stDisplayPath, out strSystemVarType) == false)
            {
                CLog.Here().Error($"Confirm, OS:Linux, UserProfile - error, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }

            CLog.Here().Error($"Confirm, OS:Mac OSX, UserProfile - Path : {strSystemVarType}");

            OnSaveDirPath.InvokeAsync(strSystemVarType + "|" + nNetIdx);

        }
        else
        {

            // Black 방식
            if (Path.GetPathRoot(stDisplayPath).Equals(stDisplayPath))
            {
                CLog.Here().Error($"Confirm, OS:Windows, is RootPath, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0018"), stDisplayPath.ToString()));
                return;
            }

            if (stDisplayPath.Equals(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)))
            {
                CLog.Here().Error($"Confirm, OS:Windows, is UserProfile, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }
            else if (stDisplayPath.Equals(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)))
            {
                CLog.Here().Error($"Confirm, OS:Windows, is Desktop, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0256"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is Windows, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is ProgramFiles, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is ProgramFilesX86, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString()));
                return;
            }


            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is System, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString()));
                return;
            }

            strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.SystemX86);
            if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
            {
                CLog.Here().Error($"Confirm, OS:Windows, is SystemX86, Path : {stDisplayPath}");
                ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString()));
                return;
            }

            // 빈문자열 나와서 무조건 여기서 차단됨
            @*strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.SystemX86);
                if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, false) == 0)
                {
                    CLog.Here().Error($"Confirm, OS:Others, is SystemX86, Path : {stDisplayPath}");
                    ShowMessage("warn", String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString()));
                    return;
                }*@

            OnSaveDirPath.InvokeAsync(stDisplayPath + "|" + nNetIdx);
        }


        //CLog.Here().Information($"SelectSaveFolder Confirm");
        
        closePopUp();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="bDestPath"></param>
    /// <param name="strPath"></param>
    public void EnumerateFolder(bool bDestPath, string strPath)
    {
        string root = Directory.GetDirectoryRoot(strPath);
        SetCurrentDrive(root);
        //   entries = Directory.GetDirectories(root);
        entries = Directory.EnumerateFileSystemEntries(strPath)
        .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
        .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);

        //args.Children.Data = Directory.EnumerateDirectories(directory)
        //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System)) == 0);

        stTreeDir = strPath;
        stDisplayPath = stTreeDir;

        StateHasChanged();
    }


    public void EnumerateFolder(bool bDestPath, int nData)
    {
        @*        string root = Directory.GetDirectoryRoot(strPath);
            SetCurrentDrive(root);
            //   entries = Directory.GetDirectories(root);
            entries = Directory.EnumerateFileSystemEntries(strPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);

            //args.Children.Data = Directory.EnumerateDirectories(directory)
            //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System)) == 0);

            stTreeDir = strPath;
            stDisplayPath = stTreeDir;*@

        stDisplayPath = nData.ToString();

        StateHasChanged();
    }



    public async Task openPopUp(int Idx, string dir)
    {
        CLog.Here().Information($"SelectSaveFolder openPopUp");
        nNetIdx = Idx;
        stOriginPath = dir;

        object[] param3 = { "0" };
        await JSRuntime.InvokeAsync<object>("changeLeftSideBarZIndex", param3);

        //드라이브 변경 시 기존에 Expand된 하위항목들 모두 제거 처리
        //(entries 변경되어도 과거 드라이브의 하위가 잔여되는 버그 수정 건)
        await JSRuntime.InvokeAsync<object>("RadzenTreeCollapse", null);

        //await JSRuntime.InvokeVoidAsync("RadzenTreeNodeDoubleClick");

        if (dir != null && dir.Length > 0)
        {
            try
            {

                if (Directory.Exists(dir))
                {
                    //파일 탐색기를 드라이버를 기반으로 한 트리 타입으로 처리
                    @*string root = Directory.GetDirectoryRoot(dir);
                        SetCurrentDrive(root);
                        //   entries = Directory.GetDirectories(root);
                        entries = Directory.EnumerateFileSystemEntries(dir)
                        .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
                        .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
                        stTreeDir = dir;*@

                    EnumerateFolder(true, dir);

                }
                else
                {
                    DirectoryInfo di = Directory.CreateDirectory(dir);
                    if (di.Exists)
                    {
                        EnumerateFolder(true, dir);
                    }
                }

            }
            catch (Exception ex)
            {
                CLog.Here().Error($"openPopUp - Exception(MSG) : {ex.Message}");
                //entries = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
                @*entries = Directory.EnumerateFileSystemEntries(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile))
                    .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
                    .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
                    stTreeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);*@

                EnumerateFolder(true, Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
            }
        }

        object[] param = { "modal-selectsavefolder" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);

    }

    public void closePopUp()
    {
        //CLog.Here().Information($"SelectSaveFolder closePopUp");
        object[] param2 = { "0.7" };
        JSRuntime.InvokeAsync<object>("changeModalBg", param2);
        object[] param3 = { "1024" };
        JSRuntime.InvokeAsync<object>("changeModalZIndex", param3);
        //object[] param4 = { "#C2C7D0" };
        //JSRuntime.InvokeAsync<object>("changeModalFontColor", param4);

        object[] param5 = { "1101" };
        JSRuntime.InvokeAsync<object>("changeLeftSideBarZIndex", param5);

        object[] param = { "modal-selectsavefolder" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    private void CreateNewFolder()
    {

        CLog.Here().Information($"SelectSaveFolder CreateNewFolder");

        try
        {

            ISGSideBarUIService SideBarUISvc = SGAppMgrSvc.SideBarUIService;
            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
                groupID = sgSideBar.GroupId;

            if (stMakeDirName.Length < 1)
            {
                string stMsg = XmlConf.GetTitle("L_FOLDER_NAME_IS_NEEDED");
                ShowMessage("error", stMsg);
                return;
            }
            if (stMakeDirName.Length > HsCmdCenter.GetReceiveFileNameLengthMax(groupID))
            {
                string stMsg = XmlConf.GetTitle("L_eFA_LONG_PATH_FILEORPATH");
                ShowMessage("error", stMsg);
                return;
            }

            // OS 미지원 문자 check, 알려줌
            string strDenyChar = "";
            if (CsFileFunc.isSupportFileName(stMakeDirName, out strDenyChar) == false)
            {
                strDenyChar = strDenyChar.Replace("$EMPTY", XmlConf.GetTitle("T_COMMON_EMPTY_CHAR"));
                string stMsg = String.Format(XmlConf.GetTitle("T_COMMON_OS_NOT_FILENAME_CHAR"), strDenyChar);
                ShowMessage("error", stMsg);
                return;
            }

            string stFullPath = stDisplayPath + "/" + stMakeDirName;
            DirectoryInfo di = new DirectoryInfo(stFullPath);
            if (di.Exists == false)
                di.Create();
            else
                return;

            ShowMessage("success", XmlConf.GetTitle("T_COMMON_FOLDER_CREATE_COMPLETE"));

            stMakeDirName = "";

            @*stTreeDir = stFullPath;
                stDisplayPath = stFullPath;*@

            //파일 탐색기를 드라이버를 기반으로 한 트리 타입으로 처리
            @*string root = Directory.GetDirectoryRoot(stDisplayPath);
                entries = Directory.GetDirectories(root);*@
            //entries = Directory.GetDirectories(stDisplayPath);

            // 사용유무, 낮에 결정
            EnumerateFolder(true, stDisplayPath);

            @*if (string.Compare(stDisplayPath, stTreeDir, true) != 0 &&
                    stDisplayPath.Length > stTreeDir.Length)
                {
                    DirectoryInfo dinfo = new DirectoryInfo(stDisplayPath);

                    TreeExpandEventArgs argData = new TreeExpandEventArgs();
                    argData.Text = dinfo.Name;
                    argData.Value = stDisplayPath;
                    argData.Children = new TreeItemSettings();

                    //argData.Text
                    LoadFiles(argData);
                }*@

        }
        catch (Exception ex)
        {
            CLog.Here().Information($"SelectSaveFolder CreateNewFolder, Exception(MSG) : {ex.Message}");
        }

        StateHasChanged();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //CLog.Here().Information($"SelectSaveFolder ShowMessage");
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void toUpperTree()
    {
        CLog.Here().Information($"SelectSaveFolder toUpperTree : {stTreeDir}");

        Debug.WriteLine(stTreeDir);
        if (Directory.GetParent(stTreeDir) != null)
        {
            stTreeDir = Directory.GetParent(stTreeDir).FullName;
            //entries = Directory.GetDirectories(stTreeDir);
            entries = Directory.EnumerateFileSystemEntries(stTreeDir)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            stDisplayPath = stTreeDir;
            StateHasChanged();
        }

    }

    private void changeDrive()
    {
        //드라이브 변경 시 기존에 Expand된 하위항목들 모두 제거 처리
        //(entries 변경되어도 과거 드라이브의 하위가 잔여되는 버그 수정 건)
        JSRuntime.InvokeAsync<object>("RadzenTreeCollapse", null);

        if (Directory.GetDirectories(stCurrentDrive) != null)
        {
            entries = Directory.EnumerateFileSystemEntries(stCurrentDrive)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            stDisplayPath = stCurrentDrive;
            StateHasChanged();
        }
    }

    void OnSelectPath(TreeEventArgs args)
    {
        dragLabel = 1;
        stDisplayPath = (string)args.Value;

        CLog.Here().Information($"SelectSaveFolder OnSelectPath : {stDisplayPath}");

        //LoadListFiles(args.Value as string);
        //OnSelectPathFromFileTree.InvokeAsync(args); //부모컴포넌트에 이벤트 전달
    }

    protected override void OnInitialized()
    {
        List<string> drivers = new List<string>();
        //드라이버 목록 중 접근 가능한 드라이버만 표시하도록 수정
        foreach (DriveInfo d in DriveInfo.GetDrives())
        {
            if (!d.IsReady)
                continue;

            drivers.Add(d.Name);
        }
        rootDrives = drivers.ToArray();//Directory.GetLogicalDrives();
        stCurrentDrive = rootDrives[0];
        //actionPopUpLoadFileList = LoadListFiles;
        actionDoubleClickListitem = DoubleClickItem;

        //CLog.Here().Information($"SelectSaveFolder OnInitialized");
        string[] drives = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
        //CLog.Here().Information($"SelectSaveFolder initiallized GetFolderPath : [{Environment.SpecialFolder.UserProfile}]");
        //CLog.Here().Information($"SelectSaveFolder FileAttributes.Hidden : [{FileAttributes.Hidden}]");
        //CLog.Here().Information($"SelectSaveFolder FileAttributes.Directory : [{FileAttributes.Directory}]");
        if (drives != null && drives.Length > 0)
        {
            //entries = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
            entries = Directory.EnumerateFileSystemEntries(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile))
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            stTreeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        }
        else
        {
            CLog.Here().Information($"drives null or drives.Lentgh : 0");
        }
        stDisplayPath = stTreeDir;
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();

        //전체 트리 방식이므로, 상위 루트로 이동하는 기능 제거
        //try
        //{
        //    if (Directory.GetParent(stPath) != null)
        //    {
        //        string strUpperPath = Directory.GetParent(stPath).FullName;
        //        if (strUpperPath != null && strUpperPath.Length > 0)
        //        {
        //            SGFileInfo fileEntry = new SGFileInfo();
        //            fileEntry.Name = "..";
        //            fileEntry.Size = 0;
        //            fileEntry.Path = strUpperPath;
        //            fileEntry.Ext = "";
        //            fileEntry.Type = 3;         //상위디렉토리 버튼
        //            sgFile.Add(fileEntry);
        //        }
        //    }
        //}
        //catch (Exception ex0)
        //{
        //    CLog.Error("GetParentError:" + ex0.Message);
        //}

        IEnumerable<string> fList = null;
        try
        {
            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("LoadListFiles, UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("LoadListFiles, Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error("LoadListFiles, Exception(MSG):" + ex3.Message);
        }

        string listHtml = makeSubFileList();
        object[] param = { "divPopUpFileList", listHtml };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
        StateHasChanged();
    }

    private string makeSubFileList()
    {
        StringBuilder stRtn = new StringBuilder();
        if (sgFile != null && sgFile.Count > 0)
        {
            if (dragLabel > 0) { dragLabel = 1; }
            foreach (SGFileInfo item in sgFile)
            {
                if (item.Type == 3)
                {
                    stRtn.Append(@"<div style='cursor:pointer;' draggable='true' label='" + dragLabel + "' name='popfile' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' onclick='refreshListPopUp(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                    stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    stRtn.Append(item.getNameStr());
                    stRtn.Append(@"</div>");
                }
                else
                {
                    if (item.Type == 1)
                    {
                        stRtn.Append(@"<div style='cursor:pointer;' draggable='true' label='" + dragLabel + "' name='popfile' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' ondblclick='addFileToDropZone(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-file' style='color:#8a8a8a;'></i>&nbsp;");
                    }
                    else
                    {
                        stRtn.Append(@"<div style='cursor:pointer;' draggable='true' label='" + dragLabel + "' name='popfile' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' ondblclick='refreshListPopUp(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    }
                    stRtn.Append(item.getNameStr() + " " + item.getSizeStr());
                    stRtn.Append(@"</div>");
                }
                if (dragLabel > 0) { dragLabel++; }
            }
        }
        return stRtn.ToString();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    void LoadFiles(TreeExpandEventArgs args)
    {
        //CLog.Here().Information($"SelectSaveFolder LoadFiles");
        try
        {
            var directory = args.Value as string;
            //Debug.WriteLine("PATH2:" + directory);
            //args.Children.Data = Directory.EnumerateFileSystemEntries(directory)
            //    .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System) ) == 0);
            //IEnumerable<string> iEnumDir = Directory.EnumerateDirectories(directory)
            //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System)) == 0);

            IEnumerable<string> iEnumDir = Directory.EnumerateFileSystemEntries(directory)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            args.Children.Data = iEnumDir;

            //args.Children.Data = Directory.EnumerateDirectories(directory)
            //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System)) == 0);

            args.Children.Text = GetTextForNode;
            args.Children.HasChildren = (path) => Directory.Exists((string)path);
            args.Children.Template = FileOrFolderTemplate;
        }
        catch (Exception ex)
        {
            CLog.Here().Information($"LoadFiles, Exception(MSG) : {ex.Message}");
            //Console.WriteLine(ex.Message);
        }

        StateHasChanged();
    }

    string GetTextForNode(object data)
    {
        //CLog.Here().Information($"SelectSaveFolder GetTextForNode");
        string name = Path.GetFileName((string)data);
        if (name == null || name.Length < 1)
        {
            if ((data as string).Length >= 2) name = data.ToString().Substring(0, 2);
        }
        return name;
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    /// <param name="item"></param>
    private static void OnItemClick(MouseEventArgs args, RadzenTreeItem item)
    {

        DateTime now = DateTime.Now;

        //if (timeInterval.AddMilliseconds(doubleClickMaxTime) <= now || lastSelectPath != item.Value) // != 기호사용시 문제 발생
        if (timeInterval.AddMilliseconds(doubleClickMaxTime) <= now || string.Compare(lastSelectPath, (string)item.Value, false) != 0)
        {
            //일반클릭
            timeInterval = now;
            CLog.Here().Information($"##### - OnItemClick, OnClick time : {timeInterval.AddMilliseconds(doubleClickMaxTime) <= now}, PathChanged : {string.Compare(lastSelectPath, (string)item.Value, false) != 0}");
            //CLog.Here().Information($"##### - OnItemClick, OnClick(timeInterval(Min,Sec,MilliSec) : {timeInterval.Minute}-{timeInterval.Second}-{timeInterval.Millisecond}, Now : {now.ToString()} ), item : {item.Text}, lastSelectPath : {lastSelectPath}, Path : {item.Value}");
        }
        else
        {
            //더블클릭
            timeInterval = now.AddSeconds(-10);     //이후 3번클릭은 더블클릭 되지 않도록

            CLog.Here().Information($"##### - OnItemClick, OnDoubleClick(#####) time : {timeInterval.AddMilliseconds(doubleClickMaxTime) <= now}, PathChanged : {string.Compare(lastSelectPath, (string)item.Value, false) != 0}");
            //CLog.Here().Information($"##### - OnClick, DoubleClick(#####)(timeInterval(Min,Sec,MilliSec) : {timeInterval.Minute}-{timeInterval.Second}-{timeInterval.Millisecond}, Now : {now.ToString()} ), item : {item.Text}, lastSelectPath : {lastSelectPath}, Path : {item.Value}");
            actionDoubleClickListitem.Invoke((string)item.Value);
        }

        lastSelectPath = (string)item.Value;

        //CLog.Here().Information($"##### - OnClick, item : {item.Text}, Path : {item.Value}");
    }

    /// <summary>
    ///
    /// </summary>
    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {

    //context.Selected = false;

    // path : fullpath 경로
    string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

    //CLog.Here().Information($"SelectSaveFolder, FileOrFolderTemplate : {path}");

    builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", isDirectory ? "folder" : "insert_drive_file");

        builder.CloseComponent();
        if (isDirectory)
        {
            builder.OpenElement(2, "div");
            builder.AddAttribute(2, "class", "p-0 m-0");
            builder.AddAttribute(2, "Style", "width:100%;");
            builder.AddAttribute<MouseEventArgs>(3, "onclick", RuntimeHelpers.TypeCheck<EventCallback<MouseEventArgs>>(EventCallback.Factory.Create<MouseEventArgs>(builder, (args) => OnItemClick(args, context))));
            builder.AddContent(4, context.Text);
        }
        builder.CloseElement();

    //builder.AddAttribute(2, "Selected", "false");
    // context.Text : 파일이름
    //builder.AddContent(3, context.Text);
    //          @ondblclick="()=>EnumerateFolder(false, strTestPath)"

    @*string htmlString = "<div class=\"p-0 m-0\" style=\"width:100%;\"" +
            // " @ondblclick=\"()=>EnumerateFolder(true, " + path.Replace(@"\", @"\\") + ")\" >" + context.Text + "</div>";
            " @ondblclick=\"()=>EnumerateFolder(true, 1)\" >" + context.Text + "</div>";
        builder.AddContent(3, (MarkupString)htmlString);*@
    };

}