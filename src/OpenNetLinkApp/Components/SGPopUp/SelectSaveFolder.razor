@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HsCmdCenter
@using System.Runtime.InteropServices
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics
@using Serilog
@using Serilog.Events
@using AgLogManager
@using System.Text
@using OpenNetLinkApp.Data.SGDicData.SGUnitData

<div class="modal fade" id="modal-selectsavefolder" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                @*<h5 class="modal-title pt-1 text-bold "> <i class="fas fa-search pr-2"></i>@XmlConf.GetTitle("T_COMMON_FOLDER_SEARCH")</h5>*@
                <h5 class="modal-title pt-1 text-bold" style="color:black">
                    <i class="fas fa-folder-open fa-lg  pl-1 pr-1" style="color:#ffb100;"></i>
                    @stDisplayPath
                </h5>
                <button @onclick="closePopUp" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body ">
                <div class="card-body  mb-3" style="border:1px solid #b3c8e4; background-color:#fff; border-radius:3px; padding:.3rem !important;">

                    <!-- s 결재라인 -->

                    <div class="col-md-12 p-0">
                        <div class="row">
                            <div class="col-md-12" style="letter-spacing:.3px !important; ">
                                @*<select style="width:200px;" @bind="_stCurrentDrive">
                                    @foreach (string item in rootDrives)
                                    {
                                    <option value="@item">@item</option>
                                    }
                                    </select>*@
                                <div class="dropdown">
                                    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="width:200px; text-align:left">
                                        @_stCurrentDrive
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="dropdownMenu1" style="min-width:200px;">
                                        @foreach (string str in rootDrives)
                                        {
                                            <button class="dropdown-item text-xs p-1" style="text-align:left" type="button" @onclick="@(()=>SetCurrentDrive(str))">@str</button>
                                        }
                                    </div>
                                </div>
                            </div>
                            @*<div class="col-md-12" style="letter-spacing:.3px !important; ">
                                <i class="fas fa-folder-open fa-lg  pl-1 pr-1" style="color:#ffb100;"></i>
                                @stDisplayPath
                                </div>*@
                        </div>
                    </div>
                </div>

                <div class="card-bod">

                    <div class="row">
                        <div class="col-md-12">
                            <fieldset class="ui-fieldset ui-widget ui-widget-content ui-corner-all">

                                <div class="ui-fieldset-content-wrapper" role="region" id="ui-fieldset-0-content" aria-hidden="false" style="display: block;">
                                    <div class="ui-fieldset-content">

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="card-body table-responsive" style="height:300px; border:1px solid #c6ceda; background-color:#fff;overflow:hidden;padding:0 0 0 0;overflow:auto">


                                                    @*
                                                        //상위 루트로 이동하는 기능 제거
                                                        <div @onclick="toUpperTree">
                                                        <i class="fas fa-folder align-items-center" style="padding-left:17px;cursor:pointer;"></i><span style="cursor:pointer;">&nbsp;..</span>
                                                        </div>*@
                                                    <div>
                                                        <RadzenTree Change="@OnSelectPath" Data="@entries" Expand="@LoadFiles" Style="width: 100%;height:100%;overflow:auto">
                                                            <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate" />
                                                        </RadzenTree>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>

                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer clearfix pl-4 pr-4 pt-3 pb-3">
                <div class="col-md-12  p-0">
                    <div class="row  p-0">
@*
                        <div class="col-md-9 text-left">
                            <table>
                                <tr>
                                    <td>
                                        <input type="text" class="form-control p-2 border-0" style="border-radius:0px;width:150px;" @bind="stMakeDirName" id="1" placeholder="@XmlConf.GetTitle("L_FOLDER_NAME_IS_NEEDED")" />
                                    </td>
                                    <td>
                                        <button @onclick="CreateNewFolder" type="button" class="btn btn-md btn-navy">
                                            <i class="fas fa-folder"></i>@XmlConf.GetTitle("L_MAKE_NEW_FOLDER")
                                        </button>

                                    </td>
                                </tr>
                            </table>
                        </div>
*@
                        <div class="col-md-3 text-right p-0">
                            <button @onclick="Confirm" type="button" class="btn btn-md btn-blue mr-0 "><i class="fas fa-check"></i>@XmlConf.GetTitle("T_COMMON_OK")</button>
                            <button @onclick="closePopUp" type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_COMMON_CANCEL")</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private string stTreeDir = String.Empty;
    IEnumerable<string> entries = null;
    public int dragLabel = 1;
    public string curDir { get; set; }
    public bool IsVisible { get; set; }
    private string stMakeDirName = String.Empty;
    private string stDisplayPath = String.Empty;
    private int nNetIdx = 0;
    private string stOriginPath = String.Empty;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SelectSaveFolder>();
    private string[] rootDrives;
    private string stCurrentDrive = "";
    public string _stCurrentDrive
    {
        get { return stCurrentDrive; }
        set
        {
            stCurrentDrive = value;
            changeDrive();
        }
    }
    private static Action<string> actionPopUpLoadFileList;
    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    [Parameter]
    public EventCallback<string> OnSaveDirPath { get; set; }


    public void SetCurrentDrive(string value)
    {
        _stCurrentDrive = value;
        //StateHasChanged();
    }

    public void Confirm()
    {

        if (Path.GetPathRoot(stDisplayPath).Equals(stDisplayPath))
        {
            string strMsg = String.Format(XmlConf.GetErrMsg("E_0018"), stDisplayPath.ToString());
            ShowMessage("warn", strMsg);
            return;
        }

        if (stDisplayPath.Equals(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)))
        {
            string strMsg = String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString());
            ShowMessage("warn", strMsg);
            return;
        }
        else if (stDisplayPath.Equals(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)))
        {
            string strMsg = String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString());
            ShowMessage("warn", strMsg);
            return;
        }

        string strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
        if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, true) == 0)
        {
            string strMsg = String.Format(XmlConf.GetErrMsg("E_0020"), stDisplayPath.ToString());
            ShowMessage("warn", strMsg);
            return;
        }

        strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
        if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, true) == 0)
        {
            string strMsg = String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString());
            ShowMessage("warn", strMsg);
            return;
        }

        strTempPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
        if (string.Compare(stDisplayPath, 0, strTempPath, 0, strTempPath.Length, true) == 0)
        {
            string strMsg = String.Format(XmlConf.GetErrMsg("E_0019"), stDisplayPath.ToString());
            ShowMessage("warn", strMsg);
            return;
        }

        //CLog.Here().Information($"SelectSaveFolder Confirm");
        OnSaveDirPath.InvokeAsync(stDisplayPath + "|" + nNetIdx);
        closePopUp();
    }

    public async Task openPopUp(int Idx, string dir)
    {
        //CLog.Here().Information($"SelectSaveFolder openPopUp");
        nNetIdx = Idx;
        stOriginPath = dir;

        object[] param3 = { "0" };
        await JSRuntime.InvokeAsync<object>("changeLeftSideBarZIndex", param3);

        //드라이브 변경 시 기존에 Expand된 하위항목들 모두 제거 처리
        //(entries 변경되어도 과거 드라이브의 하위가 잔여되는 버그 수정 건)
        await JSRuntime.InvokeAsync<object>("RadzenTreeCollapse", null);

        if (dir != null && dir.Length > 0)
        {
            try
            {
                //파일 탐색기를 드라이버를 기반으로 한 트리 타입으로 처리
                string root = Directory.GetDirectoryRoot(dir);
                SetCurrentDrive(root);
                //   entries = Directory.GetDirectories(root);
                entries = Directory.EnumerateFileSystemEntries(root)
              .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
              .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
                stTreeDir = dir;
            }
            catch (Exception ex)
            {
                CLog.Error(ex.Message);
                //entries = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
                entries = Directory.EnumerateFileSystemEntries(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile))
                .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
                .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
                stTreeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
            }
        }
        stDisplayPath = stTreeDir;
        StateHasChanged();

        object[] param = { "modal-selectsavefolder" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        //CLog.Here().Information($"SelectSaveFolder closePopUp");
        object[] param2 = { "0.7" };
        JSRuntime.InvokeAsync<object>("changeModalBg", param2);
        object[] param3 = { "1024" };
        JSRuntime.InvokeAsync<object>("changeModalZIndex", param3);
        //object[] param4 = { "#C2C7D0" };
        //JSRuntime.InvokeAsync<object>("changeModalFontColor", param4);

        object[] param5 = { "1101" };
        JSRuntime.InvokeAsync<object>("changeLeftSideBarZIndex", param5);

        object[] param = { "modal-selectsavefolder" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    private void CreateNewFolder()
    {
        //CLog.Here().Information($"SelectSaveFolder CreateNewFolder");
        ISGSideBarUIService SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (stMakeDirName.Length < 1)
        {
            string stMsg = XmlConf.GetTitle("L_FOLDER_NAME_IS_NEEDED");
            ShowMessage("error", stMsg);
            return;
        }
        if (stMakeDirName.Length > HsCmdCenter.GetReceiveFileNameLengthMax(groupID))
        {
            string stMsg = XmlConf.GetTitle("L_eFA_LONG_PATH_FILEORPATH");
            ShowMessage("error", stMsg);
            return;
        }
        string stFullPath = stDisplayPath + "/" + stMakeDirName;
        DirectoryInfo di = new DirectoryInfo(stFullPath);
        if (di.Exists == false)
            di.Create();
        else
            return;

        string stMsgComplete = XmlConf.GetTitle("T_COMMON_FOLDER_CREATE_COMPLETE");
        ShowMessage("success", stMsgComplete);

        //파일 탐색기를 드라이버를 기반으로 한 트리 타입으로 처리
        string root = Directory.GetDirectoryRoot(stDisplayPath);
        entries = Directory.GetDirectories(root);
        //entries = Directory.GetDirectories(stDisplayPath);
        StateHasChanged();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //CLog.Here().Information($"SelectSaveFolder ShowMessage");
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void toUpperTree()
    {
        //CLog.Here().Information($"SelectSaveFolder toUpperTree");
        Debug.WriteLine(stTreeDir);
        if (Directory.GetParent(stTreeDir) != null)
        {
            stTreeDir = Directory.GetParent(stTreeDir).FullName;
            //entries = Directory.GetDirectories(stTreeDir);
            entries = Directory.EnumerateFileSystemEntries(stTreeDir)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            stDisplayPath = stTreeDir;
            StateHasChanged();
        }
    }

    private void changeDrive()
    {
        //드라이브 변경 시 기존에 Expand된 하위항목들 모두 제거 처리
        //(entries 변경되어도 과거 드라이브의 하위가 잔여되는 버그 수정 건)
        JSRuntime.InvokeAsync<object>("RadzenTreeCollapse", null);

        if (Directory.GetDirectories(stCurrentDrive) != null)
        {
            entries = Directory.EnumerateFileSystemEntries(stCurrentDrive)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            stDisplayPath = stCurrentDrive;

            StateHasChanged();
        }
    }

    void OnSelectPath(TreeEventArgs args)
    {
        //CLog.Here().Information($"SelectSaveFolder OnSelectPath");
        dragLabel = 1;
        curDir = args.Text;
        stDisplayPath = (string)args.Value;

        //LoadListFiles(args.Value as string);
        //OnSelectPathFromFileTree.InvokeAsync(args); //부모컴포넌트에 이벤트 전달
    }

    protected override void OnInitialized()
    {
        List<string> drivers = new List<string>();
        //드라이버 목록 중 접근 가능한 드라이버만 표시하도록 수정
        foreach (DriveInfo d in DriveInfo.GetDrives())
        {
            if (!d.IsReady)
                continue;

            drivers.Add(d.Name);
        }
        rootDrives = drivers.ToArray();//Directory.GetLogicalDrives();
        stCurrentDrive = rootDrives[0];
        actionPopUpLoadFileList = LoadListFiles;

        //CLog.Here().Information($"SelectSaveFolder OnInitialized");
        IsVisible = true;
        string[] drives = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
        //CLog.Here().Information($"SelectSaveFolder initiallized GetFolderPath : [{Environment.SpecialFolder.UserProfile}]");
        //CLog.Here().Information($"SelectSaveFolder FileAttributes.Hidden : [{FileAttributes.Hidden}]");
        //CLog.Here().Information($"SelectSaveFolder FileAttributes.Directory : [{FileAttributes.Directory}]");
        if (drives != null && drives.Length > 0)
        {
            //entries = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
            entries = Directory.EnumerateFileSystemEntries(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile))
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            stTreeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        }
        else
        {
            CLog.Here().Information($"drives null or drives.Lentgh : 0");
        }

        stDisplayPath = stTreeDir;
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();

        //전체 트리 방식이므로, 상위 루트로 이동하는 기능 제거
        //try
        //{
        //    if (Directory.GetParent(stPath) != null)
        //    {
        //        string strUpperPath = Directory.GetParent(stPath).FullName;
        //        if (strUpperPath != null && strUpperPath.Length > 0)
        //        {
        //            SGFileInfo fileEntry = new SGFileInfo();
        //            fileEntry.Name = "..";
        //            fileEntry.Size = 0;
        //            fileEntry.Path = strUpperPath;
        //            fileEntry.Ext = "";
        //            fileEntry.Type = 3;         //상위디렉토리 버튼
        //            sgFile.Add(fileEntry);
        //        }
        //    }
        //}
        //catch (Exception ex0)
        //{
        //    CLog.Error("GetParentError:" + ex0.Message);
        //}

        IEnumerable<string> fList = null;
        try
        {
            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Error("UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Error("Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Error("Exception:" + ex3.Message);
        }

        string listHtml = makeSubFileList();
        object[] param = { "divPopUpFileList", listHtml };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
        StateHasChanged();
    }

    private string makeSubFileList()
    {
        StringBuilder stRtn = new StringBuilder();
        if (sgFile != null && sgFile.Count > 0)
        {
            if (dragLabel > 0) { dragLabel = 1; }
            foreach (SGFileInfo item in sgFile)
            {
                if (item.Type == 3)
                {
                    stRtn.Append(@"<div style='cursor:pointer;' draggable='true' label='" + dragLabel + "' name='popfile' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' onclick='refreshListPopUp(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                    stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    stRtn.Append(item.getNameStr());
                    stRtn.Append(@"</div>");
                }
                else
                {
                    if (item.Type == 1)
                    {
                        stRtn.Append(@"<div style='cursor:pointer;' draggable='true' label='" + dragLabel + "' name='popfile' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' ondblclick='addFileToDropZone(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-file' style='color:#8a8a8a;'></i>&nbsp;");
                    }
                    else
                    {
                        stRtn.Append(@"<div style='cursor:pointer;' draggable='true' label='" + dragLabel + "' name='popfile' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' ondblclick='refreshListPopUp(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    }
                    stRtn.Append(item.getNameStr() + " " + item.getSizeStr());
                    stRtn.Append(@"</div>");
                }
                if (dragLabel > 0) { dragLabel++; }
            }
        }
        return stRtn.ToString();
    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        //CLog.Here().Information($"SelectSaveFolder LoadFiles");
        try
        {
            var directory = args.Value as string;
            //Debug.WriteLine("PATH2:" + directory);
            //args.Children.Data = Directory.EnumerateFileSystemEntries(directory)
            //    .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System) ) == 0);
            //IEnumerable<string> iEnumDir = Directory.EnumerateDirectories(directory)
            //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System)) == 0);=
          
            IEnumerable<string> iEnumDir = Directory.EnumerateFileSystemEntries(directory)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);
            args.Children.Data = iEnumDir;

            //args.Children.Data = Directory.EnumerateDirectories(directory)
            //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden | FileAttributes.System)) == 0);

            args.Children.Text = GetTextForNode;
            args.Children.HasChildren = (path) => Directory.Exists((string)path);
            args.Children.Template = FileOrFolderTemplate;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    string GetTextForNode(object data)
    {
        //CLog.Here().Information($"SelectSaveFolder GetTextForNode");
        string name = Path.GetFileName((string)data);
        if (name == null || name.Length < 1)
        {
            if ((data as string).Length >= 2) name = data.ToString().Substring(0, 2);
        }
        return name;
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        //CLog.Here().Information($"SelectSaveFolder FileOrFolderTemplate");
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", isDirectory ? "folder" : "insert_drive_file");

        if (!isDirectory)
        {
            builder.AddAttribute(2, "Style", "margin-left: 24px");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

}