@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject PageStatusService pageService
<div class="modal fade" id="modal-fileprevprogress">
    <div class="modal-dialog modal-default1">
        <div class="modal-content">
            <div class="modal-header-default">
                <div class="modal-title"><i class="fas fa-file-export blue-txt mr-2 "></i>@strTitle</div>            <!--파일미리보기-->
                <!--<button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>-->
            </div>
            <div class="modal-body-default">

                <div class=" alert_txt ">
                    <label class="mb-1">
                        @strInfo                                     <!--파일 수신중 입니다./r/n잠시만 기다려 주십시오..-->
                    </label>
                    <p>@strProgress : @Progress </p>                                                                     <!--진행률-->


                    <div class="progress progress-xs mb-2" style="border-radius: 3px">
                        <div class="progress-bar progress-bar-danger" style="width: @Progress;  border-radius: 3px"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer-default">
                <button @onclick="RecvCancel" type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>취소</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    public string strTitle = "";
    public string strInfo = "";
    public string strProgress = "";

    public bool bOpen = false;


    public string Progress { get; set; }
    public async Task openPopUp()
    {
        pageService.SetFilePrevRecving(true);
        bOpen = true;
        object[] param = { "modal-fileprevprogress" };
        ChangeProgress(0);
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public async Task CancelclosePopUp()
    {
        pageService.SetFilePrevRecving(false);
        bOpen = false;
        object[] param = { "modal-fileprevprogress" };
        await JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public async Task closePopUp()
    {
        pageService.SetFilePrevRecving(false);
        bOpen = false;
        object[] param = { "modal-fileprevprogress" };
        ChangeProgress(100);
        System.Threading.Thread.Sleep(1000);
        await JSRuntime.InvokeAsync<object>("closePopUp", param);
    }
    protected override void OnInitialized()
    {
        InitText();
        Progress = "0%";
        base.OnInitialized();
    }

    public void ChangeProgress(int pg)
    {
        Progress = pg + "%";
        StateHasChanged();
        System.Threading.Thread.Sleep(1);
    }

    public void InitText()
    {
        strTitle = XmlConf.GetTitle("T_DETAIL_FILEPREVIEW");                  // 파일미리보기
        strInfo = XmlConf.GetWarnMsg("W_0087");                     // 파일 수신중 입니다./r/n잠시만 기다려 주십시오.
        strInfo = strInfo.Replace("/r/n", "<br>");
        strProgress = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
    }

    public bool GetOpen()
    {
        return bOpen;
    }

    public async void RecvCancel()
    {
        pageService.SetFilePrevRecving(false);
        await OnCancel.InvokeAsync("cancel");
        await CancelclosePopUp();
    }

    [Parameter]
    public EventCallback<string> OnCancel { get; set; }
}
