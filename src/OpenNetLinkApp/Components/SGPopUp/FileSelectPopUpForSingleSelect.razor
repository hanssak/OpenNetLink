@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using System.Text
@using OpenNetLinkApp.Components.SGTransfer
@using System.Security.Permissions
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using AgLogManager

@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf


<div class="modal fade" id="FileSelectPopUpForSingleSelect">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                <h5 class="modal-title pt-1 text-bold "> <i class="fas fa-search pr-2"></i>@XmlConf.GetTitle("T_FILE_SELECT")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body ">
                <div class="card-body  mb-3" style="border:1px solid #b3c8e4; background-color:#fff; border-radius:3px; padding:.3rem !important;">

                    <div class="col-md-12 p-0">
                        <div class="row">
                            <div class="col-md-12" style="letter-spacing:.3px !important; ">
                                <select style="width:200px;" @bind="_stCurrentDrive">
                                    @foreach (string item in drives)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-bod">
                    <div class="row">
                        <div class="col-md-12">
                            <fieldset class="ui-fieldset ui-widget ui-widget-content ui-corner-all">

                                <div class="ui-fieldset-content-wrapper" role="region" id="ui-fieldset-0-content" aria-hidden="false" style="display: block;">
                                    <div class="ui-fieldset-content">

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="card-body table-responsive p-2" style="height:300px; border:1px solid #c6ceda; background-color:#fff;">
                                                    <table style="width:100%;height:100%;">
                                                        <tr>
                                                            <td style="width:40%;">
                                                                <FileTreeCustom @ref="refFileTreeCustom" OnSelectPathFromFileTree="changeSelectPopUpPath"></FileTreeCustom>
                                                            </td>
                                                            <td>
                                                                <div id="divPopUpFileList" style="width:100%;height:100%;padding:1px 1px 1px 0px;overflow:auto">
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>

                </div>
            </div>

            <div class="modal-footer clearfix pl-4 pr-4 pt-3 pb-3">
                <div class="col-md-12  p-0">
                    <div class="row  p-0">
                        <div class="col-md-9 text-right p-0">
                            <button type="button" name="popUpOkBtn" class="btn btn-md btn-blue mr-0" @onclick="selectOK"><i class="fas fa-check"></i>확인</button>
                            <button type="button" class="btn btn-md btn-black mr-0" data-dismiss="modal"><i class="fas fa-times"></i>취소</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<List<string>> OnSelectOK { get; set; }

    private string[] drives;
    private string stCurrentDrive = "";
    public string _stCurrentDrive
    {
        get { return stCurrentDrive; }
        set
        {
            stCurrentDrive = value;
            changeDrive();
        }
    }
    private static Action<string> actionPopUpLoadFileList;

    private string stSelectPath = "";
    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<FileSelectPopUp>();
    public int dragLabel = 1;
    FileTreeCustom refFileTreeCustom;

    private async void selectOK()
    {
        List<string> lstFiles = new List<string>();
        string files = await JSRuntime.InvokeAsync<string>("getFileSelection");

        System.Diagnostics.Debug.WriteLine(files);

        closePopUp();
        string[] arr = files.Split("[HSDELIMETER]");
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i].Length > 1)
                lstFiles.Add(arr[i]);
        }
        if (lstFiles.Count > 0)
            await OnSelectOK.InvokeAsync(lstFiles); //부모컴포넌트에 이벤트 전달
    }

    private void changeDrive()
    {
        //System.Diagnostics.Debug.WriteLine(stCurrentDrive);
        refFileTreeCustom.changeDrive(stCurrentDrive);
    }

    protected override void OnInitialized()
    {
        drives = Directory.GetLogicalDrives();
        stCurrentDrive = drives[0];
        actionPopUpLoadFileList = LoadListFiles;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadListFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
        }
        base.OnAfterRender(firstRender);
    }

    private void changeSelectPopUpPath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
        LoadListFiles(stSelectPath);
    }
    public async Task openPopUp()
    {
        object[] param = { "FileSelectPopUpForSingleSelect" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }
    public void closePopUp()
    {
        object[] param = { "FileSelectPopUpForSingleSelect" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();
        try
        {
            if (Directory.GetParent(stPath) != null)
            {
                string strUpperPath = Directory.GetParent(stPath).FullName;
                if (strUpperPath != null && strUpperPath.Length > 0)
                {
                    SGFileInfo fileEntry = new SGFileInfo();
                    fileEntry.Name = "..";
                    fileEntry.Size = 0;
                    fileEntry.Path = strUpperPath;
                    fileEntry.Ext = "";
                    fileEntry.Type = 3;         //상위디렉토리 버튼
                    sgFile.Add(fileEntry);
                }
            }
        }
        catch (Exception ex0)
        {
            CLog.Here().Error("LoadListFiles, GetParentError:" + ex0.Message);
        }

        IEnumerable<string> fList = null;
        try
        {
            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("LoadListFiles, UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("LoadListFiles, Exception:"+ e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error($"LoadListFiles, Exception:{ex3.Message}");
        }

        string listHtml = makeSubFileList();
        object[] param = { "divPopUpFileList", listHtml };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
        StateHasChanged();
    }

    [JSInvokable("JSLoadListFilesPopUpForSingleSelect")]
    public static void JSLoadListFilesPopUpForSingleSelect(string path)
    {
        actionPopUpLoadFileList.Invoke(path);
    }

    private string makeSubFileList()
    {
        StringBuilder stRtn = new StringBuilder();
        if (sgFile != null && sgFile.Count > 0)
        {
            if (dragLabel > 0) { dragLabel = 1; }
            foreach (SGFileInfo item in sgFile)
            {
                if (item.Type == 3)
                {
                    stRtn.Append(@"<div style='cursor:pointer;' label='" + dragLabel + "' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' onclick='refreshListPopUpForSingleSelect(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                    stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    stRtn.Append(item.getNameStr());
                    stRtn.Append(@"</div>");
                }
                else
                {
                    if (item.Type == 1) //이것은 파일
                    {
                        stRtn.Append(@"<div style='cursor:pointer;' label='" + dragLabel + "' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' onclick='addFileToDropZoneForSingleSelect(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-file' style='color:#8a8a8a;'></i>&nbsp;");
                    }
                    else    //이것은 폴더 
                    {
                        stRtn.Append(@"<div style='cursor:pointer;' label='" + dragLabel + "' data-draggable='item' class='draggable' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' onclick='refreshListPopUpForSingleSelect(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    }
                    stRtn.Append(item.getNameStr() + " " + item.getSizeStr());
                    stRtn.Append(@"</div>");
                }
                if (dragLabel > 0) { dragLabel++; }
            }
        }
        return stRtn.ToString();
    }
}
