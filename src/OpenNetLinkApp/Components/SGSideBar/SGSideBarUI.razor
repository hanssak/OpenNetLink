@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@inject HSCmdCenter HsCmdCenter
@inject PageStatusService pageService
@inject XmlConfService XmlConf
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
<!-- Sidebar Menu -->
<!--
    /*
    ISGSideBarUIService AddMenu(int groupId, int menuId, string name, string icon, string path,
                              string tooltip = "", string menuOpenClass = "", string activeClass = "", bool expanded = false);
    ISGSideBarUIService AddSubMenu(int groupId, int menuId, string name, string icon, string path,
                              string tooltip = "", string menuOpenClass = "", string activeClass = "", bool expanded = false);
    */
<nav class="mt-2">
  <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
-->
<nav class="mt-0">
    <ul class="nav nav-pills nav-sidebar flex-column " data-widget="treeview" role="menu" data-accordion="false">
        <!-- Add icons to the links using the .nav-icon class
        with font-awesome or any other icon font library -->
        @if (SideBarUISvc.MenuList?.Count > 0)
        {


            // Exist Menu
            @foreach (var MenuItem in SideBarUISvc.MenuList)
            {
                /* Processing each Menu */
                @if (MenuItem.Actived) SideBarUISvc.ActiveMenu = MenuItem;
                @if (MenuItem.Child?.Count > 0)
                {
                    /* Exist SubMenu */
                    /* s./ 업무망-인터넷망 */
                    <li class="nav-item has-treeview @(MenuItem.MenuOpenClass)">
                        @if (!String.IsNullOrEmpty(MenuItem.Path))
                        {
                            <a href="@MenuItem.Path" class="nav-link m-0 @(MenuItem.ActiveClass)"
                               style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
                               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))"
                               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))">
                                <i class="nav-icon @(MenuItem.Icon /*fas fa-tachometer-alt*/) text-md logo-xs mt-2"></i>
                                <p style="font-size:1rem;" class="p-2">
                                    @(MenuItem.FromName /*Dashboard*/)
                                    <i class="fas fa-long-arrow-alt-right p-1"></i>
                                    @(MenuItem.ToName /*Dashboard*/)
                                    <!--<i class="right fas fa-angle-left mt-1"></i>-->
                                    <!-- Badge -->
                                    @if (GetNotiInfoCount(NOTI_TYPE.USER, MenuItem.GroupId, strUserSeq) > 0 || GetAlarmInfoCount(MenuItem.GroupId, strUserSeq) > 0)
                                    {
                                        <span class="@(MenuItem.BadgeType /*left badge badge-danger*/) m-2">@(MenuItem.BadgeValue /*New*/)</span>
                                    }
                                </p>
                            </a>
                        }
                        else
                        {
                            <a class="nav-link m-0 @(MenuItem.ActiveClass)"
                               style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
                               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))"
                               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))">
                                <i class="nav-icon @(MenuItem.Icon /*fas fa-tachometer-alt*/) text-md logo-xs mt-2"></i>
                                <p style="font-size:1rem;" class="p-2">
                                    @(MenuItem.FromName /*Dashboard*/)
                                    <i class="fas fa-long-arrow-alt-right p-1"></i>
                                    @(MenuItem.ToName /*Dashboard*/)
                                    <!-- <i class="right fas fa-angle-left mt-1"></i> -->
                                    <!-- Badge -->
                                    @if (GetNotiInfoCount(NOTI_TYPE.USER, MenuItem.GroupId, strUserSeq) > 0 || GetAlarmInfoCount(MenuItem.GroupId, strUserSeq) > 0)
                                    {
                                        <span class="@(MenuItem.BadgeType /*left badge badge-danger*/) m-2">@(MenuItem.BadgeValue /*New*/)</span>
                                    }
                                </p>
                            </a>
                        }
                        <ul class="nav nav-treeview">
                            @foreach (var SubMenuList in MenuItem.Child)
                            {
                                @if (SubMenuList.Actived) SideBarUISvc.ActiveMenu = SubMenuList;
                                @if (SubMenuList.Child?.Count > 0)
                                {
                                    <li class="nav-item has-treeview pt-2 @SubMenuList.MenuOpenClass">
                                        @if (!String.IsNullOrEmpty(SubMenuList.Path))
                                        {
                                            <a href="@SubMenuList.Path" class="nav-link"
                                               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))"
                                               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))">
                                                <i class="nav-icon @(SubMenuList.Icon)"></i>
                                                <p style="cursor:pointer">
                                                    @(GetDescription(SubMenuList.CategoryId))
                                                    @if (GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                              && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="@(SubMenuList.BadgeType) ">
                                                            @(GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId])
                                                        </span>
                                                    }
                                                    @if (GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                              && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="badge badge-danger ">
                                                            @GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId]
                                                        </span>
                                                    }
                                                    <i class="right fas fa-angle-left"></i>
                                                </p>
                                            </a>
                                        }
                                        else
                                        {
                                            <a class="nav-link"
                                               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))"
                                               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))">
                                                <i class="nav-icon @(SubMenuList.Icon)"></i>
                                                <p style="cursor:pointer">
                                                    @(GetDescription(SubMenuList.CategoryId))
                                                    @if (GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                              && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="@(SubMenuList.BadgeType) ">
                                                            @(GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId])
                                                        </span>
                                                    }
                                                    @if (GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                              && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="badge badge-danger ">
                                                            @GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId]
                                                        </span>
                                                    }
                                                    <i class="right fas fa-angle-left"></i>
                                                </p>
                                            </a>
                                        }
                                        <ul class="nav nav-treeview ">
                                            @foreach (var SubMenuItem in SubMenuList.Child)
                                            {
                                                /* Processing each SubMenu */
                                                @if (SubMenuItem.Actived) SideBarUISvc.ActiveMenu = SubMenuItem;
                                                <li class="nav-item">
                                                    <a href="@SubMenuItem.Path" class="nav-link @(SubMenuItem.ActiveClass)"
                                                       @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuItem))"
                                                       @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuItem))">
                                                        <span class="logo-xs ">&middot;</span>
                                                        <p style="padding-left: 10px;">
                                                            &middot;&nbsp;&nbsp;  @(SubMenuItem.ToName /*Dashboard v1*/)
                                                            <!-- Badge -->
                                                            <span class="@(SubMenuItem.BadgeType /*right badge badge-danger*/) ">@(SubMenuItem.BadgeValue /*New*/)</span>
                                                        </p>
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </li>
                                }
                                else
                                {
                                    <li class="nav-item">
                                        <a href="@SubMenuList.Path" class="nav-link "
                                           @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))"
                                           @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))">
                                            <i class="nav-icon @(SubMenuList.Icon)"></i>
                                            <p>
                                                @(GetDescription(SubMenuList.CategoryId))
                                                @if (GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                          && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                {
                                                    <span class="@(SubMenuList.BadgeType) ">
                                                        @(GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId])
                                                    </span>
                                                }
                                                @if (GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                          && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                {
                                                    <span class="badge badge-danger ">
                                                        @GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId]
                                                    </span>
                                                }
                                                <i class="right fas fa-angle-left"></i>
                                            </p>
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    </li>
                }
                else
                {

                    <!-- SideBarUISvc.ChgActiveMenu -->

                    /* Not Exist SubMenu */
                    <li class="nav-item">
                        <a href='javascript:void(0);' class="nav-link m-0 @(MenuItem.ActiveClass)"
                           style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
                           @onclick="@(async eventArgs =>  await ChangeActiveMenuWrapPopup(eventArgs, MenuItem))"
                           @onkeydown="@(async eventArgs => await ChangeActiveMenuWrapPopup(eventArgs, MenuItem))">
                            <i class="nav-icon @(MenuItem.Icon /*fas fa-th*/) text-md logo-xs mt-2"></i>
                            <p style="font-size:1rem;" class="p-2">
                                @(MenuItem.FromName /*Dashboard*/)
                                <i class="fas fa-long-arrow-alt-right p-1"></i>
                                @(MenuItem.ToName /*Dashboard*/)
                            </p>
                        </a>
                    </li>


                    <!-- <li class="nav-item">
                        <a href="@MenuItem.Path" class="nav-link m-0 @(MenuItem.ActiveClass)"
                            style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
                            @onclick="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))"
                            @onkeydown="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))">
                            <i class="nav-icon @(MenuItem.Icon /*fas fa-th*/) text-md logo-xs mt-2"></i>
                            <p style="font-size:1rem;" class="p-2">
                                @(MenuItem.ToName /*Widgets*/)
                                // Badge
                                @if (GetNotiInfoCount(NOTI_TYPE.USER, MenuItem.GroupId, strUserSeq) > 0 || GetAlarmInfoCount(MenuItem.GroupId, strUserSeq) > 0)
                                {
                                    <span class="@(MenuItem.BadgeType /*right badge badge-danger*/) m-2">@(MenuItem.BadgeValue /*New*/)</span>
                                }
                            </p>
                        </a>
                    </li> -->


                    <!-- Not Exist SubMenu -->
                }
                <!-- Processing each Menu -->
            }
            <!-- Exist Menu -->
        }

    </ul>
</nav>
<!-- /.Sidebar-Menu -->

<PopUpLogIn @ref=refPopUpLogIn goToPage="LoginIDPWAfterMenuAdd"></PopUpLogIn>
<LogIn_GPKI @ref=refPopUpGpkiLogIn goToPageGPKI="LoginGpkiAfterMenuAdd"></LogIn_GPKI>
<PWChange2 @ref=refPWChange goToPagePWChgAfter="pwChgAfterGpkiPopup"></PWChange2>
<PWChangeDefaultPW2 @ref=refPWChangeDefaultPW goToPagePWInitAfter="pwInitAfterGpkiPopup"></PWChangeDefaultPW2>


@code
{
    PopUpLogIn refPopUpLogIn;
    LogIn_GPKI refPopUpGpkiLogIn;
    PWChange2 refPWChange;
    PWChangeDefaultPW2 refPWChangeDefaultPW;

    [Parameter] public ISGSideBarUIService SideBarUISvc { get; set; }

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;
    ISGSiteConfigService siteConfig;

    EventArgs eventArgsPopup;
    ISGSideBarUI activeMenuPopup;

    public string strUserSeq = "";


    private void ChangeSideBarUInNavigate()
    {
        AddMenuAfterLogin(activeMenuPopup);
        SideBarUISvc.ChgActiveMenu(eventArgsPopup, activeMenuPopup);

        string strNavigatePathWithGroupID = "";

        if (siteConfig.GetUseDashBoard())
            strNavigatePathWithGroupID = "/Welcome/";
        else
            strNavigatePathWithGroupID = "/Transfer/";

        strNavigatePathWithGroupID += activeMenuPopup.GroupId.ToString();

        MyNavigationManager.NavigateTo(strNavigatePathWithGroupID);
    }


    /**
    *@param nLoginUITypeData IDPW Login Popup의 eLoginUITypeData 값
    *@brief IDPW Popup 로그인후 callback 호출해주는 함수
    */
    public void LoginIDPWAfterMenuAdd(int nLoginUITypeData)
    {

        // IDPW 로그인 Type의 로그인 UI 및 로그인 type에서 온 결과
        if (nLoginUITypeData == (int)eLoginType.eLOGINTYPE_ORIGIN)                                           // eLoginUITypeData (eLOGINTYPE_ORIGIN) : IDPW 로그인 완료 - 후속작업진행
        {
            if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eInitPW)
            {
                refPWChangeDefaultPW.nGroupID = activeMenuPopup.GroupId;
                refPWChangeDefaultPW.openPopUp();
            }
            else if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eEnforced ||
                refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eAfterWard)
            {
                refPWChange.nGroupID = activeMenuPopup.GroupId;
                refPWChange.Init();
                refPWChange.openPopUp();
            }
            else
            {
                // eIDPWresultJob.eNone
                // 로그인 성공!

            }

        }
        else if (nLoginUITypeData == (int)eLoginType.eLOGINTYPE_GPKI)                                         // // eLoginUITypeData (eLOGINTYPE_GPKI) : IDPW 로그인 완료 - 후속작업진행
        {

            if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eNone)
            {
                // Gpki 등록 Popup
                refPopUpGpkiLogIn.nGroupID = activeMenuPopup.GroupId;
                refPopUpGpkiLogIn.Mode = "2"; // 등록모드
                refPopUpGpkiLogIn.openPopUp();
            }
            else if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eInitPW)
            {
                refPWChangeDefaultPW.nGroupID = activeMenuPopup.GroupId;
                refPWChangeDefaultPW.eLoginProcessType = eLoginType.eLOGINTYPE_GPKI;
                refPWChangeDefaultPW.openPopUp();
            }
            else if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eEnforced ||
                    refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eAfterWard)
            {
                refPWChange.nGroupID = activeMenuPopup.GroupId;
                refPWChange.eLoginProcessType = eLoginType.eLOGINTYPE_GPKI;
                refPWChange.Init();
                refPWChange.openPopUp();
            }
            else
            {
                // Not Define ...
            }

        }

        ChangeSideBarUInNavigate();

    }


    /**
    *@brief GPKI로그인창에서 등록선택> IDPW로그인> PW변경 에서 작업후 callback GPKI로그인창 등록모드로 Popup
    */
    public void pwChgAfterGpkiPopup(int nResult)
    {
        // Gpki 등록 Popup
        refPopUpGpkiLogIn.nGroupID = activeMenuPopup.GroupId;
        refPopUpGpkiLogIn.Mode = "2"; // 등록모드
        refPopUpGpkiLogIn.openPopUp();
    }


    /**
    *@brief GPKI로그인창에서 등록선택> IDPW로그인> PW초기화창 에서 작업후 callback GPKI로그인창 등록모드로 Popup
    */
    public void pwInitAfterGpkiPopup(int nResult)
    {
        // Gpki 등록 Popup
        refPopUpGpkiLogIn.nGroupID = activeMenuPopup.GroupId;
        refPopUpGpkiLogIn.Mode = "2"; // 등록모드
        refPopUpGpkiLogIn.openPopUp();
    }


    /**
    *@brief GPKI Popup 로그인창에서 callback 호출해주는 함수
    */
    public void LoginGpkiAfterMenuAdd(int nResult)
    {

        if (nResult == 1)                   // GPKI 로그인창에서 로그인 완료함
            ChangeSideBarUInNavigate();
        else if (nResult == 2)              // GPKI 로그인창에서 등록모드로 넘어감
        {
            // ID / PW 로그인 Popup
            refPopUpLogIn.nGroupID = activeMenuPopup.GroupId;
            refPopUpLogIn.eLoginUITypeData = eLoginType.eLOGINTYPE_GPKI;
            refPopUpLogIn.openPopUp();
        }

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        HsCmdCenter.sgPageEvent.SetLoginAfterSGSideBarEventAdd(LoginAfterSideBar);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
    }

    private string GetDescription(LSIDEBAR Id)
    {
        return MenuNameMapper.GetDescription(Id);
    }

    private Dictionary<LSIDEBAR, int> GetNotiCategoryCount(NOTI_TYPE type, int groupId, string userSeq)
    {
        return SQLiteDB.SelectNotiInfoCategoryCount(type, groupId, userSeq);
    }

    private Dictionary<LSIDEBAR, int> GetAlarmCategoryCount(int groupId, string userSeq)
    {
        return SQLiteDB.SelectAlarmInfoCategoryCount(groupId, userSeq);
    }

    private int GetNotiInfoCount(NOTI_TYPE type, int groupId, string userSeq)
    {
        return SQLiteDB.SelectNotiInfoCount(type, groupId, userSeq);
    }

    private int GetAlarmInfoCount(int groupId, string userSeq)
    {
        return SQLiteDB.SelectAlarmInfoCount(groupId, userSeq);
    }

    public void LoginAfterSideBar(int groupid)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData != null)
        {
            strUserSeq = sgUserData.GetUserSequence();
            StateHasChanged();
        }
    }


    public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        // 이전 Page로 돌아갈 수 있도록(새로운 로그인 Page에서 Back Button 사용) 현재 page URL 저장해둠
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
        {
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;
            // pageService.m_strLastPage = "/";
            // pageService.m_strLastPage += MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);  //
        }

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
    }

    private bool AddMenuAfterLogin(ISGSideBarUI activeMenu)
    {

        SGLoginData sgLoginData = null;
        SGUserData sgUserData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(activeMenu.GroupId);
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(activeMenu.GroupId);

        bool bFileTransMenuUse = false;
        bool bApprMenuUse = false;
        bool bSecurityApprMenuUse = false;
        bool bPCURLUse = false;
        bool bClipBoardApprUse = false;
        bool bEmailUse = false;
        bool bPublicBoard = false;
        bool bBasicConf = false;
        bool bDeputyApprove = false;

        // SlideBatUI 설정값 알아옴
        /*if ((sgLoginData != null) && (sgUserData != null))
        {
            bFileTransMenuUse = sgLoginData.GetFileTrans();
            if (sgLoginData.GetApprove() == true)
                if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                    bApprMenuUse = true;

            bSecurityApprMenuUse = sgUserData.GetUserPrivacyApprPos();
            bPCURLUse = sgLoginData.GetPCURLUse();
        }*/

        bFileTransMenuUse = true;
        bApprMenuUse = true;
        bSecurityApprMenuUse = true;


        bEmailUse = siteConfig.GetUseEmailApprove(activeMenu.GroupId);
        bPCURLUse = siteConfig.GetUsePCURL(activeMenu.GroupId);
        bClipBoardApprUse = siteConfig.GetUseClipApprove(activeMenu.GroupId);
        bPublicBoard = siteConfig.GetUsePublicBoard(activeMenu.GroupId);
        bPublicBoard = true;

        bDeputyApprove = false;
        if (sgLoginData != null)
            bDeputyApprove = sgLoginData.GetDeputyApprove();
        bool bCertSend = siteConfig.GetUseCertSend(activeMenu.GroupId);
        bool bAutoLogin = siteConfig.GetUseAutoLogin(activeMenu.GroupId);

        bBasicConf = (bDeputyApprove | bCertSend | bAutoLogin);

        int gID = activeMenu.GroupId;
        int nParentID = 0;
        string strNavigatePathWithGroupID = "";

        // 예전방식
        /*SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: true)                                                                                  // 파일전송
                    .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_FILETRANS"), icon: "fas fa-copy", path: "/transfer", badgeType: "right badge badge-warning", bUse: bFileTransMenuUse)                                 // 파일전송
                    .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_TRANSMANAGE"), icon: "fas fa-copy", path: "/transManage", badgeType: "right badge badge-warning")                                                     // 전송관리
                    .AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_APPROVEMANAGE"), icon: "fas fa-copy", path: "/transferApprove", badgeType: "right badge badge-warning", bUse: bApprMenuUse)                              // 결재관리
                    .AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_APPROVESECURITY"), icon: "fas fa-copy", path: "/securityApprove", badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse);             // 보안결재관리                                                 // 보안결재관리

        if (bEmailUse)
        {
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse)                                                                 // 메일 관리
                .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP"), icon: "fas fa-envelope", path: "/mailManage", badgeType: "right badge badge-warning", bUse: bEmailUse)                                                                 // 메일 관리
                .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP"), icon: "fas fa-envelope", path: "/mailApprove", badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse));                                                               // 메일 결재
        }

        if (bPCURLUse)
        {
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse)                                                       // PCURL 관리
                .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: XmlConf.GetTitle("T_COMMON_URLMANAGE"), icon: "fas fa-globe", path: "/pcurlManage", badgeType: "right badge badge-warning", bUse: bPCURLUse)                                                       // PCURL 관리
                .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: XmlConf.GetTitle("T_COMMON_URLAPPROVE"), icon: "fas fa-globe", path: "/pcurlApprove", badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse));                                                       // PCURL 결재
        }

        if (bClipBoardApprUse)
        {
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bClipBoardApprUse)                                                          // 클립보드 관리
                .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: XmlConf.GetTitle("T_COMMON_CLIPTRANS"), icon: "fas fa-object-ungroup", path: "/clipBoardManage", badgeType: "right badge badge-warning", bUse: bClipBoardApprUse)                                                          // 클립보드 관리
                .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: XmlConf.GetTitle("T_COMMON_CLIPAPPR"), icon: "fas fa-object-ungroup", path: "/clipBoardApprove", badgeType: "right badge badge-warning", bUse: (bClipBoardApprUse & bApprMenuUse));                                                         // 클립보드 결재
        }

        nParentID++;
        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE"), icon: "fas fa-cog", path: "/viewConf", badgeType: "right badge badge-warning", bUse: true)                                                                         // 접속환경
            .AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_COMMON_NOTIFY"), icon: "fas fa-cog", path: "/publicBoard", badgeType: "right badge badge-warning", bUse: bPublicBoard)                                     // 공지사항
            .AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE"), icon: "fas fa-cog", path: "/viewConf", badgeType: "right badge badge-warning", bUse: true)                                                              // 접속환경
            .AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_BASICSET_TITLE"), icon: "fas fa-cog", path: "/netConf", badgeType: "right badge badge-warning", bUse: bBasicConf);                                                                     // 기본설정
        */

        // GroupID 별로 넘어가도록 수정
        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: true);

        strNavigatePathWithGroupID = "/transfer/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_FILETRANS"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bFileTransMenuUse);                                 // 파일전송


        strNavigatePathWithGroupID = "/transManage/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_TRANSMANAGE"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning");                                                     // 전송관리

        strNavigatePathWithGroupID = "/transferApprove/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_APPROVEMANAGE"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bApprMenuUse);                              // 결재관리

        strNavigatePathWithGroupID = "/securityApprove/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_APPROVESECURITY"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse);              // 보안결재관리


        if (bEmailUse)
        {
            // 메일 관리
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse);

            // 메일 관리
            strNavigatePathWithGroupID = "/mailManage/";
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP"), icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bEmailUse);

            // 메일 결재
            strNavigatePathWithGroupID = "/mailApprove/";
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP"), icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse));
        }

        if (bPCURLUse)
        {
            // PCURL 관리
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse);

            // PCURL 관리
            strNavigatePathWithGroupID = "/pcurlManage/";
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: XmlConf.GetTitle("T_COMMON_URLMANAGE"), icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPCURLUse);

            // PCURL 결재
            strNavigatePathWithGroupID = "/pcurlApprove/";
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: XmlConf.GetTitle("T_COMMON_URLAPPROVE"), icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse));
        }

        if (bClipBoardApprUse)
        {
            // 클립보드 관리
            nParentID++;
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bClipBoardApprUse);

            // 클립보드 관리
            strNavigatePathWithGroupID = "/clipBoardManage/";
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: XmlConf.GetTitle("T_COMMON_CLIPTRANS"), icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bClipBoardApprUse);

            // 클립보드 결재
            strNavigatePathWithGroupID = "/clipBoardApprove/";
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: XmlConf.GetTitle("T_COMMON_CLIPAPPR"), icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bClipBoardApprUse & bApprMenuUse));
        }

        // 접속환경
        nParentID++;
        strNavigatePathWithGroupID = "/viewConf/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true);

        // 공지사항
        strNavigatePathWithGroupID = "/publicBoard/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_COMMON_NOTIFY"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPublicBoard);

        // 접속환경
        strNavigatePathWithGroupID = "/viewConf/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true);

        // 기본설정
        strNavigatePathWithGroupID = "/netConf/";
        strNavigatePathWithGroupID += gID.ToString();
        SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_BASICSET_TITLE"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bBasicConf);


        StateHasChanged();

        return true;
    }

    public async Task ChangeActiveMenuWrapPopup(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        eventArgsPopup = eventArgs;
        activeMenuPopup = activeMenu;

        // 이전 Page로 돌아갈 수 있도록(새로운 로그인 Page에서 Back Button 사용) 현재 page URL 저장해둠
        /*
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
        {
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;
            pageService.m_strLastPage = "/";
            pageService.m_strLastPage += MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);  //
        }
        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;
        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);*/


        ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        if (AppConfigSvc.GetUseGPKILogin(activeMenu.GroupId))
        {
            // Gpki 로그인 Popup
            refPopUpGpkiLogIn.nGroupID = activeMenu.GroupId;
            refPopUpGpkiLogIn.Mode = "1"; // 로그인모드
            await refPopUpGpkiLogIn.openPopUp();
        }
        else
        {
            // ID / PW 로그인 Popup
            refPopUpLogIn.nGroupID = activeMenu.GroupId;
            await refPopUpLogIn.openPopUp();
        }


    }


}
