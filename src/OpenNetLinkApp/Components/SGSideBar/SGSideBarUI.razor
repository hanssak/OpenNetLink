@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Text.Json
@using HsNetWorkSGData
@using OpenNetLinkApp.Pages.Transfer
@using OpenNetLinkApp.Common
@using AgLogManager
@using HsNetWorkSG

@inject HSCmdCenter HsCmdCenter
@inject PageStatusService pageService
@inject XmlConfService XmlConf
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject IJSRuntime JSRuntime
<!-- Sidebar Menu -->

<nav class="mt-0">
    <ul class="nav nav-pills nav-sidebar flex-column " data-widget="treeview" role="menu" data-accordion="false">
        <!-- Add icons to the links using the .nav-icon class
        with font-awesome or any other icon font library -->
        @if (SideBarUISvc.MenuList?.Count > 0)
        {


            // Exist Menu
            @foreach (var MenuItem in SideBarUISvc.MenuList)
            {
                /* Processing each Menu */
                @if (MenuItem.Actived) SideBarUISvc.ActiveMenu = MenuItem;
                @if (MenuItem.Child?.Count > 0)
                {
                    /* Exist SubMenu */
                    // s./ 업무망-인터넷망
                    <li class="nav-item has-treeview @(MenuItem.MenuOpenClass)">
                        @if (!String.IsNullOrEmpty(MenuItem.Path))
                        {
                            <a class="nav-link m-0 @(MenuItem.ActiveClass)"
               style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))"
               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))">
                                <i class="nav-icon @(MenuItem.Icon /*fas fa-tachometer-alt*/) text-md logo-xs mt-2"></i>
                                <p style="font-size:1rem;" class="p-2">
                                    @(MenuItem.FromName /*Dashboard*/)
                                    <i class="fas fa-long-arrow-alt-right p-1"></i>
                                    @(MenuItem.ToName /*Dashboard*/)
                                    <!--<i class="right fas fa-angle-left mt-1"></i>-->
                                    <!-- Badge -->
                                    @if (bViewSGSideBarUIBadge)
                                    {
                                        @if (GetNotiInfoCount(NOTI_TYPE.USER, MenuItem.GroupId, strUserSeq) > 0 || GetAlarmInfoCount(MenuItem.GroupId, strUserSeq) > 0)
                                        {
                                            <span class="@(MenuItem.BadgeType /*left badge badge-danger*/) m-2">@(MenuItem.BadgeValue /*New*/)</span>
                                        }
                                    }

                                </p>
                            </a>
                        }
                        else
                        {
                            <a class="nav-link m-0 @(MenuItem.ActiveClass)"
               style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))"
               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, MenuItem))">
                                <i class="nav-icon @(MenuItem.Icon /*fas fa-tachometer-alt*/) text-md logo-xs mt-2"></i>
                                <p style="font-size:1rem;" class="p-2">
                                    @(MenuItem.FromName /*Dashboard*/)
                                    <i class="fas fa-long-arrow-alt-right p-1"></i>
                                    @(MenuItem.ToName /*Dashboard*/)
                                    <!-- <i class="right fas fa-angle-left mt-1"></i> -->
                                    <!-- Badge -->
                                    @if (bViewSGSideBarUIBadge)
                                    {
                                        @if (GetNotiInfoCount(NOTI_TYPE.USER, MenuItem.GroupId, strUserSeq) > 0 || GetAlarmInfoCount(MenuItem.GroupId, strUserSeq) > 0)
                                        {
                                            <span class="@(MenuItem.BadgeType /*left badge badge-danger*/) m-2">@(MenuItem.BadgeValue /*New*/)</span>
                                        }
                                    }
                                </p>
                            </a>
                        }
                        <ul class="nav nav-treeview">
                            @foreach (var SubMenuList in MenuItem.Child)
                            {
                                @if (SubMenuList.Actived) SideBarUISvc.ActiveMenu = SubMenuList;
                                @if (SubMenuList.Child?.Count > 0)
                                {
                                    <li class="nav-item has-treeview pt-2 @SubMenuList.MenuOpenClass">
                                        @if (!String.IsNullOrEmpty(SubMenuList.Path))
                                        {
                                            <a class="nav-link"
                       @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))"
                       @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))">
                                                <i class="nav-icon @(SubMenuList.Icon)"></i>
                                                <p style="cursor:pointer">
                                                    @(GetDescription(SubMenuList.CategoryId))
                                                    @if (bViewSGSideBarUIBadge && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                                   && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="@(SubMenuList.BadgeType) ">
                                                            @(GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId])
                                                        </span>
                                                    }
                                                    @if (bViewSGSideBarUIBadge && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                                   && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="badge badge-danger ">
                                                            @GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId]
                                                        </span>
                                                    }
                                                    <i class="right fas fa-angle-left"></i>
                                                </p>
                                            </a>
                                        }
                                        else
                                        {
                                            <a class="nav-link"
                       @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))"
                       @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))">
                                                <i class="nav-icon @(SubMenuList.Icon)"></i>
                                                <p style="cursor:pointer">
                                                    @(GetDescription(SubMenuList.CategoryId))
                                                    @if (bViewSGSideBarUIBadge && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                                   && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="@(SubMenuList.BadgeType) ">
                                                            @(GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId])
                                                        </span>

                                                    }

                                                    @if (bViewSGSideBarUIBadge && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                                   && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                    {
                                                        <span class="badge badge-danger ">
                                                            @GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId]
                                                        </span>
                                                    }
                                                    <i class="right fas fa-angle-left"></i>
                                                </p>
                                            </a>
                                        }
                                        <ul class="nav nav-treeview ">
                                            @foreach (var SubMenuItem in SubMenuList.Child)
                                            {
                                                /* Processing each SubMenu */
                                                @if (SubMenuItem.Actived) SideBarUISvc.ActiveMenu = SubMenuItem;
                                                <li class="nav-item">
                                                    @if (SubMenuItem.Path.IndexOf("POPUP") == -1)  //일반메뉴
                                                    {
                                                        <a class="nav-link @(SubMenuItem.ActiveClass)"
                               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuItem))"
                               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuItem))">
                                                            <span class="logo-xs ">&middot;</span>
                                                            <p style="padding-left: 10px;">
                                                                &middot;&nbsp;&nbsp;  @(SubMenuItem.ToName)
                                                                <!-- Badge -->
                                                                @if (bViewSGSideBarUIBadge)
                                                                {
                                                                    <span class="@(SubMenuItem.BadgeType /*right badge badge-danger*/) ">@(SubMenuItem.BadgeValue /*New*/)</span>
                                                                }
                                                            </p>
                                                        </a>
                                                    }
                                                    else  //팝업메뉴
                                                    {
                                                        <a style="cursor:pointer;" class="nav-link @(SubMenuItem.ActiveClass)"
                               @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuItem))"
                               @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuItem))">
                                                            <span class="logo-xs ">&middot;</span>
                                                            <p style="padding-left: 10px;">
                                                                &middot;&nbsp;&nbsp;  @(SubMenuItem.ToName)
                                                                <!-- Badge -->
                                                                @if (bViewSGSideBarUIBadge)
                                                                {
                                                                    <span class="@(SubMenuItem.BadgeType) ">@(SubMenuItem.BadgeValue)</span>
                                                                }
                                                            </p>
                                                        </a>
                                                    }
                                                </li>
                                            }
                                        </ul>
                                    </li>
                                }
                                else
                                {
                                    <li class="nav-item">
                                        <a class="nav-link "
                       @onclick="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))"
                       @onkeydown="@(async eventArgs => ChangeActiveMenuWrap(eventArgs, SubMenuList))">
                                            <i class="nav-icon @(SubMenuList.Icon)"></i>
                                            <p>
                                                @(GetDescription(SubMenuList.CategoryId))
                                                @if (bViewSGSideBarUIBadge && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                               && GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                {
                                                    <!-- Badge -->
                                                    <span class="@(SubMenuList.BadgeType) ">
                                                        @(GetNotiCategoryCount(NOTI_TYPE.USER, SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId])
                                                    </span>
                                                }

                                                @if (bViewSGSideBarUIBadge && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq).ContainsKey(SubMenuList.CategoryId)
                                               && GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId] > 0)
                                                {
                                                    <!-- Badge -->
                                                    <span class="badge badge-danger ">
                                                        @GetAlarmCategoryCount(SubMenuList.GroupId, strUserSeq)[SubMenuList.CategoryId]
                                                    </span>
                                                }
                                                <i class="right fas fa-angle-left"></i>
                                            </p>
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    </li>
                }
                else
                {

                    <!-- SideBarUISvc.ChgActiveMenu -->
                    /* Not Exist SubMenu */
                    <li class="nav-item">
                        <a class="nav-link m-0 @(MenuItem.ActiveClass)"
               style=" border-radius:0 !important; border-bottom:1px solid  rgba(255,255,255,.1);"
               @onclick="@(async eventArgs =>  await ChangeActiveMenuWrapPopup(eventArgs, MenuItem))"
               @onkeydown="@(async eventArgs => await ChangeActiveMenuWrapPopup(eventArgs, MenuItem))">
                            <i class="nav-icon @(MenuItem.Icon /*fas fa-th*/) text-md logo-xs mt-2"></i>
                            <p style="font-size:1rem;" class="p-2">
                                @(MenuItem.FromName /*Dashboard*/)
                                <i class="fas fa-long-arrow-alt-right p-1"></i>
                                @(MenuItem.ToName /*Dashboard*/)
                            </p>
                        </a>
                    </li>
                    <!-- Not Exist SubMenu -->
                }
                <!-- Processing each Menu -->
            }
            <!-- Exist Menu -->
        }

    </ul>
</nav>
<!-- /.Sidebar-Menu -->

<PopUpLogIn @ref=refPopUpLogIn goToPage="LoginIDPWAfterMenuAdd"></PopUpLogIn>
<LogIn_GPKI @ref=refPopUpGpkiLogIn goToPageGPKI="LoginGpkiAfterMenuAdd"></LogIn_GPKI>
<PWChange @ref=refPWChange Guid="modal-pwchange-sidebar" basicPageType=(int)Enums.EnumBasicPageType.SideBar goToPagePWChgAfter="pwChgAfterGpkiPopup"></PWChange>
<PWChangeDefaultPW @ref=refPWChangeDefaultPW Guid="modal-pwchangedefaultpw-sidebar" basicPageType=(int)Enums.EnumBasicPageType.SideBar goToPagePWInitAfter="pwInitAfterGpkiPopup"></PWChangeDefaultPW>
<HanssakOTP @ref="refHanssakOTP"></HanssakOTP>
<ProxyApprover_PopUp @ref="refProxyApprover_PopUp"></ProxyApprover_PopUp>


@code
{
    PopUpLogIn refPopUpLogIn;
    LogIn_GPKI refPopUpGpkiLogIn;
    PWChange refPWChange;
    PWChangeDefaultPW refPWChangeDefaultPW;
    HanssakOTP refHanssakOTP;
    ProxyApprover_PopUp refProxyApprover_PopUp;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGCtrlSideUI>();
    [Parameter] public ISGSideBarUIService SideBarUISvc { get; set; }

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;
    ISGNetworkService NetWorkSvc;

    EventArgs eventArgsPopup;
    ISGSideBarUI activeMenuPopup;

    public string strUserSeq = "";

    Dictionary<string, SGNetOverData> dicSysIdName = null;

    bool bViewSGSideBarUIBadge = false;                   // 메뉴에 Badge 나오게할지 유무

    bool bFileTransUse = false;

    private void ChangeSideBarUInNavigate()
    {
        AddMenuAfterLogin(activeMenuPopup);
        SideBarUISvc.ChgActiveMenu(eventArgsPopup, activeMenuPopup);

        //string strNavigatePathWithGroupID = "";

        //if (siteConfig.GetUseDashBoard())
        //    strNavigatePathWithGroupID = "/Welcome/";
        //else
        //    strNavigatePathWithGroupID = "/Transfer/";

        //ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        string strNavigatePathWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        string strNavigateUrl = strNavigatePathWithGroupID.ToLower();
        if (strNavigateUrl.IndexOf("transfer") > 0)
        {
            strNavigateUrl = pageService.GetFileTransPage(activeMenuPopup.GroupId);
            if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                strNavigatePathWithGroupID = strNavigateUrl;
            else
                strNavigatePathWithGroupID = "/Transfer/";
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(activeMenuPopup.GroupId);
        {
            if(sgLoginData != null)
            {
                bool bFileTrans = sgLoginData.GetFileTrans();
                if (!bFileTrans)
                    strNavigatePathWithGroupID = "/Welcome/";  // 파일 전송을 사용 하지 않으면 무조건 Welcome 으로 이동
            }
        }

        strNavigatePathWithGroupID += activeMenuPopup.GroupId.ToString();
        MyNavigationManager.NavigateTo(strNavigatePathWithGroupID);

    }


    /**
    *@param nLoginUITypeData IDPW Login Popup의 eLoginUITypeData 값
    *@brief IDPW Popup 로그인후 callback 호출해주는 함수
    */
    public async void LoginIDPWAfterMenuAdd(int nLoginUITypeData)
    {

        // IDPW 로그인 Type의 로그인 UI 및 로그인 type에서 온 결과
        if (nLoginUITypeData == (int)eLoginType.eLOGINTYPE_ORIGIN)                                           // eLoginUITypeData (eLOGINTYPE_ORIGIN) : IDPW 로그인 완료 - 후속작업진행
        {
            if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eInitPW)
            {
                refPWChangeDefaultPW.nGroupID = activeMenuPopup.GroupId;
                await refPWChangeDefaultPW.openPopUp();
            }
            else if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eEnforced ||
                refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eAfterWard)
            {
                refPWChange.nGroupID = activeMenuPopup.GroupId;
                refPWChange.Init();
                await refPWChange.openPopUp();
            }
            else
            {
                // eIDPWresultJob.eNone
                // 로그인 성공!

            }

        }
        else if (nLoginUITypeData == (int)eLoginType.eLOGINTYPE_GPKI)                                         // // eLoginUITypeData (eLOGINTYPE_GPKI) : IDPW 로그인 완료 - 후속작업진행
        {

            if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eNone)
            {
                // Gpki 등록 Popup
                refPopUpGpkiLogIn.nGroupID = activeMenuPopup.GroupId;
                refPopUpGpkiLogIn.Mode = "2"; // 등록모드
                await refPopUpGpkiLogIn.openPopUp();
            }
            else if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eInitPW)
            {
                refPWChangeDefaultPW.nGroupID = activeMenuPopup.GroupId;
                refPWChangeDefaultPW.eLoginProcessType = eLoginType.eLOGINTYPE_GPKI;
                await refPWChangeDefaultPW.openPopUp();
            }
            else if (refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eEnforced ||
                    refPopUpLogIn.eResultIdPwAfterJob == eIDPWresultJob.eAfterWard)
            {
                refPWChange.nGroupID = activeMenuPopup.GroupId;
                refPWChange.eLoginProcessType = eLoginType.eLOGINTYPE_GPKI;
                refPWChange.Init();
                await refPWChange.openPopUp();
            }
            else
            {
                // Not Define ...
            }

        }

        ChangeSideBarUInNavigate();

    }


    /**
    *@brief GPKI로그인창에서 등록선택> IDPW로그인> PW변경 에서 작업후 callback GPKI로그인창 등록모드로 Popup
    */
    public async void pwChgAfterGpkiPopup(int nResult)
    {
        // Gpki 등록 Popup
        refPopUpGpkiLogIn.nGroupID = activeMenuPopup.GroupId;
        refPopUpGpkiLogIn.Mode = "2"; // 등록모드
        await refPopUpGpkiLogIn.openPopUp();
    }


    /**
    *@brief GPKI로그인창에서 등록선택> IDPW로그인> PW초기화창 에서 작업후 callback GPKI로그인창 등록모드로 Popup
    */
    public async void pwInitAfterGpkiPopup(int nResult)
    {
        // Gpki 등록 Popup
        refPopUpGpkiLogIn.nGroupID = activeMenuPopup.GroupId;
        refPopUpGpkiLogIn.Mode = "2"; // 등록모드
        await refPopUpGpkiLogIn.openPopUp();
    }


    /**
    *@brief GPKI Popup 로그인창에서 callback 호출해주는 함수
    */
    public async void LoginGpkiAfterMenuAdd(int nResult)
    {

        if (nResult == 1)                   // GPKI 로그인창에서 로그인 완료함
            ChangeSideBarUInNavigate();
        else if (nResult == 2)              // GPKI 로그인창에서 등록모드로 넘어감
        {
            // ID / PW 로그인 Popup
            refPopUpLogIn.nGroupID = activeMenuPopup.GroupId;
            refPopUpLogIn.eLoginUITypeData = eLoginType.eLOGINTYPE_GPKI;
            await refPopUpLogIn.openPopUp();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        HsCmdCenter.sgPageEvent.SetLoginAfterSGSideBarEventAdd(LoginAfterSideBar);

        //무의미한 함수 호출로 삭제
        //SetUpEvent();
    }

    //private void SetUpEvent()
    //{
    //    //Network 세팅을 보고 Event를 설정한다.
    //    string strNetworkFileName = "wwwroot/conf/NetWork.json";
    //    string jsonString = File.ReadAllText(strNetworkFileName);
    //
    //    //ADDomain 이 string 타입인 Network.json은 List<string> 타입으로 수정
    //    try { _networkParsing(); }
    //    catch (Exception ex)
    //    {
    //        CLog.Here().Error($"NetworkParsing err : Change ADDomain Format in Network.json  - {ex.ToString()}");
    //        string[] strNetwork = jsonString.Split(Environment.NewLine);
    //        for (int i = 0; i < strNetwork.Length; i++)
    //        {
    //            if (strNetwork[i].Contains("ADDomain") && !(strNetwork[i].Contains("[") && strNetwork[i].Contains("]")))
    //            {
    //                string element = strNetwork[i].Split(':')[0];
    //                string value = strNetwork[i].Split(':')[1];
    //                strNetwork[i] = $"{element}: [ {value} ]";
    //            }
    //        }
    //        File.WriteAllText(strNetworkFileName, string.Join(Environment.NewLine, strNetwork));
    //        jsonString = string.Join(Environment.NewLine, strNetwork);
    //        _networkParsing();
    //    }
    //
    //    void _networkParsing()
    //    {
    //        using (JsonDocument document = JsonDocument.Parse(jsonString))
    //        {
    //            JsonElement root = document.RootElement;
    //            JsonElement NetWorkElement = root.GetProperty("NETWORKS");
    //            //JsonElement Element;
    //            foreach (JsonElement netElement in NetWorkElement.EnumerateArray())
    //            {
    //                SGNetwork sgNet = new SGNetwork();
    //                string strJsonElement = netElement.ToString();
    //                var options = new JsonSerializerOptions
    //                {
    //                    ReadCommentHandling = JsonCommentHandling.Skip,
    //                    AllowTrailingCommas = true,
    //                    PropertyNameCaseInsensitive = true,
    //                };
    //                sgNet = JsonSerializer.Deserialize<SGNetwork>(strJsonElement, options);
    //
    //            }
    //        }
    //    }
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }

        bViewSGSideBarUIBadge = SGAppMgrSvc.OpConfigInfoService.GetViewSGSideBarUIBadge(0);

    }

    private string GetDescription(LSIDEBAR Id)
    {
        string title = MenuNameMapper.GetDescription(Id);
        return XmlConf.GetTitle(title);
    }

    private Dictionary<LSIDEBAR, int> GetNotiCategoryCount(NOTI_TYPE type, int groupId, string userSeq)
    {
        return SQLiteDB.SelectNotiInfoCategoryCount(type, groupId, userSeq);
    }

    private Dictionary<LSIDEBAR, int> GetAlarmCategoryCount(int groupId, string userSeq)
    {
        return SQLiteDB.SelectAlarmInfoCategoryCount(groupId, userSeq);
    }

    private int GetNotiInfoCount(NOTI_TYPE type, int groupId, string userSeq)
    {
        return SQLiteDB.SelectNotiInfoCount(type, groupId, userSeq);
    }

    private int GetAlarmInfoCount(int groupId, string userSeq)
    {
        return SQLiteDB.SelectAlarmInfoCount(groupId, userSeq);
    }

    public void LoginAfterSideBar(int groupid)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData != null)
        {
            strUserSeq = sgUserData.GetUserSequence();
            StateHasChanged();
        }
    }


    public async void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(activeMenu.GroupId);
        // 이전 Page로 돌아갈 수 있도록(새로운 로그인 Page에서 Back Button 사용) 현재 page URL 저장해둠
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
        {
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;
            // pageService.m_strLastPage = "/";
            // pageService.m_strLastPage += MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);  //
        }
        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;
        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);

        if (activeMenu.Path == "POPUP('OTP')")
        {
            refHanssakOTP.groupId = activeMenu.GroupId;
            if (sgUserData != null)
                refHanssakOTP.userId = sgUserData.GetUserID();
            await refHanssakOTP.openPopUp();
        }
        else if (activeMenu.Path == "POPUP('DEPUTY')")
        {
            refProxyApprover_PopUp.groupId = activeMenu.GroupId;
            if (sgUserData != null)
                refProxyApprover_PopUp.userId = sgUserData.GetUserID();

            refProxyApprover_PopUp.BindEvent();
            await refProxyApprover_PopUp.openPopUp();
        }
        else if(activeMenu.IsSubMenu && !string.IsNullOrEmpty(activeMenu.Path))
        {
            MyNavigationManager.NavigateTo(activeMenu.Path);
        }
    }


    /// <summary>
    /// 3망일때에는 NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 수정해서 표현
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="dicSystemIdName"></param>
    public void ChangeNetOverTitle(int nGroupID, Dictionary<string, SGNetOverData> dicSystemIdName)
    {

        if (dicSystemIdName == null || dicSystemIdName.Count < 2)
            return;

        // NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 전부 수정해서 표현
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;

        // 왼쪽 SideBar 에서 도착하는 곳만 "다중망"으로 표현, 시작하는 곳 이름은 Server에서 받은 망이름(NETOVERMODE) 사용
        // Welcome(대쉬보드)에서 표현은 시작망이름은 망이름(NETOVERMODE) 사용, 도착망이름은 망이름(NETOVERMODE)에서 1번째 도달하는 망이름 사용
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }

                    if (item.Value.nIdx == 1 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].ToName = item.Key;
                    }
                }

                // 다중망 양 끝단이 아닐때는 도착지를 "다중망"으로 표기하지 않음
                if (pageService.m_bIsMultiNetWork == false)
                    listNetWork[nIdx].ToName = XmlConf.GetTitle("T_RECV_SIDE_TITLE");
                return;
            }
        }


    }


    private bool AddMenuAfterLogin(ISGSideBarUI activeMenu)
    {

        SGLoginData sgLoginData = null;
        SGUserData sgUserData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(activeMenu.GroupId);
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(activeMenu.GroupId);

        bool bFileTransMenuUse = false;
        bool bApprMenuUse = false;
        bool bSecurityApprMenuUse = false;
        bool bPCURLUse = false;
        bool bUseClipBoardManageUI = false;
        bool bUseClipBoardApproveUI = false;

        bool bEmailUse = false;
        bool bFileTransUse = false;

        bool bPublicBoard = false;
        bool bBasicConf = false;
        bool bDeputyApprove = false;
        bool bHanssakOTP = false;       //OTP 팝업메뉴 표시여부
        int nUseNetOverFileTrans = -1;  // -1 : 3망상황아님, 0 : 3망상황에서 파일전송 모든곳에 미사용, 1 : 3망상황에서 파일전송 1곳에서라도 사용
        int nApproveProxy = 1; //대결재사용여부 1:고장결재자,대결사용  2:결재자선택
                               // 3중망 정보 적용
        dicSysIdName = new Dictionary<string, SGNetOverData>();

        ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(activeMenu.GroupId);
        bool bSFMManageUse = sgUserInfo.UserInfoAdded.IsMySelfSFM;
        int nUserApprPos = sgUserInfo.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(activeMenu.GroupId)); //화면 메뉴를 구성하는 항목의 권한

        if (sgLoginData.GetUseOverNetwork2())
        {
            if (sgLoginData.GetOverNetwork2Data(ref dicSysIdName, pageService.m_bIsMultiNetWork))
            {
                pageService.SetTargetSystemList(activeMenu.GroupId, dicSysIdName);

                // 3중망이상일때, 왼쪽Sidebar 포함 도착망이름 변경
                if (dicSysIdName != null && dicSysIdName.Count > 1)
                {
                    ChangeNetOverTitle(activeMenu.GroupId, dicSysIdName);
                }
            }
        }

        // 파일전송 사용권한 확인
        if (dicSysIdName != null && dicSysIdName.Count > 1)
        {
            nUseNetOverFileTrans = 0;
            foreach (var item in dicSysIdName)
            {

                if ((item.Value.strDestSysid.Length > 0 && item.Value.bUseFileTrans && item.Key.Length > 0) &&
                   ((pageService.m_bIsMultiNetWork && item.Value.nIdx == 1) || (pageService.m_bIsMultiNetWork == false && item.Value.nIdx != 0)))
                {
                    nUseNetOverFileTrans = 1;
                    break;
                }
            }
        }

        // SideBatUI 설정값 알아옴
        if (sgLoginData != null && sgUserData != null)
        {
            bHanssakOTP = sgLoginData.GetTagValue("OTP");
            bSecurityApprMenuUse = sgLoginData.GetTagValue("PRIVACYAPPROVE");
            if (bSecurityApprMenuUse)
            {
                if (sgUserData.GetUserPrivacyApprPos())
                    bSecurityApprMenuUse = true;
                else
                    bSecurityApprMenuUse = false;
            }
            nApproveProxy = sgLoginData.GetTagValueInteger("APPROVEPROXY"); //대결사용여부 1:사용, 2:결재자선택
            bFileTransMenuUse = sgLoginData.GetFileTrans();

            //if (sgLoginData.GetApprove() == true)

            // 3망 정책고려한 결재사용유무 설정
            if ((pageService.GetUseApproveNetOver(activeMenu.GroupId, sgLoginData) && SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI(activeMenu.GroupId) == false) || SGAppMgrSvc.OpConfigInfoService.GetUseApproveManageUIForce(activeMenu.GroupId))
                if ((sgLoginData.GetApproveProxyRight()) || (nUserApprPos > 0))
                    bApprMenuUse = true;

            bPCURLUse = sgLoginData.GetPCURLUse();
        }

        // 3망 상황 - 파일전송 UI view 설정 확인
        if (nUseNetOverFileTrans > -1)
        {
            if (nUseNetOverFileTrans == 0)
                bFileTransMenuUse = false;
            else
                bFileTransMenuUse = true;
        }
        //이메일결재랑 클립보드 결재는 APP Config를 따르도록 수정함 2021/06/02 YKH
        //ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        //bEmailUse = AppConfigSvc.GetEmailApproveUse();

        bEmailUse = SGAppMgrSvc.OpConfigInfoService.GetUseEmailManageApprove(activeMenu.GroupId);
        bFileTransUse = SGAppMgrSvc.OpConfigInfoService.GetUseFileTrans(activeMenu.GroupId);
        bPCURLUse = SGAppMgrSvc.OpConfigInfoService.GetUsePCURL(activeMenu.GroupId);

        //bUseClipBoardManageUI = siteConfig.GetUseClipApprove(activeMenu.GroupId);
        //bUseClipBoardManageUI = AppConfigSvc.GetClipboardManageUse();

        bUseClipBoardManageUI = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipManageUI(activeMenu.GroupId);
        bUseClipBoardApproveUI = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipApproveUI(activeMenu.GroupId);
        bPublicBoard = SGAppMgrSvc.OpConfigInfoService.GetUsePublicBoard(activeMenu.GroupId);


        bDeputyApprove = false;
        if (sgLoginData != null)
            bDeputyApprove = sgLoginData.GetDeputyApprove();
        bool bCertSend = SGAppMgrSvc.OpConfigInfoService.GetUseCertSend(activeMenu.GroupId);    // siteConfig : json 설정으로 이동
        bool bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(activeMenu.GroupId);  // siteConfig : json 설정으로 이동

        bBasicConf = (bDeputyApprove | bCertSend | bAutoLogin);

        int gID = activeMenu.GroupId;
        int nParentID = 0;
        string strNavigatePathWithGroupID = "";
        string strLoginUserSeq = "";
        if (sgUserData != null)
            strLoginUserSeq = sgUserData.GetUserSequence(); //  sgLoginData.GetUserID();

        // 파일전송 UI(0)
        if (bFileTransUse)
        {
            // GroupID 별로 넘어가도록 수정
            if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: true, strUserSeq: strLoginUserSeq);


            string strNavigateUrl = pageService.GetFileTransPage(gID);
            if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                strNavigatePathWithGroupID = strNavigateUrl;
            else
                strNavigatePathWithGroupID = "/Transfer/";

            strNavigatePathWithGroupID += gID.ToString();
            CLog.Here().Information($"groupID : {gID} - SideBar UI, FileTrasn-Url : {strNavigatePathWithGroupID}");
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
            {
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_FILETRANS"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bFileTransMenuUse, strUserSeq: strLoginUserSeq);                                 // 파일전송
            }

            // 전송관리(1)
            strNavigatePathWithGroupID = "/transManage/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                pageService.m_TransMenuArray[gID] = SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_TRANSMANAGE"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", strUserSeq: strLoginUserSeq);                                                     // 전송관리


            // 결재관리(2)
            strNavigatePathWithGroupID = "/transferApprove/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                pageService.m_approveMenuArray[gID] = SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_APPROVEMANAGE"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bApprMenuUse, strUserSeq: strLoginUserSeq);                              // 결재관리

            // 보안결재관리
            if (bSecurityApprMenuUse)
            {
                strNavigatePathWithGroupID = "/securityApprove/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_APPROVESECURITY"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse, strUserSeq: strLoginUserSeq);              // 보안결재관리
            }

            //파일검사 예외신청
            if (SGAppMgrSvc.OpConfigInfoService.GetUseFileCheckException(gID))
            {
                strNavigatePathWithGroupID = "/fileException/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 4) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 4, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_FILE_EXCEPTION"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strLoginUserSeq);              // 파일검사 예외 신청
            }

            //대결재관리
            //if (nApproveProxy == 1 && sgUserData.GetUserApprpos() == 1)
            if (bDeputyApprove && bApprMenuUse && sgUserInfo.GetUserApprPos(true, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(gID)) > 0)
            {
                strNavigatePathWithGroupID = "";    //안씀
                                                    //strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 5) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 5, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_PROXY_PROXYREG_MANAGE"), icon: "fas fa-cog", path: "POPUP('DEPUTY')", badgeType: "right badge badge-warning", bUse: bSFMManageUse, strUserSeq: strUserSeq);
            }

            // 인증서전송
            if (SGAppMgrSvc.OpConfigInfoService.GetUsePKIsendRecv(gID))
            {
                strNavigatePathWithGroupID = "/pkiTransfer/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 6) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 6, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_PKI_TRANS"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strLoginUserSeq);
            }
            nParentID++;
        }
        //
        if (bEmailUse)
        {
            // 메일 관리
            if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse, strUserSeq: strLoginUserSeq);

            // 메일 관리
            strNavigatePathWithGroupID = "/mailManage/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP"), icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bEmailUse, strUserSeq: strLoginUserSeq);

            // 메일 결재
            strNavigatePathWithGroupID = "/mailApprove/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP"), icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse), strUserSeq: strLoginUserSeq);

            // 보안결재관리(2)
            if (bSecurityApprMenuUse)
            {
                strNavigatePathWithGroupID = "/mailSecurityApprove/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_COMMON_APPROVESECURITY"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse, strUserSeq: strLoginUserSeq);
            }

            //대결재관리(3)
            if (bDeputyApprove && bApprMenuUse && sgUserInfo.GetUserApprPos(true, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(gID)) > 0)      //일반사용자는 (대결재권한을 가져도) 대결재 관리 사용 불가
            {
                strNavigatePathWithGroupID = "";    //안씀
                                                    //strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_PROXY_PROXYREG_MANAGE"), icon: "fas fa-cog", path: "POPUP('DEPUTY')", badgeType: "right badge badge-warning", bUse: bSFMManageUse, strUserSeq: strUserSeq);
            }
            nParentID++;
        }

        if (bPCURLUse)
        {
            // PCURL 관리
            if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strLoginUserSeq);

            // PCURL 관리
            strNavigatePathWithGroupID = "/pcurlManage/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: XmlConf.GetTitle("T_COMMON_URLMANAGE"), icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strLoginUserSeq);

            // PCURL 결재
            if (nUserApprPos == 1)
            {
                strNavigatePathWithGroupID = "/pcurlApprove/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: XmlConf.GetTitle("T_COMMON_URLAPPROVE"), icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse), strUserSeq: strLoginUserSeq);
            }
            nParentID++;
        }

        if (bUseClipBoardManageUI)
        {
            // 클립보드 관리
            if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bUseClipBoardManageUI, strUserSeq: strLoginUserSeq);

            // 클립보드 관리
            strNavigatePathWithGroupID = "/clipBoardManage/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: XmlConf.GetTitle("T_COMMON_CLIPTRANS"), icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bUseClipBoardManageUI, strUserSeq: strLoginUserSeq);

            // 클립보드 결재
            if (bUseClipBoardApproveUI)
            {
                strNavigatePathWithGroupID = "/clipBoardApprove/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: XmlConf.GetTitle("T_COMMON_CLIPAPPR"), icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bUseClipBoardApproveUI & bApprMenuUse), strUserSeq: strLoginUserSeq);
            }
            nParentID++;
        }

        // 접속환경
        strNavigatePathWithGroupID = "/viewConf/";
        strNavigatePathWithGroupID += gID.ToString();
        if (SideBarUISvc.FindMenu(gID, nParentID) == null)
            SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strLoginUserSeq);

        // 공지사항
        strNavigatePathWithGroupID = "/publicBoard/";
        strNavigatePathWithGroupID += gID.ToString();
        if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_COMMON_NOTIFY"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPublicBoard, strUserSeq: strLoginUserSeq);

        // 접속환경
        strNavigatePathWithGroupID = "/viewConf/";
        strNavigatePathWithGroupID += gID.ToString();
        if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
            SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strLoginUserSeq);

        eLoginType tmpLoginType = pageService.GetGroupIDLoginType(gID);

        // 기본설정
        if (tmpLoginType == eLoginType.eLOGINTYPE_ORIGIN && SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(gID))
        {
            strNavigatePathWithGroupID = "/netConf/";
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_ETC_BASICSET_TITLE"), icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strLoginUserSeq);
        }

        //OTP 팝업메뉴
        if (bHanssakOTP)
        {
            strNavigatePathWithGroupID = "/hanssakOTP/";    //안씀
            strNavigatePathWithGroupID += gID.ToString();
            if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_COMMON_OTP"), icon: "fas fa-cog", path: "POPUP('OTP')", badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strUserSeq);
        }

        StateHasChanged();

        return true;
    }

    public async Task ChangeActiveMenuWrapPopup(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        eventArgsPopup = eventArgs;
        activeMenuPopup = activeMenu;

        // 이전 Page로 돌아갈 수 있도록(새로운 로그인 Page에서 Back Button 사용) 현재 page URL 저장해둠
        /*
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
        {
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;
            pageService.m_strLastPage = "/";
            pageService.m_strLastPage += MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);  //
        }
        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;
        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);*/


        //ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        //if (AppConfigSvc.GetUseGPKILogin(activeMenu.GroupId))

        if (SGAppMgrSvc.OpConfigInfoService.GetUseGPKILogin(activeMenu.GroupId))

        {
            // Gpki 로그인 Popup
            refPopUpGpkiLogIn.nGroupID = activeMenu.GroupId;
            refPopUpGpkiLogIn.Mode = "1"; // 로그인모드
            refPopUpGpkiLogIn.nDrawPageGroupID = -1;
            await refPopUpGpkiLogIn.openPopUp();
        }
        else
        {

            refPopUpLogIn.nGroupID = activeMenu.GroupId;
            refPopUpLogIn.nDrawPageGroupID = -1;

            if (pageService.m_bMultiLoginDo)
            {
                SGSvrData sgSvrData = null;
                sgSvrData = (SGSvrData)HSCmdCenter.GetSGSvrData(refPopUpLogIn.nGroupID);
                if (sgSvrData == null)
                    return;

                eLoginType tmpLoginType = sgSvrData.GetLoginType();

                CLog.Here().Information($"SGSidebar multi logintype : {tmpLoginType}   group ID : {refPopUpLogIn.nGroupID}");
                refPopUpLogIn.eLoginUITypeData = tmpLoginType;
            }
            else
            {

                refPopUpLogIn.eLoginUITypeData = (eLoginType)pageService.m_nLoginType;
                CLog.Here().Information($"SGSidebar single pageService.m_nLoginType : {pageService.m_nLoginType} refPopUpLogIn.eLoginUITypeData : { refPopUpLogIn.eLoginUITypeData}");
                // groupID 중 현재 연결되어 있는 가장 0이랑가까운 망의 ID/PW를 가져다가 사용
                @*                foreach ()
                    {
                    }
                    refPopUpLogIn.id = "";
                    refPopUpLogIn.pw = "";*@

            }


            await refPopUpLogIn.openPopUp();

        } // else - Gpki 로그인인을 제외한 Login 처리

        if (refPopUpLogIn.bAutoLogin)
        {

        }


        /*
        else
        {
            // ID / PW 로그인 Popup
            refPopUpLogIn.nGroupID = activeMenu.GroupId;
            refPopUpLogIn.nDrawPageGroupID = -1;
            await refPopUpLogIn.openPopUp();
        }*/


    }


}
