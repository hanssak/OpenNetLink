
<!-- Sidebar Menu -->
<!--
    /*
    ISGSideBarUIService AddMenu(int groupId, int menuId, string name, string icon, string path, 
                              string tooltip = "", string menuOpenClass = "", string activeClass = "", bool expanded = false); 
    ISGSideBarUIService AddSubMenu(int groupId, int menuId, string name, string icon, string path, 
                              string tooltip = "", string menuOpenClass = "", string activeClass = "", bool expanded = false); 
    */
<nav class="mt-2">
  <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
-->
<nav class="mt-2">
  <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
    <!-- Add icons to the links using the .nav-icon class
          with font-awesome or any other icon font library -->
    @if (SideBarUISvc.MenuList?.Count > 0)
    {
    /* Exist Menu */
      @foreach(var MenuItem in SideBarUISvc.MenuList)
      {
      /* Processing each Menu */
        @if (MenuItem.Actived) SideBarUISvc.ActiveMenu = MenuItem;
        @if (MenuItem.DicChild?.Count > 0)
        {
        /* Exist SubMenu */
        /* s./ 업무망-인터넷망 */
          <li class="nav-item has-treeview @(MenuItem.MenuOpenClass)">
            @if (!String.IsNullOrEmpty(MenuItem.Path)) 
            {
              <a href="@MenuItem.Path" class="nav-link @(MenuItem.ActiveClass)"
                          @onclick="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))"
                          @onkeydown="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))">
                <i class="nav-icon @(MenuItem.Icon /*fas fa-tachometer-alt*/)"></i>
                <p style="font-size:1rem; padding:3px 0px;">
                  @(MenuItem.FromName /*Dashboard*/)
                  <i class="fas fa-long-arrow-alt-right p-1"></i>
                  @(MenuItem.ToName /*Dashboard*/)
                  <i class="right fas fa-angle-left mt-1"></i>
                  <!-- Badge -->
                  @if (GetNotiInfoCount(MenuItem.GroupId) > 0 || GetAlarmInfoCount(MenuItem.GroupId) > 0)
                  {
                    <span class="@(MenuItem.BadgeType /*left badge badge-danger*/)">@(MenuItem.BadgeValue /*New*/)</span>
                  }
                </p>
              </a>
            }
            else
            {  
              <a class="nav-link @(MenuItem.ActiveClass)"
                          @onclick="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))"
                          @onkeydown="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))">
                <i class="nav-icon @(MenuItem.Icon /*fas fa-tachometer-alt*/)"></i>
                <p style="font-size:1rem; padding:3px 0px;">
                  @(MenuItem.FromName /*Dashboard*/)
                  <i class="fas fa-long-arrow-alt-right p-1"></i>
                  @(MenuItem.ToName /*Dashboard*/)
                  <i class="right fas fa-angle-left mt-1"></i>
                  <!-- Badge -->
                  @if (GetNotiInfoCount(MenuItem.GroupId) > 0 || GetAlarmInfoCount(MenuItem.GroupId) >0)
                  {
                    <span class="@(MenuItem.BadgeType /*left badge badge-danger*/) ">@(MenuItem.BadgeValue /*New*/)</span>
                  }
                </p>
              </a>
            }
            <ul class="nav nav-treeview">
          @foreach(var SubMenuList in MenuItem.DicChild)
          {
                <li class="nav-header t_header">
                  @(GetDescription(SubMenuList.Key)) &nbsp;&nbsp;
                  @if (GetNotiCategoryCount(SubMenuList.Value[0].GroupId).ContainsKey(SubMenuList.Key) 
                      && GetNotiCategoryCount(SubMenuList.Value[0].GroupId)[SubMenuList.Key] > 0)
                  { 
                    <span class="@(SubMenuList.Value[0].BadgeType) ">
                      @(GetNotiCategoryCount(SubMenuList.Value[0].GroupId)[SubMenuList.Key])
                    </span> 
                  }
                  @if (GetAlarmCategoryCount(SubMenuList.Value[0].GroupId).ContainsKey(SubMenuList.Key)
                      && GetAlarmCategoryCount(SubMenuList.Value[0].GroupId)[SubMenuList.Key] > 0)
                  { 
                    <span class="badge badge-danger ">
                      @GetAlarmCategoryCount(SubMenuList.Value[0].GroupId)[SubMenuList.Key]
                    </span>
                  }
                </li>
            @foreach(var SubMenuItem in SubMenuList.Value)
            {
            /* Processing each SubMenu */
              @if (SubMenuItem.Actived) SideBarUISvc.ActiveMenu = SubMenuItem;
                <li class="nav-item">
                  <a href="@SubMenuItem.Path" class="nav-link @(SubMenuItem.ActiveClass)" 
                                                @onclick="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, SubMenuItem))"
                                                @onkeydown="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, SubMenuItem))">
                    <i class="nav-icon @(SubMenuItem.Icon /*far fa-circle*/)"></i>
                    <p>
                      @(SubMenuItem.ToName /*Dashboard v1*/)
                      <!-- Badge -->
                      <span class="@(SubMenuItem.BadgeType /*right badge badge-danger*/) ">@(SubMenuItem.BadgeValue /*New*/)</span>
                    </p>
                  </a>
                </li>
            }
          }
            </ul>
          </li>
        }
        else
        {
        /* Not Exist SubMenu */
          <li class="nav-item">
            <a href="@MenuItem.Path" class="nav-link @(MenuItem.ActiveClass)"
                                      @onclick="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))"
                                      @onkeydown="@(async eventArgs => SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem))">
              <i class="nav-icon @(MenuItem.Icon /*fas fa-th*/)"></i>
              <p style="font-size:1rem; padding:3px 0px;">
                @(MenuItem.ToName /*Widgets*/)
                <!-- Badge -->
                @if (GetNotiInfoCount(MenuItem.GroupId) > 0 || GetAlarmInfoCount(MenuItem.GroupId) >0)
                {
                  <span class="@(MenuItem.BadgeType /*right badge badge-danger*/) ">@(MenuItem.BadgeValue /*New*/)</span>
                }
              </p>
            </a>
          </li>
        <!-- Not Exist SubMenu -->
        }
      <!-- Processing each Menu -->
      }
    <!-- Exist Menu -->
    }

  </ul>
</nav>
<!-- /.Sidebar-Menu -->

@code
{
    [Parameter] public ISGSideBarUIService SideBarUISvc { get; set; }

    private SGDBProc SQLiteDB { get; set; } = SGDBProc.Instance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
    }

    private string GetDescription(LSIDEBAR Id)
    {
        return MenuNameMapper.GetDescription(Id);
    }
    private Dictionary<LSIDEBAR, int> GetNotiCategoryCount(int groupId)
    {
        return SQLiteDB.SelectNotiInfoCategoryCount(groupId);
    }
    private Dictionary<LSIDEBAR, int> GetAlarmCategoryCount(int groupId)
    {
        return SQLiteDB.SelectAlarmInfoCategoryCount(groupId);
    }

    private int GetNotiInfoCount(int groupId)
    {
        return SQLiteDB.SelectNotiInfoCount(groupId);
    }
    private int GetAlarmInfoCount(int groupId)
    {
        return SQLiteDB.SelectAlarmInfoCount(groupId);
    }
}
