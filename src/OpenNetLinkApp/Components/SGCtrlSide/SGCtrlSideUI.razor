@using Serilog
@using Serilog.Events
@using AgLogManager

<!-- Control Sidebar -->
    <!-- Control sidebar content goes here -->
	 
		<div class="p-3 control-sidebar-content">

					<div class="r_set_title"> <i class="fas fa-cogs pr-2"></i> 공통환경설정</div>
					<hr class="mb-2">

					<div class="r_set_sub">클립보드</div>
					<div class="ml-2 mb-4">
							<div class="mb-2 float-left pr-2 w-100">
							    <div class="mb-1">클립보드 단축키 : </div>
								<span class="net1">업무망<i class="fas fa-long-arrow-alt-right p-1"></i>인터넷망</span><br>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Window</span>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Ctrl</span>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Alt</span>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Shift</span>
								<select class="mr-1"> 
									<option> V</option> 
									<option> Ctrl+1</option> 
									<option> V</option> 
								</select>
							</div>

							<div class="mb-2 float-left pr-2 w-100">
								<span class="net2">운영망<i class="fas fa-long-arrow-alt-right p-1"></i>업무망</span><br>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Window</span>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Ctrl</span>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Alt</span>
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">Shift</span>
								<select class="mr-1"> 
									<option> V</option> 
									<option> Ctrl+1</option> 
									<option> V</option> 
								</select>
							</div>

							<div class="mb-1  w-100">
							<span class="pr-2">클립보드 알림형식 : </span>
								<select> 
									<option>트레이</option> 
									<option>OS & UI</option> 
									<option>OS</option> 
									<option>UI</option> 
								</select>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>클립보드 복사 후 전송</span>
							</div>

					</div>

					<div class="r_set_sub">URL 자동전환</div>
					<div class="ml-2 mb-4">
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>URL 자동전환 사용</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>URL 자동전환 알림</span>
							</div>

							<div class="mb-1  w-100">
							<span class="pr-2">URL 자동전환 알림형식</span>
								<select> 
									<option>닫기</option> 
									<option>유지</option> 
									<option>특정 URL포워딩</option> 
								</select>
							</div>
					</div>

					<div class="r_set_sub">파일 전송</div>
					<div class="ml-2 mb-4">
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>마우스 우클릭 자동전송</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>사후결재 체크 </span>
							</div>
					</div>

					<div class="r_set_sub">파일 수신</div>
					<div class="ml-2 mb-4">
							<div class="mb-2  w-100">
								<div class="mb-1">파일 다운로드 경로 : </div>
								<span class="net1">업무망<i class="fas fa-long-arrow-alt-right p-1"></i>인터넷망</span><br>
								<input type="text" value="1" class="mr-1 col-md-10"><a href="" class="file_dw"><i class="fas fa-folder-open pl-1"></i></a>
							</div>
							<div class="mb-2  w-100">
								<span class="net2">운영망<i class="fas fa-long-arrow-alt-right p-1"></i>업무망</span><br>
								<input type="text" value="1" class="mr-1 col-md-10"><a href="" class="file_dw"><i class="fas fa-folder-open pl-1"></i></a>
							</div>
							<div class="mb-1 w-100">
								<input type="checkbox" value="1" class="mr-1"><span>파일 수진 후 폴더 열기 </span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>사수동다운로드 폴더 선택 </span>
							</div>
					</div>


					<div class="r_set_sub">알림 트레이</div>
					<div class="ml-2 mb-4">
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>수신 완료 후 알림 유지</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>승인대기 알림 유지</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>승인완료 알림 유지</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>반려 알림 유지</span>
							</div>
					</div>


					<div class="r_set_sub">트레이 이동</div>
					<div class="ml-2 mb-4">
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>종료 시, 트레이로 이동</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>프로그램 시작 시, 트레이 이동</span>
							</div>
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span>시작 프로그램에 등록</span>
							</div>

					</div>



					<div class="r_set_sub">언어설정</div>
					<div class="ml-2 mb-4">
							<div class="mb-1  w-100">
								<span class="pr-2">언어</span>
								<select> 
									<option>한국어</option> 
									<option>1</option> 
									<option>2</option> 
									<option>3</option> 
									<option>4</option> 
								</select>
							</div>

					</div>


					<div class="r_set_sub">화면잠금</div>
					<div class="ml-2 mb-4">
							<div class="mb-1  w-100">
								<input type="checkbox" value="1" class="mr-1"><span class="mr-2">화면잠금</span>
								<input type="text" value="1" class="mr-1 col-md-1">분
							</div>

					</div>

					<div class="r_set_sub">업데이트</div>
					<div class="ml-2 mb-5 updates">
							<ul class="mb-1  w-100 ">
								<li><a href="#" class="update">업데이트 확인 <i class="fas fa-arrow-circle-right ml-1"></i></a></li>
								<li>마지막 업데이트 :  2020-08-24</li>
								<li>소프트웨어버전 :  NetLink 3.2</li>
							</ul>

					</div>

		</div>

<!-- /.Control Sidebar -->

@code
{
    [Parameter] public ISGCtrlSideUIService CtrlSideUISvc { get; set; }
    [Parameter] public ISGAppConfigService AppConfigSvc { get; set; }
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGCtrlSideUI>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
		//CtrlSideUISvc.SetClipAlarmType(CLIPALM_TYPE.OS); 
		CLog.Here().Information($"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA {AppConfigSvc.AppConfigInfo.enClipAlarmType}");
    }

	/// <summary>
    /// Getter for AppConfigService
	/// </summary>
	private string GetClipBoardHotKey(int groupId)
	{
		return AppConfigSvc.GetClipBoardHotKey(groupId);
	}
	private CLIPALM_TYPE GetClipAlarmType()
	{
		return AppConfigSvc.GetClipAlarmType();
	}
	private bool GetClipAfterSend()
	{
		return AppConfigSvc.GetClipAfterSend();
	}
	private bool GetURLAutoTrans()
	{
		return AppConfigSvc.GetURLAutoTrans();
	}
	private bool GetURLAutoAfterMsg()
	{
		return AppConfigSvc.GetURLAutoAfterMsg();
	}
	private string GetURLAutoAfterBrowser()
	{
		return AppConfigSvc.GetURLAutoAfterBrowser();
	}
	private bool GetRMouseFileAddAfterTrans()
	{
		return AppConfigSvc.GetRMouseFileAddAfterTrans();
	}
	private bool GetAfterBasicChk()
	{
		return AppConfigSvc.GetAfterBasicChk();
	}
	private string GetRecvDownPath(int groupId)
	{
		return AppConfigSvc.GetRecvDownPath(groupId);
	}
	private bool GetFileRecvFolderOpen()
	{
		return AppConfigSvc.GetFileRecvFolderOpen();
	}
	private bool GetRecvDownPathChange()
	{
		return AppConfigSvc.GetRecvDownPathChange();
	}
	private bool GetManualRecvDownChange()
	{
		return AppConfigSvc.GetManualRecvDownChange();
	}
	private bool GetFileRecvTrayFix()
	{
		return AppConfigSvc.GetFileRecvTrayFix();
	}
	private bool GetApprTrayFix()
	{
		return AppConfigSvc.GetApprTrayFix();
	}
	private bool GetUserApprActionTrayFix()
	{
		return AppConfigSvc.GetUserApprActionTrayFix();
	}
	private bool GetUserApprRejectTrayFix()
	{
		return AppConfigSvc.GetUserApprRejectTrayFix();
	}
	private bool GetExitTrayMove()
	{
		return AppConfigSvc.GetExitTrayMove();
	}
	private bool GetStartTrayMove()
	{
		return AppConfigSvc.GetStartTrayMove();
	}
	private bool GetStartProgramReg()
	{
		return AppConfigSvc.GetStartProgramReg();
	}
	private string GetLanguage()
	{
		return AppConfigSvc.GetLanguage();
	}
	private bool GetScreenLock()
	{
		return AppConfigSvc.GetScreenLock();
	}
	private int GetScreenTime()
	{
		return AppConfigSvc.GetScreenTime();
	}

	/// <summary>
    /// Setter for AppConfigService
	/// </summary>
	private void SetClipBoardHotKey(int groupId, bool bWin, bool bCtrl, bool bAlt, bool bShift, char chVKCode)
	{
		CtrlSideUISvc.SetClipBoardHotKey(groupId, bWin, bCtrl, bAlt, bShift, chVKCode);
	}
	private void SetClipAlarmType(CLIPALM_TYPE alamType)
	{
		CtrlSideUISvc.SetClipAlarmType(alamType);
	}
	private void SetClipAfterSend(bool clipAfterSend)
	{
		CtrlSideUISvc.SetClipAfterSend(clipAfterSend);
	}
	private void SetURLAutoTrans(bool urlAutoTrans)
	{
		CtrlSideUISvc.SetURLAutoTrans(urlAutoTrans);
	}
	private void SetURLAutoAfterMsg(bool urlAutoAfterMsg)
	{
		CtrlSideUISvc.SetURLAutoAfterMsg(urlAutoAfterMsg);
	}
	private void SetURLAutoAfterBrowser(string urlAutoAfterBrowser)
	{
		CtrlSideUISvc.SetURLAutoAfterBrowser(urlAutoAfterBrowser);
	}
	private void SetRMouseFileAddAfterTrans(bool rmouseFileAddAfterTrans)
	{
		CtrlSideUISvc.SetRMouseFileAddAfterTrans(rmouseFileAddAfterTrans);
	}
	private void SetAfterBasicChk(bool afterBasicChk)
	{
		CtrlSideUISvc.SetAfterBasicChk(afterBasicChk);
	}
	private void SetRecvDownPath(int groupId, string recvDownPath)
	{
		CtrlSideUISvc.SetRecvDownPath(groupId, recvDownPath);
	}
	private void SetFileRecvFolderOpen(bool fileRecvFolderOpen)
	{
		CtrlSideUISvc.SetFileRecvFolderOpen(fileRecvFolderOpen);
	}
	private void SetRecvDownPathChange(bool recvDownPathChange)
	{
		CtrlSideUISvc.SetRecvDownPathChange(recvDownPathChange);
	}
	private void SetManualRecvDownChange(bool manualRecvDownChange)
	{
		CtrlSideUISvc.SetManualRecvDownChange(manualRecvDownChange);
	}
	private void SetFileRecvTrayFix(bool fileRecvTrayFix)
	{
		CtrlSideUISvc.SetFileRecvTrayFix(fileRecvTrayFix);
	}
	private void SetApprTrayFix(bool apprTrayFix)
	{
		CtrlSideUISvc.SetApprTrayFix(apprTrayFix);
	}
	private void SetUserApprActionTrayFix(bool userApprActionTrayFix)
	{
		CtrlSideUISvc.SetUserApprActionTrayFix(userApprActionTrayFix);
	}
	private void SetUserApprRejectTrayFix(bool userApprRejectTrayFix)
	{
		CtrlSideUISvc.SetUserApprRejectTrayFix(userApprRejectTrayFix);
	}
	private void SetExitTrayMove(bool exitTrayMove)
	{
		CtrlSideUISvc.SetExitTrayMove(exitTrayMove);
	}
	private void SetStartTrayMove(bool startTrayMove)
	{
		CtrlSideUISvc.SetStartTrayMove(startTrayMove);
	}
	private void SetStartProgramReg(bool startProgramReg)
	{
		CtrlSideUISvc.SetStartProgramReg(startProgramReg);
	}
	private void SetLanguage(string language)
	{
		CtrlSideUISvc.SetLanguage(language);
	}
	private void SetScreenLock(bool screenLock)
	{
		CtrlSideUISvc.SetScreenLock(screenLock);
	}
	private void SetScreenTime(int screenTime)
	{
		CtrlSideUISvc.SetScreenTime(screenTime);
	}
}
