@using System
@using System.Collections.Generic
@using System.Linq
@using OpenNetLinkApp.Common
@using Serilog
@using Serilog.Events
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGPopUp
@using System.Runtime.InteropServices
@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject XmlConfService XmlConf
@inject HSCmdCenter HsCmdCenter
@inject IJSRuntime JSRuntime
@inject PageStatusService pageService
<!-- Control Sidebar -->
<!-- Control sidebar content goes here -->

<div class="p-3 control-sidebar-content">

    <div class="r_set_title"> <i class="fas fa-cogs pr-2"></i>@((MarkupString)XmlConf.GetTitle("T_APPCONFIG_COMMON"))</div>                     <!--공통환경설정-->
    <hr class="mb-2">

    @if (m_bUseClipBoard)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_COMMON_CLIPBOARD")</div> <!--클립보드-->
        <div class="ml-2 mb-4">
            <div class="mb-2 float-left pr-2 w-100">
                <div class="mb-1">@XmlConf.GetTitle("T_INFO_CLIPBOARD_SHOTKEY") : </div>                                                 <!--클립보드 단축키-->
                @foreach (var (NetworkInfo, Idx) in GetSGNetworkList().Select((value, i) => (value, i)))
                {
                    //@if (GetDicUseClipBoard(NetworkInfo.GroupID))
                    @if (pageService.GetUseClipBoard(NetworkInfo.GroupID))
                    {
                        m_dicDestSysPos = pageService.GetTargetSystemList(NetworkInfo.GroupID);

                        @if (m_dicDestSysPos != null && m_dicDestSysPos.Count > 1)
                        {
                            // 3중 - 다중망
                            @foreach (var itemData in m_dicDestSysPos)
                            {
                                // 다중접속일때에는 단일망에만 전달가능
                                // 단일접속일때에는 3중망에 전달가능
                                @if (itemData.Key.Length > 0 && itemData.Value.strDestSysid.Length > 0 && itemData.Value.bUseClipTrans && itemData.Value.nIdx > 0 &&
                            (pageService.m_bIsMultiNetWork == false || (pageService.m_bIsMultiNetWork && itemData.Value.nIdx == 1)))
                                {
                                    //@if (itemData.Value.nIdx == 1 && ListModKey.Count > 0)
                                    @if (itemData.Value.nIdx == 1 && DicModKey.Count > 0)
                                    {
                                        <span class="@("net" + (Idx + 1).ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(itemData.Key)</span>
                                        <br>
                                        @foreach (var (Modifier, Index) in ModKeyList().Select((value, i) => (value, i)))
                                        {
                                            @*<input type="checkbox" class="mr-1" checked="@(ListModKey[NetworkInfo.GroupID][Index])"
                                                @onchange="eventArgs => { CheckBoxModifierClicked(NetworkInfo.GroupID, (HOTKEY_MOD)Index, eventArgs); }" />*@
                                            <input type="checkbox" class="mr-1" checked="@(GetDicModKey(NetworkInfo.GroupID, Index))" disabled="@(!isValidDicModKey(NetworkInfo.GroupID, Index))" @onclick:preventDefault="@GetPreventDefault(NetworkInfo.GroupID, Index)"
                                                   @onchange="eventArgs => { CheckBoxModifierClicked(NetworkInfo.GroupID, (HOTKEY_MOD)Index, eventArgs); }" />
                                            <span class="mr-2">@Modifier</span>
                                        }

                                        // GetDicModVKeyValue
                                        // ListVKey[NetworkInfo.GroupID]
                                        <!--<select class="mr-1" value="@GetDicModVKeyValue(NetworkInfo.GroupID)"
                                        @onchange="eventArgs => { SelectBoxVKeySelected(NetworkInfo.GroupID, eventArgs); }">
                                        @*<select class="mr-1" value="@ListVKey[NetworkInfo.GroupID]"
                                            @onchange="eventArgs => { SelectBoxVKeySelected(NetworkInfo.GroupID, eventArgs); }">*@
                                        @foreach (var VKey in VKeyList())
                                        {
                                                    <option value="@VKey">@VKey</option>
                                        }
                                            </select>-->
                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                @GetDicModVKeyValue(NetworkInfo.GroupID)
                                            </button>
                                            <div class="dropdown-menu" aria-labelledby="dropdownMenu1" style="height:135px; overflow-y:scroll; min-width:0px;">
                                                @foreach (char str in VKeyList())
                                                {
                                                    <button class="dropdown-item dropdown-footer text-xs p-1" type="button" @onclick="@(()=>SelectBoxVKeySelected(NetworkInfo.GroupID, str))">@str</button>
                                                }
                                            </div>
                                        </div>
                                        <br />
                                    }
                                    else if (itemData.Value.nIdx > 1 && dicModKeyNetOver.Count > 0)
                                    {

                                        MakeNetOverKeyGroupIdx(NetworkInfo.GroupID, itemData.Value.nIdx);
                                        <span class="@("net" + (Idx + 1).ToString() + itemData.Value.nIdx.ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(itemData.Key)</span>
                                        <br>
                                        @foreach (var (Modifier, Index) in ModKeyList().Select((value, i) => (value, i)))
                                        {
                                            <input type="checkbox" class="mr-1" checked="@dicModKeyNetOver[strNetgroupIDidxKey][Index]"
                                                   @onchange="eventArgs => { CheckBoxModifierClickedNetOver(NetworkInfo.GroupID, itemData.Value.nIdx, (HOTKEY_MOD)Index, eventArgs); }" />
                                            <span class="mr-2">@Modifier</span>
                                        }
                                        @*<select class="mr-1" value="@dicVKeyNetOver[strNetgroupIDidxKey]"
                                            @onchange="eventArgs => { SelectBoxVKeySelectedNetOver(NetworkInfo.GroupID, itemData.Value.nIdx, eventArgs); }">
                                            @foreach (var VKey in VKeyList())
                                            {
                                            <option value="@VKey">@VKey</option>
                                            }
                                            </select>*@

                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                @dicVKeyNetOver[strNetgroupIDidxKey]
                                            </button>
                                            <div class="dropdown-menu" aria-labelledby="dropdownMenu1" style="height:135px; overflow-y:scroll; min-width:0px;">
                                                @foreach (char str in VKeyList())
                                                {
                                                    <button class="dropdown-item dropdown-footer text-xs p-1" type="button" @onclick="@(()=>SelectBoxVKeySelectedNetOver(NetworkInfo.GroupID, itemData.Value.nIdx, str))">@str</button>
                                                }
                                            </div>
                                        </div>
                                        <br />
                                    }

                                    // if (itemData.Value.nIdx == 1 && DicModKey.Count > 0)

                                }

                                // if (itemData.Key.Length > 0 && itemData.Value.strDestSysid.Length > 0 && itemData.Value.bUseClipTrans && itemData.Value.nIdx > 0

                            }

                            // foreach (var itemData in m_dicDestSysPos)

                            // Both 전송기능 - 단축키
                            if (ListUseClipNetOverALL != null && ListUseClipNetOverALL.Count > 0 && ListUseClipNetOverALL[NetworkInfo.GroupID])
                            {
                                MakeNetOverKeyGroupIdx(NetworkInfo.GroupID, 0);
                                <span class="@("net" + (Idx + 1).ToString() + "0")">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(XmlConf.GetTitle("T_TRANS_NETOVER_ALL"))</span>
                                <br>
                                @foreach (var (Modifier, Index) in ModKeyList().Select((value, i) => (value, i)))
                                {
                                    <input type="checkbox" class="mr-1" checked="@dicModKeyNetOver[strNetgroupIDidxKey][Index]"
                                           @onchange="eventArgs => { CheckBoxModifierClickedNetOver(NetworkInfo.GroupID, 0, (HOTKEY_MOD)Index, eventArgs); }" />
                                    <span class="mr-2">@Modifier</span>
                                }
                                @*<select class="mr-1" value="@dicVKeyNetOver[strNetgroupIDidxKey]"
                                    @onchange="eventArgs => { SelectBoxVKeySelectedNetOver(NetworkInfo.GroupID, 0, eventArgs); }">
                                    @foreach (var VKey in VKeyList())
                                    {
                                    <option value="@VKey">@VKey</option>
                                    }
                                    </select>
                                    <br />*@

                                <div class="dropdown">
                                    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        @dicVKeyNetOver[strNetgroupIDidxKey]
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="dropdownMenu1" style="height:135px; overflow-y:scroll; min-width:0px;">
                                        @foreach (char str in VKeyList())
                                        {
                                            <button class="dropdown-item dropdown-footer text-xs p-1" type="button" @onclick="@(()=>SelectBoxVKeySelectedNetOver(NetworkInfo.GroupID, 0, str))">@str</button>
                                        }
                                    </div>
                                </div>
                                <br />
                            }

                        }   // if (m_dicDestSysPos != null && m_dicDestSysPos.Count > 1)
                            //else if (ListModKey.Count > 0 && ListModKey.Count > NetworkInfo.GroupID)
                            // else if (DicModKey.Count > 0 && DicModKey.Count > NetworkInfo.GroupID) //  DicVKey
                        else if (DicModKey.Count > 0 && DicVKey.Count > 0)
                        {
                            // 단일 - 다중망
                            <span class="@("net" + (Idx + 100).ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(NetworkInfo.ToName)</span>
                            <br>

                            @foreach (var (Modifier, Index) in ModKeyList().Select((value, i) => (value, i)))
                            {
                                @*<input type="checkbox" class="mr-1" checked="@ListModKey[NetworkInfo.GroupID][Index]"
                                    @onchange="eventArgs => { CheckBoxModifierClicked(NetworkInfo.GroupID, (HOTKEY_MOD)Index, eventArgs); }" />*@

                                <input type="checkbox" class="mr-1" checked="@(GetDicModKey(NetworkInfo.GroupID, Index))" disabled="@(!isValidDicModKey(NetworkInfo.GroupID, Index))" @onclick:preventDefault="@GetPreventDefault(NetworkInfo.GroupID, Index)"
                                       @onchange="eventArgs => { CheckBoxModifierClicked(NetworkInfo.GroupID, (HOTKEY_MOD)Index, eventArgs); }" />

                                <span class="mr-2">@Modifier</span>
                            }

                            @*<select class="mr-1" value="@ListVKey[NetworkInfo.GroupID]"
                                @onchange="eventArgs => { SelectBoxVKeySelected(NetworkInfo.GroupID, eventArgs); }">*@
                            @*<select class="mr-1" value="@GetDicModVKeyValue(NetworkInfo.GroupID)" disabled="@(GetDicModVKeyValue(NetworkInfo.GroupID) == '\0')"
                                @onchange="eventArgs => { SelectBoxVKeySelected(NetworkInfo.GroupID, eventArgs); }">
                                @foreach (var VKey in VKeyList())
                                {
                                <option value="@VKey">@VKey</option>
                                }
                                </select>*@
                            <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @GetDicModVKeyValue(NetworkInfo.GroupID)
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenu1" style="height:135px; overflow-y:scroll; min-width:0px;">
                                @foreach (var VKey in VKeyList())
                                {
                                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SelectBoxVKeySelected(NetworkInfo.GroupID, VKey))">@VKey</button>
                                }
                            </div>



                            <br />
                        }

                        // else if (ListModKey.Count > 0 && ListModKey.Count > NetworkInfo.GroupID)
                    }
                }
            </div>
            @if (m_bUseClipAlarmType)
            {
                <div class="mb-1  w-100">
                    <span class="pr-2">@XmlConf.GetTitle("T_INFO_CLIPNOTI_OPTION_TYPE") : </span>                                              <!--클립보드 알림형식 -->
                    <!--<select value="@((int)GetClipAlarmType())"
                    @onchange="eventArgs => { SetClipAlarmType(eventArgs); }">
                        <option value="@((int)CLIPALM_TYPE.OSUI)">OS & UI</option>
                        <option value="@((int)CLIPALM_TYPE.OS)">OS</option>
                        <option value="@((int)CLIPALM_TYPE.UI)">UI</option>
                    </select>-->

                    <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @GetClipAlarmTypeStr()
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenu2" style="min-width:85px">
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetClipAlarmType(0))">OS & UI</button>
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetClipAlarmType(1))">OS</button>
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetClipAlarmType(2))">UI</button>
                    </div>

                </div>
            }

            @if (m_bUseClipCopyAndSend)
            {
                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetClipCopyAutoSend())"
                           @onchange="eventArgs => { SetClipCopyAutoSend(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_CLIPCOPYANDSEND")</span>                <!--클립보드 복사 후 전송 -->
                    </div>
            }
            @if (m_bUseClipBoardPasteHotKey)
            {
                <hr style="border-color:gray">
                 <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetClipBoardPasteHotKey())"
                           @onchange="eventArgs => { SetClipBoardPasteHotKey(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_CLIPPASTE_SHORTCUTS")</span>                <!--붙여넣기 추가 단축키 사용-->
                    <br>
                    @if(GetClipBoardPasteHotKey())////붙여넣기에 대한 id는 100으로 단일화
                    {
                        <div class="mt-1 ml-3">
                            @foreach (var (Modifier, Index) in ModKeyList().Select((value, i) => (value, i)))
                            {
                                <input type="checkbox" class="mr-1" checked="@(GetDicModKey(PasteGroupId, Index))" disabled="@(!isValidDicModKey(PasteGroupId, Index))" @onclick:preventDefault="@GetPreventDefault(PasteGroupId, Index)"
                                        @onchange="eventArgs => { CheckBoxModifierClicked(PasteGroupId, (HOTKEY_MOD)Index, eventArgs); }" />
                                <span class="mr-2">@Modifier</span>
                            }
                            <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu7" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @GetDicModVKeyValue(PasteGroupId)
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenu7" style="height:135px; overflow-y:scroll; min-width:0px;">
                                @foreach (var VKey in VKeyList())
                                {
                                <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SelectBoxVKeySelected(PasteGroupId, VKey))">@VKey</button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }

    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_MAINPAGE_SETTING")</div> <!--화면설정-->
    <div class="ml-2 mb-4">        
        @if (m_bUseMainPage)
        {
            <div class="mb-2  w-100">
                <span class="pr-2">@XmlConf.GetTitle("T_APPCONFIG_MAINPAGE")</span>                                              <!--클립보드 알림형식 -->
                @*<select value="@((int)GetMainPageType())"
                    @onchange="eventArgs => { SetMainPageType(eventArgs); }">
                    <option value="@((int)PAGE_TYPE.NONE)">초기값</option>
                    <option value="@((int)PAGE_TYPE.DASHBOARD)">대시보드</option>
                    <option value="@((int)PAGE_TYPE.TRANSFER)">파일전송</option>
                    </select>*@
                <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @GetMainPageTypeStr()
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenu3" style="min-width:85px">
                    @* DashBoard *@
                    @if (bUseDashBoardUI)
                    {
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetMainPageType((int)PAGE_TYPE.NONE))">@XmlConf.GetTitle("T_PAGE_TYPE_INIT")</button>
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetMainPageType((int)PAGE_TYPE.DASHBOARD))">@XmlConf.GetTitle("T_PAGE_TYPE_DASHBOARD")</button>
                    }

                    @* 파일전송 *@
                    @if (bUseFileTransUI)
                    {
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetMainPageType((int)PAGE_TYPE.TRANSFER))">@XmlConf.GetTitle("T_PAGE_TYPE_TRNASFER")</button>
                    }

                    @* 파일전송관리 *@
                    @if (bUseFileTransManageUI)
                    {
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetMainPageType((int)PAGE_TYPE.TRANSMANAGER_FILE))">@XmlConf.GetTitle("T_PAGE_TYPE_FILE_TRANSMANAGER")</button>
                    }

                    @* 클립보드전송관리 *@
                    @if (bUseFileClipManageUI)
                    {
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetMainPageType((int)PAGE_TYPE.TRANSMANAGER_CLIP))">@XmlConf.GetTitle("T_PAGE_TYPE_CLIP_TRANSMANAGER")</button>
                    }

                    @* 이메일전송관리 *@
                    @if (bUseEmailTransManageUI)
                    {
                        <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetMainPageType((int)PAGE_TYPE.TRANSMANAGER_EMAIL))">@XmlConf.GetTitle("T_PAGE_TYPE_EMAIL_TRANSMANAGER")</button>
                    }

                </div>
            </div>
        }
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetHideSideBarAfterLogin())"
                                            @onchange="eventArgs => { SetHideSideBarAfterLogin(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_HIDE_SIDEBAR_AFTER_LOGIN")</span>                            <!--로그인 후, 사이드바 숨김-->
        </div>
    </div>    

    @if (m_bUseURLRedirection)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_URLREDIRECT_AUTO")</div> <!--URL 자동전환 -->
        <div class="ml-2 mb-4">

            @foreach (var (NetworkInfo, Idx) in GetSGNetworkList().Select((value, i) => (value, i)))
            {

                SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(NetworkInfo.GroupID);
                if (sgLoginData == null)
                    continue;

                if (sgLoginData.GetURLRedirect() == false)
                    continue;

                <span class="@("net"+(Idx+50).ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(NetworkInfo.ToName)</span> <!-- @(NetworkInfo.ToName + ":" + GetForwardUrl(NetworkInfo.GroupID)) -->

                <br>

                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetURLAutoTrans(NetworkInfo.GroupID))"
                           @onchange="eventArgs => { SetURLAutoTrans(NetworkInfo.GroupID, eventArgs); }" /><span>@XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO")</span>                  <!--URL 자동전환 사용 -->
                    </div>

                    @if (m_bUseURLRedirectionAlarm)
                    {
                        <div class="mb-1  w-101">
                            <input type="checkbox" class="mr-1" checked="@(GetURLAutoAfterMsg(NetworkInfo.GroupID))"
                                   @onchange="eventArgs => { SetURLAutoAfterMsg(NetworkInfo.GroupID, eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANSALARM")</span>               <!--URL 자동전환 알림 -->
                            </div>
                        }

                    // 1번째 망꺼 설정값으로만 전체 적용
                    /*@if (m_bUseURLRedirectionAlarmType)
                    {
                    <div class="mb-1  w-102">
                    <span class="pr-2">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANSALARM_TYPE")</span>                                                                 <!--URL 자동전환 알림형식-->
                    <select value="@(GetURLAutoAfterBrowser(NetworkInfo.GroupID))"
                    @onchange="eventArgs => { SetURLRedirectType(NetworkInfo.GroupID, eventArgs); }">
                    <option value="C">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FOLD")</option>                                                                               <!--닫기-->
                    <option value="N">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_RETAIN")</option>                                                                               <!--유지-->
                    <option value="F">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FORWARD")</option>                                                                    <!--특정 URL포워딩-->
                    </select>
                    </div>
                    }

                    @if (false)  // 확인용도
                    {
                    <div class="mb-1  w-100">
                    <span class="pr-3">@(XmlConf.GetTitle("T_FORWARD_URL")+" : "+ GetForwardUrl(NetworkInfo.GroupID)) </span>                                                                 <!-- ForWarding 하는 주소 -->
                    </div>
                        }*/

                    <br />

                }

            @if (m_bUseURLRedirectionAlarmType)
            {
                <div class="mb-1  w-102">
                    <span class="pr-2">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANSALARM_TYPE")</span>                                                                 <!--URL 자동전환 알림형식-->
                    <!--<select value="@(GetURLAutoAfterBrowser(0))"
                    @onchange="eventArgs => { SetURLRedirectType(0, eventArgs); }">
                        <option value="C">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FOLD")</option>-->
                    <!--닫기-->
                    <!--<option value="N">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_RETAIN")</option>-->                                                                               <!--유지-->
                    <!--<option value="F">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FORWARD")</option>-->                                                                    <!--특정 URL포워딩-->
                    <!--</select>-->

                    @if(false)
                    {
                        <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @GetURLAutoAfterBrowser(0)
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu4" style="min-width:105px">
                            <button class="dropdown-item text-xs p-1" type="button" @onclick="@(()=>SetURLRedirectType(0, "C"))">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FOLD")</button>
                            <button class="dropdown-item text-xs p-1" type="button" @onclick="@(()=>SetURLRedirectType(0, "N"))">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_RETAIN")</button>
                            <button class="dropdown-item text-xs p-1" type="button" @onclick="@(()=>SetURLRedirectType(0, "F"))">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FORWARD")</button>
                        </div>
                    }
                    else
                    {
                        <button class="btn btn-default btn-xs btn-flat" type="button" id="dropdownMenu4" aria-expanded="false">
                            @GetURLTransTextCurLibSet(0)
                        </button>
                    }

                </div>
            }

        </div>
    }


    @if (m_bUseFileSend)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_FILETRANS")</div> <!--파일 전송-->
        <div class="ml-2 mb-4">
            @if (m_bRFileAutoSend)
            {
                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetRMouseFileAddAfterTrans())"
                           @onchange="eventArgs => { SetRMouseFileAddAfterTrans(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_RMOUSEAUTOTRNAS")</span>          <!--마우스 우클릭 자동전송-->
                    </div>
                }
            @if (m_bAfterApprAutoCheck)
            {
                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetAfterBasicChk())"
                           @onchange="eventArgs => { SetAfterBasicChk(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK")</span>                            <!--사후결재 체크-->
                    </div>
                }

            @if(m_bUseAskFileSendAlert)
            {
                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetAskFileSend())"
                           @onchange="eventArgs => { SetAskFileSend(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_ASK_FILESEND")</span>                            <!--파일추가 후 전송 팝업 표시-->
                       </div>
            }
        </div>
    }

    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_FILERECV")</div>                                                                                              <!--파일 수신-->
    <div class="ml-2 mb-4">
        <div class="mb-1">@XmlConf.GetTitle("T_APPCONFIG_FILERECVFOLDER") : </div>                                                                                   <!--파일 다운로드 경로-->
        @foreach (var (NetworkInfo, Idx) in GetSGNetworkList().Select((value, i) => (value, i)))
        {
            <div class="mb-2  w-100">

                @if (bUseCommonEnvNetNameRevert)
                {
                    <span class="@("net"+(Idx+1).ToString())">@(NetworkInfo.ToName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(NetworkInfo.FromName)</span><br>
                }
                else
                {
                    <span class="@("net"+(Idx+1).ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(NetworkInfo.ToName)</span><br>
                }

                <input type="text" value="@(GetRecvDownPath(Idx))" class="mr-1 col-md-10" readonly="readonly" />
                <a class="file_dw" @onclick="@(e => openSaveDirPopup(Idx, GetRecvDownPath(Idx)))" hidden="@(GetRecvDownPathChangeHide(Idx))"><i class="fas fa-folder-open pl-1"></i></a>
            </div>
        }
        
        <div class="mb-1 w-100">
            <input type="checkbox" class="mr-1" checked="@(GetFileRecvFolderOpen())"
                    @onchange="eventArgs => { SetFileRecvFolderOpen(eventArgs); }" /><span>@XmlConf.GetTitle("T_INFO_AFTEROPENFOLDER_FILEDOWN")</span>             <!--파일 수신 후 폴더 열기-->
        </div>
            
        @if (m_bManualDownFolderChange)
        {
            <div class="mb-1  w-100">
                <input type="checkbox" class="mr-1" checked="@(GetManualRecvDownChange())"
                       @onchange="eventArgs => { SetManualRecvDownChange(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_MANUALDOWN_FOLDEROPEN")</span>            <!--수동다운로드 폴더 선택-->
                </div>
            }
    </div>

    @if (m_bAlarmTray)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_ALARM_TRAY")</div> <!--알림 트레이-->
        <div class="ml-2 mb-4">
            @if (m_bFileRecvAlarmRetain)
            {
                <div class="mb-1  w-100">
                    @*수신 완료 후 알림 유지*@
                    <input type="checkbox" class="mr-1" checked="@(GetFileRecvTrayFix())"
                           @onchange="eventArgs => { SetFileRecvTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_RECVALARM_RETAIN")</span>                 <!--수신 완료 후 알림 유지-->
                    </div>
                }
            @if (m_bApprCountAlarmRetain)
            {
                <div class="mb-1  w-100">
                    @*승인대기 알림 유지*@
                    <input type="checkbox" class="mr-1" checked="@(GetApprTrayFix())"
                           @onchange="eventArgs => { SetApprTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRWAITALARM_RETAIN")</span>                         <!--승인대기 알림 유지-->
                    </div>
                }
            @if (m_bApprCompleteAlarmRetain)
            {
                <div class="mb-1  w-100">
                    @*승인완료 알림 유지*@
                    <input type="checkbox" class="mr-1" checked="@(GetUserApprActionTrayFix())"
                           @onchange="eventArgs => { SetUserApprActionTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRCOMPLETEALARM_RETAIN")</span>              <!--승인완료 알림 유지-->
                    </div>
                }
            @if (m_bApprRejectAlarmRetain)
            {
                <div class="mb-1  w-100">
                    @*반려 알림 유지*@
                    <input type="checkbox" class="mr-1" checked="@(GetUserApprRejectTrayFix())"
                           @onchange="eventArgs => { SetUserApprRejectTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRREJECTALARM_RETAIN")</span>                    <!--반려 알림 유지-->
                    </div>
                }
            @if (m_bUseApprCountAlaram)
            {
                <div class="mb-1  w-100">
                    @*승인대기 알림 설정*@
                    <input type="checkbox" class="mr-1" checked="@(GetUseApprWaitNoti())"
                           @onchange="eventArgs => { SetUseApprWaitNoti(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRWAITNOTI_USE")</span>                    <!--승인대기 알림설정-->
                    </div>
                }
        </div>
    }

    @if (m_bTrayMove)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_TRAY_MOVE")</div> <!--트레이 이동-->
        <div class="ml-2 mb-4">
            @if (m_bUseCloseTrayMove)
            {
                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetExitTrayMove())"
                           @onchange="eventArgs => { SetExitTrayMove(eventArgs); }" /><span>@XmlConf.GetTitle("T_INFO_EXITKEY_MOVETRAY")</span>                            <!--종료 시, 트레이로 이동-->
                    </div>
                }
            @if (m_bUseStartTrayMove)
            {
                <div class="mb-1  w-100">
                    <input type="checkbox" class="mr-1" checked="@(GetStartTrayMove())"
                           @onchange="eventArgs => { SetStartTrayMove(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_PROGRAMSTART_MOVETRAY")</span>                       <!--프로그램 시작 시, 트레이 이동-->
                    </div>
                }
        </div>
    }

    @if (m_bUseStartProgramReg)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_STARTPROGRAM")</div> <!--시작프로그램-->
        <div class="ml-2 mb-4">
            <div class="mb-1  w-100">
                <input type="checkbox" class="mr-1" checked="@(GetStartProgramReg())"
                       @onchange="eventArgs => { SetStartProgramReg(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_PROGRAMSTART_REG")</span>                           <!--시작 프로그램에 등록-->
                </div>
            </div>
        }

    @if (m_bUseLanguageSet)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_LANGUAGE_SETTING")</div> <!--언어설정-->
        <div class="ml-2 mb-4">
            <div class="mb-1  w-100">
                <span class="pr-2">@XmlConf.GetTitle("T_LANGUAGE")</span>                                                                                                        <!--언어-->
                <!--<select value="@(GetLanguage())"
                @onchange="eventArgs => { SetLanguage(eventArgs); }">
                    <option value="KR">@XmlConf.GetTitle("T_LANGUAGE_KOREAN")</option>-->
                <!--한국어-->
                <!--<option value="JP">@XmlConf.GetTitle("T_LANGUAGE_JAPAN")</option>-->                                                                                             <!--일본어-->
                <!--<option value="CN">@XmlConf.GetTitle("T_LANGUAGE_CHINA")</option>-->                                                                                             <!--중국어-->
                <!--<option value="EN">@XmlConf.GetTitle("T_LANGUAGE_ENGLISH")</option>-->                                                                                             <!--영어-->
                <!--</select>-->
                <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu5" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @GetLanguage()
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenu5" style="min-width:85px">
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLanguage("KR"))">@XmlConf.GetTitle("T_LANGUAGE_KOREAN")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLanguage("JP"))">@XmlConf.GetTitle("T_LANGUAGE_JAPAN")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLanguage("CN"))">@XmlConf.GetTitle("T_LANGUAGE_CHINA")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLanguage("EN"))">@XmlConf.GetTitle("T_LANGUAGE_ENGLISH")</button>
                </div>
            </div>

        </div>
    }

    @*2023.06.01 화면잠금에 대한 표시 및 설정은 사용자 접근 불가로 변경*@
    @*  @if (m_bUseScreenLock)
        {
        <div class="r_set_sub">@XmlConf.GetTitle("T_COMMON_SCRLOCK")</div> <!--화면잠금-->
        <div class="ml-2 mb-4">
        <div class="mb-1  w-100">
        @if (m_bScreenLockUserChange == true)
        {
        <input type="checkbox" class="mr-1" checked="@(GetScreenLock())"
        @onchange="eventArgs => { SetScreenLock(eventArgs); }" /> <span class="mr-1">@XmlConf.GetTitle("T_COMMON_SCRLOCK")</span> <!--화면잠금-->
        <input type="text" value="@(GetScreenTime())" class="mr-2 col-md-2" style="text-align:right"
        @onchange="eventArgs => { SetScreenTime(eventArgs); }" />@XmlConf.GetTitle("T_INFO_MINUTE") <!--분-->
        }
        else
        {
        <input disabled="disabled" type="checkbox" class="mr-1" checked="@(GetScreenLock())"
        @onchange="eventArgs => { SetScreenLock(eventArgs); }" /> <span class="mr-1">@XmlConf.GetTitle("T_COMMON_SCRLOCK")</span> <!--화면잠금-->
        <input readonly="readonly" type="text" value="@(GetScreenTime())" class="mr-2 col-md-2" style="text-align:right"
        @onchange="eventArgs => { SetScreenTime(eventArgs); }" />@XmlConf.GetTitle("T_INFO_MINUTE") <!--분-->
        }
        </div>
        </div>
        }*@

    @if (m_bLogLevelSet)
    {
        <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_LOGLEVEL_SETTING")</div> <!--로그레벨 설정-->
        <div class="ml-2 mb-4">
            <div class="mb-1  w-100">
                <span class="pr-2">@XmlConf.GetTitle("T_LOGLEVEL")</span>                                                                                                        <!--언어-->
                <!--<select value="@(GetLogLevel())"
                @onchange="eventArgs => { SetLogLevel(eventArgs); }">
                    <option value="@LogEventLevel.Verbose">@XmlConf.GetTitle("T_LOGLEVEL_VERBOSE")</option>-->
                <!--한국어-->
                <!--<option value="@LogEventLevel.Debug">@XmlConf.GetTitle("T_LOGLEVEL_DEBUG")</option>-->                                                                                             <!--일본어-->
                <!--<option value="@LogEventLevel.Information">@XmlConf.GetTitle("T_LOGLEVEL_INFORMATION")</option>-->                                                                                             <!--중국어-->
                <!--<option value="@LogEventLevel.Warning">@XmlConf.GetTitle("T_LOGLEVEL_WARNING")</option>-->                                                                                             <!--영어-->
                <!--<option value="@LogEventLevel.Error">@XmlConf.GetTitle("T_LOGLEVEL_ERROR")</option>-->                                                                                             <!--영어-->
                <!--<option value="@LogEventLevel.Fatal">@XmlConf.GetTitle("T_LOGLEVEL_FATAL")</option>-->                                                                                             <!--영어-->
                <!--</select>-->
                <button class="btn btn-default btn-xs btn-flat dropdown-toggle" type="button" id="dropdownMenu6" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @GetLogLevel()
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenu6" style="min-width:105px">
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLogLevel((int)LogEventLevel.Verbose))">@XmlConf.GetTitle("T_LOGLEVEL_VERBOSE")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLogLevel((int)LogEventLevel.Debug))">@XmlConf.GetTitle("T_LOGLEVEL_DEBUG")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLogLevel((int)LogEventLevel.Information))">@XmlConf.GetTitle("T_LOGLEVEL_INFORMATION")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLogLevel((int)LogEventLevel.Warning))">@XmlConf.GetTitle("T_LOGLEVEL_WARNING")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLogLevel((int)LogEventLevel.Error))">@XmlConf.GetTitle("T_LOGLEVEL_ERROR")</button>
                    <button class="dropdown-item text-xs p-1" style="text-align:center;" type="button" @onclick="@(()=>SetLogLevel((int)LogEventLevel.Fatal))">@XmlConf.GetTitle("T_LOGLEVEL_FATAL")</button>
                </div>
            </div>
        </div>
    }

    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_UPDATE")</div>                                                                                                       <!--업데이트-->
    <div class="ml-2 mb-5 updates">
        <ul class="mb-1  w-100 ">
            <li><a class="update" @onclick="@(async () => CheckUpdatesControlClick())" data-toggle="modal" style="cursor: pointer;">@XmlConf.GetTitle("T_APPCONFIG_UPDATE_CONFIRM") <i class="fas fa-arrow-circle-right ml-1"></i></a></li> <!--업데이트 확인-->
            <li>@XmlConf.GetTitle("T_APPCONFIG_LASTUPDATE") :  @(GetLastUpdated())</li> <!--마지막 업데이트-->
            <li>@XmlConf.GetTitle("T_APPCONFIG_SOFTWARE_VERSION") :  OpenNetLink @(GetSWVersion())+@(GetSWCommitId())</li> <!--소프트웨어버전-->
        </ul>

    </div>

</div>

<!-- /.Control Sidebar -->
<SelectSaveFolder @ref="refSelectSaveFolder" OnSaveDirPath="SaveDownloadDir"></SelectSaveFolder>
<SGCheckUpdate @ref="refSGCheckUpdate" CtrlSideUISvc="@CtrlSideUISvc" OnClosePopUp="CloseCheckUpdate"></SGCheckUpdate>
<SGAvailableUpdate @ref="refSGAvailableUpdate" AppUpdaterSvc="@AppUpdaterSvc" CtrlSideUISvc="@CtrlSideUISvc" OnClosePopUp="CloseAvailableUpdate"></SGAvailableUpdate>
<SGDownloadUpdate @ref="refSGDownloadUpdate" CtrlSideUISvc="@CtrlSideUISvc" OnCancelDownloadUpdate="CancelDownloadUpdate"></SGDownloadUpdate>
<SGFinishedDownload @ref="refSGFinishedDownload" AppUpdaterSvc="@AppUpdaterSvc" CtrlSideUISvc="@CtrlSideUISvc" OnClosePopUp="CloseFinishedDownload"></SGFinishedDownload>
<SGMessageNotification @ref="refSGMessageNotification" CtrlSideUISvc="@CtrlSideUISvc" OnClosePopUp="CloseMessageNotification"></SGMessageNotification>

@code
{
    [Parameter] public ISGCtrlSideUIService CtrlSideUISvc { get; set; }
    [Parameter] public ISGAppConfigService AppConfigSvc { get; set; }
    [Parameter] public ISGopConfigService OpConfigSvc { get; set; }
    [Parameter] public ISGVersionConfigService VersionConfigSvc { get; set; }
    [Parameter] public ISGNetworkService NetWorkSvc { get; set; }
    [Parameter] public ISGAppUpdaterService AppUpdaterSvc { get; set; }
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGCtrlSideUI>();

    /// <summary>
    /// 화면잠금을 공통환경설정에 표현할지 유무
    /// </summary>
    //public bool m_bUseScreenLock = false;

    /// <summary>
    ///
    /// </summary>
    public int m_nSvrTime = 0;

    /// <summary>
    /// groupID별 단축키<win,ctrl,...> 저장 List
    /// </summary>
    private List<List<bool>> ListModKey = new List<List<bool>>();

    /// <summary>
    /// groupID별 단축키<win,ctrl,...> 저장 Dic
    /// </summary>
    private Dictionary<int, List<bool>> DicModKey = new Dictionary<int, List<bool>>();
    private Dictionary<int, List<bool>> DicModPreventDefault = new Dictionary<int, List<bool>>();

    /// <summary>
    /// 3망연계,groupID-Idx별 단축키<win,ctrl,...> 저장 List
    /// </summary>
    private Dictionary<string, List<bool>> dicModKeyNetOver = new Dictionary<string, List<bool>>();

    private string strNetgroupIDidxKey = "";                            // Key로 사용

    Dictionary<string, SGNetOverData> dicDestSysPos = null;             // 3망연계, 정보

    /// <summary>
    /// groupID별 단축키(AlphaBet) 저장 List (예전사용)
    /// </summary>
    private List<char> ListVKey = new List<char>();

    /// <summary>
    /// groupID별 단축키(AlphaBet) 저장 Dic
    /// </summary>
    private Dictionary<int, char> DicVKey = new Dictionary<int, char>();

    /// <summary>
    /// 3망연계,groupID-Idx별 단축키(AlphaBet) 저장 List
    /// </summary>
    private Dictionary<string, char> dicVKeyNetOver = new Dictionary<string, char>();


    private List<bool> ListUseClipNetOverALL = new List<bool>();        // 클립보드 전체망 보내기 기능 사용 가능 유무, groupID 별로 지정
    SelectSaveFolder refSelectSaveFolder;
    SGCheckUpdate refSGCheckUpdate;
    SGAvailableUpdate refSGAvailableUpdate;
    SGDownloadUpdate refSGDownloadUpdate;
    SGFinishedDownload refSGFinishedDownload;
    SGMessageNotification refSGMessageNotification;


    public bool m_bUseClipBoard = true;
    public bool m_bUseMainPage = true;
    public bool m_bUseURLRedirection = true;
    public bool m_bUseFileSend = true;

    public bool m_bUseClipAlarmType = true;                                             // 클립보드 알림 형식 사용 유무
    public bool m_bUseClipCopyAndSend = false;                                           // 클립보드 복사 후 전송 사용 유무
    public bool m_bUseClipBoardPasteHotKey = false;                                     // 클립보드 수신 후, 붙여넣기에 대한 별도 단축키 사용 유무
    public bool m_bUseURLRedirectionAlarm = true;                                       // URL 자동전환 알림 사용 유무
    public bool m_bUseURLRedirectionAlarmType = true;                                   // URL 자동전환 알림 타입 선택 사용 유무
    public bool m_bRFileAutoSend = true;                                                // 마우스 우클릭 후 자동전송 사용 유무
    public bool m_bAfterApprAutoCheck = true;                                           // 사후결재 기본 체크 사용 유무
    public bool m_bRecvFolderOpen = true;                                               // 파일 수신 후 폴더 열기 사용 유무
    public bool m_bManualDownFolderChange = true;                                       // 수동다운로드로 다운 시 폴더 선택 사용 유무
    public bool m_bFileRecvAlarmRetain = true;                                          // 파일 수신 후 알림 유지 사용 유무
    public bool m_bApprCountAlarmRetain = true;                                         // 승인대기 알림 유지 사용 유무
    public bool m_bApprCompleteAlarmRetain = true;                                      // 승인완료 알림 유지 사용 유무
    public bool m_bApprRejectAlarmRetain = true;                                        // 반려 알림 유지 사용 유무
    public bool m_bUseApprCountAlaram = true;                                           // 승인대기 알림 사용 유무.
    public bool m_bUseCloseTrayMove = true;                                             // 종료 시 트레이 사용 유무.
    public bool m_bUseStartTrayMove = false;                                             // 프로그램 시작 시 트레이 이동 사용 유무.
    public bool m_bUseStartProgramReg = true;                                           // 시작 프로그램 등록 사용 유무.
    public bool m_bUseLanguageSet = true;                                               // 언어설정 사용 유무.
    public bool m_bLogLevelSet = true;                                                  // 로그 레벨 설정 사용 유무.
    public bool m_bUseAskFileSendAlert = false;                                          //파일리스트 추가 후 전송을 묻는 팝업표시 여부

    public bool m_bTrayMove = true;
    public bool m_bAlarmTray = true;

    //2023.06.01 화면잠금에 대한 설정 및 확인은 사용자 확인 불가
    //public bool m_bScreenLockUserChange = false;                                        // 화면잠금을 사용자가 설정변경할수 있음(true), 없음(false)

    Dictionary<string, SGNetOverData> m_dicDestSysPos = null;                       // 3망상황일때 정보

    /// <summary>붙여넣기에 대한 [단축키 목록관리], [HotKey 콜백]에 사용되는 GroupId는 100으로 통일</summary>
    const int PasteGroupId = 100;

    // 첫 Page 설정 List 나오게할지 유무 값
    bool bUseDashBoardUI = true;

    bool bUseFileTransUI = true;

    bool bUseFileTransManageUI = true;

    bool bUseFileClipManageUI = true;

    bool bUseEmailTransManageUI = true;

    bool bUseCommonEnvNetNameRevert = false;


    private void SaveDownloadDir(string dir)
    {
        string[] arrDir = dir.Split("|");
        SetRecvDownPath(Convert.ToInt32(arrDir[1]), arrDir[0]);
    }

    private async Task openSaveDirPopup(int Idx, string dir)
    {

        refSelectSaveFolder.nGroupid = Idx;
        await refSelectSaveFolder.openPopUp(Idx, dir);

        object[] param2 = { "0" };
        await JSRuntime.InvokeAsync<object>("changeModalBg", param2);
        object[] param3 = { "1" };
        await JSRuntime.InvokeAsync<object>("changeModalZIndex", param3);
        //object[] param4 = { "black" };
        //await JSRuntime.InvokeAsync<object>("changeModalFontColor", param4);
    }

    public List<String> ModKeyList()
    {

        List<String> ModList = new List<String>();

        if (ModList.Count > 0)
            return ModList;

        ModList.Add("Window");
        ModList.Add("Ctrl");
        ModList.Add("Alt");
        ModList.Add("Shift");
        return ModList;
    }

    public List<char> VKeyList()
    {
        List<char> KeyList = new List<char>();

        if (KeyList.Count > 0)
            return KeyList;

        KeyList.Add('A'); KeyList.Add('B'); KeyList.Add('C'); KeyList.Add('D'); KeyList.Add('E'); KeyList.Add('F');
        KeyList.Add('G'); KeyList.Add('H'); KeyList.Add('I'); KeyList.Add('J'); KeyList.Add('K'); KeyList.Add('L');
        KeyList.Add('M'); KeyList.Add('N'); KeyList.Add('O'); KeyList.Add('P'); KeyList.Add('Q'); KeyList.Add('R');
        KeyList.Add('S'); KeyList.Add('T'); KeyList.Add('U'); KeyList.Add('V'); KeyList.Add('W'); KeyList.Add('X');
        KeyList.Add('Y'); KeyList.Add('Z');
        return KeyList;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
        }
    }

    protected override void OnInitialized()
    {

        @* ScreenLock 일 경우 다중망일 경우에도 GroupId 0 정책을 따른다.
            m_bScreenLockUserChange = OpConfigSvc.GetScreenLockUserChange(0);
            m_bUseScreenLock = SGAppMgrSvc.OpConfigInfoService.GetScreenLockUserChange(0);  // siteConfig.GetUseScreenLock()
            if (m_bUseScreenLock)
            {
            HsCmdCenter.sgPageEvent.SetScreenTimeInitNotiEvent(ScreenLockTimeInitNoti);

            ScreenTimeChangeNotiEvent screentimeChgEvent = null;
            int time = GetScreenTime();
            screentimeChgEvent = HsCmdCenter.sgPageEvent.GetScreenTimeChangeNotiEvent();
            if (screentimeChgEvent != null)
            {
            ConfigArgs config = new ConfigArgs();
            config.ScreenTime = time;
            screentimeChgEvent(pageService.m_nCurViewPageGroupID, config);
            }
            }*@

    HsCmdCenter.sgPageEvent.SetCtrlSideNotiEvent(CtrlSideUILoginAfter);
        HsCmdCenter.sgPageEvent.SetClientUpgradeExeNotiEvent(clientUpgradeExe);
        SGAppMgrSvc.SideBarUIService.OnChangeActMenu += CtrlSideUILoginAfterOnChange;
        HsCmdCenter.sgPageEvent.SetCtrlSideRefreshEvent(CtrlSideRefresh);
    
        //versionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;

        // Windows일때, 자동실행 설정상태면 Lnk 만듬
        if (GetStartProgramReg() && RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            CtrlSideUISvc.SetStartProgramReg(true);

        // 클립보드 자동전송 상태 설정
        if (GetClipCopyAutoSend())
            Window.SetUseClipCopyNsend(true);

        // 붙여넣기 단축키 추가 기능 활성화 설정
        if (SGAppMgrSvc.OpConfigInfoService.getUseClipBoardPasteHotKey(0) && GetClipBoardPasteHotKey())
        {
            Window.SetUseClipBoardPasteHotKey(PasteGroupId ,true);
            List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(PasteGroupId, true);
            char chVKey = AppConfigSvc.GetClipBoardVKey(PasteGroupId, true);

            //OS 별 HotKey 등록
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                Window.WinRegClipboardHotKey(PasteGroupId, bAlt, bCtrl, bShift, bWin, chVKey);
            }
            else
            {
                Window.RegClipboardHotKey(PasteGroupId,
                                listModKey[(int)HOTKEY_MOD.ALT],
                                listModKey[(int)HOTKEY_MOD.CTRL],
                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                chVKey);
            }
            //Native의 MAP에 등록
            Window.SetNativeClipboardHotKey(PasteGroupId,
                                            listModKey[(int)HOTKEY_MOD.ALT],
                                            listModKey[(int)HOTKEY_MOD.CTRL],
                                            listModKey[(int)HOTKEY_MOD.SHIFT],
                                            listModKey[(int)HOTKEY_MOD.WINDOW],
                                            chVKey, 0);
        }

        // 첫Page 설정가능유무 Check, 다중망일때에는 모든 망에서 접속 할 수 있는 화면만 첫Page로 선택가능

        List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
        foreach (ISGNetwork netlist in listNetWork)
        {            
            bUseDashBoardUI  &= SGAppMgrSvc.OpConfigInfoService.GetUseDashBoard(netlist.GroupID);

            bUseFileTransUI &= SGAppMgrSvc.OpConfigInfoService.GetUseFileTrans(netlist.GroupID);
            bUseFileTransManageUI &= SGAppMgrSvc.OpConfigInfoService.GetUseFileTrans(netlist.GroupID);

            bUseFileClipManageUI &= SGAppMgrSvc.OpConfigInfoService.GetUseFileClipManageUI(netlist.GroupID);
            bUseEmailTransManageUI &= SGAppMgrSvc.OpConfigInfoService.GetUseEmailManageApprove(netlist.GroupID);
        }        

        bUseCommonEnvNetNameRevert = SGAppMgrSvc.OpConfigInfoService.GetUseCommonEnvNetNameRevert(0);

    }


    /// <summary>
    /// 단축키 체크박스 클릭한거 저장하는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="modifier"></param>
    /// <param name="changeEventArg"></param>
    void CheckBoxModifierClicked(int groupId, HOTKEY_MOD modifier, ChangeEventArgs changeEventArg)
    {
        bool bMod = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"CheckBoxModifierClicked - ModifierKeyClicked: [{modifier.ToString()}={bMod}]");

        List<bool> listKey = null;
        if (GetDicModKeyList(groupId, out listKey) == false)
        {
            CLog.Here().Information($"CheckBoxModifierClicked - KeyList - failed");
            return;
        }

        char chVkey = ' ';
        if (GetDicModVKey(groupId, out chVkey) == false)
        {
            CLog.Here().Information($"CheckBoxModifierClicked - VKey - failed");
            return;
        }

        listKey[(int)modifier] = bMod;

        SetPreventDefault(groupId, listKey);

        SetClipBoardHotKey(groupId, ref listKey, chVkey);
    }

    bool GetPreventDefault(int groupId, int modifier)
    {
        List<bool> listKey = null;
        if (DicModPreventDefault.TryGetValue(groupId, out listKey) == false)
        {
            return false;
        }

        return DicModPreventDefault[groupId][(int)modifier];
    }


    /**
    *@brief 3망연계 설정때, 추가망들 단축키 - groupId, nIdx
*/
    void CheckBoxModifierClickedNetOver(int groupId, int nIdx, HOTKEY_MOD modifier, ChangeEventArgs changeEventArg)
    {
        bool bMod = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ModifierKeyClicked-NetOver: [{modifier.ToString()}={bMod}]");

        if (nIdx == 1)
        {
            CLog.Here().Information($"ModifierKeyClicked-NetOver: [index={nIdx}]");
            return;
        }

        string strKey = "";
        strKey = String.Format($"{groupId}-{nIdx}");

        dicModKeyNetOver[strKey][(int)modifier] = bMod;

        SetClipBoardHotKeyNetOver(groupId, nIdx, dicModKeyNetOver[strKey], dicVKeyNetOver[strKey]);
    }


    /// <summary>
    /// 클립보드 단축키 중에 Vkey 변경 저장
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="changeEventArg"></param>
    void SelectBoxVKeySelected(int groupId, ChangeEventArgs changeEventArg)
    {
        char cVKey = Convert.ToChar(changeEventArg.Value);
        CLog.Here().Information($"SelectBoxVKeySelected - VKeySelected: [{cVKey}]");

        //ListVKey[groupId] = cVKey;
        //List<bool> listModKey = ListModKey[groupId];

        List<bool> listKey = null;
        if (GetDicModKeyList(groupId, out listKey) == false)
        {
            CLog.Here().Information($"SelectBoxVKeySelected - GetDicModKeyList - failed");
            return;
        }

        SetDicModVKey(groupId, cVKey);

        SetClipBoardHotKey(groupId, ref listKey, cVKey);
    }

    /// <summary>
    /// 클립보드 단축키 중에 Vkey 변경 저장
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="changeEventArg"></param>
    void SelectBoxVKeySelected(int groupId, char cVKey)
    {
        CLog.Here().Information($"SelectBoxVKeySelected - VKeySelected: [{cVKey}]");

        //ListVKey[groupId] = cVKey;
        //List<bool> listModKey = ListModKey[groupId];

        List<bool> listKey = null;
        if (GetDicModKeyList(groupId, out listKey) == false)
        {
            CLog.Here().Information($"SelectBoxVKeySelected - GetDicModKeyList - failed");
            return;
        }

        SetDicModVKey(groupId, cVKey);

        SetClipBoardHotKey(groupId, ref listKey, cVKey);

        StateHasChanged();
    }


    /// <summary>
    /// 3망설정으로 추가된 단축키들, 변경되면 저장
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="nIdx"></param>
    /// <param name="changeEventArg"></param>
    void SelectBoxVKeySelectedNetOver(int groupId, int nIdx, ChangeEventArgs changeEventArg)
    {
        char cVKey = Convert.ToChar(changeEventArg.Value);
        CLog.Here().Information($"VKeySelected(NetOver): [{cVKey}]");

        if (nIdx == 1)
        {
            CLog.Here().Information($"VKeySelected-NetOver: [index={nIdx}]");
            return;
        }

        string strKey = "";
        strKey = String.Format($"{groupId}-{nIdx}");
        dicVKeyNetOver[strKey] = cVKey;

        List<bool> listModKey = dicModKeyNetOver[strKey];
        SetClipBoardHotKeyNetOver(groupId, nIdx, listModKey, cVKey);
    }

    void SelectBoxVKeySelectedNetOver(int groupId, int nIdx, char value)
    {
        char cVKey = value;
        CLog.Here().Information($"VKeySelected(NetOver): [{cVKey}]");

        if (nIdx == 1)
        {
            CLog.Here().Information($"VKeySelected-NetOver: [index={nIdx}]");
            return;
        }

        string strKey = "";
        strKey = String.Format($"{groupId}-{nIdx}");
        dicVKeyNetOver[strKey] = cVKey;

        List<bool> listModKey = dicModKeyNetOver[strKey];
        SetClipBoardHotKeyNetOver(groupId, nIdx, listModKey, cVKey);
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="nIdx"></param>
    private void MakeNetOverKeyGroupIdx(int nGroupID, int nIdx)
    {
        strNetgroupIDidxKey = "";
        strNetgroupIDidxKey = String.Format($"{nGroupID}-{nIdx}");
    }


    /// <summary>
    /// Getter for AppConfigService
    /// </summary>
    private CLIPALM_TYPE GetClipAlarmType()
    {
        return AppConfigSvc.GetClipAlarmType();
    }
    //알림 타입
    private string GetClipAlarmTypeStr()
    {
        return Common.CsFunction.GetEnumDescription(AppConfigSvc.GetClipAlarmType());
    }

    private PAGE_TYPE GetMainPageType()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetMainPageType();
    }
    //페이지 타입 String
    private string GetMainPageTypeStr()
    {
        string title = Common.CsFunction.GetEnumDescription(SGAppMgrSvc.AppConfigInfoService.GetMainPageType());
        return XmlConf.GetTitle(title);
    }

    private bool GetClipCopyAutoSend()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetClipCopyAutoSend();
    }

    private bool GetClipBoardPasteHotKey()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetClipBoardPasteHotKey();
    }

    private bool GetURLAutoTrans(int nGroupID)
    {
        return SGAppMgrSvc.AppConfigInfoService.GetURLAutoTrans(nGroupID);
    }

    private bool GetURLAutoAfterMsg(int nGroupID)
    {
        return SGAppMgrSvc.AppConfigInfoService.GetURLAutoAfterMsg(nGroupID);
    }

    private string GetURLAutoAfterBrowser(int nGroupID)
    {
        string str = String.Empty;

        switch (SGAppMgrSvc.AppConfigInfoService.GetURLAutoAfterBrowser(nGroupID))
        {
            case "C":
                str = XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FOLD");
                break;
            case "N":
                str = XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_RETAIN");
                break;
            case "F":
                str = XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FORWARD");
                break;
        }
        return str;
    }

    /// <summary>
    /// NetLib 쪽에 설정되어 있는 현재 Redirection Type 설정 값
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <returns></returns>
    private string GetURLTransTextCurLibSet(int nGroupID)
    {
        string str = "";

        str = HsNetWorkSG.HsHttpWatcher.GetUrlRedirectionType(nGroupID);
        switch (str)
        {
            case "C":
                str = XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FOLD");
                break;
            case "N":
                str = XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_RETAIN");
                break;
            case "F":
                str = XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FORWARD");
                break;
            default:
                str = XmlConf.GetCommon("T_IDENTIFING");
                break;
        }
        return str;
    }

    private bool GetRMouseFileAddAfterTrans()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetRMouseFileAddAfterTrans();
    }

    private string GetForwardUrl(int nGroupID)
    {
        return SGAppMgrSvc.AppConfigInfoService.GetForwardUrl(nGroupID);
    }

    private bool GetAfterBasicChk()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();
    }
    private bool GetHideSideBarAfterLogin()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetHideSideBarAfterLogin();
    }

    private string GetRecvDownPath(int groupId)
    {
        string DownPath = AppConfigSvc.GetRecvDownPath(groupId);
        DownPath = HsCmdCenter.ConvertRecvDownPath(DownPath);

        return DownPath;
    }

    private bool GetFileRecvFolderOpen()
    {
        return AppConfigSvc.GetFileRecvFolderOpen();
    }

    private bool GetManualRecvDownChange()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetManualRecvDownChange();
    }

    private bool GetFileRecvTrayFix()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetFileRecvTrayFix();
    }

    private bool GetApprTrayFix()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetApprTrayFix();
    }

    private bool GetUserApprActionTrayFix()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetUserApprActionTrayFix();
    }

    private bool GetUserApprRejectTrayFix()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetUserApprRejectTrayFix();
    }

    private bool GetExitTrayMove()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetExitTrayMove();
    }

    private bool GetStartTrayMove()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetStartTrayMove();
    }

    private bool GetStartProgramReg()
    {

        //return CtrlSideUISvc.GetStartProgramReg();

        // 설정값을 사용하는 방식으로 동작할지는
        return SGAppMgrSvc.AppConfigInfoService.GetStartProgramReg();
    }

    private string GetLanguage()
    {
        string str = String.Empty;

        switch (AppConfigSvc.GetLanguage())
        {
            case "KR":
                str = XmlConf.GetTitle("T_LANGUAGE_KOREAN"); //한국어
                break;
            case "JP":
                str = XmlConf.GetTitle("T_LANGUAGE_JAPAN");  //일본어
                break;
            case "CN":
                str = XmlConf.GetTitle("T_LANGUAGE_CHINA");  //중국어
                break;
            case "EN":
                str = XmlConf.GetTitle("T_LANGUAGE_ENGLISH"); //영어
                break;
        }
        return str;
    }

    //private bool GetUseScreenLock()
    //{
    //    return AppConfigSvc.GetUseScreenLock();
    //}

    //private bool GetScreenLock()
    //{
    //    return AppConfigSvc.GetScreenLock();
    //}

    //private int GetScreenTime()
    //{
    //    return AppConfigSvc.GetScreenTime();
    //}

    private string GetLastUpdated()
    {
        return VersionConfigSvc.GetLastUpdated();
    }

    private string GetSWVersion()
    {
        return VersionConfigSvc.GetSWVersion();
    }

    private string GetSWCommitId()
    {
        return VersionConfigSvc.GetSWCommitId();
    }

    private string GetLogLevel()
    {
        string str = String.Empty;
        switch (AppConfigSvc.GetLogLevel())
        {
            case LogEventLevel.Verbose:
                str = XmlConf.GetTitle("T_LOGLEVEL_VERBOSE");
                break;
            case LogEventLevel.Debug:
                str = XmlConf.GetTitle("T_LOGLEVEL_DEBUG");
                break;
            case LogEventLevel.Information:
                str = XmlConf.GetTitle("T_LOGLEVEL_INFORMATION");
                break;
            case LogEventLevel.Warning:
                str = XmlConf.GetTitle("T_LOGLEVEL_WARNING");
                break;
            case LogEventLevel.Error:
                str = XmlConf.GetTitle("T_LOGLEVEL_ERROR");
                break;
            case LogEventLevel.Fatal:
                str = XmlConf.GetTitle("T_LOGLEVEL_FATAL");
                break;
        }

        return str;
    }

    private bool GetUseApprWaitNoti()
    {
        return SGAppMgrSvc.AppConfigInfoService.GetUseApprWaitNoti();
    }

    private bool GetAskFileSend()
    {
        ISGSideBarUI sgSideBar = SGAppMgrSvc.SideBarUIService.ActiveMenu;
        if (sgSideBar != null)
            return SGAppMgrSvc.AppConfigInfoService.GetAskFileSend(sgSideBar.GroupId);
        else
            return false;
    }
    /// <summary>
    /// 단축키 지정한값 OS에 등록하는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="listModKey"></param>
    /// <param name="chVKCode"></param>
    private void SetClipBoardHotKey(int groupId, ref List<bool> listModKey, char chVKCode)
    {
        bool isPaste = (groupId == PasteGroupId);

        string strHotKey = String.Empty;
        foreach (var IsKeyUse in listModKey)
        {
            if (IsKeyUse) strHotKey += "Y,";
            else strHotKey += "N,";
        }
        strHotKey += chVKCode.ToString();
        CLog.Here().Information($"ClipBoardHotKey Set: [{strHotKey}]");

        // UnRegClipboardHotKey(int groupID, bool bAlt, bool bControl, bool bShift, bool bWin, char chVKCode)
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
            bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
            bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
            bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
            Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKCode);
        }
        else
        {
            List<bool> oldModKey = AppConfigSvc.GetClipBoardModifier(groupId, isPaste);
            char oldVKey = AppConfigSvc.GetClipBoardVKey(groupId, isPaste);
            Window.UnRegClipboardHotKey(groupId,
                                oldModKey[(int)HOTKEY_MOD.ALT],
                                oldModKey[(int)HOTKEY_MOD.CTRL],
                                oldModKey[(int)HOTKEY_MOD.SHIFT],
                                oldModKey[(int)HOTKEY_MOD.WINDOW],
                                oldVKey);
            // RegClipboardHotKey(int groupID, bool bAlt, bool bControl, bool bShift, bool bWin, char chVKCode)
            Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKCode);
        }

        //SetClipBoardHotKey(int groupId, bool bWin, bool bCtrl, bool bAlt, bool bShift, char chVKCode)
        if(isPaste == false)        
            CtrlSideUISvc.SetClipBoardHotKey(groupId,
                                            listModKey[(int)HOTKEY_MOD.WINDOW],
                                            listModKey[(int)HOTKEY_MOD.CTRL],
                                            listModKey[(int)HOTKEY_MOD.ALT],
                                            listModKey[(int)HOTKEY_MOD.SHIFT],
                                            chVKCode);
        else     
            CtrlSideUISvc.SetClipBoardPasteHotKeyValue(
                                            listModKey[(int)HOTKEY_MOD.WINDOW],
                                            listModKey[(int)HOTKEY_MOD.CTRL],
                                            listModKey[(int)HOTKEY_MOD.ALT],
                                            listModKey[(int)HOTKEY_MOD.SHIFT],
                                            chVKCode);

        // Native 쪽에 저장해줌
        if (SGAppMgrSvc.AppConfigInfoService.GetClipCopyAutoSend() 
        || SGAppMgrSvc.AppConfigInfoService.GetClipBoardPasteHotKey())
        {
            Window.SetNativeClipboardHotKey(groupId,
                listModKey[(int)HOTKEY_MOD.ALT],
                listModKey[(int)HOTKEY_MOD.CTRL],
                listModKey[(int)HOTKEY_MOD.SHIFT],
                listModKey[(int)HOTKEY_MOD.WINDOW],
                chVKCode, 0);
        }

    }

    private void SetClipBoardHotKeyNetOver(int groupId, int nIdx, List<bool> listModKey, char chVKCode)
    {
        string strHotKey = String.Empty;
        foreach (var IsKeyUse in listModKey)
        {
            if (IsKeyUse) strHotKey += "Y,";
            else strHotKey += "N,";
        }
        strHotKey += chVKCode.ToString();
        CLog.Here().Information($"ClipBoardHotKey-NetOver Set: [{strHotKey}]");

        // UnRegClipboardHotKey(int groupID, bool bAlt, bool bControl, bool bShift, bool bWin, char chVKCode)
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
            bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
            bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
            bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
            Window.WinRegClipboardHotKeyNetOver(groupId, bAlt, bCtrl, bShift, bWin, chVKCode, nIdx);
        }
        else
        {
            List<bool> oldModKey = AppConfigSvc.GetClipBoardModifier(groupId);
            char oldVKey = AppConfigSvc.GetClipBoardVKey(groupId);
            Window.UnRegClipboardHotKeyNetOver(groupId,
                                oldModKey[(int)HOTKEY_MOD.ALT],
                                oldModKey[(int)HOTKEY_MOD.CTRL],
                                oldModKey[(int)HOTKEY_MOD.SHIFT],
                                oldModKey[(int)HOTKEY_MOD.WINDOW],
                                oldVKey, nIdx);

            // RegClipboardHotKey(int groupID, bool bAlt, bool bControl, bool bShift, bool bWin, char chVKCode)
            Window.RegClipboardHotKeyNetOver(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKCode, nIdx);
        }
        //SetClipBoardHotKey(int groupId, bool bWin, bool bCtrl, bool bAlt, bool bShift, char chVKCode)
        CtrlSideUISvc.SetClipBoardHotKeyNetOver(groupId, nIdx,
                                        listModKey[(int)HOTKEY_MOD.WINDOW],
                                        listModKey[(int)HOTKEY_MOD.CTRL],
                                        listModKey[(int)HOTKEY_MOD.ALT],
                                        listModKey[(int)HOTKEY_MOD.SHIFT],
                                        chVKCode);

        // Native 쪽에 저장해줌
        if (SGAppMgrSvc.AppConfigInfoService.GetClipCopyAutoSend())
        {
            Window.SetNativeClipboardHotKey(groupId,
                listModKey[(int)HOTKEY_MOD.ALT],
                listModKey[(int)HOTKEY_MOD.CTRL],
                listModKey[(int)HOTKEY_MOD.SHIFT],
                listModKey[(int)HOTKEY_MOD.WINDOW],
                chVKCode, 0);
        }

    }


    private void SetClipAlarmType(ChangeEventArgs changeEventArg)
    {
        CLIPALM_TYPE alarmType = (CLIPALM_TYPE)Convert.ToInt64(changeEventArg.Value);
        CLog.Here().Information($"ClipAlarmType Set: [{alarmType}]");
        CtrlSideUISvc.SetClipAlarmType(alarmType);
    }
    private void SetClipAlarmType(int value)
    {
        CLIPALM_TYPE alarmType = (CLIPALM_TYPE)Convert.ToInt64(value);
        CLog.Here().Information($"ClipAlarmType Set: [{alarmType}]");
        CtrlSideUISvc.SetClipAlarmType(alarmType);
    }
    private void SetMainPageType(ChangeEventArgs changeEventArg)
    {
        PAGE_TYPE pageType = (PAGE_TYPE)Convert.ToInt64(changeEventArg.Value);
        CLog.Here().Information($"MainPage Set: [{pageType}]");
        CtrlSideUISvc.SetMainPage(pageType);
    }
    private void SetMainPageType(int value)
    {
        PAGE_TYPE pageType = (PAGE_TYPE)Convert.ToInt64(value);
        CLog.Here().Information($"MainPage Set: [{pageType}]");
        CtrlSideUISvc.SetMainPage(pageType);
    }
    private void SetClipCopyAutoSend(ChangeEventArgs changeEventArg)
    {
        bool clipAfterSend = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"SetClipCopyAutoSend Set: [{clipAfterSend}]");
        CtrlSideUISvc.SetClipAfterSend(clipAfterSend);
        Window.SetUseClipCopyNsend(clipAfterSend);

        if (clipAfterSend)
        {
            List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
            for (int i = 0; i < listNetWork.Count; i++)
            {
                // List 돌면서 단축키들 Native에 저장
                List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(listNetWork[i].GroupID);
                char chVKey = AppConfigSvc.GetClipBoardVKey(listNetWork[i].GroupID);

                Window.SetNativeClipboardHotKey(listNetWork[i].GroupID, listModKey[(int)HOTKEY_MOD.ALT],
                                listModKey[(int)HOTKEY_MOD.CTRL],
                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                chVKey, 0);
            }
        }
    }
    private void SetClipBoardPasteHotKey(ChangeEventArgs changeEventArg)
    {
        bool clipBoardPasteHotKey = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"SetClipBoardPasteHotKey Set: [{clipBoardPasteHotKey}]");
        CtrlSideUISvc.SetClipBoardPasteHotKey(clipBoardPasteHotKey);
        Window.SetUseClipBoardPasteHotKey(PasteGroupId, clipBoardPasteHotKey);

        if (clipBoardPasteHotKey)
        {
            List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(PasteGroupId, true);
            char chVKey = AppConfigSvc.GetClipBoardVKey(PasteGroupId, true);
            //활성화 되면, OS 별 HotKey 등록
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                Window.WinRegClipboardHotKey(PasteGroupId, bAlt, bCtrl, bShift, bWin, chVKey);
            }
            else
            {
                Window.RegClipboardHotKey(PasteGroupId,
                                listModKey[(int)HOTKEY_MOD.ALT],
                                listModKey[(int)HOTKEY_MOD.CTRL],
                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                chVKey);
            }

            //활성화 되면 단축키들 Native의 map에 저장           
            Window.SetNativeClipboardHotKey(PasteGroupId, listModKey[(int)HOTKEY_MOD.ALT],
                                listModKey[(int)HOTKEY_MOD.CTRL],
                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                chVKey, 0);
        }
    }

    /// <summary>
    /// WatcherThread에게 변경된 정책값 적용하는 함수 호출
    /// </summary>
    /// <param name="nGroupID"></param>
    private void SetUrlRedirectionUserPolicyToWatcherThread(int nGroupID)
    {
        CLog.Here().Information($"URLAutoTrans Use or not (nGroupID:{nGroupID}), Policy Set: [WatcherThread]");

        UrlRedirectionPolicySetNotiEvent urlsetingEvent = null;
        urlsetingEvent = HsCmdCenter.sgPageEvent.GetUrlRedirectUserPolicyEvent(nGroupID);
        if (urlsetingEvent != null)
            urlsetingEvent(nGroupID, false);
    }

    private void SetURLAutoTrans(int nGroupID, ChangeEventArgs changeEventArg)
    {

        // 설정 파일 내용 변경
        bool urlAutoTrans = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"URLAutoTrans (nGroupID:{nGroupID}) Set: [{urlAutoTrans}]");
        CtrlSideUISvc.SetURLAutoTrans(nGroupID, urlAutoTrans);

        // 설정 변경으로 UI 변경 반영
        Dictionary<string, UrlRedirectionSettingNotiEvent> DicRefreshUIFunc = null;
        DicRefreshUIFunc = HsCmdCenter.sgPageEvent.GetUrlRedirectionSetEventAll();
        if (DicRefreshUIFunc != null && DicRefreshUIFunc.Count > 0)
        {
            UrlRedirectionSettingNotiEvent urlsetingEvent = null;
            foreach (var item in DicRefreshUIFunc)
            {
                if (item.Key.IndexOf(nGroupID.ToString() + "-") == 0)
                {
                    urlsetingEvent = item.Value;
                    if (urlsetingEvent != null)
                        urlsetingEvent(nGroupID);
                }
            }
        }

        // 설정 변경으로 urlredirection 정책 변경 watcher thread에 적용
        SetUrlRedirectionUserPolicyToWatcherThread(nGroupID);
    }


    private void SetURLAutoAfterMsg(int nGroupID, ChangeEventArgs changeEventArg)
    {
        bool urlAutoAfterMsg = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"Notice After URLAutoTrans Set: [{urlAutoAfterMsg}]");
        CtrlSideUISvc.SetURLAutoAfterMsg(nGroupID, urlAutoAfterMsg);
    }

    /// <summary>
    /// Network.json에 있는 모든 망에 대해 UrlRedirection시 어떤 Type(C/F/N)으로 Redirection 할지 저함(nGroupID 값 상관없음)
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="changeEventArg"></param>
    private void SetURLRedirectType(int nGroupID, ChangeEventArgs changeEventArg)
    {
        string urlAutoAfterBrowser = Convert.ToString(changeEventArg.Value);
        CLog.Here().Information($"Notice Type After URLAutoTrans Set: [{urlAutoAfterBrowser}]");
        //CtrlSideUISvc.SetURLAutoAfterBrowser(nGroupID, urlAutoAfterBrowser);

        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int nIdx = 0;
        for (; nIdx < listNetWork.Count; nIdx++)
        {
            // (C / F / N) 중에 동일한 방식 사용하도록 저장
            CtrlSideUISvc.SetURLAutoAfterBrowser(listNetWork[nIdx].GroupID, urlAutoAfterBrowser);

            // 설정 변경으로 urlredirection 정책 변경 watcher thread에 적용
            SetUrlRedirectionUserPolicyToWatcherThread(listNetWork[nIdx].GroupID);
        }

    }
    private void SetURLRedirectType(int nGroupID, string value)
    {
        string urlAutoAfterBrowser = value; //Convert.ToString(changeEventArg.Value);
        CLog.Here().Information($"Notice Type After URLAutoTrans Set: [{urlAutoAfterBrowser}]");
        //CtrlSideUISvc.SetURLAutoAfterBrowser(nGroupID, urlAutoAfterBrowser);

        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int nIdx = 0;
        for (; nIdx < listNetWork.Count; nIdx++)
        {
            // (C / F / N) 중에 동일한 방식 사용하도록 저장
            CtrlSideUISvc.SetURLAutoAfterBrowser(listNetWork[nIdx].GroupID, urlAutoAfterBrowser);

            // 설정 변경으로 urlredirection 정책 변경 watcher thread에 적용
            SetUrlRedirectionUserPolicyToWatcherThread(listNetWork[nIdx].GroupID);
        }

    }


    private void SetRMouseFileAddAfterTrans(ChangeEventArgs changeEventArg)
    {
        bool rmouseFileAddAfterTrans = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"AutoTrans After RightMouse FileAdd Set: [{rmouseFileAddAfterTrans}]");
        CtrlSideUISvc.SetRMouseFileAddAfterTrans(rmouseFileAddAfterTrans);
    }


    private void SetAfterBasicChk(ChangeEventArgs changeEventArg)
    {
        bool afterBasicChk = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"Check Post Approval Set: [{afterBasicChk}]");
        CtrlSideUISvc.SetAfterBasicChk(afterBasicChk);
        //[사후결재 컨트롤 갱신]
        if (PageStatusData.SAfterApprControlCheckEvent != null)
            PageStatusData.SAfterApprControlCheckEvent();
    }
    private void SetHideSideBarAfterLogin(ChangeEventArgs changeEventArg)
    {
        bool hiddenSideBarChk = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"Check Hidden SideBar Set: [{hiddenSideBarChk}]");
        CtrlSideUISvc.SetHideSideBarAfterLogin(hiddenSideBarChk);
    }
    private async void SetRecvDownPath(int groupId, string stPath)
    {
        CLog.Here().Information($"RecvDownPath Set: [{stPath}]");


        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            stPath = stPath.Replace("/", "\\");
        }
        else
        {
            stPath = stPath.Replace("\\", "/");
        }

        @*bool bFind = false;
            int count = AppConfigSvc.AppConfigInfo.RecvDownPath.Count;
            string strPreDownPath = "";
            for (int i = 0; i < count; i++)
            {
            if (groupId == i)
            {
            strPreDownPath = GetRecvDownPath(groupId);
            continue;
            }

            if (stPath.Equals(AppConfigSvc.AppConfigInfo.RecvDownPath[i]))
            {
            bFind = true;
            }
            }
            if (bFind)
            {
            CtrlSideUISvc.SetRecvDownPath(groupId, strPreDownPath);
            await Task.Delay(1);    // flush UI changes

            CLog.Here().Information($"RecvDownPath Set: [{strPreDownPath}]");
            await Task.Delay(500);
            string strMsg = XmlConf.GetWarnMsg("W_0244");                                   // 설정하려는 수신폴더는 다른망의 수신폴더와 동일합니다./r/n다시 설정하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
            }*@

    //HsCmdCenter.SetDownLoadPath(groupId, stPath);
        //HsCmdCenter.SetBaseDownLoadPath(groupId, stPath);
        //CtrlSideUISvc.SetRecvDownPath(groupId, stPath);
        SetAllDownloadPath(groupId, stPath);
    }


    private async void SetRecvDownPath(int groupId, ChangeEventArgs changeEventArg)
    {
        string recvDownPath = Convert.ToString(changeEventArg.Value);
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            recvDownPath = recvDownPath.Replace("/", "\\");
        }
        else
        {
            recvDownPath = recvDownPath.Replace("\\", "/");
        }
        bool bFind = false;
        int count = AppConfigSvc.AppConfigInfo.RecvDownPath.Count;
        string strPreDownPath = "";
        for (int i = 0; i < count; i++)
        {
            if (groupId == i)
            {
                strPreDownPath = GetRecvDownPath(groupId);
                continue;
            }

            if (recvDownPath.Equals(AppConfigSvc.AppConfigInfo.RecvDownPath[i]))
            {
                bFind = true;
            }
        }
        if (bFind)
        {
            CtrlSideUISvc.SetRecvDownPath(groupId, strPreDownPath);
            await Task.Delay(1);    // flush UI changes

            CLog.Here().Information($"RecvDownPath Set: [{strPreDownPath}]");
            await Task.Delay(500);
            string strMsg = XmlConf.GetWarnMsg("W_0244");                                   // 설정하려는 수신폴더는 다른망의 수신폴더와 동일합니다./r/n다시 설정하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }
        CLog.Here().Information($"RecvDownPath Set: [{recvDownPath}]");
        //HsCmdCenter.SetDownLoadPath(groupId, recvDownPath);
        //HsCmdCenter.SetBaseDownLoadPath(groupId, recvDownPath);
        //CtrlSideUISvc.SetRecvDownPath(groupId, recvDownPath);
        SetAllDownloadPath(groupId, recvDownPath);
    }
    private void SetFileRecvFolderOpen(ChangeEventArgs changeEventArg)
    {
        bool fileRecvFolderOpen = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"FileRecvFolderOpen Set: [{fileRecvFolderOpen}]");
        CtrlSideUISvc.SetFileRecvFolderOpen(fileRecvFolderOpen);
    }

    private void SetManualRecvDownChange(ChangeEventArgs changeEventArg)
    {
        bool manualRecvDownChange = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ManualRecvDownChange Set: [{manualRecvDownChange}]");
        CtrlSideUISvc.SetManualRecvDownChange(manualRecvDownChange);
    }
    private void SetFileRecvTrayFix(ChangeEventArgs changeEventArg)
    {
        bool fileRecvTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"FileRecvTrayFix Set: [{fileRecvTrayFix}]");
        CtrlSideUISvc.SetFileRecvTrayFix(fileRecvTrayFix);
    }
    private void SetApprTrayFix(ChangeEventArgs changeEventArg)
    {
        bool apprTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ApprTrayFix Set: [{apprTrayFix}]");
        CtrlSideUISvc.SetApprTrayFix(apprTrayFix);
    }
    private void SetUserApprActionTrayFix(ChangeEventArgs changeEventArg)
    {
        bool userApprActionTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"UserApprActionTrayFix Set: [{userApprActionTrayFix}]");
        CtrlSideUISvc.SetUserApprActionTrayFix(userApprActionTrayFix);
    }
    private void SetUserApprRejectTrayFix(ChangeEventArgs changeEventArg)
    {
        bool userApprRejectTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"UserApprRejectTrayFix Set: [{userApprRejectTrayFix}]");
        CtrlSideUISvc.SetUserApprRejectTrayFix(userApprRejectTrayFix);
    }
    private void SetExitTrayMove(ChangeEventArgs changeEventArg)
    {
        bool exitTrayMove = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ExitTrayMove Set: [{exitTrayMove}]");
        Window.SetTrayUse(exitTrayMove);
        CtrlSideUISvc.SetExitTrayMove(exitTrayMove);
    }
    private void SetStartTrayMove(ChangeEventArgs changeEventArg)
    {
        bool startTrayMove = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"StartTrayMove Set: [{startTrayMove}]");
        CtrlSideUISvc.SetStartTrayMove(startTrayMove);
    }

    private void SetStartProgramReg(ChangeEventArgs changeEventArg)
    {
        bool startProgramReg = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"StartProgramReg Set: [{startProgramReg}]");

        // Linux, OSx - 실재 등록 동작
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) == false)
        {
            if (startProgramReg)
                Window.RegStartProgram();
            else
                Window.UnRegStartProgram();
        }

        // Windows, 실재 등록 동작
        CtrlSideUISvc.SetStartProgramReg(startProgramReg);
    }

    private void SetLanguage(ChangeEventArgs changeEventArg)
    {
        string language = Convert.ToString(changeEventArg.Value);
        CLog.Here().Information($"Language Set: [{language}]");
        CtrlSideUISvc.SetLanguage(language);
    }
    private void SetLanguage(string value)
    {
        EventHandler<string> change = HsCmdCenter.sgPageEvent.GetChangeLanguageEvent();
        change(null, value);
    }
    //private void SetScreenLock(ChangeEventArgs changeEventArg)
    //{
    //    bool screenLock = Convert.ToBoolean(changeEventArg.Value);
    //    CLog.Here().Information($"ScreenLock Set: [{screenLock}]");
    //    CtrlSideUISvc.SetScreenLock(screenLock);
    //}


    private void SetAllDownloadPath(int groupId, string stPath)
    {

        string strNosystemVarPath = AppConfigSvc.ConvertRecvDownPath(stPath);

        if(SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupId))
        {
            SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);
            if(sgLoginData != null)
                strNosystemVarPath = Path.Combine(strNosystemVarPath, sgLoginData.GetUserID());
        }

        // NetLib 쪽에는 실재절대경로로 전달해줘야함, 아님 수신때 이상한곳에 저장함
        HsCmdCenter.SetDownLoadPath(groupId, strNosystemVarPath);
        HsCmdCenter.SetBaseDownLoadPath(groupId, strNosystemVarPath);
        CtrlSideUISvc.SetRecvDownPath(groupId, stPath);

        //바탕화면 바로가기 설정
        if(SGAppMgrSvc.OpConfigInfoService.GetMakeRecvDownPathShortCut(groupId))
        {
            string linkName= string.Empty;
            if(SGAppMgrSvc.OpConfigInfoService.GetUseFromNameRecvDownPathShortCut(groupId))
                linkName = string.Format("{0}{1}.lnk", XmlConf.GetTitle("T_RECV_DOWNLOAD_LINK_NAME"), NetWorkSvc.NetWorkInfo?[groupId]?.FromName);
            else
                linkName = string.Format("{0}{1}.lnk", XmlConf.GetTitle("T_RECV_DOWNLOAD_LINK_NAME"), NetWorkSvc.NetWorkInfo?[groupId]?.ToName);
            CtrlSideUISvc.ChangeRecvDownPathLink(linkName, strNosystemVarPath);
        }
        CLog.Here().Information($"Set DownLoadPath, BaseDownLoadPath, RecvDownPath Set: [{stPath}] useUserPath : {SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupId)}");   // siteConfig
    }

    private void SetLogLevel(ChangeEventArgs changeEventArg)
    {
        LogEventLevel logLevel = LogEventLevel.Information;
        switch (changeEventArg.Value)
        {
            case "Verbose":
                logLevel = LogEventLevel.Verbose;
                break;
            case "Debug":
                logLevel = LogEventLevel.Debug;
                break;
            case "Information":
                logLevel = LogEventLevel.Information;
                break;
            case "Warning":
                logLevel = LogEventLevel.Warning;
                break;
            case "Error":
                logLevel = LogEventLevel.Error;
                break;
            case "Fatal":
                logLevel = LogEventLevel.Fatal;
                break;
        }
        CLog.Here().Fatal($"LogLevel Set: [{logLevel}]");
        CtrlSideUISvc.SetLogLevel(logLevel);
    }
    private void SetLogLevel(int value)
    {
        LogEventLevel logLevel = LogEventLevel.Information;
        logLevel = (LogEventLevel)value;
        CLog.Here().Fatal($"LogLevel Set: [{logLevel}]");
        CtrlSideUISvc.SetLogLevel(logLevel);
    }
    private void SetUseApprWaitNoti(ChangeEventArgs changeEventArg)
    {
        bool useApprWaitNoti = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"UseApprWaitNoti Set: [{useApprWaitNoti}]");
        CtrlSideUISvc.SetUseApprWaitNoti(useApprWaitNoti);
    }

    private void SetAskFileSend(ChangeEventArgs changeEventArgs)
    {
        bool askFilesSend = Convert.ToBoolean(changeEventArgs.Value);
        ISGSideBarUI sgSideBar = SGAppMgrSvc.SideBarUIService.ActiveMenu;
        if (sgSideBar != null)
        {

            CtrlSideUISvc.SetAskFileSend(sgSideBar.GroupId, askFilesSend);
            CLog.Here().Information($"AskFileSend Set: [GID:{sgSideBar.GroupId}][{askFilesSend}]");
        }
        else
            CLog.Here().Information($"AskFileSend Set: [GID:ActiveManu is null][{askFilesSend}]");
    }

    private int GetCountSGNetwork()
    {
        return NetWorkSvc.NetWorkInfo.Count;
    }


    private List<ISGNetwork> GetSGNetworkList()
    {
        return NetWorkSvc.NetWorkInfo;
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    public bool GetUseURLRedirectByGroupID(int nGroupID)
    {
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
        if (sgLoginData == null)
            return false;

        return sgLoginData.GetURLRedirect();
    }

    /// <summary>
    /// Server와 Local의 Client version 버전 비교 후 자동 업데이트 (PATCHMODE= 1 일때 기능함)
    /// </summary>
    /// <param name="sgLoginData"></param>
    /// <returns></returns>
    public void CheckClientPatch(SGLoginData sgLoginData, int groupID)
    {
        if (sgLoginData == null)
            return;
        if (!sgLoginData.GetClientUpgrade())
            return;

        string strSvrCliVersion = sgLoginData.GetServClientVersion().ToUpper();

        if (strSvrCliVersion.Equals(""))
            return;

        CLog.Here().Information("groupID : {0} - TransferUI Server Client Version {0}", groupID, strSvrCliVersion);

        string strCliVersion = HsCmdCenter.GetCliVersion().ToUpper();
        if (strCliVersion.Equals(""))
            return;

        if (!VersionConfigSvc.isUpperVersion(strSvrCliVersion, strCliVersion))
            return;

        CLog.Here().Information("groupID : {0} - TransferUI Server Client Version {1}", groupID, strSvrCliVersion);
        CLog.Here().Information("groupID : {0} - TransferUI Local Client Version {1}", groupID, strCliVersion);

        //업데이트  진행중이면 SKIP 하도록 처리 (KYH)
        (Enums.UpdateStatusType status, int groupId) nowUpdateInfo = AppUpdaterSvc.GetNowUpdateInfo();
        if (nowUpdateInfo.status != Enums.UpdateStatusType.NONE && nowUpdateInfo.groupId > -1)
        {
            CLog.Here().Information($"nowUpdateInfo.groupId : {groupID} - Update Already Started By GroupID[{nowUpdateInfo.groupId}] / Status[{nowUpdateInfo.status.ToString()}]");
            return;
        }

        //다른망에 Update Cancel 중이면 SKIP
        if (AppUpdaterSvc.IsCancelRequested)
        {
            CLog.Here().Information($"groupId : {groupID} SKIP - Update Canceling...");
            return;
        }

        //ForceUpdate와 상관없이, PatchMode가 1이면 무조건 강제 업데이트 처리
        ClientUpgradeExeEvent clientUpdateExe = null;
        clientUpdateExe = HsCmdCenter.sgPageEvent.GetClientUpgradeExeNotiEvent();
        if (clientUpdateExe != null)
            clientUpdateExe(groupID, true);

    }

    public void CtrlSideUILoginAfterOnChange()
    {
        CtrlSideUILoginAfter(-1);
    }

    /// <summary>
    /// 다른 Menu에서 원할때, 화면 갱신 시키고 싶을때
    /// </summary>
    public void CtrlSideRefresh()
    {
        StateHasChanged();
    }

    /// <summary>
    /// Login 이후 서버에서 받은 정책값과 Local 정책값으로 각종 설정들 진행
    /// </summary>
    public void CtrlSideUILoginAfter(int nGroupID)
    {

        int loginDataCount = HsCmdCenter.GetNetWorkCount();
        m_bUseClipBoard = false;
        m_bUseURLRedirection = false;
        m_bUseFileSend = false;
        bool bManualDown = false;
        bool bAfterCheckHide = false;

        SGLoginData sgLoginData = null;
        ISGSideBarUIService SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;

        // login 이후에 patch check
        if (nGroupID > -1)
        {
            sgLoginData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
            if (sgLoginData != null)
            {
                // CheckClientPatch 동작 실행 - GroupID
                CheckClientPatch(sgLoginData, nGroupID);
            }
        }

        for (int i = 0; i < loginDataCount; i++)
        {
            sgLoginData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(i);
            if (sgLoginData == null)
                continue;

            bool bTmpUseClipBoard = sgLoginData.GetClipboard();             //클립보드 기능 사용여부
            bool bTmpUseURLRedirection = sgLoginData.GetURLRedirect();      //리다이렉션 기능 사용여부
            bool bTmpFileSend = sgLoginData.GetFileTrans();                 //파일전송 사용여부


            // siteConfig.SetUseClipBoard(i, bTmpUseClipBoard);
            // siteConfig.SetUseURLRedirection(i, bTmpUseURLRedirection);

            // siteConfig.SetUseFileSend(i, bTmpFileSend);

            pageService.SetUseClipBoard(i, bTmpUseClipBoard);

            //SetDicUseClipBoard(i, bTmpUseClipBoard);
            m_bUseClipBoard |= bTmpUseClipBoard;

            ListUseClipNetOverALL.Add(sgLoginData.GetClipboard());

            m_bUseURLRedirection |= sgLoginData.GetURLRedirect();
            m_bUseFileSend |= sgLoginData.GetFileTrans();
            bManualDown |= sgLoginData.GetManualDownload();

            if (i == sgSideBar.GroupId) //GroupID 별 표시 여부가 상이할 수 있으므로 해당 Groupid에 대한 설정값만 적용
                bAfterCheckHide = sgLoginData.GetAfterChkHide();
        }

        ////AD로그인이 존재하면 화면잠금 미사용
        //foreach (var (NetworkInfo, Idx) in GetSGNetworkList().Select((value, i) => (value, i)))
        //{
        //    SGSvrData sgSvrData = null;
        //    sgSvrData = (SGSvrData)HsCmdCenter.GetSGSvrData(NetworkInfo.GroupID);
        //    if (sgSvrData == null)
        //        continue;
        //
        //    eLoginType eLoginTypeData = sgSvrData.GetLoginType();
        //
        //    if (eLoginTypeData == eLoginType.eLOGINTYPE_AD)
        //    {
        //        bTmpScreenLock = false;
        //        m_bUseScreenLock = bTmpScreenLock;
        //        CtrlSideUISvc.SetScreenLock(m_bUseScreenLock);
        //    }
        //}

        if (m_bUseClipBoard)
        {
            // siteConfig. json으로 이동
            m_bUseClipAlarmType = SGAppMgrSvc.OpConfigInfoService.GetUseClipAlarmTypeChange(0);
            m_bUseClipCopyAndSend = SGAppMgrSvc.OpConfigInfoService.GetUseClipCopyAndSend(0);
            m_bUseClipBoardPasteHotKey = SGAppMgrSvc.OpConfigInfoService.getUseClipBoardPasteHotKey(0);
            //m_bUseClipBoard = (m_bUseClipAlarmType | m_bUseClipCopyAndSend);
        }

        m_bUseMainPage = SGAppMgrSvc.OpConfigInfoService.GetUseMainPageTypeChange(0);


        if (m_bUseFileSend)
        {
            // siteConfig. json으로 이동
            m_bRFileAutoSend = SGAppMgrSvc.OpConfigInfoService.GetRFileAutoSend(0);
            m_bAfterApprAutoCheck = SGAppMgrSvc.OpConfigInfoService.GetAfterApprAutoCheck(0);
            m_bUseAskFileSendAlert = SGAppMgrSvc.OpConfigInfoService.GetUseAskFileSendAlert(sgSideBar.GroupId);

            if (bAfterCheckHide)
                m_bAfterApprAutoCheck = false;
            m_bUseFileSend = (m_bRFileAutoSend | m_bAfterApprAutoCheck | m_bUseAskFileSendAlert);
        }


        m_bRecvFolderOpen = SGAppMgrSvc.AppConfigInfoService.GetFileRecvFolderOpen();

        if (bManualDown)
            m_bManualDownFolderChange = SGAppMgrSvc.OpConfigInfoService.GetManualDownFolderChange(0);
        else
            m_bManualDownFolderChange = bManualDown;

        m_bFileRecvAlarmRetain = SGAppMgrSvc.OpConfigInfoService.GetFileRecvAlarmRetain(0);
        m_bApprCountAlarmRetain = SGAppMgrSvc.OpConfigInfoService.GetApprCountAlarmRetain(0);
        m_bApprCompleteAlarmRetain = SGAppMgrSvc.OpConfigInfoService.GetApprCompleteAlarmRetain(0);
        m_bApprRejectAlarmRetain = SGAppMgrSvc.OpConfigInfoService.GetApprRejectAlarmRetain(0);
        m_bUseApprCountAlaram = SGAppMgrSvc.OpConfigInfoService.GetUseApprCountAlaram(0);

        m_bAlarmTray = (m_bFileRecvAlarmRetain | m_bApprCountAlarmRetain | m_bApprCompleteAlarmRetain | m_bApprRejectAlarmRetain | m_bUseApprCountAlaram);

        m_bUseCloseTrayMove = SGAppMgrSvc.OpConfigInfoService.GetUseCloseTrayMove(0);
        m_bUseStartTrayMove = SGAppMgrSvc.OpConfigInfoService.GetUseStartTrayMove(0);
        m_bTrayMove = (m_bUseCloseTrayMove | m_bUseStartTrayMove);

        m_bUseStartProgramReg = SGAppMgrSvc.OpConfigInfoService.GetUseStartProgramReg(0);

        m_bUseLanguageSet = SGAppMgrSvc.OpConfigInfoService.GetUseLanguageSet(0);

        m_bLogLevelSet = SGAppMgrSvc.OpConfigInfoService.GetUseLogLevel(0);

        // 단축키 정보값 받아옴 (3망고려)

        if (m_bUseClipBoard)
        {
            sgLoginData = null;
            foreach (var NetworkInfo in GetSGNetworkList())
            {
                sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(NetworkInfo.GroupID);

                if (sgLoginData != null && sgLoginData.GetClipboard())  // UI에서 처리
                {

                    if (sgLoginData.GetUseOverNetwork2())
                    {
                        dicDestSysPos = pageService.GetTargetSystemList(NetworkInfo.GroupID);
                        if (dicDestSysPos != null && dicDestSysPos.Count > 1)
                        {

                            string strKeyNetGroupIDidx = "";

                            foreach (var item in dicDestSysPos)
                            {
                                if (item.Value.nIdx == 1)
                                {

                                    @*if (ListModKey.ElementAtOrDefault(NetworkInfo.GroupID) != null)
                                        {
                                        ListModKey.RemoveAt(NetworkInfo.GroupID);
                                        ListVKey.RemoveAt(NetworkInfo.GroupID);
                                        }
                                        ListModKey.Insert(NetworkInfo.GroupID, AppConfigSvc.GetClipBoardModifier(NetworkInfo.GroupID));
                                        ListVKey.Insert(NetworkInfo.GroupID, AppConfigSvc.GetClipBoardVKey(NetworkInfo.GroupID));*@

                                    List<bool> bList = AppConfigSvc.GetClipBoardModifier(NetworkInfo.GroupID);
                                    char chData = AppConfigSvc.GetClipBoardVKey(NetworkInfo.GroupID);

                                    SetDicModKeyList(NetworkInfo.GroupID, ref bList);
                                    SetDicModVKey(NetworkInfo.GroupID, chData);

                                    if (item.Value.bUseClipTrans == false)
                                        ListUseClipNetOverALL[NetworkInfo.GroupID] = false;
                                }
                                else if (item.Value.nIdx > 1)
                                {
                                    strKeyNetGroupIDidx = String.Format($"{NetworkInfo.GroupID}-{item.Value.nIdx}");

                                    //List<bool> listClipShortKey = new List<bool>();
                                    //List<bool> listClipShortKey = null;
                                    //dicModKeyNetOver.TryGetValue(strKeyNetGroupIDidx, out listClipShortKey);
                                    dicModKeyNetOver[strKeyNetGroupIDidx] = AppConfigSvc.GetClipBoardModifierWhenNetOver(NetworkInfo.GroupID, item.Value.nIdx);
                                    dicVKeyNetOver[strKeyNetGroupIDidx] = AppConfigSvc.GetClipBoardVKeyWhenNetOver(NetworkInfo.GroupID, item.Value.nIdx, GetSGNetworkList().Count, dicDestSysPos.Count);

                                    if (item.Value.bUseClipTrans == false)
                                        ListUseClipNetOverALL[NetworkInfo.GroupID] = false;
                                }

                            } // foreach (var item in dicDestSysPos)


                            // 수신망전체 전송
                            //if (AppConfigSvc.GetUseNetOverAllsend())
                            //if (siteConfig.GetUseNetOverAllsend())
                            if (SGAppMgrSvc.OpConfigInfoService.GetUseNetOverAllsend(NetworkInfo.GroupID))
                            {
                                if (ListUseClipNetOverALL[NetworkInfo.GroupID])
                                {
                                    strKeyNetGroupIDidx = String.Format($"{NetworkInfo.GroupID}-{0}");
                                    dicModKeyNetOver[strKeyNetGroupIDidx] = AppConfigSvc.GetClipBoardModifierWhenNetOver(NetworkInfo.GroupID, 0);
                                    dicVKeyNetOver[strKeyNetGroupIDidx] = AppConfigSvc.GetClipBoardVKeyWhenNetOver(NetworkInfo.GroupID, 0, GetSGNetworkList().Count, dicDestSysPos.Count);
                                }
                            }
                            else
                                ListUseClipNetOverALL[NetworkInfo.GroupID] = false;

                        } // if (dicDestSysPos != null && dicDestSysPos.Count > 1)

                        // Key Data 추가

                    }
                    else // if (sgLoginData.GetUseOverNetwork2())
                    {

                        @*if (ListModKey.ElementAtOrDefault(NetworkInfo.GroupID) != null)
                            {
                            ListModKey.RemoveAt(NetworkInfo.GroupID);
                            ListVKey.RemoveAt(NetworkInfo.GroupID);
                            }*@


                        List<bool> bList = AppConfigSvc.GetClipBoardModifier(NetworkInfo.GroupID);
                        char chData = AppConfigSvc.GetClipBoardVKey(NetworkInfo.GroupID);

                        SetDicModKeyList(NetworkInfo.GroupID, ref bList);
                        SetDicModVKey(NetworkInfo.GroupID, chData);

                        @*ListModKey.Insert(NetworkInfo.GroupID, bList);
                            ListVKey.Insert(NetworkInfo.GroupID, chData);*@

                    }

                    //클립보드 설정
                    List<bool> bPasteList = AppConfigSvc.GetClipBoardModifier(PasteGroupId, true);
                    char chPasteData = AppConfigSvc.GetClipBoardVKey(PasteGroupId, true);
                    SetDicModKeyList(PasteGroupId, ref bPasteList);
                    SetDicModVKey(PasteGroupId, chPasteData);
                }

            }

            // 다중망 - Both 전송 기능 없음
            if (GetSGNetworkList().Count > 1)
            {
                for (int nIdx = 0; nIdx < ListUseClipNetOverALL.Count; nIdx++)
                    ListUseClipNetOverALL[nIdx] = false;
            }
        }

        StateHasChanged();
    }


    public bool GetRecvDownPathChangeHide(int groupID)
    {
        // siteConfig. json으로 이동
        return !(SGAppMgrSvc.OpConfigInfoService.GetUseRecvFolderChange(groupID));
    }


    /*
    public async void CheckUpdatesClick()
    {
        await Task.Run(() =>
        {
            ClientUpgradeExeEvent clientUpgradeExe = null;
            clientUpgradeExe = HsCmdCenter.sgPageEvent.GetClientUpgradeExeNotiEvent();
            if (clientUpgradeExe != null)
                clientUpgradeExe();
        });
    }
    */

    public async void CheckUpdatesControlClick()
    {
        ISGSideBarUIService SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;

        int groupId = sgSideBar.GroupId;
        CLog.Here().Information($"Click Update Check Button groupID : {groupId} - Local Client Version {GetSWVersion()}");

        //이미 업데이트  진행중이면 SKIP
        (Enums.UpdateStatusType status, int groupId) nowUpdateInfo = AppUpdaterSvc.GetNowUpdateInfo();
        if (nowUpdateInfo.status != Enums.UpdateStatusType.NONE && nowUpdateInfo.groupId > -1)
        {
            CLog.Here().Information($"GID:{groupId}] SKIP - Update Already Started By GroupID[{nowUpdateInfo.groupId}] / Status[{nowUpdateInfo.status.ToString()}]");
            refSGMessageNotification?.OpenPopUp("Update Already Starting :(");
            return;
        }

        //업데이트 진행은 아니지만, Update Cancel 중이면 SKIP
        if (AppUpdaterSvc.IsCancelRequested)
        {
            CLog.Here().Information($"[GID:{groupId}] SKIP - Update Canceling...");
            refSGMessageNotification?.OpenPopUp($"We are working on [Canceling] the update.{Environment.NewLine}Please try again in a few minutes. :(");
            return;
        }


        await Task.Run(() =>
       {
           AppUpdaterSvc.CheckUpdatesClick(groupId, refSGCheckUpdate, refSGAvailableUpdate, refSGDownloadUpdate, refSGFinishedDownload, refSGMessageNotification);
       });
    }

    public async void CheckUpdatesClick(int groupId)
    {
        await Task.Run(() =>
        {
            AppUpdaterSvc.CheckUpdatesClick(groupId, refSGCheckUpdate, refSGAvailableUpdate, refSGDownloadUpdate, refSGFinishedDownload, refSGMessageNotification);
        });
    }

    public void OpenCheckUpdate()
    {
        refSGCheckUpdate.OpenPopUp();
    }

    public void CloseCheckUpdate()
    {
        refSGCheckUpdate.ClosePopUp();
    }

    public void CloseAvailableUpdate()
    {
        refSGAvailableUpdate.ClosePopUp();
    }

    @*private void OpenDownloadUpdate(string downloadInfo)
        {
        refSGDownloadUpdate.OpenPopUp(downloadInfo);
        }
    *@
    private void CancelDownloadUpdate()
    {
        AppUpdaterSvc.RequestCancelFileDownload();
        AppUpdaterSvc.IsCancelRequested = true;
    }

    private void OpenFinishedDownload(string downloadInfo)
    {
        refSGFinishedDownload.OpenPopUp(downloadInfo);
    }

    private void CloseFinishedDownload()
    {
        refSGFinishedDownload.ClosePopUp();
    }

    public void OpenMessageNotification(string causeDescription)
    {
        refSGMessageNotification.OpenPopUp(causeDescription);
    }


    private void CloseMessageNotification()
    {
        refSGMessageNotification.ClosePopUp();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="isTotalPathch">전체패치 여부 (서버의 PATCHMODE =1 )</param>
    public async void clientUpgradeExe(int groupId, bool isTotalPathch)
    {
        Console.WriteLine("clientUpgradeExe : " + isTotalPathch.ToString());

        if (isTotalPathch || SGAppMgrSvc.OpConfigInfoService.GetUseForceBackgroundUpdate(groupId))
        {
            //서버설정의 PATCHMODE = 1 (전체패지) 인 경우, 강제 패치처리
            //OpConfig의 ForceBackgroundUpdate = True 인 경우, 강제 패치 처리
            await Task.Run(() =>
            {
                AppUpdaterSvc.CheckUpdateBackgroundDown(groupId);
            });
        }
        else
        {
            await Task.Run(() =>
            {
                CheckUpdatesClick(groupId);
                JSRuntime.InvokeAsync<object>("OpenControlSide");
            });
        }
    }

    /// <summary>
    /// GroupID별 Key 설정유무 값을 얻는 동작이 정상동작할 수 있는지 확인(true:사용가능, false:사용불가)
    /// </summary>
    /// <param name="nGroupId"></param>
    /// <param name="nIdx"></param>
    /// <returns></returns>
    public bool GetDicModKey(int nGroupId, int nIdx)
    {
        if (isValidDicModKey(nGroupId, nIdx) == false)
            return false;

        CLog.Here().Information($"CliBoard - GetDicModKey - !");

        bool bRet = true;

        try
        {
            List<bool> listKey = null;
            if (DicModKey.TryGetValue(nGroupId, out listKey) == false)
                return false;

            return listKey[nIdx];

        }
        catch (Exception ex)
        {
            bRet = false;
            CLog.Here().Information($"CliBoard - GetDicModKey - Exception : {ex.Message}");
        }

        return bRet;
    }

    /// <summary>
    /// 단축키 설정값 설정하는 함수
    /// </summary>
    /// <param name="nGroupId"></param>
    /// <param name="listKey"></param>
    /// <returns></returns>
    public bool SetDicModKeyList(int nGroupId, ref List<bool> listKey)
    {
        bool bRet = true;
        try
        {
            List<bool> listKeyTmp = null;
            if (DicModKey.TryGetValue(nGroupId, out listKeyTmp))
            {
                listKeyTmp.Clear();
                DicModKey.Remove(nGroupId);
            }

            DicModKey.Add(nGroupId, listKey);

            SetPreventDefault(nGroupId, listKey);
        }
        catch (Exception ex)
        {
            bRet = false;
            CLog.Here().Information($"CliBoard - SetDicModKeyList - Exception : {ex.Message}");
        }
        return bRet;
    }

    public void SetPreventDefault(int groupId, List<bool> listKey)
    {
        List<bool> prevent = null;
        int count = 0;
        foreach (bool value in listKey)
        {
            if (value)
                count++;
        }
        if (DicModPreventDefault.TryGetValue(groupId, out prevent) == false)
        {
            prevent = new List<bool>();
            if (count == 1)
            {
                foreach (bool value in listKey)
                {
                    prevent.Add(value);
                }
            }
            else
            {
                for (int i = 0; i < listKey.Count; i++)
                    prevent.Add(false);
            }
            DicModPreventDefault.Add(groupId, prevent);
        }
        else
        {
            if (count == 1)
            {
                for (int i = 0; i < listKey.Count; i++)
                {
                    prevent[i] = listKey[i];
                }
            }
            else
            {
                for (int i = 0; i < listKey.Count; i++)
                    prevent[i] = false;
            }
            DicModPreventDefault[groupId] = prevent;
        }
    }
    /// <summary>
    /// 클립보드 단축키 설정값 얻는 함수
    /// </summary>
    /// <param name="nGroupId"></param>
    /// <param name="listKey"></param>
    /// <returns></returns>
    public bool GetDicModKeyList(int nGroupId, out List<bool> listKey)
    {

        bool bRet = true;
        try
        {

            if (DicModKey.TryGetValue(nGroupId, out listKey) == false)
                return false;

        }
        catch (Exception ex)
        {
            bRet = false;
            CLog.Here().Information($"CliBoard - GetDicModKeyList - Exception : {ex.Message}");
            listKey = null;
        }

        return bRet;
    }

    /// <summary>
    /// 클립보드 단축키 알파벳 설정값 얻는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="chVkey"></param>
    /// <returns></returns>
    public bool GetDicModVKey(int groupId, out char chVkey)
    {
        bool bRet = true;
        try
        {

            if (DicVKey.TryGetValue(groupId, out chVkey) == false)
                return false;

        }
        catch (Exception ex)
        {
            bRet = false;
            CLog.Here().Information($"CliBoard - GetDicModVKey - Exception : {ex.Message}");
            chVkey = ' ';
        }

        return bRet;
    }

    /// <summary>
    /// 클립보드, 현재 단축키의 VKey 값 알려줌 (실패하면: '\0' 문자 return됨)
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="chVkey"></param>
    /// <returns></returns>
    public char GetDicModVKeyValue(int groupId)
    {
        char chRet = '\0';
        try
        {

            if (DicVKey.TryGetValue(groupId, out chRet) == false)
            {
                CLog.Here().Information($"CliBoard - GetDicModVKey - vKey Empty - groupId : {groupId}");
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Information($"CliBoard - GetDicModVKey - Exception : {ex.Message}");
        }

        return chRet;
    }

    /// <summary>
    /// 클립보드 단축키 알파벳 설정값 설정하는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="chVkey"></param>
    /// <returns></returns>
    public bool SetDicModVKey(int groupId, char chVkey)
    {

        bool bRet = true;
        char chVKeyTmp = '\0';

        try
        {
            if (DicVKey.TryGetValue(groupId, out chVKeyTmp))
            {
                DicVKey.Remove(groupId);
            }

            DicVKey.Add(groupId, chVkey);
        }
        catch (Exception ex)
        {
            bRet = false;
            CLog.Here().Information($"CliBoard - SetDicModVKey - Exception : {ex.Message}");
        }

        return bRet;
    }

    /// <summary>
    /// GroupID별 Key 설정유무 값을 얻는 동작이 정상동작할 수 있는지 확인(true:사용가능, false:사용불가)
    /// </summary>
    /// <param name="nGroupId"></param>
    /// <param name="nIdx"></param>
    /// <returns></returns>
    public bool isValidDicModKey(int nGroupId, int nIdx)
    {

        if (nGroupId < 0 || nIdx < 0)
            return false;

        if (DicModKey == null)
            return false;

        bool bRet = true;
        try
        {
            List<bool> listKey = null;
            if (DicModKey.TryGetValue(nGroupId, out listKey) == false)
            {
                return false;
            }

            if (listKey == null)
                return false;

            if (listKey.Count < 1)
                return false;

            if (listKey.Count <= nIdx)
                return false;


        }
        catch (Exception ex)
        {
            bRet = false;
            CLog.Here().Information($"CliBoard - isValidDicModKey - Exception : {ex.Message}");
        }

        return bRet;
    }


}
