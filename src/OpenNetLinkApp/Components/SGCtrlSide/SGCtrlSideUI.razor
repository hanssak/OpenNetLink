@using System
@using System.Collections.Generic
@using System.Linq
@using Serilog
@using Serilog.Events
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData 
@using OpenNetLinkApp.PageEvent 
@using OpenNetLinkApp.Components.SGPopUp 
@using System.Runtime.InteropServices
@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject XmlConfService XmlConf
@inject HSCmdCenter HsCmdCenter
@inject IJSRuntime JSRuntime

<!-- Control Sidebar -->
    <!-- Control sidebar content goes here -->
	 
<div class="p-3 control-sidebar-content">

    <div class="r_set_title"> <i class="fas fa-cogs pr-2"></i>@XmlConf.GetTitle("T_APPCONFIG_COMMON")</div>                     <!--공통환경설정-->
    <hr class="mb-2">

    @if(m_bUseClipBoard)
    { 
    <div class="r_set_sub">@XmlConf.GetTitle("T_COMMON_CLIPBOARD")</div>                                                             <!--클립보드-->
    <div class="ml-2 mb-4">
        <div class="mb-2 float-left pr-2 w-100">
            <div class="mb-1">@XmlConf.GetTitle("T_INFO_CLIPBOARD_SHOTKEY") : </div>                                                 <!--클립보드 단축키-->
            @foreach (var (NetworkInfo, Idx) in GetSGNetworkList().Select((value, i) => (value, i)))
            {
                <span class="@("net"+(Idx+1).ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(NetworkInfo.ToName)</span><br>
                @foreach (var (Modifier, Index) in ModKeyList().Select((value, i) => (value, i)))
                {
                    <input type="checkbox" class="mr-1" checked="@ListModKey[NetworkInfo.GroupID][Index]"
                           @onchange="eventArgs => { CheckBoxModifierClicked(NetworkInfo.GroupID, (HOTKEY_MOD)Index, eventArgs); }" />
                    <span class="mr-2">@Modifier</span>
                }
                <select class="mr-1" value="@ListVKey[NetworkInfo.GroupID]"
                        @onchange="eventArgs => { SelectBoxVKeySelected(NetworkInfo.GroupID, eventArgs); }">
                    @foreach (var VKey in VKeyList())
                    {
                        <option value="@VKey">@VKey</option>

                    }
                </select>
                <br />
            }
        </div>
        @if (m_bUseClipAlarmType)
        {
        <div class="mb-1  w-100">
            <span class="pr-2">@XmlConf.GetTitle("T_INFO_CLIPNOTI_OPTION_TYPE") : </span>                                              <!--클립보드 알림형식 -->
            <select value="@((int)GetClipAlarmType())"
                    @onchange="eventArgs => { SetClipAlarmType(eventArgs); }">
                <option value="@((int)CLIPALM_TYPE.OSUI)">OS & UI</option>
                <option value="@((int)CLIPALM_TYPE.OS)">OS</option>
                <option value="@((int)CLIPALM_TYPE.UI)">UI</option>
            </select>
        </div>
        }
        @if(m_bUseClipCopyAndSend)
        { 
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetClipAfterSend())"
                   @onchange="eventArgs => { SetClipAfterSend(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_CLIPCOPYANDSEND")</span>                <!--클립보드 복사 후 전송 -->
        </div>
        }
    </div>
    }

    @if(m_bUseURLRedirection)
    { 
    <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_URLREDIRECT_AUTO")</div>                                                        <!--URL 자동전환 -->
    <div class="ml-2 mb-4">
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetURLAutoTrans())"
                   @onchange="eventArgs => { SetURLAutoTrans(eventArgs); }" /><span>@XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO")</span>                  <!--URL 자동전환 사용 -->
        </div>
        @if(m_bUseURLRedirectionAlarm)
        { 
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetURLAutoAfterMsg())"
                   @onchange="eventArgs => { SetURLAutoAfterMsg(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANSALARM")</span>               <!--URL 자동전환 알림 -->
        </div>
        }
        @if (m_bUseURLRedirectionAlarmType)
        {
        <div class="mb-1  w-100">
            <span class="pr-2">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANSALARM_TYPE")</span>                                                                 <!--URL 자동전환 알림형식-->
            <select value="@(GetURLAutoAfterBrowser())"
                    @onchange="eventArgs => { SetURLAutoAfterBrowser(eventArgs); }">
                <option value="C">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FOLD")</option>                                                                               <!--닫기-->
                <option value="N">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_RETAIN")</option>                                                                               <!--유지-->
                <option value="F">@XmlConf.GetTitle("T_APPCONFIG_URLAUTOTRANS_FORWARD")</option>                                                                    <!--특정 URL포워딩-->
            </select>
        </div>
        }
    </div>
    }

    @if (m_bUseFileSend)
    {
    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_FILETRANS")</div>                                                                                          <!--파일 전송-->
    <div class="ml-2 mb-4">
        @if(m_bRFileAutoSend)
        { 
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetRMouseFileAddAfterTrans())"
                   @onchange="eventArgs => { SetRMouseFileAddAfterTrans(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_RMOUSEAUTOTRNAS")</span>          <!--마우스 우클릭 자동전송-->
        </div>
        }
        @if(m_bAfterApprAutoCheck)
        { 
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetAfterBasicChk())"
                   @onchange="eventArgs => { SetAfterBasicChk(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK")</span>                            <!--사후결재 체크-->
        </div>
        }
    </div>
    }

    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_FILERECV")</div>                                                                                              <!--파일 수신-->
    <div class="ml-2 mb-4">
        <div class="mb-1">@XmlConf.GetTitle("T_APPCONFIG_FILERECVFOLDER") : </div>                                                                                   <!--파일 다운로드 경로-->
        @foreach (var (NetworkInfo, Idx) in GetSGNetworkList().Select((value, i) => (value, i)))
        {
            <div class="mb-2  w-100">
                <span class="@("net"+(Idx+1).ToString())">@(NetworkInfo.FromName)<i class="fas fa-long-arrow-alt-right p-1"></i>@(NetworkInfo.ToName)</span><br>
                <input type="text" value="@(GetRecvDownPath(Idx))" class="mr-1 col-md-10" readonly />
                <a class="file_dw" @onclick="@(e => openSaveDirPopup(Idx, GetRecvDownPath(Idx)))" hidden ="@(GetRecvDownPathChangeHide(Idx))"><i class="fas fa-folder-open pl-1"></i></a>
            </div>
        }
        @if (m_bRecvFolderOpen)
        {
        <div class="mb-1 w-100">
            <input type="checkbox" class="mr-1" checked="@(GetFileRecvFolderOpen())"
                   @onchange="eventArgs => { SetFileRecvFolderOpen(eventArgs); }" /><span>@XmlConf.GetTitle("T_INFO_AFTEROPENFOLDER_FILEDOWN")</span>             <!--파일 수신 후 폴더 열기-->
        </div>
        }
        @if(m_bManualDownFolderChange)
        { 
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetManualRecvDownChange())"
                   @onchange="eventArgs => { SetManualRecvDownChange(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_MANUALDOWN_FOLDEROPEN")</span>            <!--수동다운로드 폴더 선택-->
        </div>
        }
    </div>

    @if(m_bAlarmTray)
    { 
    <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_ALARM_TRAY")</div>         <!--알림 트레이-->
    <div class="ml-2 mb-4">
        @if (m_bFileRecvAlarmRetain)
        {
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetFileRecvTrayFix())"
                   @onchange="eventArgs => { SetFileRecvTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_RECVALARM_RETAIN")</span>                 <!--수신 완료 후 알림 유지-->
        </div>
        }
        @if(m_bApprCountAlarmRetain)
        { 
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetApprTrayFix())"
                   @onchange="eventArgs => { SetApprTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRWAITALARM_RETAIN")</span>                         <!--승인대기 알림 유지-->
        </div>
        }
        @if (m_bApprCompleteAlarmRetain)
        {
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetUserApprActionTrayFix())"
                   @onchange="eventArgs => { SetUserApprActionTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRCOMPLETEALARM_RETAIN")</span>              <!--승인완료 알림 유지-->
        </div>
        }
        @if (m_bApprRejectAlarmRetain)
        {
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetUserApprRejectTrayFix())"
                   @onchange="eventArgs => { SetUserApprRejectTrayFix(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRREJECTALARM_RETAIN")</span>                    <!--반려 알림 유지-->
        </div>
        }
        @if (m_bUseApprCountAlaram)
        {
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetUseApprWaitNoti())"
                   @onchange="eventArgs => { SetUseApprWaitNoti(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_APPRWAITNOTI_USE")</span>                    <!--반려 알림 유지-->
        </div>
        }
    </div>
    }

    @if(m_bTrayMove)
    { 
    <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_TRAY_MOVE")</div>                                                                                    <!--트레이 이동-->
    <div class="ml-2 mb-4">
        @if (m_bUseCloseTrayMove)
        {
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetExitTrayMove())"
                   @onchange="eventArgs => { SetExitTrayMove(eventArgs); }" /><span>@XmlConf.GetTitle("T_INFO_EXITKEY_MOVETRAY")</span>                            <!--종료 시, 트레이로 이동-->
        </div>
        }
        @if (m_bUseStartTrayMove)
        {
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetStartTrayMove())"
                   @onchange="eventArgs => { SetStartTrayMove(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_PROGRAMSTART_MOVETRAY")</span>                       <!--프로그램 시작 시, 트레이 이동-->
        </div>
        }
    </div>
    }

    @if(m_bUseStartProgramReg)
    { 
    <div class="r_set_sub">@XmlConf.GetTitle("T_INFO_STARTPROGRAM")</div>                                                                                    <!--시작프로그램-->
    <div class="ml-2 mb-4">
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetStartProgramReg())"
                   @onchange="eventArgs => { SetStartProgramReg(eventArgs); }" /><span>@XmlConf.GetTitle("T_APPCONFIG_PROGRAMSTART_REG")</span>                           <!--시작 프로그램에 등록-->
        </div>
    </div>
    }

    @if (m_bUseLanguageSet)
    {
    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_LANGUAGE_SETTING")</div>                                                                                                   <!--언어설정-->
    <div class="ml-2 mb-4">
        <div class="mb-1  w-100">
            <span class="pr-2">@XmlConf.GetTitle("T_LANGUAGE")</span>                                                                                                        <!--언어-->
            <select value="@(GetLanguage())"
                    @onchange="eventArgs => { SetLanguage(eventArgs); }">
                <option value="KR">@XmlConf.GetTitle("T_LANGUAGE_KOREAN")</option>                                                                                             <!--한국어-->
                <option value="JP">@XmlConf.GetTitle("T_LANGUAGE_JAPAN")</option>                                                                                             <!--일본어-->
                <option value="CN">@XmlConf.GetTitle("T_LANGUAGE_CHINA")</option>                                                                                             <!--중국어-->
                <option value="EN">@XmlConf.GetTitle("T_LANGUAGE_ENGLISH")</option>                                                                                             <!--영어-->
            </select>
        </div>

    </div>
    }

    @if (m_bUseScreenLock)
    {
    <div class="r_set_sub">@XmlConf.GetTitle("T_COMMON_SCRLOCK")</div>                                                                                                       <!--화면잠금-->
    <div class="ml-2 mb-4">
        <div class="mb-1  w-100">
            <input type="checkbox" class="mr-1" checked="@(GetScreenLock())"
                   @onchange="eventArgs => { SetScreenLock(eventArgs); }" /> <span class="mr-2">@XmlConf.GetTitle("T_COMMON_SCRLOCK")</span>                                 <!--화면잠금-->
                <input type="text" value="@(GetScreenTime())" class="mr-1 col-md-1"
                       @onchange="eventArgs => { SetScreenTime(eventArgs); }" />@XmlConf.GetTitle("T_INFO_MINUTE")                                                                   <!--분-->
                </div>

    </div>
    }

    @if (m_bLogLevelSet)
    {
    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_LOGLEVEL_SETTING")</div>                                                                                                       <!--로그레벨 설정-->
    <div class="ml-2 mb-4">
        <div class="mb-1  w-100">
            <span class="pr-2">@XmlConf.GetTitle("T_LOGLEVEL")</span>                                                                                                        <!--언어-->
            <select value="@(GetLogLevel())"
                    @onchange="eventArgs => { SetLogLevel(eventArgs); }">
                <option value="@LogEventLevel.Verbose">@XmlConf.GetTitle("T_LOGLEVEL_VERBOSE")</option>                                                                                             <!--한국어-->
                <option value="@LogEventLevel.Debug">@XmlConf.GetTitle("T_LOGLEVEL_DEBUG")</option>                                                                                             <!--일본어-->
                <option value="@LogEventLevel.Information">@XmlConf.GetTitle("T_LOGLEVEL_INFORMATION")</option>                                                                                             <!--중국어-->
                <option value="@LogEventLevel.Warning">@XmlConf.GetTitle("T_LOGLEVEL_WARNING")</option>                                                                                             <!--영어-->
                <option value="@LogEventLevel.Error">@XmlConf.GetTitle("T_LOGLEVEL_ERROR")</option>                                                                                             <!--영어-->
                <option value="@LogEventLevel.Fatal">@XmlConf.GetTitle("T_LOGLEVEL_FATAL")</option>                                                                                             <!--영어-->
            </select>
        </div>
    </div>
    }

    <div class="r_set_sub">@XmlConf.GetTitle("T_APPCONFIG_UPDATE")</div>                                                                                                       <!--업데이트-->
    <div class="ml-2 mb-5 updates">
        <ul class="mb-1  w-100 ">
            <li><a class="update" @onclick="@(async () => AppUpdaterSvc.CheckUpdatesClick(this))" data-toggle="modal" data-target="#modal-checkupdate" >@XmlConf.GetTitle("T_APPCONFIG_UPDATE_CONFIRM") <i class="fas fa-arrow-circle-right ml-1"></i></a></li> <!--업데이트 확인-->
            <li hidden><a class="update" @onclick="@(() => OpenDownloadUpdate())" data-toggle="modal" data-target="#modal-downloadupdate" >Download <i class="fas fa-arrow-circle-right ml-1"></i></a></li> <!--업데이트 확인-->
            <li hidden><a class="update" @onclick="@(() => OpenMessageNotification(""))" data-toggle="modal" data-target="#modal-messagenotification">Notification <i class="fas fa-arrow-circle-right ml-1"></i></a></li> <!--업데이트 확인-->
            <li>@XmlConf.GetTitle("T_APPCONFIG_LASTUPDATE") :  @(GetLastUpdated())</li> <!--마지막 업데이트-->
            <li>@XmlConf.GetTitle("T_APPCONFIG_SOFTWARE_VERSION") :  OpenNetLink @(GetSWVersion())</li> <!--소프트웨어버전-->
        </ul>

    </div>

</div>

<!-- /.Control Sidebar -->
<SelectSaveFolder @ref="refSelectSaveFolder" OnSaveDirPath="SaveDownloadDir"></SelectSaveFolder>
<SGCheckUpdate @ref="refSGCheckUpdate" OnClosePopUp="CloseCheckUpdate"></SGCheckUpdate>
<SGDownloadUpdate @ref="refSGDownloadUpdate" OnClosePopUp="CloseDownloadUpdate" DownloadFileName="@(DownloadFileName)" IndicatorProgress="@(IndicatorProgress)"></SGDownloadUpdate>
<SGMessageNotification @ref="refSGMessageNotification" OnClosePopUp="CloseMessageNotification"></SGMessageNotification>

@code
{
    [Parameter] public ISGCtrlSideUIService CtrlSideUISvc { get; set; }
    [Parameter] public ISGAppConfigService AppConfigSvc { get; set; }
    [Parameter] public ISGNetworkService NetWorkSvc { get; set; }
    [Parameter] public ISGAppUpdaterService AppUpdaterSvc { get; set; }
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGCtrlSideUI>();

    public bool m_bUseScreenLock = false;
    public int m_nSvrTime = 0;

    private List<List<bool>> ListModKey= new List<List<bool>>();
    private List<char> ListVKey = new List<char>();
    SelectSaveFolder refSelectSaveFolder;
    SGCheckUpdate refSGCheckUpdate;
    SGDownloadUpdate refSGDownloadUpdate;
    SGMessageNotification refSGMessageNotification;
    public string DownloadFileName { get; set; }
    public int IndicatorProgress { get; set; }
    ISGSiteConfigService siteConfig;

    public bool m_bUseClipBoard = true;
    public bool m_bUseURLRedirection = true;
    public bool m_bUseFileSend = true;


    public bool m_bUseClipAlarmType=true;                                               // 클립보드 알림 형식 사용 유무
    public bool m_bUseClipCopyAndSend = true;                                            // 클립보드 복사 후 전송 사용 유무
    public bool m_bUseURLRedirectionAlarm = true;                                        // URL 자동전환 알림 사용 유무
    public bool m_bUseURLRedirectionAlarmType = true;                                        // URL 자동전환 알림 타입 선택 사용 유무
    public bool m_bRFileAutoSend = true;                                                     // 마우스 우클릭 후 자동전송 사용 유무
    public bool m_bAfterApprAutoCheck = true;                                        // 사후결재 기본 체크 사용 유무
    public bool m_bRecvFolderOpen = true;                                             // 파일 수신 후 폴더 열기 사용 유무
    public bool m_bManualDownFolderChange = true;                                     // 수동다운로드로 다운 시 폴더 선택 사용 유무
    public bool m_bFileRecvAlarmRetain = true;                                        // 파일 수신 후 알림 유지 사용 유무
    public bool m_bApprCountAlarmRetain = true;                                       // 승인대기 알림 유지 사용 유무
    public bool m_bApprCompleteAlarmRetain = true;                                    // 승인완료 알림 유지 사용 유무
    public bool m_bApprRejectAlarmRetain = true;                                      // 반려 알림 유지 사용 유무
    public bool m_bUseApprCountAlaram = true;                                   // 승인대기 알림 사용 유무.
    public bool m_bUseCloseTrayMove = true;                                           // 종료 시 트레이 사용 유무.
    public bool m_bUseStartTrayMove = true;                                           // 프로그램 시작 시 트레이 이동 사용 유무.
    public bool m_bUseStartProgramReg = true;                                         // 시작 프로그램 등록 사용 유무.
    public bool m_bUseLanguageSet = true;                                            // 언어설정 사용 유무.
    public bool m_bLogLevelSet = true;                                                // 로그 레벨 설정 사용 유무.

    public bool m_bTrayMove = true;
    public bool m_bAlarmTray = true;

    private void SaveDownloadDir(string dir)
    {
        string[] arrDir = dir.Split("|");
        SetRecvDownPath(Convert.ToInt32(arrDir[1]), arrDir[0]);
    }

    private async Task openSaveDirPopup(int Idx, string dir)
    {
        await refSelectSaveFolder.openPopUp(Idx, dir);

        object[] param2 = { "0" };
        await JSRuntime.InvokeAsync<object>("changeModalBg", param2);
        object[] param3 = { "1" };
        await JSRuntime.InvokeAsync<object>("changeModalZIndex", param3);
        object[] param4 = { "black" };
        await JSRuntime.InvokeAsync<object>("changeModalFontColor", param4);
    }

    public List<String> ModKeyList()
    {
        List<String> ModList = new List<String>();
        ModList.Add("Window");
        ModList.Add("Ctrl");
        ModList.Add("Alt");
        ModList.Add("Shift");
        return ModList;
    }
    public List<char> VKeyList()
    {
        List<char> KeyList = new List<char>();
        KeyList.Add('A'); KeyList.Add('B'); KeyList.Add('C'); KeyList.Add('D'); KeyList.Add('E'); KeyList.Add('F');
        KeyList.Add('G'); KeyList.Add('H'); KeyList.Add('I'); KeyList.Add('J'); KeyList.Add('K'); KeyList.Add('L');
        KeyList.Add('M'); KeyList.Add('N'); KeyList.Add('O'); KeyList.Add('P'); KeyList.Add('Q'); KeyList.Add('R');
        KeyList.Add('S'); KeyList.Add('T'); KeyList.Add('U'); KeyList.Add('V'); KeyList.Add('W'); KeyList.Add('X');
        KeyList.Add('Y'); KeyList.Add('Z');
        return KeyList;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;

        foreach (var NetworkInfo in GetSGNetworkList())
        {
            if(ListModKey.ElementAtOrDefault(NetworkInfo.GroupID) != null)
            {
                ListModKey.RemoveAt(NetworkInfo.GroupID);
                ListModKey.Insert(NetworkInfo.GroupID, AppConfigSvc.GetClipBoardModifier(NetworkInfo.GroupID));
                ListVKey.RemoveAt(NetworkInfo.GroupID);
                ListVKey.Insert(NetworkInfo.GroupID, AppConfigSvc.GetClipBoardVKey(NetworkInfo.GroupID));
            }
            else
            {
                ListModKey.Insert(NetworkInfo.GroupID, AppConfigSvc.GetClipBoardModifier(NetworkInfo.GroupID));
                ListVKey.Insert(NetworkInfo.GroupID, AppConfigSvc.GetClipBoardVKey(NetworkInfo.GroupID));
            }
        }


        m_bUseScreenLock = siteConfig.GetUseScreenLock();
        if (m_bUseScreenLock)
        {
            HsCmdCenter.sgPageEvent.SetScreenTimeInitNotiEvent(ScreenLockTimeInitNoti);

            ScreenTimeChangeNotiEvent screentimeChgEvent = null;
            int time = GetScreenTime();
            screentimeChgEvent = HsCmdCenter.sgPageEvent.GetScreenTimeChangeNotiEvent();
            if (screentimeChgEvent != null)
            {
                ConfigArgs config = new ConfigArgs();
                config.ScreenTime = time;
                screentimeChgEvent(0, config);
            }
        }

        HsCmdCenter.sgPageEvent.SetCtrlSideNotiEvent(CtrlSideUILoginAfter);

    }

    void CheckBoxModifierClicked(int groupId, HOTKEY_MOD modifier, ChangeEventArgs changeEventArg)
    {
        bool bMod = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ModifierKeyClicked: [{modifier.ToString()}={bMod}]");
        ListModKey[groupId][(int)modifier] = bMod;

        List<bool> listModKey = ListModKey[groupId];
        SetClipBoardHotKey(groupId, ref listModKey, ListVKey[groupId]);
    }
    void SelectBoxVKeySelected(int groupId, ChangeEventArgs changeEventArg)
    {
        char cVKey = Convert.ToChar(changeEventArg.Value);
        CLog.Here().Information($"VKeySelected: [{cVKey}]");
        ListVKey[groupId] = cVKey;

        List<bool> listModKey = ListModKey[groupId];
        SetClipBoardHotKey(groupId, ref listModKey, ListVKey[groupId]);
    }

    /// <summary>
    /// Getter for AppConfigService
    /// </summary>
    private CLIPALM_TYPE GetClipAlarmType()
    {
        return AppConfigSvc.GetClipAlarmType();
    }
    private bool GetClipAfterSend()
    {
        return AppConfigSvc.GetClipAfterSend();
    }
    private bool GetURLAutoTrans()
    {
        return AppConfigSvc.GetURLAutoTrans();
    }
    private bool GetURLAutoAfterMsg()
    {
        return AppConfigSvc.GetURLAutoAfterMsg();
    }
    private string GetURLAutoAfterBrowser()
    {
        return AppConfigSvc.GetURLAutoAfterBrowser();
    }
    private bool GetRMouseFileAddAfterTrans()
    {
        return AppConfigSvc.GetRMouseFileAddAfterTrans();
    }
    private bool GetAfterBasicChk()
    {
        return AppConfigSvc.GetAfterBasicChk();
    }
    private string GetRecvDownPath(int groupId)
    {
        return AppConfigSvc.GetRecvDownPath(groupId);
    }
    private bool GetFileRecvFolderOpen()
    {
        return AppConfigSvc.GetFileRecvFolderOpen();
    }
    private bool GetRecvDownPathChange()
    {
        return AppConfigSvc.GetRecvDownPathChange();
    }
    private bool GetManualRecvDownChange()
    {
        return AppConfigSvc.GetManualRecvDownChange();
    }
    private bool GetFileRecvTrayFix()
    {
        return AppConfigSvc.GetFileRecvTrayFix();
    }
    private bool GetApprTrayFix()
    {
        return AppConfigSvc.GetApprTrayFix();
    }
    private bool GetUserApprActionTrayFix()
    {
        return AppConfigSvc.GetUserApprActionTrayFix();
    }
    private bool GetUserApprRejectTrayFix()
    {
        return AppConfigSvc.GetUserApprRejectTrayFix();
    }
    private bool GetExitTrayMove()
    {
        return AppConfigSvc.GetExitTrayMove();
    }
    private bool GetStartTrayMove()
    {
        return AppConfigSvc.GetStartTrayMove();
    }
    private bool GetStartProgramReg()
    {
        return AppConfigSvc.GetStartProgramReg();
    }
    private string GetLanguage()
    {
        return AppConfigSvc.GetLanguage();
    }
    //private bool GetUseScreenLock()
    //{
    //    return AppConfigSvc.GetUseScreenLock();
    //}
    private bool GetScreenLock()
    {
        return AppConfigSvc.GetScreenLock();
    }
    private int GetScreenTime()
    {
        return AppConfigSvc.GetScreenTime();
    }
    private string GetLastUpdated()
    {
        return AppConfigSvc.GetLastUpdated();
    }
    private string GetSWVersion()
    {
        return AppConfigSvc.GetSWVersion();
    }
    private LogEventLevel GetLogLevel()
    {
        return AppConfigSvc.GetLogLevel();
    }
    private bool GetUseApprWaitNoti()
    {
        return AppConfigSvc.GetUseApprWaitNoti();
    }

    /// <summary>
    /// Setter for AppConfigService
    /// </summary>
    private void SetClipBoardHotKey(int groupId, ref List<bool> listModKey, char chVKCode)
    {
        string strHotKey = String.Empty;
        foreach(var IsKeyUse in listModKey)
        {
            if(IsKeyUse) strHotKey += "Y,";
            else strHotKey += "N,";
        }
        strHotKey += chVKCode.ToString();
        CLog.Here().Information($"ClipBoardHotKey Set: [{strHotKey}]");

        // UnRegClipboardHotKey(int groupID, bool bAlt, bool bControl, bool bShift, bool bWin, char chVKCode)
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
            bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
            bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
            bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
            Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKCode);
        }
        else
        {
            List<bool> oldModKey = AppConfigSvc.GetClipBoardModifier(groupId);
            char oldVKey = AppConfigSvc.GetClipBoardVKey(groupId);
            Window.UnRegClipboardHotKey(groupId,
                                oldModKey[(int)HOTKEY_MOD.ALT],
                                oldModKey[(int)HOTKEY_MOD.CTRL],
                                oldModKey[(int)HOTKEY_MOD.SHIFT],
                                oldModKey[(int)HOTKEY_MOD.WINDOW],
                                oldVKey);
            // RegClipboardHotKey(int groupID, bool bAlt, bool bControl, bool bShift, bool bWin, char chVKCode)
            Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKCode);
        }
        //SetClipBoardHotKey(int groupId, bool bWin, bool bCtrl, bool bAlt, bool bShift, char chVKCode)
        CtrlSideUISvc.SetClipBoardHotKey(groupId,
                                        listModKey[(int)HOTKEY_MOD.WINDOW],
                                        listModKey[(int)HOTKEY_MOD.CTRL],
                                        listModKey[(int)HOTKEY_MOD.ALT],
                                        listModKey[(int)HOTKEY_MOD.SHIFT],
                                        chVKCode);
    }
    private void SetClipAlarmType(ChangeEventArgs changeEventArg)
    {
        CLIPALM_TYPE alarmType = (CLIPALM_TYPE)Convert.ToInt64(changeEventArg.Value);
        CLog.Here().Information($"ClipAlarmType Set: [{alarmType}]");
        CtrlSideUISvc.SetClipAlarmType(alarmType);
    }
    private void SetClipAfterSend(ChangeEventArgs changeEventArg)
    {
        bool clipAfterSend = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"SendAfterClip Set: [{clipAfterSend}]");
        CtrlSideUISvc.SetClipAfterSend(clipAfterSend);
    }
    private void SetURLAutoTrans(ChangeEventArgs changeEventArg)
    {
        bool urlAutoTrans = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"URLAutoTrans Set: [{urlAutoTrans}]");
        CtrlSideUISvc.SetURLAutoTrans(urlAutoTrans);
    }
    private void SetURLAutoAfterMsg(ChangeEventArgs changeEventArg)
    {
        bool urlAutoAfterMsg = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"Notice After URLAutoTrans Set: [{urlAutoAfterMsg}]");
        CtrlSideUISvc.SetURLAutoAfterMsg(urlAutoAfterMsg);
    }
    private void SetURLAutoAfterBrowser(ChangeEventArgs changeEventArg)
    {
        string urlAutoAfterBrowser = Convert.ToString(changeEventArg.Value);
        CLog.Here().Information($"Notice Type After URLAutoTrans Set: [{urlAutoAfterBrowser}]");
        CtrlSideUISvc.SetURLAutoAfterBrowser(urlAutoAfterBrowser);
    }
    private void SetRMouseFileAddAfterTrans(ChangeEventArgs changeEventArg)
    {
        bool rmouseFileAddAfterTrans = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"AutoTrans After RightMouse FileAdd Set: [{rmouseFileAddAfterTrans}]");
        CtrlSideUISvc.SetRMouseFileAddAfterTrans(rmouseFileAddAfterTrans);
    }
    private void SetAfterBasicChk(ChangeEventArgs changeEventArg)
    {
        bool afterBasicChk = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"Check Post Approval Set: [{afterBasicChk}]");
        CtrlSideUISvc.SetAfterBasicChk(afterBasicChk);
    }
    private async void SetRecvDownPath(int groupId, string stPath)
    {
        CLog.Here().Information($"RecvDownPath Set: [{stPath}]");
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            stPath = stPath.Replace("/", "\\");
        }
        else
        {
            stPath = stPath.Replace("\\", "/");
        }
        bool bFind = false;
        int count = AppConfigSvc.AppConfigInfo.RecvDownPath.Count;
        string strPreDownPath = "";
        for (int i = 0; i < count; i++)
        {
            if (groupId == i)
            {
                strPreDownPath = GetRecvDownPath(groupId);
                continue;
            }

            if (stPath.Equals(AppConfigSvc.AppConfigInfo.RecvDownPath[i]))
            {
                bFind = true;
            }
        }
        if (bFind)
        {
            CtrlSideUISvc.SetRecvDownPath(groupId, strPreDownPath);
            await Task.Delay(1);    // flush UI changes

            CLog.Here().Information($"RecvDownPath Set: [{strPreDownPath}]");
            System.Threading.Thread.Sleep(500);
            string strMsg = XmlConf.GetWarnMsg("W_0244");                                   // 설정하려는 수신폴더는 다른망의 수신폴더와 동일합니다./r/n다시 설정하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }
        HsCmdCenter.SetDownLoadPath(groupId, stPath);
        CtrlSideUISvc.SetRecvDownPath(groupId, stPath);
    }
    private async void SetRecvDownPath(int groupId, ChangeEventArgs changeEventArg)
    {
        string recvDownPath = Convert.ToString(changeEventArg.Value);
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            recvDownPath = recvDownPath.Replace("/", "\\");
        }
        else
        {
            recvDownPath = recvDownPath.Replace("\\", "/");
        }
        bool bFind = false;
        int count = AppConfigSvc.AppConfigInfo.RecvDownPath.Count;
        string strPreDownPath = "";
        for (int i = 0; i < count; i++)
        {
            if (groupId == i)
            {
                strPreDownPath = GetRecvDownPath(groupId);
                continue;
            }

            if (recvDownPath.Equals(AppConfigSvc.AppConfigInfo.RecvDownPath[i]))
            {
                bFind = true;
            }
        }
        if (bFind)
        {
            CtrlSideUISvc.SetRecvDownPath(groupId, strPreDownPath);
            await Task.Delay(1);    // flush UI changes

            CLog.Here().Information($"RecvDownPath Set: [{strPreDownPath}]");
            System.Threading.Thread.Sleep(500);
            string strMsg = XmlConf.GetWarnMsg("W_0244");                                   // 설정하려는 수신폴더는 다른망의 수신폴더와 동일합니다./r/n다시 설정하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }
        CLog.Here().Information($"RecvDownPath Set: [{recvDownPath}]");
        HsCmdCenter.SetDownLoadPath(groupId, recvDownPath);
        CtrlSideUISvc.SetRecvDownPath(groupId, recvDownPath);
    }
    private void SetFileRecvFolderOpen(ChangeEventArgs changeEventArg)
    {
        bool fileRecvFolderOpen = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"FileRecvFolderOpen Set: [{fileRecvFolderOpen}]");
        CtrlSideUISvc.SetFileRecvFolderOpen(fileRecvFolderOpen);
    }
    private void SetRecvDownPathChange(bool recvDownPathChange)
    {
        CtrlSideUISvc.SetRecvDownPathChange(recvDownPathChange);
    }
    private void SetManualRecvDownChange(ChangeEventArgs changeEventArg)
    {
        bool manualRecvDownChange = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ManualRecvDownChange Set: [{manualRecvDownChange}]");
        CtrlSideUISvc.SetManualRecvDownChange(manualRecvDownChange);
    }
    private void SetFileRecvTrayFix(ChangeEventArgs changeEventArg)
    {
        bool fileRecvTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"FileRecvTrayFix Set: [{fileRecvTrayFix}]");
        CtrlSideUISvc.SetFileRecvTrayFix(fileRecvTrayFix);
    }
    private void SetApprTrayFix(ChangeEventArgs changeEventArg)
    {
        bool apprTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ApprTrayFix Set: [{apprTrayFix}]");
        CtrlSideUISvc.SetApprTrayFix(apprTrayFix);
    }
    private void SetUserApprActionTrayFix(ChangeEventArgs changeEventArg)
    {
        bool userApprActionTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"UserApprActionTrayFix Set: [{userApprActionTrayFix}]");
        CtrlSideUISvc.SetUserApprActionTrayFix(userApprActionTrayFix);
    }
    private void SetUserApprRejectTrayFix(ChangeEventArgs changeEventArg)
    {
        bool userApprRejectTrayFix = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"UserApprRejectTrayFix Set: [{userApprRejectTrayFix}]");
        CtrlSideUISvc.SetUserApprRejectTrayFix(userApprRejectTrayFix);
    }
    private void SetExitTrayMove(ChangeEventArgs changeEventArg)
    {
        bool exitTrayMove = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ExitTrayMove Set: [{exitTrayMove}]");
        Window.SetTrayUse(exitTrayMove);
        CtrlSideUISvc.SetExitTrayMove(exitTrayMove);
    }
    private void SetStartTrayMove(ChangeEventArgs changeEventArg)
    {
        bool startTrayMove = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"StartTrayMove Set: [{startTrayMove}]");
        CtrlSideUISvc.SetStartTrayMove(startTrayMove);
    }
    private void SetStartProgramReg(ChangeEventArgs changeEventArg)
    {
        bool startProgramReg = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"StartProgramReg Set: [{startProgramReg}]");
        if (startProgramReg) Window.RegStartProgram();
        else                 Window.UnRegStartProgram();
        CtrlSideUISvc.SetStartProgramReg(startProgramReg);
    }
    private void SetLanguage(ChangeEventArgs changeEventArg)
    {
        string language = Convert.ToString(changeEventArg.Value);
        CLog.Here().Information($"Language Set: [{language}]");
        CtrlSideUISvc.SetLanguage(language);
    }
    private void SetScreenLock(ChangeEventArgs changeEventArg)
    {
        bool screenLock = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"ScreenLock Set: [{screenLock}]");
        CtrlSideUISvc.SetScreenLock(screenLock);
    }
    private async void SetScreenTime(ChangeEventArgs changeEventArg)
    {
        int screenTime = Convert.ToInt32(changeEventArg.Value);
        if((screenTime > m_nSvrTime) && (m_nSvrTime!=0) )
        {
            int PrevScreentTime = GetScreenTime();
            CtrlSideUISvc.SetScreenTime(screenTime);
            await Task.Delay(1);    // flush UI changes

            CtrlSideUISvc.SetScreenTime(PrevScreentTime);
            await Task.Delay(1);    // flush UI changes

            CLog.Here().Information($"ScreeenTime Set: [{PrevScreentTime}]");
            System.Threading.Thread.Sleep(500);
            string strMsg = XmlConf.GetWarnMsg("W_0073");
            strMsg = String.Format(strMsg, m_nSvrTime);
            ShowMessage("warn", strMsg);
            return;
        }
        CLog.Here().Information($"ScreeenTime Set: [{screenTime}]");
        CtrlSideUISvc.SetScreenTime(screenTime);

        ScreenTimeChangeNotiEvent screentimeChgEvent = null;
        screentimeChgEvent = HsCmdCenter.sgPageEvent.GetScreenTimeChangeNotiEvent();
        if (screentimeChgEvent != null)
        {
            ConfigArgs config = new ConfigArgs();
            config.ScreenTime = screenTime;
            screentimeChgEvent(0, config);
        }
    }
    private void SetLogLevel(ChangeEventArgs changeEventArg)
    {
        LogEventLevel logLevel = LogEventLevel.Information;
        switch(changeEventArg.Value)
        {
            case "Verbose":
                logLevel = LogEventLevel.Verbose;
                break;
            case "Debug":
                logLevel = LogEventLevel.Debug;
                break;
            case "Information":
                logLevel = LogEventLevel.Information;
                break;
            case "Warning":
                logLevel = LogEventLevel.Warning;
                break;
            case "Error":
                logLevel = LogEventLevel.Error;
                break;
            case "Fatal":
                logLevel = LogEventLevel.Fatal;
                break;
        }
        CLog.Here().Fatal($"LogLevel Set: [{logLevel}]");
        CtrlSideUISvc.SetLogLevel(logLevel);
    }
    private void SetUseApprWaitNoti(ChangeEventArgs changeEventArg)
    {
        bool useApprWaitNoti = Convert.ToBoolean(changeEventArg.Value);
        CLog.Here().Information($"UseApprWaitNoti Set: [{useApprWaitNoti}]");
        CtrlSideUISvc.SetUseApprWaitNoti(useApprWaitNoti);
    }

    private int GetCountSGNetwork()
    {
        return NetWorkSvc.NetWorkInfo.Count;
    }
    private List<ISGNetwork> GetSGNetworkList()
    {
        return NetWorkSvc.NetWorkInfo;
    }

    public void ScreenLockTimeInitNoti(int groupID, ConfigArgs e)
    {
        if (m_bUseScreenLock)
        {
            int time = e.ScreenTime;
            m_nSvrTime = time;
            if (time > 0)
            {
                int nLocalTime = GetScreenTime();
                if(time<nLocalTime)
                {
                    nLocalTime = time;
                    ChangeEventArgs args = new ChangeEventArgs();
                    args.Value = time;
                    SetScreenTime(args);
                    ScreenTimeChangeNotiEvent screentimeChgEvent = null;
                    screentimeChgEvent = HsCmdCenter.sgPageEvent.GetScreenTimeChangeNotiEvent();
                    if(screentimeChgEvent!=null)
                    {
                        ConfigArgs config = new ConfigArgs();
                        config.ScreenTime = time;
                        screentimeChgEvent(groupID, config);
                    }
                }
            }
        }
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void CtrlSideUILoginAfter()
    {
        int loginDataCount = HsCmdCenter.GetLoginDataCount();
        m_bUseClipBoard = false;
        m_bUseURLRedirection = false;
        m_bUseFileSend = false;
        bool bManualDown = false;
        bool bAfterCheckHide = false;
        for (int i = 0; i < loginDataCount; i++)
        {
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(i);
            if (sgLoginData == null)
                continue;

            bool bTmpUseClipBoard = sgLoginData.GetClipboard();
            bool bTmpUseURLRedirection = sgLoginData.GetURLRedirect();
            bool bTmpFileSend = sgLoginData.GetFileTrans();
            siteConfig.SetUseClipBoard(i, bTmpUseClipBoard);
            siteConfig.SetUseURLRedirection(i, bTmpUseURLRedirection);
            siteConfig.SetUseFileSend(i, bTmpFileSend);
            m_bUseClipBoard |= sgLoginData.GetClipboard();
            m_bUseURLRedirection |= sgLoginData.GetURLRedirect();
            m_bUseFileSend |= sgLoginData.GetFileTrans();
            bManualDown |= sgLoginData.GetManualDownload();
            bAfterCheckHide |= sgLoginData.GetAfterChkHide();
        }

        if(m_bUseClipBoard)
        {
            m_bUseClipAlarmType = siteConfig.GetUseClipAlarmTypeChange();
            m_bUseClipCopyAndSend = siteConfig.GetUseClipCopyAndSend();
            m_bUseClipBoard = (m_bUseClipAlarmType | m_bUseClipCopyAndSend);
        }
        if(m_bUseURLRedirection)
        {
            m_bUseURLRedirectionAlarm = siteConfig.GetUseURLRedirectionAlarm();
            m_bUseURLRedirectionAlarmType = siteConfig.GetUseURLRedirectionAlarmType();
            m_bUseURLRedirection = (m_bUseURLRedirectionAlarm | m_bUseURLRedirectionAlarmType);
        }
        if (m_bUseFileSend)
        {
            m_bRFileAutoSend = siteConfig.GetRFileAutoSend();
            m_bAfterApprAutoCheck = siteConfig.GetAfterApprAutoCheck();
            if (bAfterCheckHide)
                m_bAfterApprAutoCheck = false;
            m_bUseFileSend = (m_bRFileAutoSend | m_bAfterApprAutoCheck);
        }


        m_bRecvFolderOpen = siteConfig.GetRecvFolderOpen();

        if (bManualDown)
            m_bManualDownFolderChange = siteConfig.GetManualDownFolderChange();
        else
            m_bManualDownFolderChange = bManualDown;

        m_bFileRecvAlarmRetain = siteConfig.GetFileRecvAlarmRetain();
        m_bApprCountAlarmRetain = siteConfig.GetApprCountAlarmRetain();
        m_bApprCompleteAlarmRetain = siteConfig.GetApprCompleteAlarmRetain();
        m_bApprRejectAlarmRetain = siteConfig.GetApprRejectAlarmRetain();
        m_bUseApprCountAlaram = siteConfig.GetUseApprCountAlaram();

        m_bAlarmTray = (m_bFileRecvAlarmRetain | m_bApprCountAlarmRetain | m_bApprCompleteAlarmRetain | m_bApprRejectAlarmRetain | m_bUseApprCountAlaram);

        m_bUseCloseTrayMove = siteConfig.GetUseCloseTrayMove();
        m_bUseStartTrayMove = siteConfig.GetUseStartTrayMove();
        m_bTrayMove = (m_bUseCloseTrayMove | m_bUseStartTrayMove);

        m_bUseStartProgramReg = siteConfig.GetUseStartProgramReg();

        m_bUseLanguageSet = siteConfig.GetUseLanguageSet();

        m_bLogLevelSet = siteConfig.GetLogLevelSet();

        StateHasChanged();
    }

    public bool GetRecvDownPathChangeHide(int groupID)
    {
        return !(siteConfig.GetUseRecvFolderChange(groupID));
    }

    public void OpenCheckUpdate()
    {
        refSGCheckUpdate.OpenPopUp();
        CLog.Here().Information($"- OpenCheckUpdate");
    }
    public void CloseCheckUpdate()
    {
        refSGCheckUpdate.ClosePopUp();
        CLog.Here().Information($"- CloseCheckUpdate");
    }
    private void OpenDownloadUpdate()
    {
        refSGDownloadUpdate.OpenPopUp();
        CLog.Here().Information($"- OpenDownloadUpdate");
    }
    private void CloseDownloadUpdate()
    {
        refSGDownloadUpdate.ClosePopUp();
        CLog.Here().Information($"- CloseDownloadUpdate");
    }
    public void OpenMessageNotification(string causeDescription)
    {
        refSGMessageNotification.OpenPopUp(causeDescription);
        CtrlSideUISvc.EmitNotifyStateChangedCtrlSide();
        CLog.Here().Information($"- OpenMessageNotification");
    }
    private void CloseMessageNotification()
    {
        refSGMessageNotification.ClosePopUp();
        CLog.Here().Information($"- CloseMessageNotification");
    }
}
