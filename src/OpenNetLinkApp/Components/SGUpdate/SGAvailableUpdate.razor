@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading
@using System.Net
@using System.Text

@using Serilog
@using Serilog.Events
@using AgLogManager

@using System.Runtime.InteropServices

@using NetSparkleUpdater
@using NetSparkleUpdater.Enums
@using NetSparkleUpdater.Events
@using NetSparkleUpdater.SignatureVerifiers
@using NetSparkleUpdater.Downloaders

@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject XmlConfService XmlConf
@inject HSCmdCenter HsCmdCenter
@inject IJSRuntime JSRuntime
@inject PageStatusService pageService

<div class="modal fade" id="modal-availableupdate" aria-hidden="true" data-backdrop="static" data-keyboard="false" style="z-index:5000; color:#737373">
    <div class="modal-dialog modal-default">
        <div class="modal-content">
            <div class="modal-header-default">
                <div class="modal-title"><i class="fas fa-cog blue-txt mr-2 "></i>@XmlConf.GetTitle("T_ETC_SOFTWARE_UPDATE")</div>
                @if (IsCloseVisible)
                {
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@(async () => AvailableUpdateButNotUpdate())">
                        <span aria-hidden="true">&times;</span>
                    </button>
                }
            </div>
            <div class="modal-body-default_up">
                <!-- content -->

                <div class=" alert_txt ">
                    <div class="col-md-12">
                        <div class="row">

                            <div class="col-md-1"><i class="fas fa-download fa-3x" style="color:#609c00; "></i></div>
                            <div class="col-md-11">
                                <div class="mb-1" style="font-size:20px; font-weight: 700;">
                                    @(TitleHeaderText)
                                </div>
                                <div style=" font-size:16px; color:#737373; font-weight: normal;">
                                    @(InfoText)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12 update_list">
                        @((MarkupString)ReleaseNotes)
                    </div>
                </div>

                <!--/. content -->
            </div>
            <div class="modal-footer-default clearfix">
                <div class="container">
                    @*@if (IsSkipVisible)   //'이 버전 넘기기' 처리 시 다른 Client에서도 해당 버전을 받을 수 없기 떄문에 해당 기능 제거
                        {
                        <button type="button" class="btn bg-gradient-secondary pl-4 pr-4 mr-1 float-left" @onclick="@(async () => SkipThisUpdateVersion())">이 버전 넘기기</button>
                        }*@
                    @if (IsRemindMeLaterVisible)
                    {
                        <button type="button" class="btn bg-gradient-secondary pl-4 pr-4 mr-1 float-right" @onclick="@(async () => RemindMeLater())">@XmlConf.GetTitle("T_ETC_REMIND_ME_LATER")</button>
                    }
                    <button type="button" class="btn bg-gradient-primary pl-4 pr-4 mr-1 float-right" @onclick="@(async () => NowDownloadAndUpdate())">@XmlConf.GetTitle("T_ETC_NOW_DOWNLOAD_AND_UPDATE")</button>
                </div>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->
@code
{

    [Parameter]
    public ISGCtrlSideUIService CtrlSideUISvc { get; set; }
    [Parameter]
    public ISGAppUpdaterService AppUpdaterSvc { get; set; }
    [Parameter]
    public EventCallback OnClosePopUp { get; set; }

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGAvailableUpdate>();

    private int popUpGroupID;
    private SparkleUpdater Sparkle { get; set; } = null;
    private List<AppCastItem> Updates { get; set; } = null;
    private bool IsDownloaded { get; set; } = false;
    private ReleaseNotesGrabber _ReleaseNotesGrabber { get; set; } = null;
    private CancellationToken _CancellationToken { get; set; }
    private CancellationTokenSource _CancellationTokenSource { get; set; } = null;

    private string _titleHeaderText;
    private string _infoText;

    private bool _isRemindMeLaterVisible = true;

    private bool _isCloseVisible = true;
    //'이 버전 넘기기' 처리 시 다른 Client에서도 해당 버전을 받을 수 없기 떄문에 해당 기능 제거
    //private bool _isSkipVisible = true;

    private UpdateAvailableResult _userResponse = UpdateAvailableResult.None;
    public string _releaseNotes = "";
    ISGSiteConfigService siteConfig;

    public string TitleHeaderText
    {
        get => _titleHeaderText;
        set { _titleHeaderText = value; CtrlSideUISvc.EmitNotifyStateChangedCtrlSide(); }
    }

    public string InfoText
    {
        get => _infoText;
        set { _infoText = value; CtrlSideUISvc.EmitNotifyStateChangedCtrlSide(); }
    }

    public bool IsRemindMeLaterVisible
    {
        get => _isRemindMeLaterVisible;
        set { _isRemindMeLaterVisible = value; CtrlSideUISvc.EmitNotifyStateChangedCtrlSide(); }
    }

    public bool IsCloseVisible
    {
        get => _isCloseVisible;
        set { _isCloseVisible = value; CtrlSideUISvc.EmitNotifyStateChangedCtrlSide(); }
    }

    @*public bool IsSkipVisible
        {
        get => _isSkipVisible;
        set { _isSkipVisible = value; CtrlSideUISvc.EmitNotifyStateChangedCtrlSide(); }
        }*@

    public string ReleaseNotes
    {
        get => _releaseNotes;
        set { _releaseNotes = value; CtrlSideUISvc.EmitNotifyStateChangedCtrlSide(); }
    }

    public UpdateAvailableResult UserResponse
    {
        get => _userResponse;
    }

    private async void InitializeSGAvailableUpdate(SparkleUpdater sparkle, List<AppCastItem> items, bool isUpdateAlreadyDownloaded = false,
                                            string separatorTemplate = "", string headAddition = "")
    {
        try
        {


            siteConfig = SGAppMgrSvc.SiteConfigInfoService;
            CLog.Here().Information($"- InitializeSGAvailableUpdate...");

            var downReleaseNote = await AppUpdaterSvc.DownloadReleaseNote(popUpGroupID);
            if (!downReleaseNote.result)
                return;

            await Task.Run(() =>
            {
                string appName = downReleaseNote.appName;
                string versionString = downReleaseNote.oldVersion;
                string newVersion = downReleaseNote.newVersion;
                ReleaseNotes = downReleaseNote.releaseNotes;

                TitleHeaderText = XmlConf.GetTitle("T_PATCH_TITLE");
                TitleHeaderText += newVersion;

                InfoText = XmlConf.GetTitle("T_PATCH_DETAIL_TEXT");

                //TitleHeaderText = string.Format("A new version of {0} is available.", appName ?? "the application");
                //var downloadInstallText = isUpdateAlreadyDownloaded ? "install" : "download";
                @*if (!string.IsNullOrEmpty(versionString))
                    InfoText = $"{appName} {newVersion} is now available (you have {versionString}). Would you like to {downloadInstallText} it now?";
                else
                    InfoText = $"Would you like to {downloadInstallText} it now?";*@

                //강제 업데이트 기능 사용 시 이 버전 넘기기, 나중에 업데이트 버튼 숨김
                if (SGAppMgrSvc.OpConfigInfoService.GetUseForceUpdate())
                {
                    IsRemindMeLaterVisible = false;
                    IsCloseVisible = false;
                    //IsSkipVisible = false;
                }
                else
                {
                    //크리티컬한 업데이인 경우엔, SKIP이나 나중에는 하지 못하도록
                    bool isUserMissingCriticalUpdate = items.Any(x => x.IsCriticalUpdate);
                    if (isUserMissingCriticalUpdate)
                        IsRemindMeLaterVisible = IsCloseVisible = false;
                    else
                        IsRemindMeLaterVisible = IsCloseVisible = true;
                    //IsSkipVisible = isUserMissingCriticalUpdate == false;
                }

                //[사용안함] SGAppUpdaterService로 공통화
                //_ReleaseNotesGrabber = new SelfReleaseNotesGrabber(separatorTemplate, headAddition, sparkle);
                //
                //AppCastItem item = items.FirstOrDefault();
                //
                //TitleHeaderText = string.Format("A new version of {0} is available.", item?.AppName ?? "the application");
                //var downloadInstallText = isUpdateAlreadyDownloaded ? "install" : "download";
                //if (item != null)
                //{
                //    var versionString = "";
                //    try
                //    {
                //        // Use try/catch since Version constructor can throw an exception and we don't want to
                //        // die just because the user has a malformed version string
                //        Version versionObj = new Version(item.AppVersionInstalled);
                //        versionString = NetSparkleUpdater.Utilities.GetVersionString(versionObj);
                //    }
                //    catch
                //    {
                //        versionString = "?";
                //    }
                //    InfoText = string.Format("{0} {3} is now available (you have {1}). Would you like to {2} it now?", item.AppName, versionString,
                //        downloadInstallText, item.Version);
                //}
                //else
                //{
                //    InfoText = string.Format("Would you like to {0} it now?", downloadInstallText);
                //}

                 //_CancellationTokenSource = new CancellationTokenSource();
                //_CancellationToken = _CancellationTokenSource.Token;
                //
                //ReleaseNotes = _ReleaseNotesGrabber.GetLoadingText();
                //LoadReleaseNotes(items);

                //_CancellationTokenSource = new CancellationTokenSource();
                //_CancellationToken = _CancellationTokenSource.Token;
                //
                //ReleaseNotes = _ReleaseNotesGrabber.GetLoadingText();
                //LoadReleaseNotes(items);
            });

            //    StateHasChanged();
            CLog.Here().Information($"- InitializeSGAvailableUpdate...Done");
        }
        catch (Exception ex)
        {
            CLog.Here().Error($"InitializeSGAvailableUpdate - Exception {ex.ToString()}");
        }
    }

    private async void LoadReleaseNotes(List<AppCastItem> items)
    {
        CLog.Here().Information($"- LoadReleaseNotes...");

        AppCastItem latestVersion = items.OrderByDescending(p => p.Version).FirstOrDefault();
        string releaseNotes = await _ReleaseNotesGrabber.DownloadAllReleaseNotes(items, latestVersion, _CancellationToken);
        ReleaseNotes = releaseNotes;

        CLog.Here().Information($"- LoadReleaseNotes...Done");
    }

    public async void OpenPopUp(int groupId, SparkleUpdater sparkle, List<AppCastItem> updates, bool isDownloaded = false)
    {
        CLog.Here().Information($"- OpenAvailableUpdate");

        popUpGroupID = groupId;
        Sparkle = sparkle;
        Updates = updates;
        IsDownloaded = isDownloaded;

        InitializeSGAvailableUpdate(Sparkle, Updates, IsDownloaded, separatorTemplate: "", headAddition: "");

        object[] param = { "modal-availableupdate" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
        object[] param2 = { "1000" };
        await JSRuntime.InvokeAsync<object>("changeModalZIndex", param2);
        //object[] param3 = { "black" };
        //await JSRuntime.InvokeAsync<object>("changeModalFontColor", param3);

        object[] param4 = { "0" };
        await JSRuntime.InvokeAsync<object>("changeLeftSideBarZIndex", param4);
    }

    private async void AvailableUpdateButNotUpdate()
    {
        CLog.Here().Information($"- AvailableUpdateButNotUpdate");
        AppUpdaterSvc.SetInitUpdateStatus();

        await Task.Run(() =>
        {
            OnClosePopUp.InvokeAsync(null);
        });
    }

    public async void ClosePopUp()
    {
        CLog.Here().Information($"- CloseAvailableUpdate");

        object[] param = { "modal-availableupdate" };
        await JSRuntime.InvokeAsync<object>("closePopUp", param);
        object[] param2 = { "1024" };
        await JSRuntime.InvokeAsync<object>("changeModalZIndex", param2);
        //object[] param3 = { "#C2C7D0" };
        //await JSRuntime.InvokeAsync<object>("changeModalFontColor", param3);

        object[] param5 = { "1101" };
        await JSRuntime.InvokeAsync<object>("changeLeftSideBarZIndex", param5);
    }

    private async void SkipThisUpdateVersion()
    {
        CLog.Here().Information($"- SkipThisUpdateVersion");
        AppUpdaterSvc.SetInitUpdateStatus();

        await Task.Run(() =>
        {
            AppUpdaterSvc.SkipUpdateClick(popUpGroupID,
                Updates.OrderByDescending(p => p.Version).FirstOrDefault()
            );

            ClosePopUp();
        });
    }
    private async void RemindMeLater()
    {
        CLog.Here().Information($"- RemindMeLater");
        AppUpdaterSvc.SetInitUpdateStatus();

        await Task.Run(() =>
        {
            OnClosePopUp.InvokeAsync(null);
        });
    }
    private async void NowDownloadAndUpdate()
    {
        CLog.Here().Information($"- NowDownloadAndUpdate");

        await Task.Run(() =>
        {
            // Now Download and Install
            AppUpdaterSvc.DownloadUpdateClick();
        });
    }
}