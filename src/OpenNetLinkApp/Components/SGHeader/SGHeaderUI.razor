@using System.Diagnostics
@using System.Timers
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Data.SGQuery
@using Serilog
@using Serilog.Events
@using AgLogManager
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject IJSRuntime JSRuntime
@inject XmlConfService xmlConf
@inject HSCmdCenter HsCmdCenter
@inject PageStatusService pageService
@inject WebWindow Window
<!-- Navbar -->
<!-- Left navbar links -->
<ul class="navbar-nav">
    <li class="nav-item">
        <a class="nav-link white_font" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
    </li>
    <li class="nav-item d-none d-sm-inline-block">
        <!-- <a href="#" class="nav-link pl-1 white_font">자료전송</a> -->
        @if (String.IsNullOrEmpty(SideBarUISvc.ActiveMenu?.Path ?? ""))
        {
            <a class="nav-link pl-1 white_font">@(GetDescription())</a>
        }
        else
        {
            <a href="@SideBarUISvc.ActiveMenu.Path" class="nav-link pl-1 white_font">@(GetDescription())</a>
        }
    </li>
</ul>

<!-- Right navbar links -->
<ul class="navbar-nav ml-auto">
    <!-- user info -->
    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <i class="fas fa-user-alt "></i>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">

            <div class="dropdown-header user-header">
                <!-- 아바타 이미지 사용안함 -->
                <!-- <img src="@stProfilePhotoPath" alt="User Avatar" class="img-size-100 img-circle m-3"> -->
                <h5 class="m-0 strong">@(GetUserInfo()?.UserName)</h5>
                <span class="small">@(GetUserInfo()?.DeptName)</span>
            </div>

            <div class="dropdown-divider"></div>
            <div class="dropdown-footer clearfix">
                <button @onclick="goToUserInfo" type="button" class="btn btn-block btn-outline-secondary col-md-5 float-left">@xmlConf.GetTitle("T_ETC_USER_INFO")</button>            <!--사용자 정보-->
                <button @onclick="doLogOut" type="button" class="btn btn-block btn-outline-secondary col-md-4 float-right mt-0">@xmlConf.GetTitle("T_ETC_LOGOUT")</button>           <!--로그아웃-->
            </div>
        </div>
    </li>
    <!-- /.user info -->
    <!-- ClipBoard Dropdown Menu -->
    <li class="nav-item dropdown show">

        @if (bClipboardMultiItem)
        {
            <a class="nav-link white_font" data-toggle="dropdown" aria-expanded="true" style="cursor:pointer;" title="@xmlConf.GetTitle("T_TOOL_CLIPBOARD")">
                <i class="fas fa-object-ungroup"></i>
            </a>
        }
        else
        {
            // 단일망 접속 - 단일 목적지
            <a class="nav-link white_font" aria-expanded="true" style="cursor:pointer;" title="@xmlConf.GetTitle("T_TOOL_CLIPBOARD")" @onclick="(e => ClipboardSend(0))">
                <i class="fas fa-object-ungroup"></i>
            </a>
        }

        @*<a class="nav-link white_font" aria-expanded="true" style="cursor:pointer;" title=@xmlConf.GetTitle("T_TOOL_CLIPBOARD") @onclick="(e => ClipboardSend())">
                    <i class="fas fa-object-ungroup"></i>
            </a>*@

        @if (bClipboardMultiItem && listNetWorkData != null)
        {

    <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right" style="left: inherit; right: 0px; width:80px;">


        @foreach (var Netitem in listNetWorkData)
        {

            @if (bAddedClipBoardItem)
            {
                <div class="dropdown-divider"></div>
            }

            @if (pageService.GetConnectStatus(Netitem.GroupID))
            //@if (true)
            {

                g_dicDestSysPos = pageService.GetTargetSystemList(Netitem.GroupID);

                @if (g_dicDestSysPos != null && g_dicDestSysPos.Count > 1)
                {
                    // 목적망이 2곳 이상(3망일때)
                    @foreach (var itemData in g_dicDestSysPos)
                    {

                        @if (itemData.Value.nIdx != 0 && itemData.Key.Length > 0 && itemData.Value.strDestSysid.Length > 0 && itemData.Value.bUseClipTrans)
                        {

                            @if (bAddedClipBoardItem)
                            {
                                <div class="dropdown-divider"></div>
                            }

                            <a style="cursor:pointer;" class="dropdown-item" @onclick="(e => ClipboardSend(Netitem.GroupID, itemData))">
                                @*href="#" *@
                                <!-- Message Start -->
                                <div class="media p-2">
                                    <div class="media-body">
                                        <h3 class="dropdown-item-title font-weight-bold mb-2">
                                            <i class="fas fa-copy mr-2"></i>
                                            @Netitem.FromName
                                            <i class="fas fa-long-arrow-alt-right p-1"></i>
                                            @itemData.Key
                                        </h3>
                                        <p class="text-xs">@xmlConf.GetInfoMsg("I_0214")</p>
                                    </div>
                                </div>
                                <!-- Message End -->
                            </a>

                            bAddedClipBoardItem = true;
                        }

                    }

                }
                else
                {
                    // 목적망이 1곳일때
                    <a style="cursor:pointer;" class="dropdown-item" @onclick="(e => ClipboardSend(Netitem.GroupID))">
                        <!-- Message Start -->
                        <div class="media p-2">
                            <div class="media-body">
                                <h3 class="dropdown-item-title font-weight-bold mb-2">
                                    <i class="fas fa-copy mr-2"></i>
                                    @Netitem.FromName
                                    <i class="fas fa-long-arrow-alt-right p-1"></i>
                                    @Netitem.ToName
                                </h3>
                                <p class="text-xs">@xmlConf.GetInfoMsg("I_0214")</p>
                            </div>
                        </div>
                        <!-- Message End -->
                    </a>

                    bAddedClipBoardItem = true;
                }

            }
        }
    </div>

        }
    </li>
    <!-- /. ClipBoard Dropdown Menu -->
    <!-- Messages Dropdown Menu -->
    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <!--<i class="fas fa-comments "></i>-->
            <i class="@GetNotiIcon() "></i>
            @if ((nNotiCount = GetNotiInfoCount(strUserSeq)) > 0)
            {
                //<span class="badge badge-danger navbar-badge">5</span>-->
                <span class="@GetNotiBadge() navbar-badge">@(nNotiCount)</span>
            }
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right" style="z-index:2000;">
            @if (nNotiCount > 0)@foreach (var NotiItem in GetNotiInfoList(strUserSeq, 5))
                {
                    @if (NotiItem.Head.Length > 16)
                    {
                        NotiViewHead = NotiItem.Head.Substring(0, 16) + "...";
                    }
                    else
                    {
                        NotiViewHead = NotiItem.Head;
                    }
                    @if (NotiItem.Body.Length > 16)
                    {
                        NotiViewBody = NotiItem.Body.Substring(0, 16) + "...";
                    }
                    else
                    {
                        NotiViewBody = NotiItem.Body;
                    }
                    @if (String.IsNullOrEmpty(NotiItem.Path))
                    {
                        <a class="dropdown-item">
                            <!-- Message Start -->
                            <div class="media p-2">
                                <!-- 아바타 이미지 사용안함 -->
                                <!-- <img src="@NotiItem.IconImage" alt="User Avatar" class="img-size-50 mr-3 img-circle"> -->
                                <div class="media-body">
                                    <h3 class="dropdown-item-title font-weight-bold mb-2">
                                        <span class="float-right"><a @onclick="@(async () => DelNotiInfo(NotiItem))"><i class="fas fa-times fa-lg"></i></a></span>
                                        @NotiViewHead
                                        <span class="float-right text-sm text-danger"><i class="fas fa-star"></i></span>
                                    </h3>
                                    <p class="text-xs">@NotiViewBody</p>
                                    <p class="text-xs text-muted mt-1"><i class="far fa-clock mr-1"></i>@(NotiItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</p>
                                </div>
                            </div>
                            <!-- Message End -->
                        </a>
                    }
                    else
                    {
                        <a href="@NotiItem.Path" class="dropdown-item">
                            <!-- Message Start -->
                            <div class="media p-2">
                                <!-- 아바타 이미지 사용안함 -->
                                <!-- <img src="@NotiItem.IconImage" alt="User Avatar" class="img-size-50 mr-3 img-circle"> -->
                                <div class="media-body">
                                    <h3 class="dropdown-item-title font-weight-bold mb-2">
                                        <span class="float-right"><a @onclick="@(async () => DelNotiInfo(NotiItem))"><i class="fas fa-times fa-lg"></i></a></span>
                                        @NotiViewHead
                                        <span class="float-right text-sm text-danger"><i class="fas fa-star"></i></span>
                                    </h3>
                                    <p class="text-xs">@NotiViewBody</p>
                                    <p class="text-xs text-muted mt-1"><i class="far fa-clock mr-1"></i>@(NotiItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</p>
                                </div>
                            </div>
                            <!-- Message End -->
                        </a>
                    }
                    <div class="dropdown-divider"></div>
                }
            @if (String.IsNullOrEmpty(GetNotiPath()))
            {
                @*<a class="dropdown-item dropdown-footer text-xs p-2">전체 메세지 보기</a>*@
                <a href="/messageList" class="dropdown-item dropdown-footer text-xs p-2">@xmlConf.GetTitle("T_ETC_TOTALMSGLOOK")</a> <!--전체 메세지 보기-->
            }
            else
            {
                @*<a href="@GetNotiPath()" class="dropdown-item dropdown-footer text-xs p-2">전체 메세지 보기</a>*@
                <a href="/messageList" class="dropdown-item dropdown-footer text-xs p-2">@xmlConf.GetTitle("T_ETC_TOTALMSGLOOK")</a> <!--전체 메세지 보기-->
            }
        </div>
    </li>
    <!-- Notifications Dropdown Menu -->


    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <!--<i class="fas fa-bell"></i>-->
            <i class="@GetAlarmIcon() "></i>
            @if ((nAlarmCount = GetAlarmInfoCount(strUserSeq)) > 0)
            {
                //<span class="badge badge-warning navbar-badge">15</span>
                <span class="@GetAlarmBadge() navbar-badge">@(nAlarmCount)</span>
            }
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
            <span class="dropdown-item dropdown-header">@nAlarmCount Notifications</span>
            @if (nAlarmCount > 0)@foreach (var AlarmItem in GetAlarmInfoList(strUserSeq, 5))
                {
                    <div class="dropdown-divider"></div>
                    @if (AlarmItem.Head.Length > 20)
                    {
                        AlarmViewHead = AlarmItem.Head.Substring(0, 20) + "...";
                    }
                    else
                    {
                        AlarmViewHead = AlarmItem.Head;
                    }
                    @if (AlarmItem.Body.Length > 20)
                    {
                        AlarmViewBody = AlarmItem.Body.Substring(0, 20) + "...";
                    }
                    else
                    {
                        AlarmViewBody = AlarmItem.Body;
                    }
                    @if (String.IsNullOrEmpty(AlarmItem.Path))
                    {
                        <a class="dropdown-item p-2">
                            <!--<i class="fas fa-envelope mr-2"></i>@AlarmItem.Head-->
                            <span class="float-right text-muted text-sm"><a @onclick="@(async () => DelAlarmInfo(AlarmItem))"><i class="fas fa-times fa-lg"></i></a></span>
                            <i class="fas fa-bell mr-2"></i>@AlarmViewHead
                            <p class="text-sm">@AlarmViewBody</p>
                            <span class="float-right text-muted text-sm"><i class="far fa-clock mr-1"></i>@(AlarmItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</span>
                        </a>
                    }
                    else
                    {
                        <a href="@AlarmItem.Path" class="dropdown-item p-2">
                            <!--<i class="fas fa-envelope mr-2"></i>@AlarmItem.Head-->
                            <span class="float-right text-muted text-sm"><a @onclick="@(async () => DelAlarmInfo(AlarmItem))"><i class="fas fa-times fa-lg"></i></a></span>
                            <i class="fas fa-bell mr-2"></i>@AlarmViewHead
                            <p class="text-sm">@AlarmViewBody</p>
                            <span class="float-right text-muted text-sm"><i class="far fa-clock mr-1"></i>@(AlarmItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</span>
                        </a>
                    }

                }
            <br>
            <div class="dropdown-divider"></div>
            @if (String.IsNullOrEmpty(GetAlarmPath()))
            {
                @*<a class="dropdown-item dropdown-footer">전체 알림 보기</a>*@
                <a href="/alarmList" class="dropdown-item dropdown-footer">@xmlConf.GetTitle("T_ETC_TOTALALARMLOOK")</a> <!--전체 알림 보기-->
            }
            else
            {
                @*<a href="@GetAlarmPath()" class="dropdown-item dropdown-footer">See All Messages</a>*@
                <a href="/alarmList" class="dropdown-item dropdown-footer">@xmlConf.GetTitle("T_ETC_TOTALALARMLOOK")</a> <!--전체 알림 보기-->
            }
        </div>
    </li>
    <li class="nav-item">
        <a id="toggleRightSideBar" class="nav-link white_font" data-widget="control-sidebar" data-slide="true" href="#" role="button"><i class="fas fa-cog"></i></a>
    </li>
</ul>
<!-- /.Navbar -->

@code
{
    //LogIn_DisplayLock refLogIn_DisplayLock;
    //private static Action<Task> actionOpenDisplayLock;

    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;

    [Parameter] public ISGHeaderUIService HeaderUISvc { get; set; }
    [Parameter] public ISGUserInfoService UserInfoSvc { get; set; }
    [Parameter] public ISGSideBarUIService SideBarUISvc { get; set; }
    private string stProfilePhotoPath = String.Empty;
    private SGNtfyDBProc SQLiteDB { get; } = SGNtfyDBProc.Instance;
    Timer mouseTimer = null;
    System.Threading.Tasks.ValueTask<string> tRtn;
    public int screentime = 0;
    SGSettingsDBProc sgSettingProc;

    public string strUserSeq;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGHeaderUI>();

    public string NotiViewHead = "";
    public string NotiViewBody = "";
    public string AlarmViewHead = "";
    public string AlarmViewBody = "";

    // 3망 - 클립보드 전송 UI
    Dictionary<string, SGNetOverData> g_dicDestSysPos = null;
    public List<ISGNetwork> listNetWorkData = null;
    bool bAddedClipBoardItem = false;                       // 클립보드 List에서 구분선 넣기위한 판별용도
    bool bClipboardMultiItem = false;                       // 클립보드 전송때, List형태로 표현될 필요가 있는 판단
    int nIdx = 0;                                           // index for문에 사용


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { strType, xmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    private void ClipboardSend(int nGroupID)
    {
        /*string strMsg = "클립보드 - nGroupID : ";
        strMsg += nGroupID.ToString();
        ShowMessage("error", strMsg);*/

        pageService.m_str3NetDestSysID = "";
        Window.WinOnHotKey(nGroupID);
    }


    private void ClipboardSend(int nGroupID, KeyValuePair<string, SGNetOverData> valPair)
    {
        /*string strMsg = "클립보드 - nGroupID : ";
        strMsg += nGroupID.ToString();
        strMsg += ", system-ID : ";
        strMsg += (valPair.Key + valPair.Value);
        ShowMessage("error", strMsg);*/

        // ClipBoardOccured

        string strDestNetOverData = "";

        if (g_dicDestSysPos != null && g_dicDestSysPos.Count > 1)
        {

            strDestNetOverData = valPair.Value.strDestSysid;

            // 목적지 system_ID에 대한 정책값 추가
            foreach (var item in g_dicDestSysPos)
            {
                if (item.Value.nIdx != 0)
                {
                    strDestNetOverData += ",";
                    strDestNetOverData += item.Value.strPolicy;

                    // 정책정보는 다 넣어준다 - 서버에서 필요로함
                    //if (item.Value.strDestSysid == valPair.Value.strDestSysid)
                    //    break;

                }
            }

            pageService.m_str3NetDestSysID = strDestNetOverData;     // Native에서 delegate 받으면 이 값사용
        }

        Window.WinOnHotKey(nGroupID);
    }

    // SGSideBarUI 와 동일
    public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        // ChangeActiveMenuWrap
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
    }

    /**
    *@brief 사용자가 선택한 접속 망에 대해서 Logout 동작 진행
    */
    private void doLogOut()
    {

        List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
        int count = listNetWork.Count;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        if (sgSideBar == null)
            return;

        int nGroupID = sgSideBar.GroupId;
        //pageService.m_nCurViewPageGroupID=0;

        // 통신쪽 Logout 처리
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        if (pageService.GetConnectStatus(nGroupID))
            HsCmdCenter.SendLogOut(nGroupID, strUserID);

        /*SGSvrData sgSvrData = null;
        sgSvrData = (SGSvrData)HsCmdCenter.GetSGSvrData(nGroupID);
        if (sgSvrData == null)
            return;
        eLoginType eLoginTypeData = sgSvrData.GetLoginType();*/

        //sgSettingProc.SetSettingAutoLogin(nGroupID, false);

        pageService.SetInitApprLine(nGroupID, false);
        pageService.SetLoadApprBaseLine(nGroupID, false);
        pageService.SetConnectStatus(nGroupID, false);
        pageService.SetLogoutStatus(nGroupID, true);

        // UI쪽 Logout 처리
        // SideBarUISvc.DeleteMenu(nGroupID, 0, 1);
        SideBarUISvc.DeleteMenuAllButRoot(nGroupID);


        // Page 이동
        int i = 0;
        ISGSideBarUI activeMenu = null;
        for (; i < count; i++)
        {

            if (pageService.GetLogoutStatus(listNetWork[i].GroupID) == false)
            {

                KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                eventArgs.Key = "Enter";

                //activeMenu = SideBarUISvc.FindSubMenu(listNetWork[i].GroupID, 0, 0);
                activeMenu = SideBarUISvc.FindRootMenu(listNetWork[i].GroupID);
                if (activeMenu != null)
                {
                    ChangeActiveMenuWrap(eventArgs, activeMenu);
                    MyNavigationManager.NavigateTo(activeMenu.Path);
                }

                break;
            }

        }

        if (i < count)
            return;

        JSRuntime.InvokeAsync<object>("beforeLogOut");
        MyNavigationManager.NavigateTo("/LogIn/Logout");
    }

    private void goToUserInfo()
    {
        MyNavigationManager.NavigateTo("/UserInfo");
    }

    private void RefreshProfilePhoto()
    {
        string pathToContentRoot = string.Empty;
        var pathToExe = Process.GetCurrentProcess().MainModule.FileName;
        pathToContentRoot = Path.GetDirectoryName(pathToExe);

        string filepath = String.Empty;
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".png";
        System.IO.FileInfo f1 = new System.IO.FileInfo(filepath);
        if (f1.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".png";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpg";
        System.IO.FileInfo f2 = new System.IO.FileInfo(filepath);
        if (f2.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpg";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpeg";
        System.IO.FileInfo f3 = new System.IO.FileInfo(filepath);
        if (f3.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpeg";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".gif";
        System.IO.FileInfo f4 = new System.IO.FileInfo(filepath);
        if (f4.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".gif";
            return;
        }
        stProfilePhotoPath = "/images/avatar.png";
    }

    private async Task openDisplayLock()
    {
        await JSRuntime.InvokeAsync<object>("closeAllPopup");

        object[] param = { "modal-displaylock" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);

        object[] param2 = { "1" };
        await JSRuntime.InvokeAsync<object>("changeModalBg", param2);
    }

    /// <summary>
    /// 화면잠금 체크 타이머 이벤트
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void mouseTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        /*SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        if (sgSideBar == null)
            return;*/

        // 모든 망에 접속되어 있을때에만 화면잠금 사용(???)

        bool bTotalLogOut = false;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int count = listNetWork.Count;
        int i = 0;

        // 설정 파일에 있는 모든 망에 연결되어 있을때 화면잠금 동작
        /*for (; i < count; i++)
        {
            bTotalLogOut = pageService.GetLogoutStatus(i);
            if (bTotalLogOut == true)
                return;
        }*/

        // 1곳이라도 연결되어 있으면 화면잠금 동작
        if (count == 0)
            return;

        for (i = 0; i < count; i++)
        {
            if (pageService.GetConnectStatus(listNetWork[i].GroupID))
                break;
        }

        if (i == count)
            return;

        bool bUseScreenLock = AppConfigSvc.GetScreenLock();
        if (bUseScreenLock)
        {

            object[] param = { screentime };
            //object[] param = { 1 };
            tRtn = JSRuntime.InvokeAsync<string>("mouseDownIntervalCheck", param);

            if (tRtn.Result == "false")
            {
                if ((pageService.GetFileRecving() != true) && (pageService.GetFileSending() != true) && (pageService.GetFilePrevRecving() != true)) // && (!bTotalLogOut))
                {
                    pageService.SetScrLocking(true);
                    HsCmdCenter.SetAllFileRecvPossible(false);
                    await openDisplayLock();
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // actionOpenDisplayLock = openDisplayLock;
            /*
            if (mouseTimer == null)
            {
                mouseTimer = new Timer();
                mouseTimer.Interval = 10000;
                mouseTimer.Elapsed += new ElapsedEventHandler(mouseTimer_Elapsed);
                mouseTimer.Start();
            }
            */

            await base.OnAfterRenderAsync(firstRender);
        }
        else if (GetUserInfo() != null && stProfilePhotoPath == String.Empty)
        {
            RefreshProfilePhoto();
        }

        listNetWorkData = NetWorkSvc.NetWorkInfo;
        int nClipboardItem = 0;
        bClipboardMultiItem = false;
        Dictionary<string, SGNetOverData> dicDestSysPos = null;

        if (listNetWorkData != null && listNetWorkData.Count > 1)
        {
            for (int nIdx = 0; nIdx < listNetWorkData.Count; nIdx++)
            {
                if (pageService.GetConnectStatus(listNetWorkData[nIdx].GroupID))
                {
                    nClipboardItem++;
                    dicDestSysPos = pageService.GetTargetSystemList(listNetWorkData[nIdx].GroupID);
                    if (dicDestSysPos != null && dicDestSysPos.Count > 1)
                        nClipboardItem++;

                    if (nClipboardItem > 1)     // clipboard를 보낼 곳이 2곳이상일때, 값 설정
                    {
                        bClipboardMultiItem = true;
                        break;
                    }
                }
            }
        }


    }

    private string GetDescription()
    {
        return MenuNameMapper.GetDescription(SideBarUISvc.ActiveMenu?.CategoryId ?? LSIDEBAR.MENU_CATE_ROOT);
    }

    private ISGUserInfo GetUserInfo()
    {
        return UserInfoSvc.GetUserInfo(SideBarUISvc.ActiveMenu?.GroupId ?? 0);
    }

    /* Related, Notify Info and Notify Info DB Fucntion */
    private int nNotiCount { get; set; }
    private string GetNotiPath()
    {
        return HeaderUISvc?.Header?.NotiInfo.NotiPath;
    }
    private string GetNotiIcon()
    {
        return HeaderUISvc?.Header?.NotiInfo.Icon;
    }
    private string GetNotiBadge()
    {
        return HeaderUISvc?.Header?.NotiInfo.Badge;
    }
    private int GetNotiInfoCount(string userSeq)
    {
        return SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.USER, SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq);
    }
    private List<SGNotiData> GetNotiInfoList(string userSeq, int nLimit)
    {
        return SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.USER, SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq, nLimit);
    }
    private bool DelNotiInfo(SGNotiData notiData)
    {
        SQLiteDB.DeleteNotiInfo(notiData);
        int groupID = notiData.GroupId;
        CLog.Here().Information("Noti Path  : {0}", notiData.Path);
        if (notiData.Type == NOTI_TYPE.SYSTEM)
        {
            string strBoardSeq = notiData.Seq;
            BoardNotiConfirm(groupID, strBoardSeq);
        }
        NotiDeleteHasChange(groupID);
        SideBarUISvc.EmitNotifyStateChangedActMenu();
        return true;
    }

    /* Related, Alarm Info and Notify Info DB Fucntion */
    private int nAlarmCount { get; set; }
    private string GetAlarmPath()
    {
        return HeaderUISvc?.Header?.AlarmInfo.AlarmPath;
    }
    private string GetAlarmIcon()
    {
        return HeaderUISvc?.Header?.AlarmInfo.Icon;
    }
    private string GetAlarmBadge()
    {
        return HeaderUISvc?.Header?.AlarmInfo.Badge;
    }
    private int GetAlarmInfoCount(string userSeq)
    {
        return SQLiteDB.SelectAlarmInfoCount(SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq);
    }
    private List<SGAlarmData> GetAlarmInfoList(string userSeq, int nLimit)
    {
        return SQLiteDB.SelectAlarmInfoLimit(SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq, nLimit);
    }
    private bool DelAlarmInfo(SGAlarmData alarmData)
    {
        SQLiteDB.DeleteAlarmInfo(alarmData);
        int groupID = alarmData.GroupId;
        CLog.Here().Information("Alarm Path  : {0}", alarmData.Path);
        AlarmDeleteHasChange(groupID);
        SideBarUISvc.EmitNotifyStateChangedActMenu();
        return true;
    }

    protected override void OnInitialized()
    {
        sgSettingProc = SGSettingsDBProc.Instance;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        HsCmdCenter.sgPageEvent.SetScreenTimeChangeNotiEvent(ScreenTimeChangeNoti);
        HsCmdCenter.sgPageEvent.SetLoginAfterSGHeaderUIEventAdd(LoginAfterHeaderUI);
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        listNetWorkData = NetWorkSvc.NetWorkInfo;
    }


    /**
    *@brief 화면잠금 시간값 변경 및 재동작
    */
    public void ScreenTimeChangeNoti(int groupID, ConfigArgs e)
    {
        screentime = e.ScreenTime;
        if (mouseTimer == null)
        {
            mouseTimer = new Timer();
            mouseTimer.Interval = 10000;
            mouseTimer.Elapsed += new ElapsedEventHandler(mouseTimer_Elapsed);
            mouseTimer.Start();
        }
        else
        {
            mouseTimer.Stop();
            mouseTimer.Start();
        }
        //screentime = e.ScreenTime;
        //object[] param = { e.ScreenTime };
        //tRtn = JSRuntime.InvokeAsync<string>("mouseDownIntervalCheck", param);
    }

    public void LoginAfterHeaderUI(int groupid)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData != null)
        {
            strUserSeq = sgUserData.GetUserSequence();
            StateHasChanged();
        }
    }

    public void BoardNotiConfirm(int groupid, string strBoardSeq)
    {
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
        if (sgLoginData == null)
            return;
        string strUserID = sgLoginData.GetUserID();

        SGQueryExtend sgQueryExtend = null;
        sgQueryExtend = new SGQueryExtend();
        if (sgQueryExtend == null)
            return;

        string strQuery = sgQueryExtend.GetSGNotifyStatus(strBoardSeq, strUserID, "1");
        HsCmdCenter.SendBoardNotiConfirm(groupid, strUserID, strQuery);
    }

    public void NotiDeleteHasChange(int groupID)
    {
        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HsCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }

    public void AlarmDeleteHasChange(int groupID)
    {
        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalAlarmEvent NotiAfterAlarm = null;
        NotiAfterAlarm = HsCmdCenter.sgPageEvent.GetNotiAfterTotalAlarmEvent();
        if (NotiAfterAlarm != null)
            NotiAfterAlarm();
    }

    public void DashBoardRecvDownCapacityChg(int groupID)
    {
        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);
    }
}