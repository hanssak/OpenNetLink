@using System.Diagnostics
@using System.Timers
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Data.SGQuery
@using Serilog
@using Serilog.Events
@using AgLogManager
@using HsNetWorkSG
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject IJSRuntime JSRuntime
@inject XmlConfService xmlConf
@inject HSCmdCenter HsCmdCenter
@inject PageStatusService pageService
@inject WebWindow Window


<!-- Navbar -->
<!-- Left navbar links -->
<ul class="navbar-nav">
    <li class="nav-item">
        <a class="nav-link white_font" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
    </li>
    <li class="nav-item d-none d-sm-inline-block">
        <!-- <a href="#" class="nav-link pl-1 white_font">자료전송</a> -->
        @if (String.IsNullOrEmpty(SideBarUISvc.ActiveMenu?.Path ?? ""))
        {
            <a class="nav-link pl-1 white_font">@(GetDescription())</a>
        }
        else
        {
            <a href="@SideBarUISvc.ActiveMenu.Path" class="nav-link pl-1 white_font">@(GetDescription())</a>
        }
    </li>
</ul>

<!-- Right navbar links -->
<ul class="navbar-nav ml-auto">
    <!-- user info -->
    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <i class="fas fa-user-alt "></i>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">

            <div class="dropdown-header user-header">
                <!-- 아바타 이미지 사용안함 -->
                <!-- <img src="@stProfilePhotoPath" alt="User Avatar" class="img-size-100 img-circle m-3"> -->
                <h5 class="m-0 strong">@(GetUserInfo()?.UserName)</h5>
                <span class="small">@(GetUserInfo()?.DeptName)</span>
            </div>

            <div class="dropdown-divider"></div>
            <div class="dropdown-footer clearfix">

                @if (pageService.m_DicGroupIDloginType.Count > 0 )
                { 
                    if (pageService.m_DicGroupIDloginType[SideBarUISvc.ActiveMenu?.GroupId ?? 0] != eLoginType.eLOGINTYPE_AD)
                    {
                        <button @onclick="goToUserInfo" type="button" class="btn btn-block btn-outline-secondary col-md-5 float-left">@xmlConf.GetTitle("T_ETC_USER_INFO")</button>
                        <button @onclick="doLogOut" type="button" class="btn btn-block btn-outline-secondary col-md-4 float-right mt-0">@xmlConf.GetTitle("T_ETC_LOGOUT")</button>
                    }
                    else
                    {
                        <button @onclick="goToUserInfo" type="button" class="btn btn-block btn-outline-secondary col-md-12 float-left">@xmlConf.GetTitle("T_ETC_USER_INFO")</button>
                    }
                }

                @* @foreach (var Netitem in listNetWorkData)
                {
                   if((int)pageService.m_DicGroupIDloginType[Netitem.GroupID] != (int)eLoginType.eLOGINTYPE_AD)
                   {
                        <button @onclick="goToUserInfo" type="button" class="btn btn-block btn-outline-secondary col-md-5 float-left">@xmlConf.GetTitle("T_ETC_USER_INFO")</button>
                        <button @onclick="doLogOut" type="button" class="btn btn-block btn-outline-secondary col-md-4 float-right mt-0">@xmlConf.GetTitle("T_ETC_LOGOUT")</button>
                   }
                   else
                   {
                       <button @onclick="goToUserInfo" type="button" class="btn btn-block btn-outline-secondary col-md-12 float-left">@xmlConf.GetTitle("T_ETC_USER_INFO")</button>
                   }
                }*@

            </div>
        </div>
    </li>
    <!-- /.user info -->
    <!-- ClipBoard Dropdown Menu -->
    @if (bUseClipBoardui)
    {
        <li class="nav-item dropdown show">

            @if (bClipboardMultiItem)
            {
                <a class="nav-link white_font" data-toggle="dropdown" aria-expanded="true" style="cursor:pointer;" title="@xmlConf.GetTitle("T_TOOL_CLIPBOARD")">
                    <i class="fas fa-object-ungroup"></i>
                </a>
            }
            else
            {
                // 단일망 접속 - 단일 목적지
                <a class="nav-link white_font" aria-expanded="true" style="cursor:pointer;" title="@xmlConf.GetTitle("T_TOOL_CLIPBOARD")" @onclick="(e => ClipboardSend(0))">
                    <i class="fas fa-object-ungroup"></i>
                </a>
            }

            @*<a class="nav-link white_font" aria-expanded="true" style="cursor:pointer;" title=@xmlConf.GetTitle("T_TOOL_CLIPBOARD") @onclick="(e => ClipboardSend())">
                            <i class="fas fa-object-ungroup"></i>
                </a>*@

            @if (bClipboardMultiItem && listNetWorkData != null)
            {

                <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right" style="left: inherit; right: 0px; width:80px;">


                    @foreach (var Netitem in listNetWorkData)
                    {

                        @if (bAddedClipBoardItem)
                        {
                            <div class="dropdown-divider"></div>
                        }


                        @if (pageService.GetConnectStatus(Netitem.GroupID))
                        //@if (true)
                        {

                            g_dicDestSysPos = pageService.GetTargetSystemList(Netitem.GroupID);

                            @if (g_dicDestSysPos != null && g_dicDestSysPos.Count > 1)
                            {
                                // 목적망이 2곳 이상(3망일때)
                                @foreach (var itemData in g_dicDestSysPos)
                                {
                                    // 다중접속일때에는 단일망에만 전달가능
                                    // 단일접속일때에는 3중망에 전달가능
                                    @if (itemData.Key.Length > 0 && itemData.Value.strDestSysid.Length > 0 && itemData.Value.bUseClipTrans && itemData.Value.nIdx != 0 &&
                                       (pageService.m_bIsMultiNetWork == false || (pageService.m_bIsMultiNetWork && itemData.Value.nIdx == 1)))
                                    {

                                        @if (bAddedClipBoardItem)
                                        {
                                            <div class="dropdown-divider"></div>
                                        }
                                        @*                                        else
                                            {
                                                <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right" style="left: inherit; right: 0px; width:80px;">
                                            }*@

                                        <a style="cursor:pointer;" class="dropdown-item" @onclick="(e => ClipboardSend(Netitem.GroupID, itemData))">
                                            @*href="#" *@
                                            <!-- Message Start -->
                                            <div class="media p-2">
                                                <div class="media-body">
                                                    <h3 class="dropdown-item-title font-weight-bold mb-2">
                                                        <i class="fas fa-copy mr-2"></i>
                                                        @Netitem.FromName
                                                        <i class="fas fa-long-arrow-alt-right p-1"></i>
                                                        @itemData.Key
                                                    </h3>
                                                    <p class="text-xs">@xmlConf.GetInfoMsg("I_0214")</p>
                                                </div>
                                            </div>
                                            <!-- Message End -->
                                        </a>

                                        bAddedClipBoardItem = true;
                                    }

                                }

                                // 클립보드 전체망으로 전송하는 기능
                                @if (IsCanTransferClipBoardAllNet())
                                {
                                    <div class="dropdown-divider"></div>
                                    <a style="cursor:pointer;" class="dropdown-item" @onclick="(e => ClipboardSendAllNet(Netitem.GroupID))">
                                        @*href="#" *@
                                        <!-- Message Start -->
                                        <div class="media p-2">
                                            <div class="media-body">
                                                <h3 class="dropdown-item-title font-weight-bold mb-2">
                                                    <i class="fas fa-copy mr-2"></i>
                                                    @Netitem.FromName
                                                    <i class="fas fa-long-arrow-alt-right p-1"></i>
                                                    @xmlConf.GetTitle("T_TRANS_NETOVER_ALL")
                                                </h3>
                                                <p class="text-xs">@xmlConf.GetInfoMsg("I_0214")</p>
                                            </div>
                                        </div>
                                        <!-- Message End -->
                                    </a>
                                }

                            }
                            else
                            {
                                // 목적망이 1곳일때
                                <a style="cursor:pointer;" class="dropdown-item" @onclick="(e => ClipboardSend(Netitem.GroupID))">
                                    <!-- Message Start -->
                                    <div class="media p-2">
                                        <div class="media-body">
                                            <h3 class="dropdown-item-title font-weight-bold mb-2">
                                                <i class="fas fa-copy mr-2"></i>
                                                @Netitem.FromName
                                                <i class="fas fa-long-arrow-alt-right p-1"></i>
                                                @Netitem.ToName
                                            </h3>
                                            <p class="text-xs">@xmlConf.GetInfoMsg("I_0214")</p>
                                        </div>
                                    </div>
                                    <!-- Message End -->
                                </a>

                                bAddedClipBoardItem = true;
                            }

                        }

                    }


                </div>

            }

        </li>
    }

    <!-- /. ClipBoard Dropdown Menu -->
    <!-- Messages Dropdown Menu -->
    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <!--<i class="fas fa-comments "></i>-->
            <i class="@GetNotiIcon() "></i>
            @if ((nNotiCount = GetNotiAllNetSum(strUserSeq)) > 0)
            {
                //<span class="badge badge-danger navbar-badge">5</span>-->

                // Badge Count 확인
                <span class="@GetNotiBadge() navbar-badge">@(nNotiCount)</span>
            }
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right" style="z-index:2000;">
            @if (nNotiCount > 0)@foreach (var NotiItem in GetNotiInfoList(strUserSeq, 5))
                {
                    @if (NotiItem.Head.Length > 16)
                    {
                        NotiViewHead = NotiItem.Head.Substring(0, 16) + "...";
                    }
                    else
                    {
                        NotiViewHead = NotiItem.Head;
                    }
                    @if (NotiItem.Body.Length > 16)
                    {
                        NotiViewBody = NotiItem.Body.Substring(0, 16) + "...";
                    }
                    else
                    {
                        NotiViewBody = NotiItem.Body;
                    }
                    @if (String.IsNullOrEmpty(NotiItem.Path))
                    {
                        <a class="dropdown-item">
                            <!-- Message Start -->
                            <div class="media p-2">
                                <!-- 아바타 이미지 사용안함 -->
                                <!-- <img src="@NotiItem.IconImage" alt="User Avatar" class="img-size-50 mr-3 img-circle"> -->
                                <div class="media-body">
                                    <h3 class="dropdown-item-title font-weight-bold mb-2">
                                        <span class="float-right"><a @onclick="@(async () => DelNotiInfo(NotiItem))"><i class="fas fa-times fa-lg"></i></a></span>
                                        @NotiViewHead
                                        <span class="float-right text-sm text-danger"><i class="fas fa-star"></i></span>
                                    </h3>
                                    <p class="text-xs">@NotiViewBody</p>
                                    <p class="text-xs text-muted mt-1"><i class="far fa-clock mr-1"></i>@(NotiItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</p>
                                </div>
                            </div>
                            <!-- Message End -->
                        </a>
                    }
                    else
                    {
                        <a href="@NotiItem.Path" class="dropdown-item">
                            <!-- Message Start -->
                            <div class="media p-2">
                                <!-- 아바타 이미지 사용안함 -->
                                <!-- <img src="@NotiItem.IconImage" alt="User Avatar" class="img-size-50 mr-3 img-circle"> -->
                                <div class="media-body">
                                    <h3 class="dropdown-item-title font-weight-bold mb-2">
                                        <span class="float-right"><a @onclick="@(async () => DelNotiInfo(NotiItem))"><i class="fas fa-times fa-lg"></i></a></span>
                                        @NotiViewHead
                                        <span class="float-right text-sm text-danger"><i class="fas fa-star"></i></span>
                                    </h3>
                                    <p class="text-xs">@NotiViewBody</p>
                                    <p class="text-xs text-muted mt-1"><i class="far fa-clock mr-1"></i>@(NotiItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</p>
                                </div>
                            </div>
                            <!-- Message End -->
                        </a>
                    }
                    <div class="dropdown-divider"></div>
                }
            @if (String.IsNullOrEmpty(GetNotiPath()))
            {
                @*<a class="dropdown-item dropdown-footer text-xs p-2">전체 메세지 보기</a>*@
                <a href="/messageList" class="dropdown-item dropdown-footer text-xs p-2">@xmlConf.GetTitle("T_ETC_TOTALMSGLOOK")</a> <!--전체 메세지 보기-->
            }
            else
            {
                @*<a href="@GetNotiPath()" class="dropdown-item dropdown-footer text-xs p-2">전체 메세지 보기</a>*@
                <a href="/messageList" class="dropdown-item dropdown-footer text-xs p-2">@xmlConf.GetTitle("T_ETC_TOTALMSGLOOK")</a> <!--전체 메세지 보기-->
            }
        </div>
    </li>
    <!-- Notifications Dropdown Menu -->


    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <!--<i class="fas fa-bell"></i>-->
            <i class="@GetAlarmIcon() "></i>
            @if ((nAlarmCount = GetAlarmAllNetSum(strUserSeq)) > 0)
            {
                //<span class="badge badge-warning navbar-badge">15</span>
                <span class="@GetAlarmBadge() navbar-badge">@(nAlarmCount)</span>
            }
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
            <span class="dropdown-item dropdown-header">@nAlarmCount Notifications</span>
            @if (nAlarmCount > 0)@foreach (var AlarmItem in GetAlarmInfoList(strUserSeq, 5))
                {
                    <div class="dropdown-divider"></div>
                    @if (AlarmItem.Head.Length > 20)
                    {
                        AlarmViewHead = AlarmItem.Head.Substring(0, 20) + "...";
                    }
                    else
                    {
                        AlarmViewHead = AlarmItem.Head;
                    }
                    @if (AlarmItem.Body.Length > 20)
                    {
                        AlarmViewBody = AlarmItem.Body.Substring(0, 20) + "...";
                    }
                    else
                    {
                        AlarmViewBody = AlarmItem.Body;
                    }
                    @if (String.IsNullOrEmpty(AlarmItem.Path))
                    {
                        <a class="dropdown-item p-2">
                            <!--<i class="fas fa-envelope mr-2"></i>@AlarmItem.Head-->
                            <span class="float-right text-muted text-sm"><a @onclick="@(async () => DelAlarmInfo(AlarmItem))"><i class="fas fa-times fa-lg"></i></a></span>
                            <i class="fas fa-bell mr-2"></i>@AlarmViewHead
                            <p class="text-sm">@AlarmViewBody</p>
                            <span class="float-right text-muted text-sm"><i class="far fa-clock mr-1"></i>@(AlarmItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</span>
                        </a>
                    }
                    else
                    {
                        <a href="@AlarmItem.Path" class="dropdown-item p-2">
                            <!--<i class="fas fa-envelope mr-2"></i>@AlarmItem.Head-->
                            <span class="float-right text-muted text-sm"><a @onclick="@(async () => DelAlarmInfo(AlarmItem))"><i class="fas fa-times fa-lg"></i></a></span>
                            <i class="fas fa-bell mr-2"></i>@AlarmViewHead
                            <p class="text-sm">@AlarmViewBody</p>
                            <span class="float-right text-muted text-sm"><i class="far fa-clock mr-1"></i>@(AlarmItem.Time?.ToString("yyyy-MM-dd HH:mm:ss"))</span>
                        </a>
                    }

                }
            <br>
            <div class="dropdown-divider"></div>
            @if (String.IsNullOrEmpty(GetAlarmPath()))
            {
                @*<a class="dropdown-item dropdown-footer">전체 알림 보기</a>*@
                <a href="/alarmList" class="dropdown-item dropdown-footer">@xmlConf.GetTitle("T_ETC_TOTALALARMLOOK")</a> <!--전체 알림 보기-->
            }
            else
            {
                @*<a href="@GetAlarmPath()" class="dropdown-item dropdown-footer">See All Messages</a>*@
                <a href="/alarmList" class="dropdown-item dropdown-footer">@xmlConf.GetTitle("T_ETC_TOTALALARMLOOK")</a> <!--전체 알림 보기-->
            }
        </div>
    </li>
    <li class="nav-item">
        <a id="toggleRightSideBar" class="nav-link white_font" data-widget="control-sidebar" data-slide="true" href="#" role="button"><i class="fas fa-cog"></i></a>
    </li>
</ul>

@code
{
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;

    [Parameter] public ISGHeaderUIService HeaderUISvc { get; set; }
    [Parameter] public ISGUserInfoService UserInfoSvc { get; set; }
    [Parameter] public ISGSideBarUIService SideBarUISvc { get; set; }
    private string stProfilePhotoPath = String.Empty;
    private SGNtfyDBProc SQLiteDB { get; } = SGNtfyDBProc.Instance;
    Timer mouseTimer = null;
    System.Threading.Tasks.ValueTask<string> tRtn;
    public int screentime = 0;
    SGSettingsDBProc sgSettingProc;

    public string strUserSeq;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SGHeaderUI>();

    public string NotiViewHead = "";
    public string NotiViewBody = "";
    public string AlarmViewHead = "";
    public string AlarmViewBody = "";

    // 3망 - 클립보드 전송 UI
    Dictionary<string, SGNetOverData> g_dicDestSysPos = null;
    public List<ISGNetwork> listNetWorkData = null;
    bool bAddedClipBoardItem = false;                       // 클립보드 List에서 구분선 넣기위한 판별용도
    bool bClipboardMultiItem = false;                       // 클립보드 전송때, List형태로 표현될 필요가 있는 판단
    bool bUseClipBoardui = false;                             // 클립보드 기능 사용유무 UI로 표현유무
    bool bRedrawClipBoardUI = true;                           // 클립보드 UI를 한번 View 하는데 사용
                                                              //int nIdx = 0;                                           // index for문에 사용


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { strType, xmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /**
    *@biref LinuxOS 에서 클립보드 전송을 위해 사용
    */
    private void ClipboardSendForLinuxOS(int nGroupID)
    {

        List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(nGroupID);
        char chVKey = ' ';
        chVKey = AppConfigSvc.GetClipBoardVKey(nGroupID);

        string strParameter = "key ";

        if (listModKey[(int)HOTKEY_MOD.WINDOW])
        {
            if (strParameter == "key ")
                strParameter += " super";
            else
                strParameter += "+super";
        }

        if (listModKey[(int)HOTKEY_MOD.CTRL])
        {
            if (strParameter == "key ")
                strParameter += " Ctrl";
            else
                strParameter += "+Ctrl";
        }

        if (listModKey[(int)HOTKEY_MOD.ALT])
        {
            if (strParameter == "key ")
                strParameter += " Alt";
            else
                strParameter += "+Alt";
        }

        if (listModKey[(int)HOTKEY_MOD.SHIFT])
        {
            if (strParameter == "key ")
                strParameter += " Shift";
            else
                strParameter += "+Shift";
        }

        strParameter += "+";
        strParameter += chVKey;

        @*System.Diagnostics.ProcessStartInfo pri = new System.Diagnostics.ProcessStartInfo();
            System.Diagnostics.Process pro = new System.Diagnostics.Process();
            pri.FileName = "xdotool";

            pri.CreateNoWindow = true;
            pri.UseShellExecute = true;

            pri.RedirectStandardInput = true;
            pri.RedirectStandardOutput = true;
            pri.RedirectStandardError = true;

            pro.StartInfo = pri;
            pro.Start();*@

    try
    {
        System.Diagnostics.Process.Start("xdotool", strParameter);
    }
    catch (Exception e)
    {
        CLog.Here().Information("CliBoard - ClipboardSendForLinuxOS - ### 1 - Exception : {0} ", e.Message);
    }
}

/**
*@biref MacOSX 에서 클립보드 전송을 위해 사용
*/
private void ClipboardSendForMacOSX(int nGroupID)
{

    List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(nGroupID);
    bool bAlt = false, bControl = false, bShift = false, bWin = false;
    char chVKey = ' ';
    chVKey = AppConfigSvc.GetClipBoardVKey(nGroupID);

    if (listModKey[(int)HOTKEY_MOD.WINDOW]) bWin = true;
    if (listModKey[(int)HOTKEY_MOD.CTRL]) bControl = true;
    if (listModKey[(int)HOTKEY_MOD.ALT]) bAlt = true;
    if (listModKey[(int)HOTKEY_MOD.SHIFT]) bShift = true;

    Window.GenerateHotKey(bAlt, bControl, bShift, bWin, chVKey);
}


/**
*@biref 단일망 클립보드 전송때에 사용
*/
private void ClipboardSend(int nGroupID)
{
    /*string strMsg = "클립보드 - nGroupID : ";
    strMsg += nGroupID.ToString();
    ShowMessage("error", strMsg);*/

    pageService.m_str3NetDestSysID = "";

    CLog.Here().Information("CliBoard - ClipboardSend - ### 1 - Policy(None) - nGroupID : {0} ", nGroupID.ToString());

    Window.WinOnHotKey(nGroupID);
}


/**
*@biref 다중망 / 3중망 접속중일때, 보내고자 하는 망으로 Clipboard 전송
*/
private void ClipboardSend(int nGroupID, KeyValuePair<string, SGNetOverData> valPair)
{

    /*string strMsg = "클립보드 - nGroupID : ";
    strMsg += nGroupID.ToString();
    strMsg += ", system-ID : ";
    strMsg += (valPair.Key + valPair.Value);
    ShowMessage("error", strMsg);*/

    // ClipBoardOccured

    string strDestNetOverData = "0";

    if (g_dicDestSysPos != null && g_dicDestSysPos.Count > 0)
    {

        strDestNetOverData = valPair.Value.strDestSysid;

        // 목적지 system_ID에 대한 정책값 추가
        foreach (var item in g_dicDestSysPos)
        {
            if (item.Value.nIdx != 0)
            {
                strDestNetOverData += ",";
                strDestNetOverData += item.Value.strPolicy;

                // 정책정보는 다 넣어준다 - 서버에서 필요로함
                //if (item.Value.strDestSysid == valPair.Value.strDestSysid)
                //    break;

            }
        }
    }

    pageService.m_str3NetDestSysID = strDestNetOverData;     // Native에서 delegate 받으면 이 값사용

    CLog.Here().Information("CliBoard - ClipboardSend - ### 1 - Policy(WinOnHotKey Call-GroupID:{0}) : {1}", nGroupID.ToString(), pageService.m_str3NetDestSysID);

    Window.WinOnHotKey(nGroupID);
}


/**
*@biref 3중망 접속중일때, 수신 할 수 있는 모든 망으로 Clipboard 전송
*/
private void ClipboardSendAllNet(int nGroupID)
{

    string strDestNetOverData = "";

    if (g_dicDestSysPos != null && g_dicDestSysPos.Count > 0)
    {

        // ex2)"E001,31,31,1/E101,31,31,0" - 통신단에서 / 를 구분자로해서 transreq를 2번보냄

        // 1번째 망에 전송 정책 설정 : "E001,31,31,1/"
        foreach (var item in g_dicDestSysPos)
        {
            if (item.Value.nIdx == 1)
            {
                strDestNetOverData += item.Value.strDestSysid;
                strDestNetOverData += ",";
                strDestNetOverData += item.Value.strPolicy;
            }

            if (item.Value.nIdx == 2)
            {
                strDestNetOverData += ",";
                strDestNetOverData += item.Value.strPolicy;
            }
        }

        // '/'구분자로 2곳이상에 전달
        strDestNetOverData += "/";

        // 2번째 망에 전송 정책 설정 : "E101,31,31,0"
        foreach (var item in g_dicDestSysPos)
        {
            if (item.Value.nIdx == 2)
            {
                strDestNetOverData += item.Value.strDestSysid;
                break;
            }
        }

        // 모든망별 정책값 추가
        foreach (var item in g_dicDestSysPos)
        {
            if (item.Value.nIdx != 0)
            {
                // 망마다 정책정보 설정
                strDestNetOverData += ",";
                strDestNetOverData += item.Value.strPolicy;
            }
        }

    }

    pageService.m_str3NetDestSysID = strDestNetOverData;     // Native에서 delegate 받으면 이 값사용

    CLog.Here().Information("CliBoard - ClipboardSend - ### 1 - Policy(WinOnHotKey Call-GroupID:{0}) : {1} ", nGroupID.ToString(), pageService.m_str3NetDestSysID);

    Window.WinOnHotKey(nGroupID);
}


// SGSideBarUI 와 동일
public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
{

    // ChangeActiveMenuWrap
    if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
        pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

    // 이동하는UI 그룹ID 지정
    pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

    SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
}

/**
*@brief 사용자가 선택한 접속 망에 대해서 Logout 동작 진행
*/
private void doLogOut()
{

    List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
    int count = listNetWork.Count;

    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    if (sgSideBar == null)
        return;

    int nGroupID = sgSideBar.GroupId;
    //pageService.m_nCurViewPageGroupID=0;

    // 통신쪽 Logout 처리
    SGLoginData sgLoginData = null;
    sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
    if (sgLoginData == null)
        return;

    string strUserID = sgLoginData.GetUserID();

    if (pageService.GetConnectStatus(nGroupID))
        HsCmdCenter.SendLogOut(nGroupID, strUserID);

    /*SGSvrData sgSvrData = null;
    sgSvrData = (SGSvrData)HsCmdCenter.GetSGSvrData(nGroupID);
    if (sgSvrData == null)
        return;
    eLoginType eLoginTypeData = sgSvrData.GetLoginType();*/

    //sgSettingProc.SetSettingAutoLogin(nGroupID, false);

    pageService.SetInitApprLine(nGroupID, false);
    pageService.SetLoadApprBaseLine(nGroupID, false);
    pageService.SetConnectStatus(nGroupID, false);
    pageService.SetLogoutStatus(nGroupID, true);

    CLog.Here().Information($"groupID : {nGroupID} - User Do Logout, UrlRedirection LogOut State ReSet !!!");
    HsNetWorkSG.HsHttpWatcher.SetLoginOutState(nGroupID, false);


    // UI쪽 Logout 처리
    // SideBarUISvc.DeleteMenu(nGroupID, 0, 1);
    SideBarUISvc.DeleteMenuAllButRoot(nGroupID);


    // Page 이동
    int i = 0;
    ISGSideBarUI activeMenu = null;
    for (; i < count; i++)
    {

        if (pageService.GetLogoutStatus(listNetWork[i].GroupID) == false)
        {

            KeyboardEventArgs eventArgs = new KeyboardEventArgs();
            eventArgs.Key = "Enter";

            //activeMenu = SideBarUISvc.FindSubMenu(listNetWork[i].GroupID, 0, 0);
            activeMenu = SideBarUISvc.FindRootMenu(listNetWork[i].GroupID);
            if (activeMenu != null)
            {
                ChangeActiveMenuWrap(eventArgs, activeMenu);
                MyNavigationManager.NavigateTo(activeMenu.Path);
            }

            break;
        }

    }

    if (i < count)
        return;

    JSRuntime.InvokeAsync<object>("beforeLogOut");
    MyNavigationManager.NavigateTo("/LogIn/Logout");
}

private void goToUserInfo()
{
    MyNavigationManager.NavigateTo("/UserInfo");
}

private void RefreshProfilePhoto()
{
    string pathToContentRoot = string.Empty;
    var pathToExe = Process.GetCurrentProcess().MainModule.FileName;
    pathToContentRoot = Path.GetDirectoryName(pathToExe);

    string filepath = String.Empty;
    filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".png";
    System.IO.FileInfo f1 = new System.IO.FileInfo(filepath);
    if (f1.Exists)
    {
        stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".png";
        return;
    }
    filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpg";
    System.IO.FileInfo f2 = new System.IO.FileInfo(filepath);
    if (f2.Exists)
    {
        stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpg";
        return;
    }
    filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpeg";
    System.IO.FileInfo f3 = new System.IO.FileInfo(filepath);
    if (f3.Exists)
    {
        stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpeg";
        return;
    }
    filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".gif";
    System.IO.FileInfo f4 = new System.IO.FileInfo(filepath);
    if (f4.Exists)
    {
        stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".gif";
        return;
    }
    stProfilePhotoPath = "/images/avatar.png";
}

private async Task openDisplayLock()
{
    await JSRuntime.InvokeAsync<object>("closeAllPopup");
    pageService.m_bScreenLock = true;
    object[] param = { "modal-displaylock" };
    await JSRuntime.InvokeAsync<object>("openPopUp", param);

    object[] param2 = { "1" };
    await JSRuntime.InvokeAsync<object>("changeModalBg", param2);
}

/// <summary>
/// 화면잠금 체크 타이머 이벤트
/// </summary>
/// <param name="sender"></param>
/// <param name="e"></param>
private async void mouseTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
{
    /*SideBarUISvc = SGAppMgrSvc.SideBarUIService;
    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    if (sgSideBar == null)
        return;*/

    // 모든 망에 접속되어 있을때에만 화면잠금 사용(???)

    //bool bTotalLogOut = false;
    NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
    List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
    int count = listNetWork.Count;
    int i = 0;

    // 설정 파일에 있는 모든 망에 연결되어 있을때 화면잠금 동작
    /*for (; i < count; i++)
    {
        bTotalLogOut = pageService.GetLogoutStatus(i);
        if (bTotalLogOut == true)
            return;
    }*/

    // 1곳이라도 연결되어 있으면 화면잠금 동작
    if (count == 0)
        return;

    for (i = 0; i < count; i++)
    {
        if (pageService.GetConnectStatus(listNetWork[i].GroupID))
            break;
    }

    if (i == count)
        return;

    bool bUseScreenLock = AppConfigSvc.GetScreenLock();
    if (bUseScreenLock)
    {

        object[] param = { screentime };
        //object[] param = { 1 };
        tRtn = JSRuntime.InvokeAsync<string>("mouseDownIntervalCheck", param);

        if (tRtn.Result == "false")
        {
            if ((pageService.GetFileRecving() != true) && (pageService.GetFileSending() != true) && (pageService.GetFilePrevRecving() != true)) // && (!bTotalLogOut))
            {
                pageService.SetScrLocking(true);
                //화면잠금후에도 파일수신은 되도록 수정 2021/07/15 YKH
                //HsCmdCenter.SetAllFileRecvPossible(false);
                HsCmdCenter.SetAllFileRecvPossible(true);
                await openDisplayLock();
            }
            else
            {
                await JSRuntime.InvokeAsync<string>("initMouseClick");
            }
        }
    }
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        // actionOpenDisplayLock = openDisplayLock;
        /*
        if (mouseTimer == null)
        {
            mouseTimer = new Timer();
            mouseTimer.Interval = 10000;
            mouseTimer.Elapsed += new ElapsedEventHandler(mouseTimer_Elapsed);
            mouseTimer.Start();
        }
        */

        await base.OnAfterRenderAsync(firstRender);
    }
    else if (GetUserInfo() != null && stProfilePhotoPath == String.Empty)
    {
        RefreshProfilePhoto();
    }

    SetClipBoardUI();


}


/**
*@brief clipboard전송 버튼 view유무(bUseClipBoardui), List 형태로 표현유무(bClipboardMultiItem)를 확정짓기 위한 함수
*/
private void SetClipBoardUI()
{

    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    listNetWorkData = NetWorkSvc.NetWorkInfo;
    bClipboardMultiItem = false;
    bUseClipBoardui = false;

    // 단일망 접속
    if (listNetWorkData != null && listNetWorkData.Count == 1)
    {

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(listNetWorkData[0].GroupID);
        if (sgLoginData != null)
        {

            bUseClipBoardui = sgLoginData.GetClipboard();

            // 3망 확인
            if (sgLoginData.GetUseOverNetwork2())
            {
                bClipboardMultiItem = true;

                if (bUseClipBoardui)
                {

                    dicDestSysPos = pageService.GetTargetSystemList(listNetWorkData[0].GroupID);
                    if (dicDestSysPos != null)
                    {

                        // 3망일때 모두다 클립보드 전송금지 이면 클립보드 전송금지되게 적용
                        bool bUseClipboardNetOver = false;
                        foreach (var item in dicDestSysPos)
                        {
                            if (item.Value.bUseClipTrans)
                            {
                                bUseClipboardNetOver = true;
                                break;
                            }
                        }
                        bUseClipBoardui = bUseClipboardNetOver;
                    }
                }

            }

        }


        if (bRedrawClipBoardUI)
        {
            StateHasChanged();
            bRedrawClipBoardUI = false;
        }

    }
    else if (listNetWorkData != null && listNetWorkData.Count > 1)       // 다중망 접속상황
    {

        bClipboardMultiItem = true;     // 확정됨
        bUseClipBoardui = true;

        /*
        bool bUseClipboardOneNet = false;
        int nClipboardItem = 0;
        SGLoginData sgLoginData = null;

        //
        for (int nIdx = 0; nIdx < listNetWorkData.Count; nIdx++)
        {
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(listNetWorkData[nIdx].GroupID);
            bUseClipboardOneNet = sgLoginData.GetClipboard();
            if (bUseClipboardOneNet)
            {

                // 3망 확인
                if (sgLoginData.GetUseOverNetwork2())
                {

                    dicDestSysPos = pageService.GetTargetSystemList(listNetWorkData[nIdx].GroupID);
                    if (dicDestSysPos != null)
                    {

                        // 3망일때 모두다 클립보드 전송금지 이면 클립보드 전송금지되게 적용
                        bool bUseClipboardNetOver = false;
                        foreach (var item in dicDestSysPos)
                        {
                            if (item.Value.bUseClipTrans)
                            {
                                bUseClipboardNetOver = true;
                                break;
                            }

                            // 다중접속에서는 첫번째망 설정만 봐야정상.
                            // 추가망 접속에 따라서 클립보드 전송ICON Button 사용유무 및 List화 되는지 유무가 변동므로
                            // icon 무조건 보여주고 다중아이템 되게 처리
                            // if (item.Value.nIdx == 1)
                            //    break;
                      }
                        bUseClipboardOneNet = bUseClipboardNetOver;

                        if (bUseClipboardOneNet)
                            break;
                    }

                }
                else
                {
                    bUseClipboardOneNet = true;
                    break;
                }
            }
        }

        bUseClipBoardui = bUseClipboardOneNet;
        */

        if (bRedrawClipBoardUI)
        {
            StateHasChanged();
            bRedrawClipBoardUI = false;
        }

    }


    return;
}

private string GetDescription()
{
    return MenuNameMapper.GetDescription(SideBarUISvc.ActiveMenu?.CategoryId ?? LSIDEBAR.MENU_CATE_ROOT);
}

private ISGUserInfo GetUserInfo()
{
    return UserInfoSvc.GetUserInfo(SideBarUISvc.ActiveMenu?.GroupId ?? 0);
}

/* Related, Notify Info and Notify Info DB Fucntion */
private int nNotiCount { get; set; }
private string GetNotiPath()
{
    return HeaderUISvc?.Header?.NotiInfo.NotiPath;
}
private string GetNotiIcon()
{
    return HeaderUISvc?.Header?.NotiInfo.Icon;
}
private string GetNotiBadge()
{
    return HeaderUISvc?.Header?.NotiInfo.Badge;
}
private int GetNotiInfoCount(string userSeq)
{
    return SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.USER, SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq);
}

/**
*@biref 접속된 모든 망에 대한 Noti Count를 얻어냄
*/
private int GetNotiAllNetSum(string userSeq)
{

    if (userSeq == null || userSeq.Length < 1)
        return 0;

    int nSum = 0;
    int nIdx = 0;
    SGLoginData sgLoginData = null;

    for (; nIdx < listNetWorkData.Count; nIdx++)
    {
        sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(listNetWorkData[nIdx].GroupID);
        if (sgLoginData != null && pageService.GetLogoutStatus(listNetWorkData[nIdx].GroupID) == false)
            nSum += SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.USER, listNetWorkData[nIdx].GroupID, userSeq);
    }

    return nSum;
}


private List<SGNotiData> GetNotiInfoList(string userSeq, int nLimit)
{
    return SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.USER, SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq, nLimit);
}
private bool DelNotiInfo(SGNotiData notiData)
{
    SQLiteDB.DeleteNotiInfo(notiData);
    int groupID = notiData.GroupId;
    CLog.Here().Information("Noti Path  : {0}", notiData.Path);
    if (notiData.Type == NOTI_TYPE.SYSTEM)
    {
        string strBoardSeq = notiData.Seq;
        BoardNotiConfirm(groupID, strBoardSeq);
    }
    NotiDeleteHasChange(groupID);
    SideBarUISvc.EmitNotifyStateChangedActMenu();
    return true;
}

/* Related, Alarm Info and Notify Info DB Fucntion */
private int nAlarmCount { get; set; }
private string GetAlarmPath()
{
    return HeaderUISvc?.Header?.AlarmInfo.AlarmPath;
}
private string GetAlarmIcon()
{
    return HeaderUISvc?.Header?.AlarmInfo.Icon;
}
private string GetAlarmBadge()
{
    return HeaderUISvc?.Header?.AlarmInfo.Badge;
}


private int GetAlarmInfoCount(string userSeq)
{
    return SQLiteDB.SelectAlarmInfoCount(SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq);
}

/**
*@biref 접속된 모든 망에 대한 Alarm Count를 얻어냄
*/
private int GetAlarmAllNetSum(string userSeq)
{

    if (userSeq == null || userSeq.Length < 1)
        return 0;

    int nSum = 0;
    int nIdx = 0;
    SGLoginData sgLoginData = null;

    for (; nIdx < listNetWorkData.Count; nIdx++)
    {
        sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(listNetWorkData[nIdx].GroupID);
        if (sgLoginData != null && pageService.GetLogoutStatus(listNetWorkData[nIdx].GroupID) == false)
            nSum += SQLiteDB.SelectAlarmInfoCount(listNetWorkData[nIdx].GroupID, userSeq);
    }

    return nSum;
}

private List<SGAlarmData> GetAlarmInfoList(string userSeq, int nLimit)
{
    return SQLiteDB.SelectAlarmInfoLimit(SideBarUISvc.ActiveMenu?.GroupId ?? 0, userSeq, nLimit);
}

private bool DelAlarmInfo(SGAlarmData alarmData)
{
    SQLiteDB.DeleteAlarmInfo(alarmData);
    int groupID = alarmData.GroupId;
    CLog.Here().Information("Alarm Path  : {0}", alarmData.Path);
    AlarmDeleteHasChange(groupID);
    SideBarUISvc.EmitNotifyStateChangedActMenu();
    return true;
}

protected override void OnInitialized()
{
    sgSettingProc = SGSettingsDBProc.Instance;
    AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
    HsCmdCenter.sgPageEvent.SetScreenTimeChangeNotiEvent(ScreenTimeChangeNoti);
    HsCmdCenter.sgPageEvent.SetLoginAfterSGHeaderUIEventAdd(LoginAfterHeaderUI);
    NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
    listNetWorkData = NetWorkSvc.NetWorkInfo;
}


/**
*@brief 화면잠금 시간값 변경 및 재동작
*/
public void ScreenTimeChangeNoti(int groupID, ConfigArgs e)
{
    screentime = e.ScreenTime;
    if (mouseTimer == null)
    {
        mouseTimer = new Timer();
        mouseTimer.Interval = 10000;
        mouseTimer.Elapsed += new ElapsedEventHandler(mouseTimer_Elapsed);
        mouseTimer.Start();
    }
    else
    {
        mouseTimer.Stop();
        mouseTimer.Start();
    }
    //screentime = e.ScreenTime;
    //object[] param = { e.ScreenTime };
    //tRtn = JSRuntime.InvokeAsync<string>("mouseDownIntervalCheck", param);
}

public void LoginAfterHeaderUI(int groupid)
{
    SGUserData sgUserData = null;
    sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
    if (sgUserData != null)
    {
        strUserSeq = sgUserData.GetUserSequence();
        StateHasChanged();
    }
}

public void BoardNotiConfirm(int groupid, string strBoardSeq)
{
    SGLoginData sgLoginData = null;
    sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
    if (sgLoginData == null)
        return;
    string strUserID = sgLoginData.GetUserID();

    SGQueryExtend sgQueryExtend = null;
    sgQueryExtend = new SGQueryExtend();
    if (sgQueryExtend == null)
        return;

    string strQuery = sgQueryExtend.GetSGNotifyStatus(strBoardSeq, strUserID, "1");
    HsCmdCenter.SendBoardNotiConfirm(groupid, strUserID, strQuery);
}

public void NotiDeleteHasChange(int groupID)
{
    BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
    boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
    if (boardNotiAfterDashBoard != null)
        boardNotiAfterDashBoard(groupID);

    NotiAfterTotalMsgEvent NotiAfterMsg = null;
    NotiAfterMsg = HsCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
    if (NotiAfterMsg != null)
        NotiAfterMsg();
}

public void AlarmDeleteHasChange(int groupID)
{
    BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
    boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
    if (boardNotiAfterDashBoard != null)
        boardNotiAfterDashBoard(groupID);

    NotiAfterTotalAlarmEvent NotiAfterAlarm = null;
    NotiAfterAlarm = HsCmdCenter.sgPageEvent.GetNotiAfterTotalAlarmEvent();
    if (NotiAfterAlarm != null)
        NotiAfterAlarm();
}

public void DashBoardRecvDownCapacityChg(int groupID)
{
    BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
    boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
    if (boardNotiAfterDashBoard != null)
        boardNotiAfterDashBoard(groupID);
}

/**
*@biref 3망일때, 클립보드 전체전송기능 사용해도 되는 상황인지 판단
*/
public bool IsCanTransferClipBoardAllNet()
{

    // Agent 설정에 모든망 전송 기능이 있는지 확인
    if (AppConfigSvc.GetUseNetOverAllsend() == false)
        return false;

    // 3망 설정상황이 아니면
    if (g_dicDestSysPos == null || g_dicDestSysPos.Count < 3)
        return false;


    // 다접속 상황이면
    if (pageService.m_bIsMultiNetWork)
        return false;

    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    int groupID = 0;
    if (sgSideBar != null)
        groupID = sgSideBar.GroupId;

    SGLoginData sgLoginData = null;
    sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
    if (sgLoginData == null)
        return false;

    // 클립보드 전송 사용 권한이 없으면
    if (sgLoginData.GetClipboard() == false)
        return false;

    // 하나라도 클립보드전송 권한이 없거나 정보가 이상하면
    foreach (var item in g_dicDestSysPos)
    {

        if (item.Value.nIdx > 0 &&
          (item.Value.strDestSysid.Length == 0 || item.Value.bUseClipTrans == false || item.Key.Length < 1))
        {
            return false;
        }
    }

    return true;
}


}