@using System.Diagnostics
@inject NavigationManager MyNavigationManager
<!-- Navbar -->
<!-- Left navbar links -->
<ul class="navbar-nav">
    <li class="nav-item">
        <a class="nav-link white_font" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
    </li>
    <li class="nav-item d-none d-sm-inline-block">
        <!-- <a href="#" class="nav-link pl-1 white_font">자료전송</a> -->
        @if (String.IsNullOrEmpty(SideBarUISvc.ActiveMenu?.Path ?? ""))
        {
            <a class="nav-link pl-1 white_font">@(GetDescription())</a>
        }
        else
        {
            <a href="@SideBarUISvc.ActiveMenu.Path" class="nav-link pl-1 white_font">@(GetDescription())</a>
        }
    </li>
</ul>

<!-- Right navbar links -->
<ul class="navbar-nav ml-auto">
    <!-- user info -->
    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <i class="fas fa-user-alt "></i>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">

            <div class="dropdown-header user-header">
                <img src="@stProfilePhotoPath" alt="User Avatar" class="img-size-100 img-circle m-3">
                <h5 class="m-0 strong">@(GetUserInfo()?.UserName)</h5>
                <span class="small">@(GetUserInfo()?.DeptName)</span>
            </div>

            <div class="dropdown-divider"></div>

            <div class="dropdown-footer clearfix">
                <button @onclick="goToUserInfo" type="button" class="btn btn-block btn-outline-secondary col-md-5 float-left">사용자정보</button>
                <button type="button" class="btn btn-block btn-outline-secondary col-md-4 float-right mt-0">로그아웃</button>
            </div>
        </div>
    </li>
    <!-- /.user info -->
    <!-- Messages Dropdown Menu -->
    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <!--<i class="fas fa-comments "></i>-->
            <i class="@GetNotiIcon() "></i>
            @if ((nNotiCount = GetNotiInfoCount()) > 0)
            {
                //<span class="badge badge-danger navbar-badge">5</span>-->
                <span class="@GetNotiBadge() navbar-badge">@(nNotiCount)</span>
            }
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
            @if (nNotiCount > 0)@foreach (var NotiItem in GetNotiInfoList(5))
                {
                    <a href="@NotiItem.Path" class="dropdown-item">
                        <!-- Message Start -->
                        <div class="media p-1">
                            <img src="@NotiItem.IconImage" alt="User Avatar" class="img-size-50 mr-3 img-circle">
                            <div class="media-body">
                                <h3 class="dropdown-item-title">
                                    <span class="float-right"><a @onclick="@(async () => DelNotiInfo(NotiItem))"><i class="fas fa-times fa-lg"></i></a></span>
                                    @NotiItem.Head
                                    <span class="float-right text-sm text-danger"><i class="fas fa-star"></i></span>
                                </h3>
                                <p class="text-sm">@NotiItem.Body</p>
                                <p class="text-sm text-muted"><i class="far fa-clock mr-1"></i>@(NotiItem.Time.Value.ToString("yyyy/MM/dd hh:mm:ss"))</p>
                            </div>
                        </div>
                        <!-- Message End -->
                    </a>
                    <div class="dropdown-divider"></div>
                }
            @if (String.IsNullOrEmpty(GetNotiPath()))
            {
                <a class="dropdown-item dropdown-footer">See All Messages</a>
            }
            else
            {
                <a href="@GetNotiPath()" class="dropdown-item dropdown-footer">See All Messages</a>
            }
        </div>
    </li>
    <!-- Notifications Dropdown Menu -->


    <li class="nav-item dropdown">
        <a class="nav-link white_font" data-toggle="dropdown" href="#">
            <!--<i class="fas fa-bell"></i>-->
            <i class="@GetAlarmIcon() "></i>
            @if ((nAlarmCount = GetAlarmInfoCount()) > 0)
            {
                //<span class="badge badge-warning navbar-badge">15</span>
                <span class="@GetAlarmBadge() navbar-badge">@(nAlarmCount)</span>
            }
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
            <span class="dropdown-item dropdown-header">@nAlarmCount Notifications</span>
            @if (nAlarmCount > 0)@foreach (var AlarmItem in GetAlarmInfoList(5))
                {
                    <div class="dropdown-divider"></div>
                    <a href="@AlarmItem.Path" class="dropdown-item p-2">
                        <!--<i class="fas fa-envelope mr-2"></i>@AlarmItem.Head-->
                        <span class="float-right"><a @onclick="@(async () => DelAlarmInfo(AlarmItem))"><i class="fas fa-times fa-lg"></i></a></span>
                        <i class="fas fa-bell mr-2"></i>@AlarmItem.Head
                        <p class="text-sm">@AlarmItem.Body</p>
                        <span class="float-right text-muted text-sm"><i class="far fa-clock mr-1"></i>@(AlarmItem.Time.Value.ToString("yyyy/MM/dd hh:mm:ss"))</span>
                    </a>
                }
            @if (String.IsNullOrEmpty(GetAlarmPath()))
            {
                <a class="dropdown-item dropdown-footer">See All Messages</a>
            }
            else
            {
                <a href="@GetAlarmPath()" class="dropdown-item dropdown-footer">See All Messages</a>
            }
            <!--
            <div class="dropdown-divider"></div>
            <a href="@AlarmItem.Path" class="dropdown-item p-2">
            -->
            <!--<i class="fas fa-envelope mr-2"></i>@AlarmItem.Head-->
            <!--
            <span class="float-right"><a @onclick="@(async () => DelAlarmInfo(AlarmItem))"><i class="fas fa-times fa-lg"></i></a></span>
            <i class="fas fa-bell mr-2"></i>@AlarmItem.Head
            <p class="text-sm">@AlarmItem.Body</p>
            <span class="float-right text-muted text-sm"><i class="far fa-clock mr-1"></i>@(AlarmItem.Time.Value.ToString("yyyy/MM/dd hh:mm:ss"))</span>
            </a>
            <div class="dropdown-divider"></div>
            <a href="#" class="dropdown-item p-2">
            <i class="fas fa-file mr-2"></i> 3 new reports
            <span class="float-right text-muted text-sm">2 days</span>
            </a>
            <div class="dropdown-divider"></div>
            <a href="#" class="dropdown-item dropdown-footer">See All Notifications</a>
            -->
        </div>
    </li>
    <li class="nav-item">
        <a class="nav-link white_font" data-widget="control-sidebar" data-slide="true" href="#" role="button"><i class="fas fa-th"></i></a>
    </li>
</ul>
<!-- /.Navbar -->

@code
{
    [Parameter] public ISGHeaderUIService HeaderUISvc { get; set; }
    [Parameter] public ISGUserInfoService UserInfoSvc { get; set; }
    [Parameter] public ISGSideBarUIService SideBarUISvc { get; set; }
    private string stProfilePhotoPath = String.Empty;
    private SGDBProc SQLiteDB { get; } = SGDBProc.Instance;


    private void goToUserInfo()
    {
        MyNavigationManager.NavigateTo("/UserInfo");
    }
    private void RefreshProfilePhoto()
    {
        string pathToContentRoot = string.Empty;
        var pathToExe = Process.GetCurrentProcess().MainModule.FileName;
        pathToContentRoot = Path.GetDirectoryName(pathToExe);

        string filepath = String.Empty;
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".png";
        System.IO.FileInfo f1 = new System.IO.FileInfo(filepath);
        if (f1.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".png";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpg";
        System.IO.FileInfo f2 = new System.IO.FileInfo(filepath);
        if (f2.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpg";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpeg";
        System.IO.FileInfo f3 = new System.IO.FileInfo(filepath);
        if (f3.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpeg";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".gif";
        System.IO.FileInfo f4 = new System.IO.FileInfo(filepath);
        if (f4.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".gif";
            return;
        }
        stProfilePhotoPath = "/images/avatar.png";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
        }
        else if(GetUserInfo() != null && stProfilePhotoPath == String.Empty)
        {
            RefreshProfilePhoto();
        }
    }

    private string GetDescription()
    {
        return MenuNameMapper.GetDescription(SideBarUISvc.ActiveMenu?.CategoryId ?? LSIDEBAR.MENU_CATE_ROOT);
    }

    private ISGUserInfo GetUserInfo()
    {
        return UserInfoSvc.GetUserInfo(SideBarUISvc.ActiveMenu?.GroupId ?? 0);
    }

    /* Related, Notify Info and Notify Info DB Fucntion */
    private int nNotiCount { get; set; }
    private string GetNotiPath()
    {
        return HeaderUISvc?.Header?.NotiInfo.NotiPath;
    }
    private string GetNotiIcon()
    {
        return HeaderUISvc?.Header?.NotiInfo.Icon;
    }
    private string GetNotiBadge()
    {
        return HeaderUISvc?.Header?.NotiInfo.Badge;
    }
    private int GetNotiInfoCount()
    {
        return SQLiteDB.SelectNotiInfoCount(SideBarUISvc.ActiveMenu?.GroupId ?? 0);
    }
    private List<SGNotiData> GetNotiInfoList(int nLimit)
    {
        return SQLiteDB.SelectNotiInfoLimit(SideBarUISvc.ActiveMenu?.GroupId ?? 0, nLimit);
    }
    private bool DelNotiInfo(SGNotiData notiData)
    {
        SQLiteDB.DeleteNotiInfo(notiData);
        SideBarUISvc.EmitNotifyStateChangedActMenu();
        return true;
    }

    /* Related, Alarm Info and Notify Info DB Fucntion */
    private int nAlarmCount { get; set; }
    private string GetAlarmPath()
    {
        return HeaderUISvc?.Header?.AlarmInfo.AlarmPath;
    }
    private string GetAlarmIcon()
    {
        return HeaderUISvc?.Header?.AlarmInfo.Icon;
    }
    private string GetAlarmBadge()
    {
        return HeaderUISvc?.Header?.AlarmInfo.Badge;
    }
    private int GetAlarmInfoCount()
    {
        return SQLiteDB.SelectAlarmInfoCount(SideBarUISvc.ActiveMenu?.GroupId ?? 0);
    }
    private List<SGAlarmData> GetAlarmInfoList(int nLimit)
    {
        return SQLiteDB.SelectAlarmInfoLimit(SideBarUISvc.ActiveMenu?.GroupId ?? 0, nLimit);
    }
    private bool DelAlarmInfo(SGAlarmData alarmData)
    {
        SQLiteDB.DeleteAlarmInfo(alarmData);
        SideBarUISvc.EmitNotifyStateChangedActMenu();
        return true;
    }
}