@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering;
@inject ISGAppManagerService SGAppMgrSvc
@inject XmlConfService XmlConf
@inject HSCmdCenter HsCmdCenter
@inject PageStatusService pageService
@inject IJSRuntime jsRuntime

<div class="card-body  p-0" style="height:@(Height.ToString() + "px");">
    @if (UseInputSearch)
    {
        <div class="d-inline-flex  w-100 mb-2 " style="height:29px;">
            <label class="p-1">@strDept</label>                                                       <!--부서-->
            <input type="text" class="form-control col-md-3" @onkeyup="HandleKeyEvent" placeholder="@strDeptPlaceHolder" value="@strInputDept" @oninput="@(e => strCurrentInputDept = e.Value.ToString())">
            <label class="p-1 pl-2">@strName</label>                                                  <!--이름-->
            <input type="text" class="form-control col-md-3" @onkeyup="HandleKeyEvent" placeholder="@strNamePlaceHolder" value="@strInputName" @oninput="@(e => strCurrentInputName = e.Value.ToString())">
            <div style="flex:1 0 auto"/>    
            <button type="button" class="btn bg-gradient-secondary ml-1" @onclick="callBackSearch"><i class="fas fa-search pr-1 pl-1"></i>@strSearch</button>  <!--조회-->
    </div>
    }

    <div class="p-1 mb-2" style="height:@(TreeHeight.ToString() + "px");border:1px solid #ddd; background-color:#fff;">
        <RadzenTree Change="@selectDept" Data="@deptTreeInfoValues" Style="width: 98%;height:95%;overflow:auto">
            <RadzenTreeLevel TextProperty="DeptName" ChildrenProperty="ChildrenInfo" HasChildren="@((data) => false)" Expanded="@(data => (data as DeptTreeInfo).IsExpanded)" Selected="@(data => (data as DeptTreeInfo).DeptSeq == strSelectedDeptCode)" Template="DeptTemplate" />
        </RadzenTree>
    </div>
</div>
@code {
    [Parameter] public int Height { get; set; } = 368;

    [Parameter] public bool UseInputSearch { get; set; } = true;
    [Parameter] public EventCallback<string[]> OnSearchClick { get; set; }

    private int TreeHeight
    {
        get
        {
            return Height - 28;
        }
    }
    /// <summary>
    /// 현재 Active 되어 있는 Groupid
    /// </summary>
    int activedGroupID
    {
        get
        {
            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            return (sgSideBar == null) ? 0 : sgSideBar.GroupId;
        }
    }

    /// <summary>
    /// 현재 Active된 GRoupid 에 로그인된 정보
    /// </summary>
    SGLoginData activedSGLogin
    {
        get
        {
            int groupid = activedGroupID;
            SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
            return sgLoginData;
        }
    }

    private ISGSideBarUIService SideBarUISvc;

    string strInputDept = "";
    string strInputName = "";
    string strCurrentInputDept = "";
    string strCurrentInputName = "";

    //string currentSelectKey = "";

    private string strDept = "";
    private string strName = "";
    private string strSearch = "";
    private string strOrder = "";
    private string strRank = "";
    private string strDeptPlaceHolder = "";
    private string strNamePlaceHolder = "";
    private string strSelectedDeptCode = "";
    //private static Action<string> actionAssign;                 //조회대상 SEQ


    /// <summary>
    /// 부서 Tree를 구성하는 Source
    /// </summary>
    private List<DeptTreeInfo> deptTreeInfoValues = null;

    RenderFragment<RadzenTreeItem> DeptTemplate = (context) => builder =>
    {
        DeptTreeInfo dept = context.Value as DeptTreeInfo;

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", "assignment");



        if (dept.ChildrenInfo == null || dept.ChildrenInfo.Count <= 0)
            builder.AddAttribute(2, "Style", "margin-left: 15px");

        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    protected override void OnInitialized()
    {
        @*actionAssign = AssignApprover;*@
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        InitText();
        base.OnInitialized();
    }


    public void InitText()
    {
        @*strApproverSearch = XmlConf.GetTitle("T_COMMON_APPROVESEARCH");             // 결재자 조회*@
        strDept = XmlConf.GetTitle("T_COMMON_DEPT");                                // 부서
        strName = XmlConf.GetTitle("T_COMMON_NAME");                                // 이름
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            // 조회
        strOrder = XmlConf.GetTitle("T_COMMON_ORDER");                              // 순번
        strRank = XmlConf.GetTitle("T_COMMON_RANK");                                // 직급
        @*strOrder = XmlConf.GetTitle("T_COMMON_ORDER");                              // 순번
            strRank = XmlConf.GetTitle("T_COMMON_RANK");                                // 직급
            strMostTop = XmlConf.GetTitle("T_ETC_TOP");                                 // 맨위
            strMostBottom = XmlConf.GetTitle("T_ETC_BOTTOM");                           // 맨아래
            strTop = XmlConf.GetTitle("T_ETC_UP");                                      // 위
            strDown = XmlConf.GetTitle("T_ETC_DOWN");                                   // 아래
            strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
            strClose = XmlConf.GetTitle("T_FILE_FOLD");                                 // 닫기*@
    strDeptPlaceHolder = XmlConf.GetTitle("T_INPUT_DEPT");                       // 부서입력
        strNamePlaceHolder = XmlConf.GetTitle("T_INPUT_NAME");                       // 이름입력
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            callBackSearch();
        }
    }


    void callBackSearch()
    {
        if(!strInputDept.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }
        
        if(!strInputName.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }
        OnSearchClick.InvokeAsync(new string[] { strInputDept, strInputName });
    }

    public void BindEvent()
    {
        //Tree 및 리스트 재정렬
        deptTreeInfoValues = null;

        HsCmdCenter.sgPageEvent.SetDeptInfoEventAdd(activedGroupID, setDeptTree);
        if (activedSGLogin != null)
        {
            HsCmdCenter.SendDeptInfo(activedGroupID, activedSGLogin.GetUserID());
            strSelectedDeptCode = activedSGLogin.GetTeamCode();
        }
    }

    /// <summary>
    /// 선택된 부서로 조회
    /// </summary>
    /// <param name="args"></param>
    void selectDept(TreeEventArgs args)
    {
        DeptTreeInfo selectedDept = args.Value as DeptTreeInfo;

        if (selectedDept == null)
            return;
        strInputDept = selectedDept.DeptName;
        strInputName = "";

        strCurrentInputDept = strInputDept;
        strCurrentInputName = strInputName;

        callBackSearch();

        StateHasChanged();
    }

    /// <summary>
    /// 부서 트리 세팅하기
    /// </summary>
    /// <param name="groupId"></param>
    public void setDeptTree(int groupId)
    {
        SGDeptInfo info = (SGDeptInfo)HsCmdCenter.GetDeptInfoData(groupId);

        //부서 Tree 세팅
        deptTreeInfoValues = info?.GetDeptInfoTree(strSelectedDeptCode);

        StateHasChanged();
    }
}
