@using System.IO
@using BlazorInputFile
@using System.Diagnostics
@using OpenNetLinkApp.Services
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGQuery
@using AgLogManager
@using System.Threading
@using OpenNetLinkApp.Common

@inject IJSRuntime jsRuntime
@inject IFileReaderService fileReaderService
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService
@inject WebWindow Window

<DropTarget Drop="@OnDrop">
    <div class="dropzone col-md-12 p-0" style="overflow:auto;height:100%;" @onclick="fileSelectOpen">
        <input type="file" id="fileInputTrans" style="display:block;" onclick="stopClickOpen(event);" multiple="multiple" />


        @if (bViewDropFileAddError && (fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message" style="font-size:14px;">Only image files are accepted.</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message" style="font-size:14px;">The max file size is @MaxFileSizeMB MB.</li>
                }
            </ul>
        }

        @if (HsStreamList != null && HsStreamList.Count > 0)
        {
            <table id="example2" class="table table-head-fixed table-hover mb-0" style="font-size: 14px;table-layout: fixed;">
                <thead>
                    <tr>
                        <th style="width:70%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@strFileName</th>                 <!--파일명-->
                        <th width="10%">@strFileSize</th>                 <!--크기-->
                        <th width="10%">@strFileType</th>                 <!--유형-->
                        <!--<th width="30%">@strLastModDay</th>-->               <!--수정한 날짜-->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in HsStreamList)
                    {
                        <tr style="height:20px;">
                            <td style="width:70%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" alt="@file.FileName" title="@file.FileName">@file.FileName</td>
                            <td width="10%">@(file.IsDir? "" : CsFunction.GetSizeStr(file.Length))</td>
                            <td width="10%">@file.Type</td>
                            <!--<td width="30%">@file.ModifyTime.ToString("yyyy/MM/dd HH:mm:ss")</td>-->
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {

            <p style="font-size:13px;">
                <br /><br /><br /><br />
                @((MarkupString)strFileDragInfo)         <!--파일을 이곳으로 드래그 하세요.-->
            </p>

        }
    </div>
    <a hidden data-toggle="modal" data-target="modal-dropprogress"></a>
    <a hidden data-toggle="modal" data-target="Transfer_Denied"></a>
</DropTarget>


<DropProgress @ref="refProgress"></DropProgress>
<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>

@code {

    [Parameter]
    public EventCallback<string> OnDropClear { get; set; }
    [Parameter]
    public EventCallback<string> OnFileSelectOpen { get; set; }

    string strFileName = "";
    string strFileSize = "";
    string strFileType = "";
    string strLastModDay = "";
    string strRelativePath = "";
    string strFileDragInfo = "";

    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB

    public bool fileSizeError = false;
    public bool fileTypeError = false;

    public bool bViewDropFileAddError = false;

    // private static Action<FileListEntryImpl[], bool> action1;
    // private static Action<FileListEntryImpl[],bool> action2;

    public ElementReference inputTypeFileElement;
    IFileReaderRef _dropReference = null;

    public List<HsStream> HsStreamList = null;

    ISGSideBarUIService SideBarUISvc;

    public bool bAsyncData = false;
    List<string> strRootPath = new List<string>();

    DropProgress refProgress = new DropProgress();

    Transfer_Denied refTransferDenied;

    public FileAddManage fileAddManage;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<DropFileList>();
    public bool bHandleFileFlag = false;

    ISGSiteConfigService siteConfig;

    private async Task fileSelectOpen()
    {
        await OnFileSelectOpen.InvokeAsync("open");
    }

    public async Task ExtDropClear()
    {
        bAsyncData = false;
        await OnDropClear.InvokeAsync("clear");
    }

    public async Task DataClear()
    {

        fileAddManage.m_nTansCurSize = 0;

        if (bAsyncData)
        {
            await ExtDropClear();
        }

        if (HsStreamList.Count > 0)
            HsStreamList.Clear();

        StateHasChanged();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    //디렉토리 검색 함수
    void DirFileSearch(string path)
    {
        try
        {
            string[] dirs = Directory.GetDirectories(path);
            string[] files = Directory.GetFiles(path);
            foreach (string f in files)
            {
                //파일이면 파일을 복사하고(위코드참고)
                Debug.WriteLine(f);
            }
            if (dirs.Length > 0)
            {
                foreach (string dir in dirs)
                {
                    Debug.WriteLine(dir);
                    //디렉토리면 디렉토리 만들고 System.IO.Directory.CreateDirectory(path);
                    DirFileSearch(dir);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void WaitForHandleFile()
    {
        Task.Delay(1000);
        if (bHandleFileFlag == true)
        {
            Debug.WriteLine("bHandleFileFlag Is True");
        }
        else
        {
            //jsRuntime.InvokeAsync<object>("reprotHandFileList");
            Debug.WriteLine("bHandleFileFlag Is False");
        }
        bHandleFileFlag = false;
    }

    public async void OnDrop(List<string> recvlist)
    {
        int dropNdrop = await SubFileAddAsync(); //내부에서 드랍한 것인지 외부에서 드랍한 것인지 판단하기 위해 외부에서 들어온 것인지 먼저 판단

        if (dropNdrop != 0)
        {
            return;
        }

        if (recvlist.Count <= 0)
        {
            return;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        FileExamEvent SGFileExamEvent = null;
        SGFileExamEvent = HSCmdCenter.sgPageEvent.GetFileExamNotiEvent(groupID);
        if (SGFileExamEvent == null)
            return;

        HsStream hsStream = null;

        fileAddManage.DataClear();

        foreach (var item in HsStreamList)
        {
            for (int i = 0; i < recvlist.Count; i++)
            {
                string strItemFileName = Path.GetFileName(item.RelativePath);
                string strListFileName = Path.GetFileName(recvlist[i]);
                if (strItemFileName == strListFileName)
                {
                    recvlist.RemoveAt(i);
                }
            }
        }
        int nTotalCount = GetListTotalCount(recvlist);
        if (nTotalCount <= 0)
            return;

        if (GetRegCountEnable(nTotalCount) == false)
        {
            return;
        }

        List<string> list = new List<string>(recvlist);
        await refProgress.openPopUp();

        int per = 0;
        int nExamCount = 0;
        for (int i = 0; i < list.Count; i++)
        {
            if (pageService.GetFileExaming() == false)
            {
                StateHasChanged();
                return;
            }

            string data = list[i];
            //Console.WriteLine($"File Dropped  {data}");
            if (data != null && data.Length > 0)
            {
                bool bFind = false;
                string strDataFileName = "";
                foreach (var item in HsStreamList)
                {
                    string strItemFileName = Path.GetFileName(item.RelativePath);
                    strDataFileName = Path.GetFileName(data);
                    if (strItemFileName == strDataFileName)
                    //if (item.RelativePath == data)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                {
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, strDataFileName);
                    continue;
                }
                System.IO.FileInfo fInfo = new System.IO.FileInfo(data);
                FileAttributes attr = fInfo.Attributes;

                if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                {
                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Type = fInfo.Attributes.ToString();
                    hsStream.StartPath = "";
                    hsStream.RelativePath = fInfo.Name;
                    hsStream.Size = fInfo.Length;

                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    }
                    else
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                    }
                    //hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");

                    if (fInfo.Name.LastIndexOf(".") > -1)
                        hsStream.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";

                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime SubDate = (DateTime)hsStream.ModifyTime;
                    string strSubDate = SubDate.ToShortDateString();
                    strSubDate = strSubDate.Replace("-", "");
                    string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", SubDate.Hour, SubDate.Minute, SubDate.Second);
                    hsStream.MTime = strSubDate + strSubTime;
                    hsStream.IsDir = false;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    }
                    else
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                    }

                    bool bHidden = false;
                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        bHidden = true;
                    if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden, hsStream.Size))
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }

                    try
                    {
                        hsStream.stream = File.OpenRead(fInfo.FullName);
                    }
                    catch
                    {
                        fileAddManage.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);
                        CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }
                    //hsStream.stream = File.OpenRead(fInfo.FullName);
                    if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                    {
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }
                    if (await GetExamCheckZip(fileAddManage, hsStream, SGFileExamEvent, nExamCount, nTotalCount) != 0)
                    {
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, hsStream.FileName);
                }
                else if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    DirectoryInfo di = new DirectoryInfo(fInfo.FullName);
                    if (di.Exists != true)
                        continue;

                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        continue;

                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Size = 0;
                    hsStream.Type = "DIR";
                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime date = (DateTime)hsStream.ModifyTime;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.RelativePath = fInfo.FullName;
                    hsStream.IsDir = true;
                    hsStream.StartPath = hsStream.RelativePath;
                    string strStartPath = hsStream.StartPath;
                    hsStream.stream = null;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    if (!hsStream.StartPath.Equals(""))
                    {
                        int index = -1;
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            index = hsStream.StartPath.LastIndexOf("\\");
                        }
                        else
                        {
                            index = hsStream.StartPath.LastIndexOf("/");
                        }
                        //index = hsStream.StartPath.LastIndexOf("\\");
                        if (index >= 0)
                        {
                            hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                            string startPath = "";
                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                startPath = hsStream.StartPath + "\\";
                            }
                            else
                            {
                                startPath = hsStream.StartPath + "/";
                            }
                            //string startPath = hsStream.StartPath + "\\";
                            if (!hsStream.RelativePath.Equals(startPath))
                                hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                        }
                    }
                    else
                        hsStream.RelativePath = hsStream.RelativePath;

                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    }
                    else
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                    }

                    SetFileAdd(hsStream);
                    nExamCount++;

                    List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                    if (FileData == null)
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }

                    if (FileData.Count == 0)
                    {
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }

                    foreach (var item in FileData)
                    {
                        hsStream = new HsStream();
                        hsStream.FileName = item.Name;
                        hsStream.Type = item.Attributes.ToString();
                        hsStream.StartPath = strStartPath;
                        hsStream.RelativePath = item.FullName;
                        if (!hsStream.StartPath.Equals(""))
                        {
                            int index = -1;
                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                index = hsStream.StartPath.LastIndexOf("\\");
                            }
                            else
                            {
                                index = hsStream.StartPath.LastIndexOf("/");
                            }
                            //index = hsStream.StartPath.LastIndexOf("\\");
                            if (index >= 0)
                            {
                                hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                                string startPath = "";
                                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                {
                                    startPath = hsStream.StartPath + "\\";
                                }
                                else
                                {
                                    startPath = hsStream.StartPath + "/";
                                }
                                //string startPath = hsStream.StartPath + "\\";
                                if (!hsStream.RelativePath.Equals(startPath))
                                    hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                            }
                        }
                        else
                            hsStream.RelativePath = hsStream.RelativePath;

                        if ((hsStream.Type.Equals("Directory")) || (hsStream.Type.Equals("Hidden, Directory")))
                        {
                            hsStream.Size = 0;
                            hsStream.Type = "DIR";
                            hsStream.stream = null;
                            hsStream.MemoryType = HsStreamType.FileStream;
                            hsStream.IsDir = true;
                        }
                        else
                        {
                            hsStream.Size = item.Length;
                        }
                        if (hsStream.Type.Equals("Archive"))
                        {
                            if (item.Name.LastIndexOf(".") > -1)
                                hsStream.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                            else
                                hsStream.Type = "";

                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                            }
                            else
                            {
                                hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                            }
                            //hsStream.stream = File.OpenRead(item.FullName);
                            hsStream.IsDir = false;

                        }

                        hsStream.ModifyTime = item.LastWriteTime;
                        DateTime SubDate = (DateTime)hsStream.ModifyTime;
                        string strSubDate = SubDate.ToShortDateString();
                        strSubDate = strSubDate.Replace("-", "");
                        string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                        hsStream.MTime = strSubDate + strSubTime;
                        hsStream.MemoryType = HsStreamType.FileStream;
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        }
                        else
                        {
                            hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                        }
                        if (hsStream.IsDir == false)
                        {
                            bool bHidden = false;
                            if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                                bHidden = true;
                            if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden, hsStream.Size))
                            {
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                continue;
                            }
                        }
                        if (!hsStream.Type.Equals("DIR"))
                        {
                            try
                            {
                                //hsStream.stream = File.OpenRead(fInfo.FullName); 경로 오류 수정 2020/11/26 YKH
                                hsStream.stream = File.OpenRead(item.FullName);
                            }
                            catch
                            {
                                fileAddManage.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);
                                CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                continue;
                            }
                            //hsStream.stream = File.OpenRead(fInfo.FullName);
                            if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                            {
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                continue;
                            }
                            if (await GetExamCheckZip(fileAddManage, hsStream, SGFileExamEvent, nExamCount, nTotalCount) != 0)
                            {
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                continue;
                            }
                        }
                        //HsStreamList.Add(hsStream);
                        SetFileAdd(hsStream);

                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                    }
                }
            }
        }
        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetRMouseFileAddEventAdd(groupID, RMouseFileAction);
        InitText();
        @*action1 = HandleFileInputChange;
            action2 = HandleFileInputChange;*@
        //SGFileExamEvent = FileExamResult;
        HSCmdCenter.sgPageEvent.SetFileExamNotiEventAdd(groupID, FileExamResult);
        PageStatusData pageSData = pageService.GetPageStatus(groupID);
        HsStreamList = pageSData.GetFileDragListData();
        fileAddManage = pageSData.GetFileAddManage();

        //파일리더 초기화 통합
        _dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInputTrans");
        _dropReference.SetDragTargetElementAsync(targets);

        bViewDropFileAddError = siteConfig.GetUseDropErrorUI();
    }

    private void onDrop()
    {
        //Console.WriteLine("OnDrop Event Occured");
    }

    private void HandleDrop()
    {
        //Console.WriteLine("HandleDrop Event Occured");
    }

    private void HandleClick()
    {
        // Console.WriteLine("Click Event Occured");
        //SGSubFileAddEvent.Invoke();
        //SubFileAddAsync();
    }

    private void HandleDragEnter()
    {
        //dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        //dropClass = "";
    }

    /// <summary>
    /// file 정보를 가져와서 HsStream 으로 변경
    /// </summary>
    /// <param name="files"></param>
    /// <returns></returns>
    public async Task<List<HsStream>> SubFileAddAsync(IEnumerable<IFileReference> files)
    {
        List<HsStream> hsStreamList = new List<HsStream>();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        FileExamEvent SGFileExamEvent = null;
        SGFileExamEvent = HSCmdCenter.sgPageEvent.GetFileExamNotiEvent(groupID);
        if (SGFileExamEvent == null)
            return hsStreamList;

        fileAddManage.DataClear();
        List<string> dirs = new List<string>();

        int nTotalCount = files.Count();
        if (nTotalCount < 1)
            return hsStreamList;

        if (GetRegCountEnable(nTotalCount) == false)
            return hsStreamList;


        await refProgress.openPopUp();

        HsStream hsStream = null;
        int nExamCount = 0;
        int per = 0;
        foreach (var file in files)
        {
            if (pageService.GetFileExaming() == false)
            {
                StateHasChanged();
                return hsStreamList;
            }

            //자바스크립트로부터 드래그앤 드롭한 폴더 정보 가져오기
            //파일 불러오는데 문제가 있다면 필히 자바스크립트를 확인해야함!!!

            var fileInfo = await file.ReadFileInfoAsync();
            if (fileInfo == null)
            {
                await refProgress.closePopUp();
                return hsStreamList;
            }
            Debug.WriteLine("FileName:" + fileInfo.Path);

            bool bFind = false;
            foreach (var item in HsStreamList)
            {
                string stListPath = item.RelativePath.Replace("\\", "").Replace("/", "");
                string stNewPath = fileInfo.Path.Replace("\\", "").Replace("/", "");

                if (stListPath == stNewPath)
                {
                    bFind = true;
                    break;
                }
            }
            if (bFind == true)
            {
                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per, fileInfo.Name);
                continue;
            }

            bAsyncData = true;

            hsStream = new HsStream();

            if (fileInfo.Dir != "Dir")
            {
                hsStream.Size = fileInfo.Size;
                hsStream.FileName = Path.GetFileName(fileInfo.Path);
                hsStream.RelativePath = fileInfo.Path;
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                }
                else
                {
                    hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                }

                DateTime date = DateTime.ParseExact(fileInfo.Etc, "yyyy/MM/dd HH:mm:ss", null);
                //DateTime date = (DateTime)fileInfo.LastModifiedDate;
                hsStream.ModifyTime = date;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;


                if (!hsStream.FileName.Equals(""))
                {
                    if (hsStream.FileName.LastIndexOf(".") > -1)
                        hsStream.Type = hsStream.FileName.Substring(hsStream.FileName.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";
                }
                hsStream.IsDir = false;
                hsStream.MemoryType = HsStreamType.MemoryStream;
                if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, false, hsStream.Size))
                {
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, hsStream.FileName);
                    continue;
                }
                CLog.Here().Information($"fileName : [{fileInfo.Name}] OpenReadAsync before!");

                //OpenReadAsyncNoSetUsedList로 변경
                //레드마인 #2446 [2022-04-19] 드래그 앤 드롭 폴더 추가 이슈사항 참고
                //hsStream.stream = await file.OpenReadAsync(); // => 이 로직에는 DirSubFiles.use[i] = "y"로 설정하는 부분이 있음 그래서 짝수번째 폴더는 추가 안되는 현상 발생

                hsStream.stream = await file.OpenReadAsyncNoSetUsedList();
                CLog.Here().Information($"fileName : [{fileInfo.Name}] OpenReadAsync after!");

                if (await GetReadRightCheck(fileAddManage, hsStream) == 0)
                {
                    CLog.Here().Information($"fileName : [{fileInfo.Name}] File Access deny!");
                    hsStream.stream = null;
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, hsStream.FileName);
                    continue;
                }

                if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                {
                    hsStream.stream = null;
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, hsStream.FileName);
                    continue;
                }
                if (hsStream.FileName.ToLower().IndexOf(".zip") > -1)
                {
                    per = (nExamCount * 100) / nTotalCount;
                    if (per < 10) //압축해제 시간이 너무 걸려서 멈춰보여서 진행율 임의로 올림
                        per = 10;
                    SGFileExamEvent(per, hsStream.FileName);
                }

                if (await GetExamCheckZip(fileAddManage, hsStream, SGFileExamEvent, nExamCount, nTotalCount) != 0)
                {
                    hsStream.stream = null;
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    if (per < 10)
                        per = 10;
                    SGFileExamEvent(per, hsStream.FileName);
                    continue;
                }

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                }
                else
                {
                    hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                }
                hsStreamList.Add(hsStream);
                //SetFileAdd(hsStream);
                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per, hsStream.FileName);
            }
            else
            {
                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per, fileInfo.Name);
            }
        }

        return hsStreamList;
        //StateHasChanged();
    }

    /// <summary>
    /// 폴더 정보를 가져와서 HsStream 으로 변경
    /// </summary>
    /// <param name="files"></param>
    /// <returns></returns>
    public async Task<List<HsStream>> SubDirAddAsync(IEnumerable<IFileReference> files)
    {
        List<HsStream> hsList = new List<HsStream>();

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        foreach (var file in files)
        {
            bAsyncData = true;
            //자바스크립트로부터 드래그앤 드롭한 폴더 정보 가져오기
            //파일 불러오는데 문제가 있다면 필히 자바스크립트를 확인해야함!!!

            var fileInfo = await file.ReadFileInfoDirAsync();

            bool isExist = false;
            foreach (HsStream hs in HsStreamList)
            {
                string stListPath = hs.RelativePath.Replace("\\", "").Replace("/", "");
                string stNewPath = fileInfo.Path.Replace("\\", "").Replace("/", "");

                if (stListPath == stNewPath)
                {
                    isExist = true;
                    break;
                }
            }

            if (isExist)
            {
                continue;
            }


            HsStream hsStream = new HsStream();

            hsStream.FileName = fileInfo.Name;
            hsStream.RelativePath = fileInfo.Path;
            DateTime date = DateTime.Now;
            hsStream.ModifyTime = date;
            string strDate = date.ToShortDateString();
            strDate = strDate.Replace("-", "");
            string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
            hsStream.MTime = strDate + strTime;
            hsStream.Type = "DIR";
            hsStream.IsDir = true;
            hsStream.Size = 0;
            hsStream.MemoryType = HsStreamType.MemoryStream;
            hsStream.stream = null;

            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
            }
            else
            {
                hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
            }

            hsList.Add(hsStream);
        }

        return hsList;
    }
    /// <summary>
    /// 폴더와 파일 List를 가져와서 순서에 맞게 배열
    /// </summary>
    /// <param name="folderList"></param>
    /// <param name="fileList"></param>
    /// <returns></returns>
    public List<HsStream> ReSortFile(List<HsStream> folderList, List<HsStream> fileList)
    {
        List<HsStream> finalList = new List<HsStream>();

        foreach (HsStream stFolder in folderList)
        {
            finalList.Add(stFolder);
            string stfolderPath = stFolder.RelativePath.Replace("\\", "").Replace("/", "");
            foreach (HsStream stFile in fileList)
            {
                string stfileFolderPath = Path.GetDirectoryName(stFile.RelativePath);
                string stfilePath = stfileFolderPath.Replace("\\", "").Replace("/", "");

                if (stfolderPath == stfilePath)
                {
                    finalList.Add(stFile);
                }
            }
        }

        foreach (HsStream stFile in fileList)
        {
            if (stFile.FileName == stFile.RelativePath)
            {
                finalList.Add(stFile);
            }
        }

        return finalList;
    }
    /// <summary>
    /// 전체파일을 화면에 보여줌.
    /// </summary>
    /// <param name="fileList"></param>
    /// <returns></returns>
    public async Task UpLoadFile(List<HsStream> fileList)
    {
        foreach (HsStream st in fileList)
        {
            SetFileAdd(st);
        }
        StateHasChanged();
    }

    private void RemoveFile(IFileListEntry file)
    {
        FileListEntryImpl fileEntry = new FileListEntryImpl();
        fileEntry.Name = file.Name;
        fileEntry.Size = file.Size;
        fileEntry.RelativePath = file.RelativePath;
        fileEntry.Type = file.GetType().FullName;

        // selectedFiles.Remove(fileEntry);
    }

    public async Task RemoveAllFile()
    {
        await DataClear();
    }

    //DropZone 클릭방지코드
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        base.OnAfterRender(firstRender);
        RMouseFileAddEvent RMouseFileAdd = null;
        RMouseFileAdd = HSCmdCenter.sgPageEvent.GetRMouseFileAddEvent(groupID);
        string strRMFilePath = PageStatusData.GetRMFIlePath();
        if ((RMFileExist(strRMFilePath) == true) && (RMouseFileAdd != null))
            RMouseFileAdd(groupID);
        return stopClick();
    }
    private async Task stopClick()
    {
        await jsRuntime.InvokeAsync<object>("stopClick");

        //dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        //string targets = new string("fileInput");
        //await dropReference.SetDragTargetElementAsync(targets);
        //await dropReference.RegisterDropEventsAsync(false);
    }

    public void InitText()
    {

        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                   // 파일명
        strFileSize = XmlConf.GetTitle("T_COMMON_SIZE");                       // 크기
        strFileType = XmlConf.GetTitle("T_COMMON_KIND");                       // 유형
        strLastModDay = XmlConf.GetTitle("T_COMMON_MODIFYDATE");               // 수정한 날짜.
        strRelativePath = XmlConf.GetTitle("T_FILE_PATH");                     // 경로
        strFileDragInfo = XmlConf.GetInfoMsg("I_0189");                        // 파일을 이곳으로 드래그 하세요.
    }

    public List<System.IO.FileInfo> DirSearch(string sDir, List<System.IO.FileInfo> temp = null)
    {
        bool bAccess = true;
        bAccess = IsAccessible(sDir);
        if (!bAccess)
        {
            string strErr = XmlConf.GetErrMsg("E_0214");        //해당 디렉토리 접근권한이 없습니다.
            ShowMessage("error", strErr);
            return null;
        }

        if (temp == null)
            temp = new List<System.IO.FileInfo>();
        DirectoryInfo di = new DirectoryInfo(sDir);


        foreach (var item in Directory.GetDirectories(sDir))
        {
            System.IO.FileInfo fInfo = new System.IO.FileInfo(item);
            temp.Add(fInfo);
            DirSearch(item, temp);
        }

        foreach (var item in di.GetFiles())
        {
            temp.Add(item);
        }
        return temp;
    }

    public bool IsAccessible(string RealPath)
    {
        //get directory info
        DirectoryInfo realpath = new DirectoryInfo(RealPath);
        CLog.Here().Information($"IsAccessible RealPath = [{RealPath}]");
        CLog.Here().Information($"IsAccessible realpath = [{realpath}]");
        try
        {
            //if GetDirectories works then is accessible
            realpath.GetDirectories();
            return true;
        }
        catch (Exception)
        {
            //if exception is not accesible
            return false;
        }
    }

    public void SetFileAdd(HsStream hs)
    {
        if (hs == null)
            return;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        pageService.SetFileAdd(groupID, hs);
    }

    public List<HsStream> GetHsStreamList()
    {
        return HsStreamList;
    }

    public int GetFileListAddCount()
    {
        return HsStreamList.Count();
    }

    public bool GetRootPathFind(string strFilePath)
    {
        bool bFind = false;
        string strTempPath = "";
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            strFilePath = strFilePath.Replace("/", "\\");
        }
        else
        {
            strFilePath = strFilePath.Replace("\\", "/");
        }
        //strFilePath = strFilePath.Replace("/", "\\");
        for (int i = 0; i < strRootPath.Count; i++)
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                strTempPath = strRootPath[i] + "\\";
            }
            else
            {
                strTempPath = strRootPath[i] + "/";
            }
            //strTempPath = strRootPath[i] + "\\";
            if (strTempPath.Equals(strFilePath))
                bFind = true;
        }
        return bFind;
    }

    /// <summary>
    /// 파일추가시 검사 중, 검사 종료후 호출해주는 함수
    /// </summary>
    /// <param name="per"></param>
    /// <param name="strFileName"></param>
    private async void FileExamResult(int per, string strFileName)
    {
        if (per < 0)
        {
            await refProgress.closePopUp();
            string strMsg = XmlConf.GetErrMsg("E_0212");                // 파일 로드 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        if (per >= 100)
        {
            refProgress.ChangeProgress(100, strFileName);
            await Task.Delay(500);
            await refProgress.closePopUp();
            int nErrCount = fileAddManage.GetAddErrCount();
            if (nErrCount > 0)
            {
                refTransferDenied.CopyData(fileAddManage.m_FileAddErrList);
                List<string> listReason = fileAddManage.GetMakeReason();
                refTransferDenied.CopyReason(listReason);
                fileAddManage.RestoreFileSizeLimit();   //전송량 원복 2021/04/23 YKH
                await refTransferDenied.openPopUp();
            }
            else
                fileAddManage.m_nCurRegisteringSize = 0;
            return;
        }
        refProgress.SetProgressText(false);
        refProgress.ChangeProgress(per, strFileName);
    }

    public int GetListTotalCount(List<string> list)
    {
        if ((list == null) || (list.Count <= 0))
            return 0;

        int count = list.Count;
        for (int i = 0; i < list.Count; i++)
        {
            string data = list[i];
            System.IO.FileInfo fInfo = new System.IO.FileInfo(data);
            FileAttributes attr = fInfo.Attributes;
            if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
            {
                List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                if (FileData == null)
                    continue;
                count += FileData.Count;
            }
        }

        return count;
    }

    public long GetRegListTotalSize()
    {
        long totalSize = 0;
        int nRegCount = GetFileListAddCount();
        if (nRegCount <= 0)
            return totalSize = 0;

        for (int i = 0; i < nRegCount; i++)
        {
            totalSize += HsStreamList[i].Size;
        }

        return totalSize;
    }

    public int GetRegListTotalCount()
    {
        return GetFileListAddCount();
    }

    public bool GetRegCountEnable(int nRegCount)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        int nEnableCount = sgLoginData.GetFileLimitCount();
        nRegCount = nRegCount + GetRegListTotalCount();

        if (FileAddManage.GetRegCountEnable(nEnableCount, nRegCount) != true)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0019");                 // 최대 {0}개 파일을 등록할 수 있습니다.
            strMsg = String.Format(strMsg, nEnableCount);
            ShowMessage("warn", strMsg);
            return false;
        }
        return true;
    }

    public bool GetRegSizeEnable(FileAddManage fileaddManage, long nRegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        long nEnableSize = sgLoginData.GetFileLimitSize();
        long nConvEnableSize = nEnableSize * (1024 * 1024);                                           // byte 변환

        nRegSize = nRegSize + GetRegListTotalSize();

        if (fileaddManage.GetSizeEnable(nConvEnableSize, nRegSize) != true)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0027");                 // 파일은 {0} MB까지 전송할 수 있습니다.
            strMsg = String.Format(strMsg, nEnableSize);
            ShowMessage("warn", strMsg);
            StateHasChanged();
            return false;
        }
        return true;
    }

    public bool GetRegExamEnable(FileAddManage fileAddErr, HsStream hsStream, string strExt, bool bHidden, long RegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            string strFileName = hsStream.FileName;
            if (strFileName[0] == '.')
                bHidden = true;
        }

        bool bWhite = sgLoginData.GetFileFilterType();
        string strFileExtInfo = sgLoginData.GetFileFilter();
        long nEnableSize = sgLoginData.GetFileLimitSize();
        long nConvEnableSize = nEnableSize * (1024 * 1024);                                           // byte 변환
        long FileTransMaxSize = pageService.GetDayFileMaxSize(groupID);
        long RemainFileTransSize = pageService.GetDayRemainFileSize(groupID);

        //fileAddErr.SetUseOSmaxPath(siteConfig.GetUseOSMaxFilePath());
        HSCmdCenter.SetUseOSMaxPath(groupID, siteConfig.GetUseOSMaxFilePath());


        // okb
        fileAddErr.bEmptyFIleNoCheck = SGAppMgrSvc.OpConfigInfoService.GetEmptyfileTrans();

        if (fileAddErr.GetExamFileAddEnable(hsStream, bWhite, strFileExtInfo, bHidden, nConvEnableSize, RegSize, FileTransMaxSize, RemainFileTransSize) != true)
            return false;

        return true;
    }

    public async Task<int> GetReadRightCheck(FileAddManage fileAddErr, HsStream hsStream)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            CLog.Here().Information($"GetReadRightCheck sgLoginData NULL!");
            return -1;
        }
        int Rtn = 1;
        object[] param = { hsStream.RelativePath.Replace("\\", "/") };
        Rtn = await jsRuntime.InvokeAsync<int>("ReadRightResult", param);
        if (Rtn == 0)
            fileAddErr.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);

        return Rtn;
    }

    public async Task<int> GetExamExtChange(FileAddManage fileAddErr, HsStream hsStream)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return -1;

        string strFileExtInfo = sgLoginData.GetFileFilter();
        if ((strFileExtInfo.Equals("") == true) || (strFileExtInfo.Equals(";") == true))
        {
            return 0;
        }

        if (await fileAddErr.GetExamFileExtChange(hsStream) != 0)
            return -1;
        return 0;
    }

    public async Task<int> GetExamCheckZip(FileAddManage fileAddErr, HsStream hsStream, FileExamEvent SGFileExamEvent, int ExamCount, int TotalCount)
    {
        if (hsStream == null)
            return 0;

        string strExtType = hsStream.Type;
        strExtType = strExtType.ToUpper();

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return -1;

        if (sgLoginData.IsVipUser())
        {
            CLog.Here().Information($"No check zip depth for Vip User");
            return 0;
        }

        string strFileExtInfo = sgLoginData.GetFileFilter();
        if (strFileExtInfo.Equals("") || strFileExtInfo.Equals(";"))
        {
            CLog.Here().Information($"No check zip depth for EMPTY FILEFILTER(;)");
            return 0;
        }


        // 아직 지원 안됨 :  || (strExtType.Equals("ZIPX")) || (strExtType.Equals("LZH")) || (strExtType.Equals("TAR")) || (strExtType.Equals("RAR"))
        if ((strExtType.Equals("ZIP")) || (strExtType.Equals("7Z")))
        {

            bool bWhite = sgLoginData.GetFileFilterType();                              // true : White , false : black
            string strZipDepthInfo = sgLoginData.GetZipDepthInfo(sgLoginData.GetSystemPosition());
            string[] strTemp = strZipDepthInfo.Split('/');

            int MaxDepth = 3;
            int Option = 1;
            if ((strTemp != null) && (strTemp.Length >= 2))
            {
                if (!strTemp[0].Equals(""))
                {
                    MaxDepth = Convert.ToInt32(strTemp[0]);
                }
                if (!strTemp[1].Equals(""))
                {
                    Option = Convert.ToInt32(strTemp[1]);
                }
            }

            if (MaxDepth < 1)
            {
                CLog.Here().Information($"GetExamCheckZip Stop - ClientZipDepth : [{MaxDepth} / {Option}]");
                return 0;
            }

            bool bDenyPasswordZIP = SGAppMgrSvc.SiteConfigInfoService.GetUseDenyPasswordZip();
            CLog.Here().Information($"압축(Zip) 파일 passwd 있을때 차단 : [{bDenyPasswordZIP.ToString()}]");
            //bool bDenyPasswordZIP = SGAppMgrSvc.AppConfigInfoService.GetDenyPasswordZIP();

            if (await fileAddErr.CheckZipFile(hsStream, bDenyPasswordZIP, bWhite, strFileExtInfo, SGFileExamEvent, ExamCount, TotalCount, MaxDepth, Option) != 0)
                return -1;
        }
        return 0;
    }

    public async void RMouseFileAddAction(List<string> recvList)
    {
        if (Window.GetTrayUse())
        {
            Window.MoveTrayToWebWindow();
        }

        if (pageService.GetScrLocking() == true)
            return;
        if (recvList.Count <= 0)
            return;
        //OnDrop(recvList);

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (!siteConfig.GetUseFileSend(groupID))
            return;

        FileExamEvent SGFileExamEvent = null;
        SGFileExamEvent = HSCmdCenter.sgPageEvent.GetFileExamNotiEvent(groupID);
        if (SGFileExamEvent == null)
            return;

        HsStream hsStream = null;

        fileAddManage.DataClear();

        foreach (var item in HsStreamList)
        {
            for (int i = 0; i < recvList.Count; i++)
            {
                string strItemFileName = Path.GetFileName(item.RelativePath);
                string strListFileName = Path.GetFileName(recvList[i]);
                if (strItemFileName == strListFileName)
                {
                    recvList.RemoveAt(i);
                }
            }
        }
        int nTotalCount = GetListTotalCount(recvList);
        if (nTotalCount <= 0)
            return;

        if (GetRegCountEnable(nTotalCount) == false)
        {
            return;
        }

        List<string> list = new List<string>(recvList);
        //if(pageService.GetScrLocking()==false)
        await refProgress.openPopUp();

        int per = 0;
        int nExamCount = 0;
        for (int i = 0; i < list.Count; i++)
        {
            if (pageService.GetFileExaming() == false)
            {
                NotifyChange_InDropFileList(null);
                return;
            }
            string data = list[i];
            //Console.WriteLine($"File Dropped  {data}");
            if (data != null && data.Length > 0)
            {
                bool bFind = false;
                string strDataFileName = "";
                foreach (var item in HsStreamList)
                {
                    string strItemFileName = Path.GetFileName(item.RelativePath);
                    strDataFileName = Path.GetFileName(data);
                    if (strItemFileName == strDataFileName)
                    //if (item.RelativePath == data)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                {
                    //if (pageService.GetScrLocking() == false)
                    //{
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, strDataFileName);
                    // }
                    continue;

                }



                System.IO.FileInfo fInfo = new System.IO.FileInfo(data);


                FileAttributes attr = fInfo.Attributes;

                CLog.Here().Information($"FileName [{fInfo.Name}]");
                CLog.Here().Information($"DIR Attribute = [{attr & FileAttributes.Directory}]");
                if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                {
                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Type = fInfo.Attributes.ToString();
                    hsStream.StartPath = "";
                    hsStream.RelativePath = fInfo.Name;
                    hsStream.Size = fInfo.Length;
                    //if (GetRegSizeEnable(fileAddManage,hsStream.Size) == false)
                    //{
                    //    //if (pageService.GetScrLocking() == false)
                    //    SGFileExamEvent(100,"");
                    //    return;
                    //}
                    //if (GetDayRegSizeEnable(fileAddManage,hsStream.Size) == false)
                    //{
                    //if (pageService.GetScrLocking() == false)
                    //    SGFileExamEvent(100,"");
                    //    return;
                    //}
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    }
                    else
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                    }
                    //hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");

                    if (fInfo.Name.LastIndexOf(".") > -1)
                        hsStream.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";

                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime SubDate = (DateTime)hsStream.ModifyTime;
                    string strSubDate = SubDate.ToShortDateString();
                    strSubDate = strSubDate.Replace("-", "");
                    string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", SubDate.Hour, SubDate.Minute, SubDate.Second);
                    hsStream.MTime = strSubDate + strSubTime;
                    hsStream.IsDir = false;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    }
                    else
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                    }
                    //hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    bool bHidden = false;
                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        bHidden = true;
                    if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden, hsStream.Size))
                    {
                        //if (pageService.GetScrLocking() == false)
                        //{
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        //}
                        continue;

                    }
                    try
                    {
                        hsStream.stream = File.OpenRead(fInfo.FullName);
                    }
                    catch
                    {
                        fileAddManage.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);
                        CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }
                    //hsStream.stream = File.OpenRead(fInfo.FullName);
                    if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                    {
                        hsStream.stream = null;
                        //if (pageService.GetScrLocking() == false)
                        // {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        //}
                        continue;
                    }
                    if (await GetExamCheckZip(fileAddManage, hsStream, SGFileExamEvent, nExamCount, nTotalCount) != 0)
                    {
                        hsStream.stream = null;
                        //if (pageService.GetScrLocking() == false)
                        // {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        //}
                        continue;
                    }
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    //if (pageService.GetScrLocking() == false)
                    //{
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, hsStream.FileName);
                    //}

                }
                else if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    DirectoryInfo di = new DirectoryInfo(fInfo.FullName);
                    if (di.Exists != true)
                        continue;

                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        continue;

                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Size = 0;
                    hsStream.Type = "DIR";
                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime date = (DateTime)hsStream.ModifyTime;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.RelativePath = fInfo.FullName;
                    hsStream.IsDir = true;
                    hsStream.StartPath = hsStream.RelativePath;
                    string strStartPath = hsStream.StartPath;
                    hsStream.stream = null;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    if (!hsStream.StartPath.Equals(""))
                    {
                        int index = -1;
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            index = hsStream.StartPath.LastIndexOf("\\");
                        }
                        else
                        {
                            index = hsStream.StartPath.LastIndexOf("/");
                        }
                        //index = hsStream.StartPath.LastIndexOf("\\");
                        if (index >= 0)
                        {
                            hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                            string startPath = "";
                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                startPath = hsStream.StartPath + "\\";
                            }
                            else
                            {
                                startPath = hsStream.StartPath + "/";
                            }
                            //string startPath = hsStream.StartPath + "\\";
                            if (!hsStream.RelativePath.Equals(startPath))
                                hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                        }
                    }
                    else
                        hsStream.RelativePath = hsStream.RelativePath;

                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    }
                    else
                    {
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                    }
                    //hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    nExamCount++;

                    List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                    if (FileData == null)
                    {
                        //if (pageService.GetScrLocking() == false)
                        //{
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, fInfo.Name);
                        //}
                        continue;
                    }
                    if (FileData.Count == 0)
                    {
                        //if (pageService.GetScrLocking() == false)
                        //{
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, fInfo.Name);
                        //}
                        continue;
                    }
                    //nTotalCount += FileData.Count;
                    foreach (var item in FileData)
                    {
                        hsStream = new HsStream();
                        hsStream.FileName = item.Name;
                        hsStream.Type = item.Attributes.ToString();
                        hsStream.StartPath = strStartPath;
                        hsStream.RelativePath = item.FullName;
                        if (!hsStream.StartPath.Equals(""))
                        {
                            int index = -1;
                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                index = hsStream.StartPath.LastIndexOf("\\");
                            }
                            else
                            {
                                index = hsStream.StartPath.LastIndexOf("/");
                            }
                            //index = hsStream.StartPath.LastIndexOf("\\");
                            if (index >= 0)
                            {
                                hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                                string startPath = "";
                                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                {
                                    startPath = hsStream.StartPath + "\\";
                                }
                                else
                                {
                                    startPath = hsStream.StartPath + "/";
                                }
                                //string startPath = hsStream.StartPath + "\\";
                                if (!hsStream.RelativePath.Equals(startPath))
                                    hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                            }
                        }
                        else
                            hsStream.RelativePath = hsStream.RelativePath;

                        if ((hsStream.Type.Equals("Directory")) || (hsStream.Type.Equals("Hidden, Directory")))
                        {
                            hsStream.Size = 0;
                            hsStream.Type = "DIR";
                            hsStream.stream = null;
                            hsStream.MemoryType = HsStreamType.FileStream;
                            hsStream.IsDir = true;
                        }
                        else
                        {
                            hsStream.Size = item.Length;
                            //if (GetRegSizeEnable(fileAddManage,hsStream.Size) == false)
                            //{
                            //if (pageService.GetScrLocking() == false)
                            //    SGFileExamEvent(100,"");
                            //    return;
                            //}
                            //if (GetDayRegSizeEnable(fileAddManage,hsStream.Size) == false)
                            //{
                            //if (pageService.GetScrLocking() == false)
                            //    SGFileExamEvent(100,"");
                            //    return;
                            //}
                        }
                        if (hsStream.Type.Equals("Archive"))
                        {
                            if (item.Name.LastIndexOf(".") > -1)
                                hsStream.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                            else
                                hsStream.Type = "";
                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                            }
                            else
                            {
                                hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                            }
                            //hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                            //hsStream.stream = File.OpenRead(item.FullName);
                            hsStream.IsDir = false;

                        }

                        hsStream.ModifyTime = item.LastWriteTime;
                        DateTime SubDate = (DateTime)hsStream.ModifyTime;
                        string strSubDate = SubDate.ToShortDateString();
                        strSubDate = strSubDate.Replace("-", "");
                        string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                        hsStream.MTime = strSubDate + strSubTime;
                        hsStream.MemoryType = HsStreamType.FileStream;
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        }
                        else
                        {
                            hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                        }
                        if (hsStream.IsDir == false)
                        {
                            bool bHidden = false;
                            if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                                bHidden = true;
                            if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden, hsStream.Size))
                            {
                                //if (pageService.GetScrLocking() == false)
                                //{
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                //}
                                continue;
                            }
                        }
                        if (!hsStream.Type.Equals("DIR"))
                        {
                            try
                            {
                                hsStream.stream = File.OpenRead(item.FullName);
                            }
                            catch
                            {
                                fileAddManage.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);
                                CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                continue;
                            }
                            //hsStream.stream = File.OpenRead(fInfo.FullName);
                            if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                            {
                                hsStream.stream = null;
                                //if (pageService.GetScrLocking() == false)
                                // {
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                //}
                                continue;
                            }
                            if (await GetExamCheckZip(fileAddManage, hsStream, SGFileExamEvent, nExamCount, nTotalCount) != 0)
                            {
                                hsStream.stream = null;
                                //if (pageService.GetScrLocking() == false)
                                // {
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                //}
                                continue;
                            }
                        }
                        //HsStreamList.Add(hsStream);
                        SetFileAdd(hsStream);
                        //if (pageService.GetScrLocking() == false)
                        //{
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        //}
                    }
                }
            }
        }

        // HsStreamList = GetHsStreamList();
        //StateHasChanged();
        //NotifyChange_InDropFileList(null);
        StateHasChanged();
    }

    public static void NotifyChange_InDropFileList(FileListEntryImpl[] files)
    {
        //action1.Invoke(files, true);
    }
    public bool RMFileExist(string strRMFilePath)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        FileAddManage fileAddmanage = new FileAddManage(groupID);
        return fileAddmanage.RMFileExist(strRMFilePath);
    }
    public void RMouseFileAction(int groupID)
    {

        FileAddManage fileAddmanage = new FileAddManage(groupID);

        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
        if (!fileAddmanage.RMFileExist(strRMouseFilePath))
            return;

        List<string> ListFile = fileAddmanage.LoadRMFileAdd(strRMouseFilePath);
        RMouseFileAddAction(ListFile);
    }

    public bool GetDayRegSizeEnable(FileAddManage fileaddmanage, long nRegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        nRegSize = nRegSize + GetRegListTotalSize();

        if (pageService.GetDayFileTransSizeEnable(groupID, nRegSize) != true)
        {

            DayFileChangeNotiEvent dayFileChange = null;
            dayFileChange = HSCmdCenter.sgPageEvent.GetDayFileChangeNotiEvent(groupID);
            if (dayFileChange == null)
                return false;

            dayFileChange(groupID);

            string strMsg = XmlConf.GetErrMsg("E_0105");    // 일일 전송 최대 사이즈는 {0}MB입니다./r/n일일 전송 사이즈를 초과하였습니다.
            Int64 FileMaxSize = pageService.GetDayFileMaxSize(groupID);
            strMsg = String.Format(strMsg, FileMaxSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);

            return false;
        }
        return true;
    }

    [JSInvokable("AddReadFailList")]
    public static void AddReadFailList(string path)
    {
        Console.WriteLine("AddReadFailList Call Excuted. :" + path);
    }

    private async Task<int> SubFileAddAsync()
    {
        //int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumber");
        string targets = new string("fileInputTrans");
        IEnumerable<IFileReference> files = null;
        IEnumerable<IFileReference> dirs = null;
        //IFileReaderRef dropRef = null;

        //await Task.Delay(100);

        IFileReaderRef dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        await dropReference.initFileReaderService(targets);
        await dropReference.SetDragTargetElementAsync(targets);
        await dropReference.IsDragTargetElement(targets);
        //System.Threading.Thread.Sleep(1000);
        await Task.Delay(500);
        await dropReference.AppendDragTargetElement(targets);
        await dropReference.ReadRightCheck(targets);
        files = await dropReference.EnumerateFilesAsync();
        dirs = await dropReference.EnumerateDirsAsync();


        if (files == null || files.Count() == 0)
        {
            return 0;
        }

        List<HsStream> folderList = await SubDirAddAsync(dirs);
        List<HsStream> fileList = await SubFileAddAsync(files);
        List<HsStream> finalList = ReSortFile(folderList, fileList);
        await UpLoadFile(finalList);

        string target = $"fileInputTrans";
        
        await dropReference.ClearValue();

        return finalList.Count;
    }
}
