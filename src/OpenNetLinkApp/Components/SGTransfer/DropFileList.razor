@using System.IO
@using BlazorInputFile
@using System.Diagnostics
@using OpenNetLinkApp.Services
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGQuery
@using AgLogManager
@using System.Threading
@using OpenNetLinkApp.Common
@using System.Web

@inject IJSRuntime jsRuntime
@inject IFileReaderService fileReaderService
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService
@inject WebWindow Window

<DropTarget Drop="@OnDrop">
    @*<div class="dropzone col-md-12 p-0" style="overflow:auto;height:100%;" @onclick="fileSelectOpen">
        <input type="file" id="fileInputTrans" style="display:block;" onclick="stopClickOpen(event);" multiple="multiple" />*@

    <div class="dropzone col-md-12 p-0" style="overflow:auto; height:100%;">
        @if (bViewDropFileAddError && (fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message" style="font-size:14px;">Only image files are accepted.</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message" style="font-size:14px;">The max file size is @MaxFileSizeMB MB.</li>
                }
            </ul>
        }

        @if (HsStreamList != null && HsStreamList.Count > 0)
        {
            <div id="DropzoneTable" style="height:max-content;">
                <table id="example2" class="table table-head-fixed table-hover mb-0" style="font-size: 14px; table-layout: fixed; line-height: 20px;">
                    <thead>
                        <tr>
                            @if (SGAppMgrSvc.OpConfigInfoService.GetUseFileSelectDelete(_groupId))
                            {
                                <th style="text-align: center; vertical-align: middle; width: 5%">
                                    <input class="input" type="checkbox" checked="@bAllCheck" @onclick="(e => AllCheckStateUpdate())">
                                </th>
                            }
                            <th style="vertical-align: middle; width: 60%; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; padding-left: 5px;">@strFileName</th>
                            <!--파일명-->
                            <th style="text-align:right;vertical-align:middle;width:10%;">@strFileSize</th>
                            <!--크기-->
                            <th style="text-align:center;vertical-align:middle;width:10%;">@strFileType</th>
                            <!--유형-->
                            @if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(_groupId) && isUserNeedApproveExtUI())
                            {
                                <th style="text-align:center;vertical-align:middle;width:20%;">@XmlConf.GetTitle("T_COMMON_REMARK")</th>
                                <!--비고-->
                            }

                            <!--<th width="30%">@strLastModDay</th>--> <!--수정한 날짜-->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var file in HsStreamList)
                        {
                            <tr>
                                @if (SGAppMgrSvc.OpConfigInfoService.GetUseFileSelectDelete(_groupId))
                                {
                                    <td style="text-align: center; vertical-align: middle; width: 5%;">
                                        <input class="input" type="checkbox" checked=@file.isCheck @onclick="(e => CheckStateUpdate(file))">
                                    </td>
                                }
                                <td style="width:60%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden; padding-left:5px;" alt="@file.FileName" title="@file.FileName">@file.FileName</td>
                                <td style="text-align:right;vertical-align:middle;width:10%;">@(file.IsDir? "" : CsFunction.GetSizeStr(file.FileLength))</td>
                                <td style="text-align:center;vertical-align:middle;width:10%;">@file.Type</td>
                                @if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(_groupId) && isUserNeedApproveExtUI())
                                {
                                    <td style="text-align:center;vertical-align:middle;width:20%;">@(file.isNeedApprove? XmlConf.GetTitle("T_COMMON_APPROVE_EXT_ITEM") : "")</td>
                                }
                                <!--<td width="30%">@file.ModifyTime.ToString("yyyy/MM/dd HH:mm:ss")</td>-->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {

            <p style="font-size:13px;">
                <br /><br /><br /><br />
                @((MarkupString)strFileDragInfo)         <!--파일을 이곳으로 드래그 하세요.-->
            </p>

        }
        @*<input type="file" id="fileInputTrans" onclick="stopClickOpen(event);" multiple="multiple" />*@
    </div>
    <a hidden data-toggle="modal" data-target="modal-dropprogress"></a>
    <a hidden data-toggle="modal" data-target="Transfer_Denied"></a>
</DropTarget>


<DropProgress @ref="refProgress"></DropProgress>
<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>

@code {

    //[Parameter]
    //public EventCallback<string> OnDropClear { get; set; }
    [Parameter]
    public EventCallback<string> OnFileSelectOpen { get; set; }

    string strFileName = "";
    string strFileSize = "";
    string strFileType = "";
    string strLastModDay = "";
    string strRelativePath = "";
    string strFileDragInfo = "";

    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB

    public bool fileSizeError = false;
    public bool fileTypeError = false;

    public bool bViewDropFileAddError = false;

    /// <summary>
    /// 드랍리스트 전체 선택여부
    /// </summary>
    public bool bAllCheck = false;
    public bool tempTest = false;

    public int _groupId = 0;
    // private static Action<FileListEntryImpl[], bool> action1;
    // private static Action<FileListEntryImpl[],bool> action2;

    public ElementReference inputTypeFileElement;
    IFileReaderRef _dropReference = null;

    public List<HsStream> HsStreamList = null;

    ISGSideBarUIService SideBarUISvc;

    public bool bAsyncData = false;
    List<string> strRootPath = new List<string>();

    DropProgress refProgress = new DropProgress();

    Transfer_Denied refTransferDenied;

    public FileAddManage fileAddManage;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<DropFileList>();
    public bool bHandleFileFlag = false;

    private async Task fileSelectOpen()
    {
        await OnFileSelectOpen.InvokeAsync("open");
    }

    public async Task ExtDropClear()
    {
        bAsyncData = false;
        await DropClear();//.InvokeAsync("clear");
    }

    public async Task DataClear()
    {

        fileAddManage.m_nTansCurSize = 0;
        fileAddManage.m_nTransCurCount = 0;

        try
        {
            if (bAsyncData)
            {
                await ExtDropClear();
            }
            CLog.Here().Information($"dropFile.DataClear - !");
        }
        catch (Exception err)
        {
            // error
            CLog.Here().Error($"DataClear - Exception - error:{err.Source} - Msg : {err.Message}");
        }

        if (HsStreamList != null && HsStreamList.Count > 0)
        {
            foreach (HsStream stream in HsStreamList)
            {
                if (!stream.IsDir)
                {
                    if (stream.stream != null)
                        stream.stream.Dispose();
                }
            }
            HsStreamList.Clear();
        }

        bAllCheck = false;

        StateHasChanged();
        await jsRuntime.InvokeAsync<object>("setDropzoneInputSize");
        StateHasChanged();
    }

    public async Task DataSelectClear()
    {
        await Task.Run(() =>
        {
            if (HsStreamList != null && HsStreamList.Count > 0)
            {
                for (int i = HsStreamList.Count; i > 0; i--)
                {
                    if (HsStreamList[i - 1].isCheck)
                    {
                        fileAddManage.m_nTansCurSize = fileAddManage.m_nTansCurSize - HsStreamList[i - 1].Size;
                        fileAddManage.m_nTransCurCount = fileAddManage.m_nTransCurCount - 1;

                        if (!HsStreamList[i - 1].IsDir)
                        {
                            if (HsStreamList[i - 1].stream != null)
                                HsStreamList[i - 1].stream.Dispose();
                        }
                        HsStreamList.RemoveAt(i - 1);
                    }
                }

                bAllCheck = false;
                StateHasChanged();
                jsRuntime.InvokeAsync<object>("setDropzoneInputSize");
                StateHasChanged();
            }
        });
    }

    //public async Task DataClear()
    //{

    //    fileAddManage.m_nTansCurSize = 0;
    //    fileAddManage.m_nTransCurCount = 0;

    //    try
    //    {
    //        if (bAsyncData)
    //        {
    //            await ExtDropClear();
    //        }
    //        CLog.Here().Information($"dropFile.DataClear - !");
    //    }
    //    catch (Exception err)
    //    {
    //        // error
    //        CLog.Here().Error($"DataClear - Exception - error:{err.Source} - Msg : {err.Message}");
    //    }

    //    if (HsStreamList != null && HsStreamList.Count > 0)
    //        HsStreamList.Clear();

    //    StateHasChanged();
    //}

    public void CheckStateUpdate(HsStream item)
    {
        item.isCheck = !item.isCheck;

        StateHasChanged();
    }

    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = HsStreamList.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < nCount; i++)
        {
            HsStreamList[i].isCheck = bAllCheck;
        }

        StateHasChanged();
    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    //디렉토리 검색 함수
    void DirFileSearch(string path)
    {
        try
        {
            string[] dirs = Directory.GetDirectories(path);
            string[] files = Directory.GetFiles(path);
            foreach (string f in files)
            {
                //파일이면 파일을 복사하고(위코드참고)
                Debug.WriteLine(f);
            }
            if (dirs.Length > 0)
            {
                foreach (string dir in dirs)
                {
                    Debug.WriteLine(dir);
                    //디렉토리면 디렉토리 만들고 System.IO.Directory.CreateDirectory(path);
                    DirFileSearch(dir);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void WaitForHandleFile()
    {
        Task.Delay(1000);
        if (bHandleFileFlag == true)
        {
            Debug.WriteLine("bHandleFileFlag Is True");
        }
        else
        {
            //jsRuntime.InvokeAsync<object>("reprotHandFileList");
            Debug.WriteLine("bHandleFileFlag Is False");
        }
        bHandleFileFlag = false;
    }

    public async void OnDrop(List<string> recvlist)
    {

        CLog.Here().Information($"OnDrop-Start, recvlist-count : {recvlist.Count}");
        Window.SetDragNDropFilePath();
        List<string> list = await SubFileAddAsync(); //내부에서 드랍한 것인지 외부에서 드랍한 것인지 판단하기 위해 외부에서 들어온 것인지 먼저 판단

        if (list != null)
        {
            if (list.Count <= 0)
            {
                if (recvlist.Count <= 0)
                    return;
                else
                {
                    OnDropFileAdd(recvlist, false);
                }
            }
            else
            {
                OnDropFileAdd(list, false);
            }
        }
    }

    /// <summary>
    /// 내부의 파일 등록 요청이 올 경우, 처리하는 시작점
    /// <br/>드래그앤드롭빼고는 모두 이곳으로(선택된 디렉토리나 파일의 Full 경로가 List의 항목으로 구성)
    /// </summary>
    /// <param name="recvList"></param>
    /// <param name="isRMouseAdd"></param>
    async Task OnDropFileAdd(List<string> recvList, bool isRMouseAdd)
    {

        CLog.Here().Information($"OnDropFileAdd, --------------------- ");


        FileExamEvent SGFileExamEvent = null;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null && sgLoginData.GetFileTrans() == false)
            return;

        SGFileExamEvent = HSCmdCenter.sgPageEvent.GetFileExamNotiEvent(groupID);
        if (SGFileExamEvent == null)
            return;

        List<HsStream> listTryHsStream = new List<HsStream>();      //등록 시도한 목록이 모두 정상 처리되어야 저장하도록 임시 List로 확인
        HsStream hsStream = null;
        bool existErr = false;      //검사 파일 중 에러 발생 여부
        int per = 0;
        int nExamCount = 0;

        try
        {

            fileAddManage.DataClear();
            fileAddManage.SetOleExtractExtData(sgLoginData.GetDocumentExtractExt());

            foreach (var item in HsStreamList)
            {
                for (int i = 0; i < recvList.Count; i++)
                {
                    string strItemFileName = Path.GetFileName(item.RelativePath);
                    string strListFileName = Path.GetFileName(recvList[i]);
                    if (strItemFileName == strListFileName)
                    {
                        recvList.RemoveAt(i);
                    }
                }
            }

            int nTotalCount = GetListTotalCount(recvList);
            if (nTotalCount <= 0)
                return;

            if (GetRegCountEnable(nTotalCount) == false)
                return;

            List<string> list = new List<string>(recvList);
            await refProgress.openPopUp();

            for (int i = 0; i < list.Count; i++)        //등록 시도 파일 리스트 검사
            {
                if (pageService.GetFileExaming() == false)
                {
                    if (isRMouseAdd)
                        NotifyChange_InDropFileList(null);
                    else
                        StateHasChanged();
                    return;
                }
                string data = list[i];
                //Console.WriteLine($"File Dropped  {data}");
                if (data != null && data.Length > 0)
                {

                    bool bFind = false;

                    // 이미 List에 있는지 확인
                    string strDataFileName = "";
                    foreach (var item in HsStreamList)
                    {
                        string strItemFileName = Path.GetFileName(item.RelativePath);
                        strDataFileName = Path.GetFileName(data);
                        if (strItemFileName == strDataFileName)
                        //if (item.RelativePath == data)
                        {
                            bFind = true;
                            break;
                        }
                    }

                    if (bFind == true)
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, strDataFileName);
                        continue;
                    }

                    System.IO.FileInfo fInfo = new System.IO.FileInfo(data);
                    FileAttributes attr = fInfo.Attributes;

                    //최상위 파일 구성
                    FileAddErr topFile = fileAddManage.CreateFileAddErrInfo(fInfo.Name, fInfo.FullName, "");

                    CLog.Here().Information($"FileName [{fInfo.Name}]");
                    CLog.Here().Information($"DIR Attribute = [{attr & FileAttributes.Directory}]");

                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory) // 파일일때 처리
                    {
                        topFile.FilePath = fInfo.Name;

                        hsStream = new HsStream();
                        hsStream.FileName = fInfo.Name;
                        hsStream.Type = fInfo.Attributes.ToString();
                        hsStream.StartPath = "";
                        hsStream.RelativePath = fInfo.Name;
                        hsStream.Size = fInfo.Length;

                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        else
                            hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");


                        if (fInfo.Name.LastIndexOf(".") > -1)
                            hsStream.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
                        else
                            hsStream.Type = "";

                        hsStream.ModifyTime = fInfo.LastWriteTime;
                        DateTime SubDate = (DateTime)hsStream.ModifyTime;
                        string strSubDate = SubDate.ToShortDateString();
                        strSubDate = strSubDate.Replace("-", "");
                        string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", SubDate.Hour, SubDate.Minute, SubDate.Second);
                        hsStream.MTime = strSubDate + strSubTime;
                        hsStream.IsDir = false;
                        hsStream.MemoryType = HsStreamType.FileStream;
                        hsStream.isNeedApprove = false;
                        if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isUserNeedApproveExtUI())
                        {
                            if (CsFunction.isFileExtinListStr(false, hsStream.FileName, sgLoginData.GetExceptionExt()))
                                hsStream.isNeedApprove = true;
                        }

                        //bool bHidden = false;
                        //2023.03.07 JS에서 파일속성을 통한 숨김파일을 체크를 하지 않으므로, 통일성을 위해 삭제(Linux/MAC은 . 표시로 숨김 체크) by KYH
                        //if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        //    bHidden = true;
                        if (!GetRegExamEnable(fileAddManage, topFile, hsStream, hsStream.Type, false, hsStream.Size))
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            existErr = true;
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                            continue;
                        }

                        if (pageService.GetFileExaming() == false)
                        {
                            if (isRMouseAdd)
                                NotifyChange_InDropFileList(null);
                            else
                                StateHasChanged();
                            return;
                        }
                        try
                        {
                            hsStream.stream = File.OpenRead(fInfo.FullName);
                        }
                        catch
                        {
                            existErr = true;

                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            @*fileAddManage.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);*@
                            topFile.eErrType = eFileAddErr.eFA_FILE_READ_ERROR;
                            CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
                            if (hsStream.stream != null)
                            {
                                hsStream.stream.Close();
                                hsStream.stream = null;
                            }
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                            continue;
                        }
                        //hsStream.stream = File.OpenRead(fInfo.FullName);
                        if (await GetExamExtChange(fileAddManage, topFile, hsStream) != 0)
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            existErr = true;
                            if (hsStream.stream != null)
                            {
                                hsStream.stream.Close();
                                hsStream.stream = null;
                            }
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                            continue;
                        }

                        if (pageService.GetFileExaming() == false)
                        {
                            if (isRMouseAdd)
                                NotifyChange_InDropFileList(null);
                            else
                                StateHasChanged();
                            return;
                        }

                        int nRet = 0;
                        nRet = await GetExamCheckZip(fileAddManage, topFile, hsStream, SGFileExamEvent, nExamCount, nTotalCount);
                        if (nRet == 1)
                            hsStream.isNeedApprove = true;
                        else if (nRet != 0)
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }

                            existErr = true;
                            if (hsStream.stream != null)
                            {
                                hsStream.stream.Close();
                                hsStream.stream = null;
                            }
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                            continue;
                        }

                        if (pageService.GetFileExaming() == false)
                        {
                            if (isRMouseAdd)
                                NotifyChange_InDropFileList(null);
                            else
                                StateHasChanged();
                            return;
                        }
                        //2022.10.07 BY KYH - OLE 상세파일 UI 표현 기능 추가
                        //01. 문서파일 내 OLE 개체 검사
                        //02. 문서파일 압축해제 후 파일 검사

                        //01. 문서파일 내 OLE 개체 검사
                        if (await GetExamCheckDocument(fileAddManage, topFile, hsStream) != 0)
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            existErr = true;
                            if (hsStream.stream != null)
                            {
                                hsStream.stream.Close();
                                hsStream.stream = null;
                            }
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                            continue;
                        }

                        if (pageService.GetFileExaming() == false)
                        {
                            if (isRMouseAdd)
                                NotifyChange_InDropFileList(null);
                            else
                                StateHasChanged();
                            return;
                        }

                        //HsStreamList.Add(hsStream);
                        //SetFileAdd(hsStream);    // 2022.10.05 BY KYH - 등록 시도 파일이 모두 정상인 경우 등록 가능하도록 이동
                        listTryHsStream.Add(hsStream);
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                    }
                    else
                    {
                        DirectoryInfo di = new DirectoryInfo(fInfo.FullName);
                        if (di.Exists != true)
                            continue;

                        //2023.03.07 JS에서 파일속성을 통한 숨김파일을 체크를 하지 않으므로, 통일성을 위해 삭제(Linux/MAC은 . 표시로 숨김 체크) by KYH
                        //if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        //    continue;

                        hsStream = new HsStream();
                        hsStream.FileName = fInfo.Name;
                        hsStream.Size = 0;
                        hsStream.Type = "DIR";
                        hsStream.ModifyTime = fInfo.LastWriteTime;
                        DateTime date = (DateTime)hsStream.ModifyTime;
                        string strDate = date.ToShortDateString();
                        strDate = strDate.Replace("-", "");
                        string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                        hsStream.MTime = strDate + strTime;
                        hsStream.RelativePath = fInfo.FullName;
                        hsStream.IsDir = true;
                        hsStream.StartPath = hsStream.RelativePath;
                        string strStartPath = hsStream.StartPath;
                        hsStream.stream = null;
                        hsStream.MemoryType = HsStreamType.FileStream;
                        if (!hsStream.StartPath.Equals(""))
                        {
                            int index = -1;
                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                index = hsStream.StartPath.LastIndexOf("\\");
                            else
                                index = hsStream.StartPath.LastIndexOf("/");
                            //index = hsStream.StartPath.LastIndexOf("\\");
                            if (index >= 0)
                            {
                                hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                                string startPath = "";
                                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                    startPath = hsStream.StartPath + "\\";
                                else
                                    startPath = hsStream.StartPath + "/";
                                //string startPath = hsStream.StartPath + "\\";
                                if (!hsStream.RelativePath.Equals(startPath))
                                    hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                            }
                        }
                        else
                            hsStream.RelativePath = hsStream.RelativePath;

                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        else
                            hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                        //hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        //HsStreamList.Add(hsStream);
                        //SetFileAdd(hsStream);

                        nExamCount++;
                        if (!GetRegExamEnable(fileAddManage, topFile, hsStream, hsStream.Type, false, hsStream.Size))
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            existErr = true;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                            //continue;
                        }
                        else
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            listTryHsStream.Add(hsStream);
                        }


                        List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                        if (FileData == null)
                        {
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, fInfo.Name);
                            continue;
                        }
                        if (FileData.Count == 0)
                        {
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, fInfo.Name);
                            continue;
                        }

                        foreach (var item in FileData)
                        {
                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            //FileAddErr childFile = topFile.CreateChildren(item.Name, item.FullName, topFile.FileName);
                            FileAddErr childFile = fileAddManage.SetFileTreeFromFilePath(topFile, item);

                            hsStream = new HsStream();
                            hsStream.FileName = item.Name;
                            hsStream.Type = item.Attributes.ToString();
                            hsStream.StartPath = strStartPath;
                            hsStream.RelativePath = item.FullName;

                            if (!hsStream.StartPath.Equals(""))
                            {
                                int index = -1;
                                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                    index = hsStream.StartPath.LastIndexOf("\\");
                                else
                                    index = hsStream.StartPath.LastIndexOf("/");

                                if (index >= 0)
                                {
                                    hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                                    string startPath = "";
                                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                        startPath = hsStream.StartPath + "\\";
                                    else
                                        startPath = hsStream.StartPath + "/";
                                    //string startPath = hsStream.StartPath + "\\";
                                    if (!hsStream.RelativePath.Equals(startPath))
                                        hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                                }
                            }
                            else
                                hsStream.RelativePath = hsStream.RelativePath;

                            hsStream.isNeedApprove = false;
                            //if ((hsStream.Type.Equals("Directory")) || (hsStream.Type.Equals("Hidden, Directory")))
                            if ((item.Attributes & FileAttributes.Directory) == FileAttributes.Directory)
                            {
                                hsStream.Size = 0;
                                hsStream.Type = "DIR";
                                hsStream.stream = null;
                                hsStream.MemoryType = HsStreamType.FileStream;
                                hsStream.IsDir = true;
                            }
                            else
                            {
                                hsStream.Size = item.Length;

                                if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isUserNeedApproveExtUI())
                                {
                                    if (CsFunction.isFileExtinListStr(false, hsStream.FileName, sgLoginData.GetExceptionExt()))
                                        hsStream.isNeedApprove = true;
                                }

                                if (item.Name.LastIndexOf(".") > -1)
                                    hsStream.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                                else
                                    hsStream.Type = "";
                                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                {
                                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                                }
                                else
                                {
                                    hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                                }

                                hsStream.IsDir = false;
                            }

                            CLog.Here().Information($"DirSearch - AfterData, fileName : {hsStream.FileName}, DirOrFile : {(hsStream.IsDir ? "DIR !!!" : "FILE !!!")}");

                            // hsStream.Type.Equals("Archive")
                            @*if (string.Compare(hsStream.Type, "Archive", true) == 0 ||
                                    string.Compare(hsStream.Type, "Normal", true) == 0)
                                {
                                    if (item.Name.LastIndexOf(".") > -1)
                                        hsStream.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                                    else
                                        hsStream.Type = "";
                                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                                    else
                                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");

                                    hsStream.IsDir = false;
                                }*@

                            hsStream.ModifyTime = item.LastWriteTime;
                            DateTime SubDate = (DateTime)hsStream.ModifyTime;
                            string strSubDate = SubDate.ToShortDateString();
                            strSubDate = strSubDate.Replace("-", "");
                            string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                            hsStream.MTime = strSubDate + strSubTime;
                            hsStream.MemoryType = HsStreamType.FileStream;

                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                            else
                                hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");

                            // bool bHidden = false;
                            //2023.03.07 JS에서 파일속성을 통한 숨김파일을 체크를 하지 않으므로, 통일성을 위해 삭제(Linux/MAC은 . 표시로 숨김 체크) by KYH
                            //if ((item.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden)
                            //    bHidden = true;
                            if (!GetRegExamEnable(fileAddManage, childFile, hsStream, hsStream.Type, false, hsStream.Size))
                            {
                                if (pageService.GetFileExaming() == false)
                                {
                                    if (isRMouseAdd)
                                        NotifyChange_InDropFileList(null);
                                    else
                                        StateHasChanged();
                                    return;
                                }
                                existErr = true;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per, hsStream.FileName);
                                continue;
                            }

                            if (pageService.GetFileExaming() == false)
                            {
                                if (isRMouseAdd)
                                    NotifyChange_InDropFileList(null);
                                else
                                    StateHasChanged();
                                return;
                            }
                            if (hsStream.IsDir == false)
                            {
                                try
                                {
                                    hsStream.stream = File.OpenRead(item.FullName);
                                }
                                catch
                                {
                                    existErr = true;
                                    @*fileAddManage.AddData(hsStream.FileName, eFileAddErr.eFA_FILE_READ_ERROR, hsStream.RelativePath);*@
                                    childFile.eErrType = eFileAddErr.eFA_FILE_READ_ERROR;
                                    CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
                                    if (hsStream.stream != null)
                                    {
                                        hsStream.stream.Close();
                                        hsStream.stream = null;
                                    }
                                    nExamCount++;
                                    per = (nExamCount * 100) / nTotalCount;
                                    SGFileExamEvent(per, hsStream.FileName);
                                    continue;
                                }
                                //hsStream.stream = File.OpenRead(fInfo.FullName);
                                if (await GetExamExtChange(fileAddManage, childFile, hsStream) != 0)
                                {
                                    if (pageService.GetFileExaming() == false)
                                    {
                                        if (isRMouseAdd)
                                            NotifyChange_InDropFileList(null);
                                        else
                                            StateHasChanged();
                                        return;
                                    }
                                    existErr = true;
                                    if (hsStream.stream != null)
                                    {
                                        hsStream.stream.Close();
                                        hsStream.stream = null;
                                    }
                                    nExamCount++;
                                    per = (nExamCount * 100) / nTotalCount;
                                    SGFileExamEvent(per, hsStream.FileName);
                                    continue;
                                }

                                if (pageService.GetFileExaming() == false)
                                {
                                    if (isRMouseAdd)
                                        NotifyChange_InDropFileList(null);
                                    else
                                        StateHasChanged();
                                    return;
                                }

                                int nRet = 0;
                                nRet = await GetExamCheckZip(fileAddManage, childFile, hsStream, SGFileExamEvent, nExamCount, nTotalCount);
                                if (nRet == 1)
                                    hsStream.isNeedApprove = true;
                                else if (nRet != 0)
                                {
                                    if (pageService.GetFileExaming() == false)
                                    {
                                        if (isRMouseAdd)
                                            NotifyChange_InDropFileList(null);
                                        else
                                            StateHasChanged();
                                        return;
                                    }

                                    existErr = true;
                                    if (hsStream.stream != null)
                                    {
                                        hsStream.stream.Close();
                                        hsStream.stream = null;
                                    }
                                    nExamCount++;
                                    per = (nExamCount * 100) / nTotalCount;
                                    SGFileExamEvent(per, hsStream.FileName);
                                    continue;
                                }

                                if (pageService.GetFileExaming() == false)
                                {
                                    if (isRMouseAdd)
                                        NotifyChange_InDropFileList(null);
                                    else
                                        StateHasChanged();
                                    return;
                                }

                                //2022.10.07 BY KYH - OLE 상세파일 UI 표현 기능 추가
                                //01. 문서파일 내 OLE 개체 검사
                                //02. 문서파일 압축해제 후 파일 검사

                                //01. 문서파일 내 OLE 개체 검사
                                if (await GetExamCheckDocument(fileAddManage, childFile, hsStream) != 0)
                                {
                                    if (pageService.GetFileExaming() == false)
                                    {
                                        if (isRMouseAdd)
                                            NotifyChange_InDropFileList(null);
                                        else
                                            StateHasChanged();
                                        return;
                                    }

                                    existErr = true;
                                    if (hsStream.stream != null)
                                    {
                                        hsStream.stream.Close();
                                        hsStream.stream = null;
                                    }
                                    nExamCount++;
                                    per = (nExamCount * 100) / nTotalCount;
                                    SGFileExamEvent(per, hsStream.FileName);
                                    continue;
                                }

                                if (pageService.GetFileExaming() == false)
                                {
                                    if (isRMouseAdd)
                                        NotifyChange_InDropFileList(null);
                                    else
                                        StateHasChanged();
                                    return;
                                }

                            }

                            //HsStreamList.Add(hsStream);
                            //SetFileAdd(hsStream);
                            listTryHsStream.Add(hsStream);
                            nExamCount++;
                            per = (nExamCount * 100) / nTotalCount;
                            SGFileExamEvent(per, hsStream.FileName);
                        }
                    }
                }
            }

            foreach (HsStream hs in listTryHsStream)
            {
                if (!hs.IsDir)
                {
                    FileStream fileStream = hs.stream as FileStream;
                    hs.FileHash = SgExtFunc.GetFileSHA384HexString(fileStream.Name);
                    hs.FilePullPath = fileStream.Name;
                    hs.FileLength = fileStream.Length;
                    hs.stream.Close();
                    hs.stream.Dispose();
                    hs.stream = null;
                }
            }
        }
        catch (Exception ex)
        {
            CLog.Here().Error($"OnDropFileAdd, Exception(MSG) : {ex.Message}");
        }
        finally
        {
            if (SGFileExamEvent != null)
                SGFileExamEvent(1000, "COMPLETE!");
        }

        //파일 등록처리 조건 : 등록 시도 된 파일이 모두 정상적인 경우 OR 부분등록 옵션이 설정된 경우
        bool usePartialFileAdd = SGAppMgrSvc.OpConfigInfoService.GetUsePartialFileAddInTransfer(groupID);

        if (!existErr || usePartialFileAdd) SetFileAdd(listTryHsStream);

        // Important: Invoke StateHasChanged() to update the page
        // 파일 추가후 화면갱신
        StateHasChanged();
        await jsRuntime.InvokeAsync<object>("setDropzoneInputSize");

    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        //파일리더 초기화 통합
        _dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        _dropReference.SetDragTargetElementAsync(targets);
        _dropReference.RegisterDropEventsAsync();

        bViewDropFileAddError = false; // SGAppMgrSvc.OpConfigInfoService.GetUseDropErrorUI();
        InitText();
    }

    private void onDrop()
    {
        //Console.WriteLine("OnDrop Event Occured");
    }

    private void HandleDrop()
    {
        //Console.WriteLine("HandleDrop Event Occured");
    }

    private void HandleClick()
    {
        // Console.WriteLine("Click Event Occured");
        //SGSubFileAddEvent.Invoke();
        //SubFileAddAsync();
    }

    private void HandleDragEnter()
    {
        //dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        //dropClass = "";
    }

    /// <summary>
    /// file 정보를 가져와서 HsStream 으로 변경
    /// </br>드래그앤드롭 파일 (선택된 모든 디렉토리와 하위파일들이 각 List의 항목으로 구성)
    /// </summary>
    /// <param name="files"></param>
    /// <returns></returns>
    public async Task<(List<HsStream>, bool)> SubFileAddAsync(IEnumerable<IFileReference> files, IEnumerable<IFileReference> dirDatas)
    {

        CLog.Here().Information($"SubFileAddAsync, --------------------- ");

        FileExamEvent SGFileExamEvent = null;
        List<HsStream> hsStreamList = new List<HsStream>();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGFileExamEvent = HSCmdCenter.sgPageEvent.GetFileExamNotiEvent(groupID);
        if (SGFileExamEvent == null)
            return (hsStreamList, false);

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null && sgLoginData.GetFileTrans() == false)
            return (hsStreamList, false);

        fileAddManage.DataClear();
        fileAddManage.SetOleExtractExtData(sgLoginData.GetDocumentExtractExt());

        int nTotalCount = files.Count() + ((dirDatas != null && dirDatas.Count() > 0) ? dirDatas.Count() : 0);
        if (nTotalCount < 1)
            return (hsStreamList, false);


        if (GetRegCountEnable(nTotalCount) == false)
            return (hsStreamList, false);

        await refProgress.openPopUp();

        List<HsStream> listTryHsStream = new List<HsStream>();      //등록 시도한 목록이 모두 정상 처리되어야 저장하도록 임시 List로 확인
        HsStream hsStream = null;

        bool existErr = false;      //검사 파일 중 에러 발생 여부
        int nExamCount = 0;
        int per = 0;
        List<string> recvlist = null;

        try
        {


            // file 정보들
            foreach (var file in files)
            {
                if (pageService.GetFileExaming() == false)
                {
                    StateHasChanged();
                    return (hsStreamList, existErr);
                }

                //자바스크립트로부터 드래그앤 드롭한 폴더 정보 가져오기
                //파일 불러오는데 문제가 있다면 필히 자바스크립트를 확인해야함!!!
                var fileInfo = await file.ReadFileInfoAsync();

                if (fileInfo == null)
                {
                    await refProgress.closePopUp();
                    return (hsStreamList, existErr);
                }
                bool bFind = false;
                foreach (var item in HsStreamList)
                {
                    string stListPath = item.RelativePath.Replace("\\", "").Replace("/", "");
                    string stNewPath = fileInfo.Path.Replace("\\", "").Replace("/", "");

                    if (stListPath == stNewPath)
                    {
                        bFind = true;
                        break;
                    }
                }

                if (bFind == true)
                {
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per, fileInfo.Name);

                    continue;
                }

                bAsyncData = true;
                hsStream = new HsStream();

                /*
                드래그로 인한 파일추가는 Dir과 File이 전체경로가 포함되어 있지 않음
                ex) files :
                compress_1Depth_ExtentionErr / compress_1Depth_ExtentionErr / Dir
                AddFileRMX64.dll / compress_1Depth_ExtentionErr/AddFileRMX64.dll / File
                SecureGate-20230217.Log / compress_1Depth_ExtentionErr/SecureGate-20230217.Log / File
                SecureGate-20230220.Log / compress_1Depth_ExtentionErr/SecureGate-20230220.Log / File
                SecureGate-20230215.Log / compress_1Depth_ExtentionErr/OLD_LOG/SecureGate-20230215.Log / File
                SecureGate-20230216.Log / compress_1Depth_ExtentionErr/OLD_LOG/SecureGate-20230216.Log / File
                UnAlzDll.dll / compress_1Depth_ExtentionErr/OLD_LOG/UnAlzDll.dll / File
                */

                //최상위 파일 구성
                //FileAddErr topFile = fileAddManage.CreateFileAddErrInfo(fileInfo.Name, fileInfo.Path, "");
                FileAddErr currentFile = fileAddManage.SetFileTreeFromFilePath(fileInfo.Path, "/");

                hsStream.Size = fileInfo.Size;
                hsStream.FileName = Path.GetFileName(fileInfo.Path);
                hsStream.RelativePath = fileInfo.Path;
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                else
                    hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");

                DateTime date = DateTime.ParseExact(fileInfo.Etc, "yyyy/MM/dd HH:mm:ss", null);
                hsStream.ModifyTime = date;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;
                fileAddManage.bUseCrossPlatformOSforFileName = SGAppMgrSvc.OpConfigInfoService.GetUseCrossPlatformOSforFileName(groupID);

                if (fileInfo.Dir != "Dir")            // file
                {

                    if (!hsStream.FileName.Equals(""))
                    {
                        if (hsStream.FileName.LastIndexOf(".") > -1)
                            hsStream.Type = hsStream.FileName.Substring(hsStream.FileName.LastIndexOf(".") + 1);
                        else
                            hsStream.Type = "";
                    }
                    hsStream.IsDir = false;
                    hsStream.MemoryType = HsStreamType.MemoryStream;

                    //[체크하는 위치 이동] - 확장자 제한 체크하기 전에 결재필수 확장자 적용
                    hsStream.isNeedApprove = false;
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isUserNeedApproveExtUI())
                    {
                        if (sgLoginData != null && CsFunction.isFileExtinListStr(false, hsStream.FileName, sgLoginData.GetExceptionExt()))
                            hsStream.isNeedApprove = true;
                    }

                    if (!GetRegExamEnable(fileAddManage, currentFile, hsStream, hsStream.Type, false, hsStream.Size))
                    {
                        if (pageService.GetFileExaming() == false)
                        {
                            StateHasChanged();
                            return (hsStreamList, existErr);
                        }
                        existErr = true;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }
                    if (pageService.GetFileExaming() == false)
                    {
                        StateHasChanged();
                        return (hsStreamList, existErr);
                    }
                    CLog.Here().Information($"fileName : [{fileInfo.Name}] OpenReadAsync before!");

                    //OpenReadAsyncNoSetUsedList로 변경
                    //레드마인 #2446 [2022-04-19] 드래그 앤 드롭 폴더 추가 이슈사항 참고
                    //hsStream.stream = await file.OpenReadAsync(); // => 이 로직에는 DirSubFiles.use[i] = "y"로 설정하는 부분이 있음 그래서 짝수번째 폴더는 추가 안되는 현상 발생

                    hsStream.stream = await file.OpenReadAsyncNoSetUsedList();

                    //메모리에 올리는 과정에서 한번에 모든 값을 메모리에 올릴 경우 제대로 올라가지 않음.
                    //메로리에 올리길 원한다면 메가 단위 또는 몇 메가씩 쪼개서 올려야 한다.

                    //MemoryStream fileMemoryStream = new MemoryStream();

                    //if (hsStream.MemoryType == HsStreamType.MemoryStream)
                    //{
                    //    int bufferSize = 1024 * 1024;
                    //    int readCount = 0;
                    //    byte[] buf = new byte[bufferSize];
                    //    while (true)
                    //    {
                    //        Array.Clear(buf, 0, buf.Length);
                    //        readCount = await hsStream.stream.ReadAsync(buf);

                    //        if (readCount > 0)
                    //        {
                    //            fileMemoryStream.Write(buf, 0, readCount);
                    //        }
                    //        else
                    //            break;
                    //    }

                    //}
                    //else if (hsStream.MemoryType == HsStreamType.FileStream)
                    //{
                    //    hsStream.stream.CopyTo(fileMemoryStream);
                    //}
                    //hsStream.stream.Dispose();
                    //GC.Collect();
                    //hsStream.stream = null;
                    //hsStream.stream = fileMemoryStream;

                    CLog.Here().Information($"fileName : [{fileInfo.Name}] OpenReadAsync after!");

                    if (await GetReadRightCheck(fileAddManage, currentFile, hsStream) == 0)
                    {
                        if (pageService.GetFileExaming() == false)
                        {
                            StateHasChanged();
                            return (hsStreamList, existErr);
                        }
                        existErr = true;
                        CLog.Here().Information($"fileName : [{fileInfo.Name}] File Access deny!");
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }

                    if (pageService.GetFileExaming() == false)
                    {
                        StateHasChanged();
                        return (hsStreamList, existErr);
                    }

                    if (await GetExamExtChange(fileAddManage, currentFile, hsStream) != 0)
                    {
                        if (pageService.GetFileExaming() == false)
                        {
                            StateHasChanged();
                            return (hsStreamList, existErr);
                        }

                        existErr = true;
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }

                    if (pageService.GetFileExaming() == false)
                    {
                        StateHasChanged();
                        return (hsStreamList, existErr);
                    }
                    if (hsStream.FileName.ToLower().IndexOf(".zip") > -1)
                    {
                        per = (nExamCount * 100) / nTotalCount;
                        if (per < 10) //압축해제 시간이 너무 걸려서 멈춰보여서 진행율 임의로 올림
                            per = 10;

                        SGFileExamEvent(per, hsStream.FileName);
                    }

                    //hsStream.isNeedApprove = false;
                    int nRet = 0;
                    nRet = await GetExamCheckZip(fileAddManage, currentFile, hsStream, SGFileExamEvent, nExamCount, nTotalCount);
                    if (nRet == 1)
                        hsStream.isNeedApprove = true;
                    else if (nRet != 0)
                    {
                        if (pageService.GetFileExaming() == false)
                        {
                            StateHasChanged();
                            return (hsStreamList, existErr);
                        }

                        existErr = true;
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        if (per < 10)
                            per = 10;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }
                    if (pageService.GetFileExaming() == false)
                    {
                        StateHasChanged();
                        return (hsStreamList, existErr);
                    }

                    //2022.10.07 BY KYH - OLE 상세파일 UI 표현 기능 추가
                    //01. 문서파일 내 OLE 개체 검사
                    //02. 문서파일 압축해제 후 파일 검사

                    //01. 문서파일 내 OLE 개체 검사
                    if (await GetExamCheckDocument(fileAddManage, currentFile, hsStream) != 0)
                    {
                        if (pageService.GetFileExaming() == false)
                        {
                            StateHasChanged();
                            return (hsStreamList, existErr);
                        }

                        existErr = true;
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per, hsStream.FileName);
                        continue;
                    }

                    if (pageService.GetFileExaming() == false)
                    {
                        StateHasChanged();
                        return (hsStreamList, existErr);
                    }

                    //02. 문서파일 압축해제 후 파일 검사
                    //구현필요

                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    else
                        hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");


                    //[체크하는 위치 이동] - 확장자 제한 체크하기 전에 결재필수 확장자 적용
                    //if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isUserNeedApproveExtUI())
                    //{
                    //    if (sgLoginData != null && CsFunction.isFileExtinListStr(false, hsStream.FileName, sgLoginData.GetExceptionExt()))
                    //        hsStream.isNeedApprove = true;
                    //}

                    listTryHsStream.Add(hsStream);
                    //SGFileExamEvent(per, hsStream.FileName);
                }
                else    //디렉토리
                {
                    hsStream.IsDir = true;
                    hsStream.Size = 0;
                    hsStream.MemoryType = HsStreamType.MemoryStream;
                    hsStream.stream = null;
                    hsStream.isNeedApprove = false;

                    if (SGAppMgrSvc.OpConfigInfoService.GetUseCrossPlatformOSforFileName(groupID))
                        existErr = (!GetRegExamEnable(fileAddManage, currentFile, hsStream, hsStream.Type, false, hsStream.Size));
                    //SGFileExamEvent(per, hsStream.FileName);
                    //SGFileExamEvent(per, fileInfo.Name);

                }

                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per, (fileInfo.Dir != "Dir" ? hsStream.FileName : ""));

            } // foreach (var file in files)


            // dirs 정보들
            foreach (var dir in dirDatas)
            {
                bAsyncData = true;
                //자바스크립트로부터 드래그앤 드롭한 폴더 정보 가져오기
                //파일 불러오는데 문제가 있다면 필히 자바스크립트를 확인해야함!!!

                var fileInfo = await dir.ReadFileInfoDirAsync();

                bool isExist = false;
                foreach (HsStream hs in HsStreamList)
                {
                    string stListPath = hs.RelativePath.Replace("\\", "").Replace("/", "");
                    string stNewPath = fileInfo.Path.Replace("\\", "").Replace("/", "");

                    if (stListPath == stNewPath)
                    {
                        isExist = true;
                        break;
                    }
                }

                if (isExist)
                    continue;

                hsStream = new HsStream();
                FileAddErr currentFile = fileAddManage.SetFileTreeFromFilePath(fileInfo.Path, "/");
                hsStream.FileName = fileInfo.Name;
                hsStream.RelativePath = fileInfo.Path;
                DateTime date = DateTime.Now;
                hsStream.ModifyTime = date;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;
                hsStream.Type = "DIR";
                hsStream.IsDir = true;
                hsStream.Size = 0;
                hsStream.MemoryType = HsStreamType.MemoryStream;
                hsStream.stream = null;
                hsStream.isNeedApprove = false;
                if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isUserNeedApproveExtUI())
                {
                    if (sgLoginData != null && CsFunction.isFileExtinListStr(false, fileInfo.Name, sgLoginData.GetExceptionExt()))
                        hsStream.isNeedApprove = true;
                }

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                }
                else
                {
                    hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
                }

                bool bHaveErr = false;
                if (SGAppMgrSvc.OpConfigInfoService.GetUseCrossPlatformOSforFileName(groupID))
                {
                    bHaveErr = (!GetRegExamEnable(fileAddManage, currentFile, hsStream, hsStream.Type, false, hsStream.Size));
                    existErr = bHaveErr;
                }

                if (bHaveErr == false)
                    listTryHsStream.Add(hsStream);

                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per, fileInfo.Name);

            } // foreach (var dir in dirDatas)

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"SubFileAddAsync, Exception(MSG) : {ex.Message}");
        }
        finally
        {
            if (SGFileExamEvent != null)
                SGFileExamEvent(1000, "complete!");
        }

        //파일 등록처리 조건 : 등록 시도 된 파일이 모두 정상적인 경우 OR 부분등록 옵션이 설정된 경우
        bool usePartialFileAdd = SGAppMgrSvc.OpConfigInfoService.GetUsePartialFileAddInTransfer(groupID);

        if (!existErr || usePartialFileAdd)
            hsStreamList = new List<HsStream>(listTryHsStream);
        return (hsStreamList, existErr);

        //StateHasChanged();

    }

    /// <summary>
    /// 폴더와 파일 List를 가져와서 순서에 맞게 배열
    /// </summary>
    /// <param name="folderList"></param>
    /// <param name="fileList"></param>
    /// <returns></returns>
    public List<HsStream> ReSortFile(List<HsStream> folderList, List<HsStream> fileList)
    {

        List<HsStream> finalList = new List<HsStream>();

        foreach (HsStream stFolder in folderList)
        {
            finalList.Add(stFolder);
            string stfolderPath = stFolder.RelativePath.Replace("\\", "").Replace("/", "");
            foreach (HsStream stFile in fileList)
            {
                string stfileFolderPath = Path.GetDirectoryName(stFile.RelativePath);
                string stfilePath = stfileFolderPath.Replace("\\", "").Replace("/", "");

                if (stfolderPath == stfilePath)
                {
                    finalList.Add(stFile);
                }
            }
        }

        foreach (HsStream stFile in fileList)
        {
            if (stFile.FileName == stFile.RelativePath)
            {
                finalList.Add(stFile);
            }
        }
        return finalList;
    }
    /// <summary>
    /// 전체파일을 화면에 보여줌.
    /// </summary>
    /// <param name="fileList"></param>
    /// <returns></returns>
    public async Task UpLoadFile(List<HsStream> fileList)
    {
        //foreach (HsStream st in fileList)
        //{
        //    SetFileAdd(st);
        //}
        SetFileAdd(fileList);
        StateHasChanged();
        await jsRuntime.InvokeAsync<object>("setDropzoneInputSize");
        StateHasChanged();
    }

    private void RemoveFile(IFileListEntry file)
    {
        FileListEntryImpl fileEntry = new FileListEntryImpl();
        fileEntry.Name = file.Name;
        fileEntry.Size = file.Size;
        fileEntry.RelativePath = file.RelativePath;
        fileEntry.Type = file.GetType().FullName;

        // selectedFiles.Remove(fileEntry);
    }

    public async Task RemoveAllFile()
    {
        await DataClear();
    }

    public async Task RemoveSelectFile()
    {
        await DataSelectClear();
    }

    //DropZone 클릭방지코드
    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        _groupId = groupID;
        //2022.10.28 이동 - 다중망 접속 시 초기화면이 [파일전송] 화면인 경우, 해당 망의 이벤트와 리스트로 재배치
        HSCmdCenter.sgPageEvent.SetRMouseFileAddEventAdd(groupID, RMouseFileAction);
        InitText();
        @*action1 = HandleFileInputChange;
            action2 = HandleFileInputChange;*@
    //SGFileExamEvent = FileExamResult;
        HSCmdCenter.sgPageEvent.SetFileExamNotiEventAdd(groupID, FileExamResult);
        PageStatusData pageSData = pageService.GetPageStatus(groupID);
        HsStreamList = pageSData.GetFileDragListData();
        fileAddManage = pageSData.GetFileAddManage();

        base.OnAfterRender(firstRender);
        RMouseFileAddEvent RMouseFileAdd = null;
        RMouseFileAdd = HSCmdCenter.sgPageEvent.GetRMouseFileAddEvent(groupID);
        string strRMFilePath = PageStatusData.GetRMFIlePath();
        if ((RMFileExist(strRMFilePath) == true) && (RMouseFileAdd != null))
            RMouseFileAdd(groupID);
        return stopClick();
    }
    private async Task stopClick()
    {
        await jsRuntime.InvokeAsync<object>("stopClick");

        //dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        //string targets = new string("fileInput");
        //await dropReference.SetDragTargetElementAsync(targets);
        //await dropReference.RegisterDropEventsAsync(false);
    }

    public void InitText()
    {
        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                   // 파일명
        strFileSize = XmlConf.GetTitle("T_COMMON_SIZE");                       // 크기
        strFileType = XmlConf.GetTitle("T_COMMON_KIND");                       // 유형
        strLastModDay = XmlConf.GetTitle("T_COMMON_MODIFYDATE");               // 수정한 날짜.
        strRelativePath = XmlConf.GetTitle("T_FILE_PATH");                     // 경로
        strFileDragInfo = XmlConf.GetInfoMsg("I_0189");                        // 파일을 이곳으로 드래그 하세요.
    }

    public List<System.IO.FileInfo> DirSearch(string sDir, List<System.IO.FileInfo> temp = null)
    {
        bool bAccess = true;
        bAccess = IsAccessible(sDir);
        if (!bAccess)
        {
            string strErr = XmlConf.GetErrMsg("E_0214");        //해당 디렉토리 접근권한이 없습니다.
            ShowMessage("error", strErr);
            return null;
        }

        if (temp == null)
            temp = new List<System.IO.FileInfo>();
        DirectoryInfo di = new DirectoryInfo(sDir);

        foreach (var item in Directory.GetDirectories(sDir))
        {
            System.IO.FileInfo fInfo = new System.IO.FileInfo(item);
            temp.Add(fInfo);
            DirSearch(item, temp);
            CLog.Here().Information($"### - DirSearch, Directories : {item}");
        }

        foreach (var item in di.GetFiles())
        {
            temp.Add(item);
            CLog.Here().Information($"######### - DirSearch, files-Name : {item.FullName}, Ext:{item.Extension}, files-Attributes(###) : {item.Attributes.ToString()}");
        }
        return temp;
    }

    public bool IsAccessible(string RealPath)
    {
        //get directory info
        DirectoryInfo realpath = new DirectoryInfo(RealPath);
        CLog.Here().Information($"IsAccessible RealPath = [{RealPath}]");
        CLog.Here().Information($"IsAccessible realpath = [{realpath}]");
        try
        {
            //if GetDirectories works then is accessible
            realpath.GetDirectories();
            return true;
        }
        catch (Exception ex)
        {
            //if exception is not accesible
            return false;
        }
    }

    public void SetFileAdd(List<HsStream> hs)
    {
        if (hs == null)
            return;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        pageService.SetFileAdd(groupID, hs);
    }

    public List<HsStream> GetHsStreamList()
    {
        return HsStreamList;
    }

    public int GetFileListAddCount()
    {
        return HsStreamList.Count();
    }

    public bool GetRootPathFind(string strFilePath)
    {
        bool bFind = false;
        string strTempPath = "";
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            strFilePath = strFilePath.Replace("/", "\\");
        }
        else
        {
            strFilePath = strFilePath.Replace("\\", "/");
        }
        //strFilePath = strFilePath.Replace("/", "\\");
        for (int i = 0; i < strRootPath.Count; i++)
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                strTempPath = strRootPath[i] + "\\";
            }
            else
            {
                strTempPath = strRootPath[i] + "/";
            }
            //strTempPath = strRootPath[i] + "\\";
            if (strTempPath.Equals(strFilePath))
                bFind = true;
        }
        return bFind;
    }

    /// <summary>
    /// 파일추가시 검사 중, 검사 종료후 호출해주는 함수
    /// </summary>
    /// <param name="per"></param>
    /// <param name="strFileName"></param>
    private async void FileExamResult(int per, string strFileName)
    {
        // Console.WriteLine($"SGFileExamEvent 응답 per : {per} / strFileName : {strFileName}");
        if (per < 0)
        {
            await refProgress.closePopUp();
            string strMsg = XmlConf.GetErrMsg("E_0212");                // 파일 로드 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        if (per >= 100)
        {
            refProgress.ChangeProgress(100, strFileName);

            CLog.Here().Information($"progess 100% (#####), Percent : {per}, fileName : {strFileName}");

            if (per < 1000 || string.Compare(strFileName, "complete!", true) != 0)
                return;

            await Task.Delay(500);
            await refProgress.closePopUp();
            int nErrCount = fileAddManage.GetAddErrCount();

            List<(string reason, string count)> listReason;
            List<FileAddErr> listErr;
            bool hasErr = fileAddManage.GetReasonAndDisplayOfErrSource(out listReason, out listErr);
            if (hasErr)
            {
                refTransferDenied.CopyData(listErr);
                refTransferDenied.CopyReason(listReason);
                refTransferDenied.SetInnerFileErr(_groupId);
                fileAddManage.RestoreFileSizeLimit();   //전송량 원복 2021/04/23 YKH
                await refTransferDenied.openPopUp();

                //한글파일이 문서 검사 오류 발생 했을 경우, 구버전 알림 메세지 처리
                List<string> oldVersionHWP = new List<string>();
                listErr.ForEach(delegate (FileAddErr err)
                {
                    string ext = err.FileName.Substring(err.FileName.LastIndexOf(".") + 1).ToUpper();
                    if (err.OLEExtractorResult == -1 && (ext == "HWP" || ext == "HWPX"))
                        oldVersionHWP.Add($"[{err.FileName}]");
                });

                if (oldVersionHWP.Count > 0)
                    ShowMessage("error", string.Format(XmlConf.GetErrMsg("E_0255"), string.Join("<br>", oldVersionHWP)));
            }
            else
                fileAddManage.m_nCurRegisteringSize = 0;

            return;
        }
        refProgress.SetProgressText(false);
        refProgress.ChangeProgress(per, strFileName);
    }

    public int GetListTotalCount(List<string> list)
    {
        if ((list == null) || (list.Count <= 0))
            return 0;

        int count = list.Count;
        for (int i = 0; i < list.Count; i++)
        {
            string data = list[i];
            System.IO.FileInfo fInfo = new System.IO.FileInfo(data);
            FileAttributes attr = fInfo.Attributes;
            if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
            {
                List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                if (FileData == null)
                    continue;
                count += FileData.Count;
            }
        }

        return count;
    }

    public long GetRegListTotalSize()
    {
        long totalSize = 0;
        int nRegCount = GetFileListAddCount();
        if (nRegCount <= 0)
            return totalSize = 0;

        for (int i = 0; i < nRegCount; i++)
        {
            totalSize += HsStreamList[i].Size;
        }

        return totalSize;
    }

    public int GetRegListTotalCount()
    {
        return GetFileListAddCount();
    }

    /// <summary>
    /// 등록가능한 최대 수량 체크
    /// </summary>
    /// <param name="nRegCount"></param>
    /// <returns></returns>
    public bool GetRegCountEnable(int nRegCount)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        int nEnableCount = sgLoginData.GetFileLimitCount();
        nRegCount = nRegCount + GetRegListTotalCount();

        if (FileAddManage.GetRegCountEnable(nEnableCount, nRegCount) != true)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0019");                 // 최대 {0}개 파일을 등록할 수 있습니다.
            strMsg = String.Format(strMsg, nEnableCount);
            ShowMessage("warn", strMsg);
            return false;
        }
        return true;
    }

    public bool GetRegSizeEnable(FileAddManage fileaddManage, long nRegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        long nEnableSize = sgLoginData.GetFileLimitSize();
        long nConvEnableSize = nEnableSize * (1024 * 1024);                                           // byte 변환

        nRegSize = nRegSize + GetRegListTotalSize();

        if (fileaddManage.GetSizeEnable(nConvEnableSize, nRegSize) != true)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0027");                 // 파일은 {0} MB까지 전송할 수 있습니다.
            strMsg = String.Format(strMsg, nEnableSize);
            ShowMessage("warn", strMsg);
            StateHasChanged();
            return false;
        }
        return true;
    }

    /// <summary>
    /// 사이즈,횟수,Black/White 리스트, 숨김, 이름길이 등 체크
    /// </summary>
    /// <param name="fileAddManager"></param>
    /// <param name="hsStream"></param>
    /// <param name="strExt"></param>
    /// <param name="bHidden"></param>
    /// <param name="RegSize"></param>
    /// <returns></returns>
    public bool GetRegExamEnable(FileAddManage fileAddManager, FileAddErr currentFile, HsStream hsStream, string strExt, bool bHidden, long RegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        //Linux/MAC의 수신폴더가 시스템 폴더에 접근하지 않으므로, 해당 위험성을 위해 추가되었을 하기 제한 제거
        //if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        //{
        //    string strFileName = hsStream.FileName;
        //    if (strFileName[0] == '.')
        //        bHidden = true;
        //}

        bool bWhite = sgLoginData.GetFileFilterType();
        string strFileExtInfo = sgLoginData.GetFileFilter();
        long nEnableSize = sgLoginData.GetFileLimitSize();                                            //1회 전송가능 사이즈
        long nConvEnableSize = nEnableSize * (1024 * 1024);                                           //1회 전송가능한 사이즈 byte 변환

        //파일 전송 시 체크했던 제한 사항을 파일 등록 시 체크하도록 추가(1회 파일갯수,일일 전송사이즈, 일일 전송횟수) by 2022.08.19 KYH
        long nEnableSizeDay = pageService.GetDayFileMaxSize(groupID);
        long FileTransMaxSize = nEnableSizeDay * (1024 * 1024);                                //일일 전송가능 사이즈
        long RemainFileTransSize = pageService.GetDayRemainFileSize(groupID);                         //일일 전송가능 잔여 사이즈

        int fileCountStandard = sgLoginData.GetFileLimitCount();                                        //1회 전송가능 파일 갯수
        int dayCountStandard = pageService.GetDayFileMaxCount(groupID);                             //일일 전송가능 횟수 제한
        int dayCountRemain = pageService.GetDayRemainFileCount(groupID);                          //일일 전송가능 잔여 횟수

        //fileAddErr.SetUseOSmaxPath(SGAppMgrSvc.OpConfigInfoService.GetUseOSMaxFilePath());
        HSCmdCenter.SetUseOSMaxPath(groupID, true);

        CLog.Here().Information($"Ext(or Type): {strExt}, ###-FileAddCheck-###, FileFilterType : {(bWhite ? "WHITE" : "BLACK")}");

        // okb
        fileAddManager.bEmptyFIleNoCheck = SGAppMgrSvc.OpConfigInfoService.GetEmptyfileTrans(groupID);

        // fileName Check
        fileAddManager.bUseCrossPlatformOSforFileName = SGAppMgrSvc.OpConfigInfoService.GetUseCrossPlatformOSforFileName(groupID); // SGAppMgrSvc.OpConfigInfoService.GetUseCrossPlatformOSforFileName();

        if (fileAddManager.GetExamFileAddEnable(hsStream, currentFile, bWhite, strFileExtInfo, bHidden, nConvEnableSize, RegSize, FileTransMaxSize, RemainFileTransSize, fileCountStandard, dayCountStandard, dayCountRemain, 1) != true)
            return false;

        return true;
    }

    /// <summary>
    /// 파일 읽기 권한 오류 확인
    /// </summary>
    /// <param name="fileAddManager"></param>
    /// <param name="hsStream"></param>
    /// <returns></returns>
    public async Task<int> GetReadRightCheck(FileAddManage fileAddManager, FileAddErr currentFile, HsStream hsStream)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            CLog.Here().Information($"GetReadRightCheck sgLoginData NULL!");
            return -1;
        }
        int Rtn = 1;
        object[] param = { hsStream.RelativePath.Replace("\\", "/") };
        Rtn = await jsRuntime.InvokeAsync<int>("ReadRightResult", param);
        if (Rtn == 0)
            currentFile.eErrType = eFileAddErr.eFA_FILE_READ_ERROR;
        return Rtn;
    }

    /// <summary>
    /// 확장자 위변조 확인
    /// </summary>
    /// <param name="fileAddManage"></param>
    /// <param name="hsStream"></param>
    /// <returns></returns>
    public async Task<int> GetExamExtChange(FileAddManage fileAddManage, FileAddErr currentFile, HsStream hsStream)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return -1;

        string strFileExtInfo = sgLoginData.GetFileFilter();
        if ((strFileExtInfo.Equals("") == true) || (strFileExtInfo.Equals(";") == true))
        {
            return 0;
        }

        bool allowDRM = SGAppMgrSvc.OpConfigInfoService.GetAllowDRM(groupID);

        //확장자 위변조 확인
        (eFileAddErr, string) enRet = await fileAddManage.GetExamFileExtChange(hsStream, allowDRM);
        currentFile.MimeType = enRet.Item2;
        if (enRet.Item1 != eFileAddErr.eFANone)
        {
            currentFile.eErrType = enRet.Item1;
            return -1;
        }
        return 0;
    }

    public async Task<int> GetExamCheckZip(FileAddManage fileAddManager, FileAddErr currentFile, HsStream hsStream, FileExamEvent SGFileExamEvent, int ExamCount, int TotalCount)
    {
        if (hsStream == null)
            return 0;

        if (hsStream.Size <= 0)     //0kb 압축파일은 정상적인 해제 처리가 불가하므로 미검사
            return 0;

        string strExtType = hsStream.Type;
        strExtType = strExtType.ToUpper();

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return -1;

        if (sgLoginData.IsVipUser())
        {
            CLog.Here().Information($"No check zip/tar depth for Vip User");
            return 0;
        }

        string strFileExtInfo = sgLoginData.GetFileFilter();
        if (strFileExtInfo.Equals("") || strFileExtInfo.Equals(";"))
        {
            CLog.Here().Information($"No check zip/tar depth for EMPTY FILEFILTER(;)");
            return 0;
        }

        // 검사가 필요한 확장자(문서) 체크
        if (!fileAddManage.ListCheckableCompressExtension.Exists(ext => ext == strExtType))
            return 0;

        // 아직 지원 안됨 :  || (strExtType.Equals("ZIPX")) || (strExtType.Equals("LZH")) || (strExtType.Equals("TAR")) || (strExtType.Equals("RAR"))

        bool bWhite = sgLoginData.GetFileFilterType();                              // true : White , false : black

        string strZipDepthInfo = sgLoginData.GetZipDepthInfo(sgLoginData.GetSystemPosition());
        string[] strTemp = strZipDepthInfo.Split('/');  //ZIP파일 내부 검사 [ Depth/옵션(1이상 검사/0: 차단, 1 허용)

        int MaxDepth = 3;       //압축 파일 내부에 압축이 발견되면 n번까지 Depth 해제함
        int Option = 1;         //0: 내부에 압축이 발견되면 차단 / 1: 허용
        if ((strTemp != null) && (strTemp.Length >= 2))
        {
            if (!strTemp[0].Equals(""))
            {
                MaxDepth = Convert.ToInt32(strTemp[0]);
            }
            if (!strTemp[1].Equals(""))
            {
                Option = Convert.ToInt32(strTemp[1]);
            }
        }

        if (MaxDepth < 1)
        {
            CLog.Here().Information($"GetExamCheckZip Stop - ClientZipDepth : [{MaxDepth} / {Option}]");
            return 0;
        }

        bool bDenyPasswordZIP = SGAppMgrSvc.OpConfigInfoService.GetUseDenyPasswordZip(groupID);
        bool bAllowDRM = SGAppMgrSvc.OpConfigInfoService.GetAllowDRM(groupID);
        CLog.Here().Information($"압축(Zip) 파일 passwd 있을때 차단 : [{bDenyPasswordZIP.ToString()}] / 압축(Zip) 파일 DRM파일 있을떄 차단 : [{bAllowDRM}]");

        //문서파일 내부 검사유형 (0 : 문서 검사 않함. / 1 : 모듈검사 & OLE객체 마임리스트검사 / 2 : 모듈검사 & 위변조 체크 / 3 : 모듈검사 & OLE마임리스트검사 & 위변조체크 )
        string strDocumentExtractType = sgLoginData.GetDocumentExtractType(sgLoginData.GetSystemPosition());

        int nRet = 0;
        nRet = await fileAddManager.CheckZipFile(hsStream, currentFile, bDenyPasswordZIP, bWhite, strFileExtInfo, SGFileExamEvent, ExamCount, TotalCount, strDocumentExtractType, bAllowDRM, MaxDepth, Option,
            ((SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isUserNeedApproveExtUI()) ? sgLoginData.GetExceptionExt() : ""));
        // if (await fileAddManager.CheckZipFile(hsStream, currentFile, bDenyPasswordZIP, bWhite, strFileExtInfo, SGFileExamEvent, ExamCount, TotalCount, MaxDepth, Option) != 0)

        if (nRet == 1)
            return 1;
        else if (nRet != 0)
            return -1;

        return 0;
    }

    /// <summary>
    /// [문서파일에 한하여] OLE 개체 추출 및 MIME 검사
    /// </summary>
    /// <param name="fileAddManager"></param>
    /// <param name="currentFile"></param>
    /// <param name="hsStream"></param>
    /// <param name="SGFileExamEvent"></param>
    /// <param name="ExamCount"></param>
    /// <param name="TotalCount"></param>
    /// <returns></returns>
    public async Task<int> GetExamCheckDocument(FileAddManage fileAddManager, FileAddErr currentFile, HsStream hsStream)
    {
        if (hsStream == null)
            return 0;

        if (hsStream.Size <= 0)     //0kb 문서파일은 정상적인 OLE개체추출 및 압축해제가 불가하므로 미검사
            return 0;

        string strExtType = hsStream.Type;
        strExtType = strExtType.ToUpper();

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return -1;

        //if (sgLoginData.IsVipUser())
        if (false)
        {
            CLog.Here().Information($"No check OLD for Vip User");
            return 0;
        }

        string strDocumentExtractType = sgLoginData.GetDocumentExtractType(sgLoginData.GetSystemPosition());        //문서파일 내부 검사유형 (0 : 문서 검사 않함. / 1 : 모듈검사 & OLE객체 마임리스트검사 / 2 : 모듈검사 & 위변조 체크 / 3 : 모듈검사 & OLE마임리스트검사 & 위변조체크 )
        if (string.IsNullOrEmpty(strDocumentExtractType))   //ENV테이블에 해당 항목 없으면 검사X
            return 0;

        //DocumentExtractType documentExtract = DocumentExtractType.NONE;
        //if (Enum.TryParse(documentExtractType, out documentExtract) == false || documentExtract == DocumentExtractType.NONE)
        //    return 0;
        //
        //// 검사가 필요한 확장자(문서) 체크
        //if (!fileAddManager.ListCheckableDocumentExtension.Exists(ext => ext == strExtType))
        //    return 0;

        ////DB 조회 후 저장해놓았던, UnitData를 FileAddmanager에 저장
        //HsNetWorkSGData.SGData oleData = HSCmdCenter.GetOLEMimeListData(groupID);
        //List<Dictionary<int, string>> oleMimeList = oleData.GetSvrRecordData("RECORD");
        //bool bOLECheckMimeType = false;      //OLE 개체 검사 시 MIME LIST의 블랙/화이트 여부 (false[D] :Black / true: White)
        //
        //if (oleMimeList != null)
        //{
        //    foreach (Dictionary<int, string> row in oleMimeList)
        //    {
        //        string mimetype = row[0];
        //        string type = row[1];
        //
        //        bOLECheckMimeType = (type == "W");
        //        fileAddManager.OLEMimeTypeMapAddOrUpdate(mimetype);
        //    }
        //}
        ////  fileAddManage.OLEMimeTypeMapAddOrUpdate()




        bool bWhite = sgLoginData.GetFileFilterType();                              // true : White , false : black
        string strFileExtInfo = sgLoginData.GetFileFilter();
        bool bAllowDRM = SGAppMgrSvc.OpConfigInfoService.GetAllowDRM(groupID);

        //bool bDenyPasswordZIP = SGAppMgrSvc.AppConfigInfoService.GetDenyPasswordZIP();
        if (await fileAddManager.CheckDocumentFile(hsStream, currentFile, strDocumentExtractType, bWhite, strFileExtInfo, bAllowDRM) != 0)
            return -1;

        return 0;
    }

    public async Task RMouseFileAddAction(List<string> recvList)
    {
        if (Window.GetTrayUse())
        {
            Window.MoveTrayToWebWindow();
        }

        if (pageService.GetScrLocking() == true)
            return;
        if (recvList.Count <= 0)
            return;
        //OnDrop(recvList);
        await OnDropFileAdd(recvList, true);
    }

    public static void NotifyChange_InDropFileList(FileListEntryImpl[] files)
    {
        //action1.Invoke(files, true);
    }

    public bool RMFileExist(string strRMFilePath)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        FileAddManage fileAddmanage = new FileAddManage(groupID);
        return fileAddmanage.RMFileExist(strRMFilePath);
    }
    public void RMouseFileAction(int groupID)
    {

        FileAddManage fileAddmanage = new FileAddManage(groupID);

        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
        if (!fileAddmanage.RMFileExist(strRMouseFilePath))
            return;

        List<string> ListFile = fileAddmanage.LoadRMFileAdd(strRMouseFilePath);
        RMouseFileAddAction(ListFile);
    }

    /// <summary>
    /// 필수결재자 기능 UI를 사용해야 되는 상태인지 판단
    /// </summary>
    /// <returns></returns>
    public bool isUserNeedApproveExtUI()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return false;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return false;


        // 결재 사용중이지 않을때
        if (sgLoginData.GetApprove())
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User Policy Use APPROVE!");
            return false;
        }

        // 일반.결재자만
        if (sgUserData.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID)) > 1)
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User's ApprPOS is OVER Approver!");
            return false;
        }

        // Vip가 아닐때에만
        if (sgLoginData.IsVipUser())
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User is VIP!");
            return false;
        }

        return true;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="fileaddmanage"></param>
    /// <param name="nRegSize"></param>
    /// <returns></returns>
    public bool GetDayRegSizeEnable(FileAddManage fileaddmanage, long nRegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        nRegSize = nRegSize + GetRegListTotalSize();

        if (pageService.GetDayFileTransSizeEnable(groupID, nRegSize) != true)
        {

            DayFileChangeNotiEvent dayFileChange = null;
            dayFileChange = HSCmdCenter.sgPageEvent.GetDayFileChangeNotiEvent(groupID);
            if (dayFileChange == null)
                return false;

            dayFileChange(groupID);

            string strMsg = XmlConf.GetErrMsg("E_0105");    // 일일 전송 최대 사이즈는 {0}MB입니다./r/n일일 전송 사이즈를 초과하였습니다.
            Int64 FileMaxSize = pageService.GetDayFileMaxSize(groupID);
            strMsg = String.Format(strMsg, FileMaxSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);

            return false;
        }
        return true;
    }

    [JSInvokable("AddReadFailList")]
    public static void AddReadFailList(string path)
    {
        Console.WriteLine("AddReadFailList Call Excuted. :" + path);
    }

    private async Task<List<string>> SubFileAddAsync()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        await Task.Delay(100);
        List<string> fileList = new List<string>();
        //int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumber");
        string targets = new string("fileInput");
        string filepath = pageService.GetDragNDropFilePath();
        if (!String.IsNullOrEmpty(filepath))
        {
            string path = HttpUtility.UrlDecode(filepath);

            if (path.IndexOf("file:///") == 0)
            {
                path = path.Substring(8);
            }
            else if (path.IndexOf("file://") == 0)
            {
                path = path.Substring(5);
            }
            else if (path.IndexOf("http") == 0)
            {
                string strMsg = XmlConf.GetErrMsg("E_0267");    // Url 파일은 드래그앤드랍으로 파일을 올릴 수 없습니다. 우클릭 파일 전송을 이용해 주세요.
                ShowMessage("error", strMsg);

                CLog.Here().Error($"URL-File Detect - URL : {path}");
                await _dropReference.ClearValue();
                pageService.SetDragNDropFilePath("");
                return null;
            }
            string dirPath = "";
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            {
                dirPath = "/" + Path.GetDirectoryName(path);
            }
            else
            {
                dirPath = Path.GetDirectoryName(path);
            }
            var fileListtemp = await _dropReference.EnumerateFilesAsync();
            foreach (var file in fileListtemp)
            {
                var fileinfo = await file.ReadFileInfoAsync();
                fileList.Add(Path.Combine(dirPath, fileinfo.Name));
            }
        }
        await _dropReference.ClearValue();
        pageService.SetDragNDropFilePath("");
        return fileList;
    }

    
    //드래그앤드랍 전용코드
    public async Task DropClear()
    {
        int nTargetNumber = await jsRuntime.InvokeAsync<int>("getTargetInputNumberNoIncrease");

        string target = $"fileInputTrans";
        object[] param = { target };
        await jsRuntime.InvokeAsync<object>("removeAllFileList", param);

        CLog.Here().Information("[CLEAR] 삭제");
    }
}
