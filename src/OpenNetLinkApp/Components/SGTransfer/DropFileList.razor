@using System.IO
@using BlazorInputFile
@using System.Diagnostics
@using OpenNetLinkApp.Services
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGQuery
@using AgLogManager

@inject IJSRuntime jsRuntime
@inject IFileReaderService fileReaderService
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService

<DropTarget Drop="@OnDrop">
    <div class="dropzone col-md-12 p-0" style="overflow:auto;height:100%;">
        <InputFile id="fileInput" multiple title=""
                   @onclick="HandleClick"
                   @ondragenter="HandleDragEnter"
                   @ondragleave="HandleDragLeave" />
        @if ((fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message" style="font-size:14px;">Only image files are accepted.</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message" style="font-size:14px;">The max file size is @MaxFileSizeMB MB.</li>
                }
            </ul>
        }
        <!-- height:100%;position:relative;left:0px;top:0px; -->
        <!--class="table table-head-fixed table-bordered table-hover mb-0" style="font-size: 14px; position: relative; left: 0px; top: 0px;" -->
        @if (HsStreamList != null && HsStreamList.Count > 0)
        {
            <table id="example2" class="table table-head-fixed table-bordered table-hover mb-0" style="font-size: 14px;">
                <thead>
                    <tr>
                        <th>@strFileName</th>                 <!--파일명-->
                        <th>@strFileSize</th>                 <!--크기-->
                        <th>@strFileType</th>                 <!--유형-->
                        <th>@strLastModDay</th>               <!--수정한 날짜-->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in HsStreamList)
                    {
                        <tr style="height:20px;">
                            <td>@file.FileName</td>
                            <td>@getSizeStr(file.Length)</td>
                            <td>@file.Type</td>
                            <td>@file.ModifyTime</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {

            <p style="font-size:15px;">
                <br /><br /><br /><br />
                @((MarkupString)strFileDragInfo)         <!--파일을 이곳으로 드래그 하세요.-->
            </p>

        }
    </div>
</DropTarget>

<DropProgress @ref="refProgress"></DropProgress>
<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>

@code {

    public delegate void FileExamEvent(int per);

    public event FileExamEvent SGFileExamEvent;

    string strFileName = "";
    string strFileSize = "";
    string strFileType = "";
    string strLastModDay = "";
    string strRelativePath = "";
    string strFileDragInfo = "";

    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
                                                          //private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    //private List<FileListEntryImpl> selectedFiles = new List<FileListEntryImpl>();
    private static Action<FileListEntryImpl[]> action1;

    public ElementReference inputTypeFileElement;
    IFileReaderRef dropReference;

    List<HsStream> HsStreamList = null;

    ISGSideBarUIService SideBarUISvc;

    public bool bAsyncData = false;
    List<string> strRootPath = new List<string>();

    DropProgress refProgress = new DropProgress();

    Transfer_Denied refTransferDenied;

    public FileAddManage fileAddManage;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<DropFileList>();
    /*
    public async Task UploadFiles()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HsStreamList.Clear();

        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        await dropReference.SetDragTargetElementAsync(targets);

        await dropReference.IsDragTargetElement(targets);
        System.Threading.Thread.Sleep(500);
        await dropReference.AppendDragTargetElement(targets);
        List<string> dirs = new List<string>();

        HsStream hsStream = null;
        IEnumerable<IFileReference> temp = await dropReference.EnumerateFilesAsync();
        int nTotalCount = temp.Count() + selectedFiles.Count;
        string str = String.Format("file Total Count :  {0} ", nTotalCount);
        Console.WriteLine(str);
        int nLoadCount = 0;
        int per = 0;
        string strRootPath = "";
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            bAsyncData = true;

            hsStream = new HsStream();
            var fileInfo = await file.ReadFileInfoAsync();
            Debug.WriteLine("FileName:" + fileInfo.Path + fileInfo.Name);
            string strRelativePath = fileInfo.Path + fileInfo.Name;


            //하위폴더정보가 따로 넘어오지 않으므로 수동으로 생성
            if (fileInfo.Dir != "Dir" && fileInfo.Path != null && fileInfo.Path.Length > 0)
            {
                bool bFind = false;
                foreach (string path in dirs)
                {
                    if (path.Equals(fileInfo.Path))
                    {
                        bFind = true;
                        break;
                    }
                }
                string strTempPath = "/";
                strTempPath = strRootPath + strTempPath;                                  // Root folder 가 한번 더 들어오는 현상 방지
                if ((bFind == false) && (!fileInfo.Path.Equals(strTempPath)) )
                {
                    dirs.Add(fileInfo.Path);
                    string strFilePath = fileInfo.Path.Replace("/", "\\");
                    SetHsStreamSubFolder(strFilePath);
                    //nLoadCount++;
                    //per = (nLoadCount * 100) / nTotalCount;
                    //SGFileLoadEvent(groupID, per);
                }
            }


            if (fileInfo.Dir == "Dir")                  // 처음 들어오는 Root Dir
            {
                Console.WriteLine("OpenReadAsync Read Directory : " + fileInfo.Name + " Size : " + fileInfo.Size + " Relative Path : " + strRelativePath);
                hsStream.FileName = strRelativePath;
                strRootPath = hsStream.FileName;
                DateTime date = (DateTime)fileInfo.LastModifiedDate;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;
                hsStream.Type = "DIR";
                hsStream.IsDir = true;
                hsStream.MemoryType = HsStreamType.MemoryStream;
                hsStream.stream = null;
            }
            else
            {
                hsStream.stream = await file.OpenReadAsync();
                Console.WriteLine("OpenReadAsync Read Files : " + fileInfo.Name + " Size : " + fileInfo.Size + " Relative Path : " + strRelativePath);
                Console.WriteLine("OpenReadAsync Read stream length : " + hsStream.stream.Length);
                //Console.WriteLine("MemoryStream Read : " + fileInfo.Name + " Size : " + fileInfo.Size);
                hsStream.FileName = strRelativePath;
                hsStream.FileName = hsStream.FileName.Replace("/", "\\");
                DateTime date = (DateTime)fileInfo.LastModifiedDate;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;
                if(!hsStream.FileName.Equals(""))
                {
                    if (hsStream.FileName.LastIndexOf(".") > -1)
                        hsStream.Type = hsStream.FileName.Substring(hsStream.FileName.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";
                }
                hsStream.IsDir = false;
                hsStream.MemoryType = HsStreamType.MemoryStream;
            }

            HsStreamList.Add(hsStream);
            nLoadCount++;

            per = (nLoadCount * 100) / nTotalCount;
            SGFileLoadEvent(groupID, per);

        }

        //탐색기 전달파일 종료 및 UI 내부 Drag 파일 핸들링(디렉토리인경우 디렉토리 분기 타야함,DirFileSearch함수 참고)

        foreach (FileListEntryImpl item in selectedFiles)
        {

            try
            {
                if (item.RelativePath == null)
                {
                    nLoadCount++;
                    per = (nLoadCount * 100) / nTotalCount;
                    SGFileLoadEvent(groupID, per);
                    continue;
                }
                hsStream = new HsStream();
                //if ((item.Type.Equals("DIR")) || (item.Type.Equals("DIR")))
                if(item.Type.Equals("DIR"))
                {
                    hsStream.FileName = item.RelativePath;
                    if (!item.StartPath.Equals(""))
                    {
                        int index = -1;
                        index = item.StartPath.LastIndexOf("\\");
                        if (index >= 0)
                        {
                            item.StartPath = item.StartPath.Substring(0, index);
                            string startPath = item.StartPath + "\\";
                            if (!hsStream.FileName.Equals(startPath))
                                hsStream.FileName = hsStream.FileName.Replace(startPath, "");
                        }
                    }
                    else
                        hsStream.FileName = item.Name;
                    DateTime date = (DateTime)item.LastModified;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.Type = "DIR";
                    hsStream.IsDir = true;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    hsStream.stream = null;
                }
                else
                {
                    // hsStream.Stream = new FileStream(item.RelativePath, FileMode.Open, FileAccess.Read);
                    // hsStream.stream = File.Open(item.RelativePath, FileMode.Open, FileAccess.Read);
                    string strFilePath = item.RelativePath.Replace("\\", "/");
                    hsStream.stream = File.OpenRead(strFilePath);
                    Console.WriteLine("FileStream Read : " + item.RelativePath + " Size : " + item.Size);
                    hsStream.FileName = item.RelativePath;
                    if (!item.StartPath.Equals(""))
                    {
                        int index = -1;
                        index = item.StartPath.LastIndexOf("\\");
                        if (index >= 0)
                        {
                            item.StartPath = item.StartPath.Substring(0, index);
                            string startPath = item.StartPath + "\\";
                            if (!hsStream.FileName.Equals(startPath))
                                hsStream.FileName = hsStream.FileName.Replace(startPath, "");
                        }
                    }
                    else
                        hsStream.FileName = item.Name;
                    DateTime date = (DateTime)item.LastModified;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.Type = item.Type;
                    hsStream.IsDir = false;
                    hsStream.MemoryType = HsStreamType.FileStream;
                }

                //hsStream.FileName = hsStream.FileName.Replace("\\", "/");
                HsStreamList.Add(hsStream);
                nLoadCount++;
                per = (nLoadCount * 100) / nTotalCount;
                SGFileLoadEvent(groupID, per);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.StackTrace);
                SGFileLoadEvent(groupID, -1);
                return;
            }
        }


        //await dropReference.ClearValue();
        //await dropReference.initFileReaderService(targets);
        //await dropReference.DelDragTargetElementAsync(targets);

        //HsStreamList.Clear();
        //selectedFiles.Clear();
        //StateHasChanged();

        // string strMsg = XmlConf.GetInfoMsg("I_0029");   // 파일 전송이 완료되었습니다.
        //  string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME");
        //  object[] param = { "success", strSystemName, strMsg };
        //  await jsRuntime.InvokeAsync<object>("fireToastMessage", param);

    } */

    public async Task ExtDropClear()
    {
        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        await dropReference.SetDragTargetElementAsync(targets);
        await dropReference.ClearValue();
        await dropReference.initFileReaderService(targets);
        await dropReference.DelDragTargetElementAsync(targets);
        bAsyncData = false;
    }
    public async Task DataClear()
    {
        foreach (HsStream hs in HsStreamList)
        {
            if ((hs != null) && (hs.stream != null))
                hs.stream.Dispose();
        }
        if (bAsyncData)
        {
            await ExtDropClear();
            /*
            dropReference = fileReaderService.CreateReference(inputTypeFileElement);
            string targets = new string("fileInput");
            await dropReference.SetDragTargetElementAsync(targets);
            await dropReference.ClearValue();
            await dropReference.initFileReaderService(targets);
            await dropReference.DelDragTargetElementAsync(targets);
            bAsyncData = false;
            */
        }
        HsStreamList.Clear();
        StateHasChanged();
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    //디렉토리 검색 함수
    void DirFileSearch(string path)
    {
        try
        {
            string[] dirs = Directory.GetDirectories(path);
            string[] files = Directory.GetFiles(path);
            foreach (string f in files)
            {
                //파일이면 파일을 복사하고(위코드참고)
                Debug.WriteLine(f);
            }
            if (dirs.Length > 0)
            {
                foreach (string dir in dirs)
                {
                    Debug.WriteLine(dir);
                    //디렉토리면 디렉토리 만들고 System.IO.Directory.CreateDirectory(path);
                    DirFileSearch(dir);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    [JSInvokable("NotifyChange")]
    public static void NotifyChange(FileListEntryImpl[] files)
    {
        action1.Invoke(files);
    }

    public async void OnDrop(List<string> recvlist)
    {

        HsStream hsStream = null;

        fileAddManage.DataClear();

        foreach (var item in HsStreamList)
        {
            for (int i = 0; i < recvlist.Count; i++)
            {
                string strItemFileName = Path.GetFileName(item.RelativePath);
                string strListFileName = Path.GetFileName(recvlist[i]);
                if (strItemFileName == strListFileName)
                {
                    recvlist.RemoveAt(i);
                }
            }
        }
        int nTotalCount = GetListTotalCount(recvlist);
        if (nTotalCount <= 0)
            return;

        if (GetRegCountEnable(nTotalCount) == false)
        {
            return;
        }

        List<string> list = new List<string>(recvlist);
        await refProgress.openPopUp();
        //System.Threading.Thread.Sleep(500);

        int per = 0;
        int nExamCount = 0;
        for (int i = 0; i < list.Count; i++)
        {
            string data = list[i];
            //Console.WriteLine($"File Dropped  {data}");
            if (data != null && data.Length > 0)
            {
                bool bFind = false;
                foreach (var item in HsStreamList)
                {
                    string strItemFileName = Path.GetFileName(item.RelativePath);
                    string strDataFileName = Path.GetFileName(data);
                    if (strItemFileName == strDataFileName)
                    //if (item.RelativePath == data)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                {
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);
                    continue;
                }



                System.IO.FileInfo fInfo = new System.IO.FileInfo(data);


                FileAttributes attr = fInfo.Attributes;

                if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                {
                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Type = fInfo.Attributes.ToString();
                    hsStream.StartPath = "";
                    hsStream.RelativePath = fInfo.Name;
                    hsStream.Size = fInfo.Length;
                    if (GetRegSizeEnable(hsStream.Size) == false)
                    {
                        SGFileExamEvent(100);
                        return;
                    }
                    if (GetDayRegSizeEnable(hsStream.Size) == false)
                    {
                        SGFileExamEvent(100);
                        return;
                    }
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");

                    if (fInfo.Name.LastIndexOf(".") > -1)
                        hsStream.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";

                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime SubDate = (DateTime)hsStream.ModifyTime;
                    string strSubDate = SubDate.ToShortDateString();
                    strSubDate = strSubDate.Replace("-", "");
                    string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", SubDate.Hour, SubDate.Minute, SubDate.Second);
                    hsStream.MTime = strSubDate + strSubTime;
                    hsStream.IsDir = false;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");

                    bool bHidden = false;
                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        bHidden = true;
                    if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden))
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        continue;
                    }
                    hsStream.stream = File.OpenRead(fInfo.FullName);
                    if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                    {
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        continue;
                    }
                    if (await GetExamCheckZip(fileAddManage, hsStream) != 0)
                    {
                        hsStream.stream = null;
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        continue;
                    }
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);
                    //System.Threading.Thread.Sleep(300);
                    /*
                    if (fInfo.Exists != true)
                        continue;
                    FileListEntryImpl fileEntry = new FileListEntryImpl();
                    fileEntry.Name = System.IO.Path.GetFileName(fInfo.Name);
                    fileEntry.Size = fInfo.Length;
                    fileEntry.RelativePath = fInfo.FullName;
                    fileEntry.StartPath = "";
                    if (fInfo.Name.LastIndexOf(".") > -1)
                        fileEntry.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
                    else
                        fileEntry.Type = "";
                    fileEntry.LastModified = fInfo.LastWriteTime;
                    //selectedFiles.Add(fileEntry);
                    */

                }
                else if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    DirectoryInfo di = new DirectoryInfo(fInfo.FullName);
                    if (di.Exists != true)
                        continue;

                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        continue;

                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Size = 0;
                    hsStream.Type = "DIR";
                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime date = (DateTime)hsStream.ModifyTime;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.RelativePath = fInfo.FullName;
                    hsStream.IsDir = true;
                    hsStream.StartPath = hsStream.RelativePath;
                    string strStartPath = hsStream.StartPath;
                    hsStream.stream = null;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    if (!hsStream.StartPath.Equals(""))
                    {
                        int index = -1;
                        index = hsStream.StartPath.LastIndexOf("\\");
                        if (index >= 0)
                        {
                            hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                            string startPath = hsStream.StartPath + "\\";
                            if (!hsStream.RelativePath.Equals(startPath))
                                hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                        }
                    }
                    else
                        hsStream.RelativePath = hsStream.RelativePath;

                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    nExamCount++;
                    //per = (nExamCount * 100) / nTotalCount;
                    //SGFileExamEvent(per);
                    //System.Threading.Thread.Sleep(300);

                    List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                    if (FileData == null)
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        continue;
                    }

                    //nTotalCount += FileData.Count;
                    foreach (var item in FileData)
                    {
                        hsStream = new HsStream();
                        hsStream.FileName = item.Name;
                        hsStream.Type = item.Attributes.ToString();
                        hsStream.StartPath = strStartPath;
                        hsStream.RelativePath = item.FullName;
                        if (!hsStream.StartPath.Equals(""))
                        {
                            int index = -1;
                            index = hsStream.StartPath.LastIndexOf("\\");
                            if (index >= 0)
                            {
                                hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                                string startPath = hsStream.StartPath + "\\";
                                if (!hsStream.RelativePath.Equals(startPath))
                                    hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                            }
                        }
                        else
                            hsStream.RelativePath = hsStream.RelativePath;

                        if ((hsStream.Type.Equals("Directory")) || (hsStream.Type.Equals("Hidden, Directory")))
                        {
                            hsStream.Size = 0;
                            hsStream.Type = "DIR";
                            hsStream.stream = null;
                            hsStream.MemoryType = HsStreamType.FileStream;
                            hsStream.IsDir = true;
                        }
                        else
                        {
                            hsStream.Size = item.Length;
                            if (GetRegSizeEnable(hsStream.Size) == false)
                            {
                                SGFileExamEvent(100);
                                return;
                            }
                            if (GetDayRegSizeEnable(hsStream.Size) == false)
                            {
                                SGFileExamEvent(100);
                                return;
                            }
                        }
                        if (hsStream.Type.Equals("Archive"))
                        {
                            if (item.Name.LastIndexOf(".") > -1)
                                hsStream.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                            else
                                hsStream.Type = "";

                            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                            //hsStream.stream = File.OpenRead(item.FullName);
                            hsStream.IsDir = false;

                        }

                        hsStream.ModifyTime = item.LastWriteTime;
                        DateTime SubDate = (DateTime)hsStream.ModifyTime;
                        string strSubDate = SubDate.ToShortDateString();
                        strSubDate = strSubDate.Replace("-", "");
                        string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                        hsStream.MTime = strSubDate + strSubTime;
                        hsStream.MemoryType = HsStreamType.FileStream;
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        if (hsStream.IsDir == false)
                        {
                            bool bHidden = false;
                            if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                                bHidden = true;
                            if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden))
                            {
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per);
                                continue;
                            }
                        }
                        if (!hsStream.Type.Equals("DIR"))
                        {
                            hsStream.stream = File.OpenRead(item.FullName);
                            if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                            {
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per);
                                continue;
                            }
                            if (await GetExamCheckZip(fileAddManage, hsStream) != 0)
                            {
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per);
                                continue;
                            }
                        }
                        //HsStreamList.Add(hsStream);
                        SetFileAdd(hsStream);

                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        //System.Threading.Thread.Sleep(300);

                        /*
                        FileAttributes attrSub = item.Attributes;
                        FileListEntryImpl fileSubEntry = new FileListEntryImpl();
                        fileSubEntry.Name = item.Name;
                        //fileSubEntry.Name = item.FullName;
                        fileSubEntry.Type = item.Attributes.ToString();
                        if ((fileSubEntry.Type.Equals("Directory")) || (fileSubEntry.Type.Equals("Hidden, Directory")))
                        {
                            fileSubEntry.Size = 0;
                            fileSubEntry.Type = "DIR";
                        }
                        else
                        {
                            fileSubEntry.Size = item.Length;
                        }
                        if (fileSubEntry.Type.Equals("Archive"))
                        {
                            if (item.Name.LastIndexOf(".") > -1)
                                fileSubEntry.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                            else
                                fileSubEntry.Type = "";
                        }
                        fileSubEntry.StartPath = fileEntry.StartPath;
                        fileSubEntry.RelativePath = item.FullName;
                        fileSubEntry.LastModified = item.LastWriteTime;
                        //selectedFiles.Add(fileSubEntry);
                        */
                    }

                    /*
                    DirectoryInfo di = new DirectoryInfo(fInfo.FullName);
                    if (di.Exists != true)
                        continue;

                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        continue;

                    FileListEntryImpl fileEntry = new FileListEntryImpl();
                    fileEntry.Name = fInfo.Name;
                    fileEntry.Size = 0;
                    fileEntry.RelativePath = fInfo.FullName;
                    fileEntry.StartPath = fileEntry.RelativePath;
                    fileEntry.Type = "DIR";
                    fileEntry.LastModified = fInfo.LastWriteTime;
                    //selectedFiles.Add(fileEntry);
                    List<System.IO.FileInfo> FileData = DirSearch(fileEntry.RelativePath);
                    if (FileData == null)
                        continue;
                    foreach (var item in FileData)
                    {
                        FileAttributes attrSub = item.Attributes;
                        FileListEntryImpl fileSubEntry = new FileListEntryImpl();
                        fileSubEntry.Name = item.Name;
                        //fileSubEntry.Name = item.FullName;
                        fileSubEntry.Type = item.Attributes.ToString();
                        if ((fileSubEntry.Type.Equals("Directory")) || (fileSubEntry.Type.Equals("Hidden, Directory")))
                        {
                            fileSubEntry.Size = 0;
                            fileSubEntry.Type = "DIR";
                        }
                        else
                        {
                            fileSubEntry.Size = item.Length;
                        }
                        if (fileSubEntry.Type.Equals("Archive"))
                        {
                            if (item.Name.LastIndexOf(".") > -1)
                                fileSubEntry.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                            else
                                fileSubEntry.Type = "";
                        }
                        fileSubEntry.StartPath = fileEntry.StartPath;
                        fileSubEntry.RelativePath = item.FullName;
                        fileSubEntry.LastModified = item.LastWriteTime;
                        //selectedFiles.Add(fileSubEntry);
                    }
                    */

                }
            }
        }
        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetRMouseFileAddEventAdd(groupID, RMouseFileAction);
        InitText();
        action1 = HandleFileInputChange;
        SGFileExamEvent = FileExamResult;
        PageStatusData pageSData = pageService.GetPageStatus(groupID);
        HsStreamList = pageSData.GetFileDragListData();
        fileAddManage = pageSData.GetFileAddManage();
    }
    private void onDrop()
    {
        //Console.WriteLine("OnDrop Event Occured");
    }

    private void HandleDrop()
    {
        //Console.WriteLine("HandleDrop Event Occured");
    }

    private void HandleClick()
    {
        // Console.WriteLine("Click Event Occured");
        //SGSubFileAddEvent.Invoke();
        //SubFileAddAsync();
    }

    private void HandleDragEnter()
    {
        //dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        //dropClass = "";
    }

    private async void HandleFileInputChange(IFileListEntry[] files)
    {
        CLog.Here().Information($"HandleFileInputChange");
        if (files == null || files.Length == 0)
        {
            StateHasChanged();
            return;
        }
        //dropClass = "";
        fileSizeError = false;
        fileTypeError = false;
        // Disable file type error-1
        //List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }
                // Disable file type error-2
                //if (!acceptedFileTypes.Contains(file.Type))
                //{
                //    error = true;
                //    fileTypeError = true;
                //}
                //중복제거
                bool bFind = false;
                foreach (var item in HsStreamList)
                {
                    if (item.FileName == file.Name)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                    continue;


                //keep the good files
                if (!error)
                {
                    /*
                    HsStream hsStream = new HsStream();
                    hsStream.FileName = file.Name;
                    hsStream.Size = file.Size;
                    hsStream.Type = file.Type;
                    hsStream.ModifyTime = file.LastModified;
                    DateTime date = (DateTime)hsStream.ModifyTime;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.RelativePath = file.RelativePath;
                    hsStream.MemoryType = HsStreamType.MemoryStream;
                    bAsyncData = true;
                    if (hsStream.Type.Equals(""))
                    {
                        hsStream.Type = "DIR";
                        hsStream.IsDir = true;
                    }
                    else
                    {
                        if (file.Name.LastIndexOf(".") > -1)
                            hsStream.Type = file.Name.Substring(file.Name.LastIndexOf("."));
                        else
                            hsStream.Type = "-";

                        //hsStream.stream = file.Data;
                        hsStream.stream = null;
                        hsStream.IsDir = false;
                    }
                    */


                    //HsStreamList.Add(hsStream);

                    /*
                    FileListEntryImpl fileEntry = new FileListEntryImpl();
                    fileEntry.Name = file.Name;
                    fileEntry.Size = file.Size;
                    fileEntry.Type = file.Type;
                    if (fileEntry.Type.Equals(""))
                        fileEntry.Type = "-";
                    fileEntry.RelativePath = file.RelativePath;
                    if (file.Name.LastIndexOf(".") > -1)
                        fileEntry.Type = file.Name.Substring(file.Name.LastIndexOf("."));
                    else
                        fileEntry.Type = "";
                    fileEntry.LastModified = file.LastModified;
                    //selectedFiles.Add(fileEntry);

                    bAsyncData = true;*/
                }
            }
        }
        StateHasChanged();
        await SubFileAddAsync();
    }

    public async Task SubFileAddAsync()
    {

        strRootPath.Clear();
        fileAddManage.DataClear();

        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        await dropReference.SetDragTargetElementAsync(targets);

        await dropReference.IsDragTargetElement(targets);
        System.Threading.Thread.Sleep(500);
        await dropReference.AppendDragTargetElement(targets);

        List<string> dirs = new List<string>();

        IEnumerable<IFileReference> temp = await dropReference.EnumerateFilesAsync();
        int nTotalCount = temp.Count();

        if (GetRegCountEnable(nTotalCount) == false)
        {
            //await ExtDropClear();
            return;
        }

        await refProgress.openPopUp();
        //System.Threading.Thread.Sleep(500);

        HsStream hsStream = null;
        int nExamCount = 0;
        int per = 0;
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            Debug.WriteLine("FileName:" + fileInfo.Path + fileInfo.Name);

            bool bFind = false;
            foreach (var item in HsStreamList)
            {
                if (item.FileName == fileInfo.Name)
                {
                    bFind = true;
                    break;
                }
            }
            if (bFind == true)
            {
                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per);
                continue;
            }

            bool bFindFile = false;
            foreach (var item in HsStreamList)
            {
                if ((item.FileName == fileInfo.Name) && (item.RelativePath == fileInfo.Name))
                {
                    bFindFile = true;
                    break;
                }
            }
            if (bFindFile == true)
            {
                nExamCount++;
                per = (nExamCount * 100) / nTotalCount;
                SGFileExamEvent(per);
                //System.Threading.Thread.Sleep(300);
                continue;
            }

            bAsyncData = true;

            hsStream = new HsStream();
            string strRelativePath = fileInfo.Path + fileInfo.Name;


            //하위폴더정보가 따로 넘어오지 않으므로 수동으로 생성
            if ((fileInfo.Dir != "Dir") && (fileInfo.Path != null) && (fileInfo.Path.Length > 0))
            {
                bool bFindPath = false;
                foreach (string path in dirs)
                {
                    if (path.Equals(fileInfo.Path))
                    {
                        bFindPath = true;
                        break;
                    }
                }
                // Root folder 가 한번 더 들어오는 현상 방지
                //if ( (bFind == false) && (!fileInfo.Path.Equals(strTempPath))  )          // Root folder 가 한번 더 들어오는 현상 방지
                if ((bFindPath == false) && (!GetRootPathFind(fileInfo.Path)))
                {
                    dirs.Add(fileInfo.Path);
                    string strFilePath = fileInfo.Path.Replace("/", "\\");
                    int index = -1;
                    index = strFilePath.LastIndexOf("\\");
                    if (index >= 0)
                    {
                        strFilePath = strFilePath.Substring(0, index);
                    }
                    DateTime date = (DateTime)fileInfo.LastModifiedDate;
                    SetHsStreamSubFolder(strFilePath, strRootPath, date);
                    //nExamCount++;
                    //per = (nExamCount * 100) / nTotalCount;
                    // SGFileExamEvent(per);
                }
            }


            if (fileInfo.Dir == "Dir")                  // 처음 들어오는 Root Dir
            {
                //Console.WriteLine("OpenReadAsync Read Directory : " + fileInfo.Name + " Size : " + fileInfo.Size + " Relative Path : " + strRelativePath);
                hsStream.FileName = strRelativePath;
                strRootPath.Add(strRelativePath);
                //strRootPath[rootCount++] = strRelativePath;
                hsStream.RelativePath = strRelativePath;
                DateTime date = (DateTime)fileInfo.LastModifiedDate;
                hsStream.ModifyTime = date;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;
                hsStream.Type = "DIR";
                hsStream.IsDir = true;
                hsStream.Size = 0;
                hsStream.MemoryType = HsStreamType.MemoryStream;
                hsStream.stream = null;
                hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
            }
            else
            {
                hsStream.Size = fileInfo.Size;
                if (GetRegSizeEnable(hsStream.Size) == false)
                {
                    SGFileExamEvent(100);
                    //await ExtDropClear();
                    return;
                }
                if (GetDayRegSizeEnable(hsStream.Size) == false)
                {
                    SGFileExamEvent(100);
                    return;
                }

                //Console.WriteLine("OpenReadAsync Read Files : " + fileInfo.Name + " Size : " + fileInfo.Size + " Relative Path : " + strRelativePath);
                //Console.WriteLine("MemoryStream Read : " + fileInfo.Name + " Size : " + fileInfo.Size);
                //hsStream.FileName = strRelativePath;
                //hsStream.FileName = hsStream.FileName.Replace("/", "\\");
                hsStream.FileName = Path.GetFileName(strRelativePath);
                // strRootPath = strRelativePath;
                hsStream.RelativePath = strRelativePath;
                hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                DateTime date = (DateTime)fileInfo.LastModifiedDate;
                hsStream.ModifyTime = date;
                string strDate = date.ToShortDateString();
                strDate = strDate.Replace("-", "");
                string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                hsStream.MTime = strDate + strTime;
                if (!hsStream.FileName.Equals(""))
                {
                    if (hsStream.FileName.LastIndexOf(".") > -1)
                        hsStream.Type = hsStream.FileName.Substring(hsStream.FileName.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";
                }
                hsStream.IsDir = false;
                hsStream.MemoryType = HsStreamType.MemoryStream;
                if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, false))
                {
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);
                    continue;
                }
                hsStream.stream = await file.OpenReadAsync();
                if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                {
                    hsStream.stream = null;
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);
                    continue;
                }
                if (await GetExamCheckZip(fileAddManage, hsStream) != 0)
                {
                    hsStream.stream = null;
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);
                    continue;
                }
            }

            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
            //HsStreamList.Add(hsStream);
            SetFileAdd(hsStream);
            nExamCount++;
            per = (nExamCount * 100) / nTotalCount;
            SGFileExamEvent(per);
            //System.Threading.Thread.Sleep(300);
        }
        StateHasChanged();
        //await ExtDropClear();
    }
    private void RemoveFile(IFileListEntry file)
    {
        FileListEntryImpl fileEntry = new FileListEntryImpl();
        fileEntry.Name = file.Name;
        fileEntry.Size = file.Size;
        fileEntry.RelativePath = file.RelativePath;
        fileEntry.Type = file.GetType().FullName;

        // selectedFiles.Remove(fileEntry);
    }

    public async Task RemoveAllFile()
    {
        await DataClear();
        //selectedFiles.Clear();
        //StateHasChanged();
    }

    //DropZone 클릭방지코드
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        base.OnAfterRender(firstRender);
        RMouseFileAddEvent RMouseFileAdd = null;
        RMouseFileAdd = HSCmdCenter.sgPageEvent.GetRMouseFileAddEvent(groupID);
        string strRMFilePath = PageStatusData.GetRMFIlePath();
        if ((RMFileExist(strRMFilePath) == true) && (RMouseFileAdd != null))
            RMouseFileAdd(groupID);
        return stopClick();
    }
    private async Task stopClick()
    {
        await jsRuntime.InvokeAsync<object>("stopClick");

        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("fileInput");
        await dropReference.SetDragTargetElementAsync(targets);
        await dropReference.RegisterDropEventsAsync(false);
    }

    public void InitText()
    {

        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                   // 파일명
        strFileSize = XmlConf.GetTitle("T_COMMON_SIZE");                       // 크기
        strFileType = XmlConf.GetTitle("T_COMMON_KIND");                       // 유형
        strLastModDay = XmlConf.GetTitle("T_COMMON_MODIFYDATE");               // 수정한 날짜.
        strRelativePath = XmlConf.GetTitle("T_FILE_PATH");                     // 경로
        strFileDragInfo = XmlConf.GetInfoMsg("I_0189");                        // 파일을 이곳으로 드래그 하세요.
    }

    public string getSizeStr(long Size)
    {
        string rtn = "";
        if (Size == 0)
        {
            rtn = "";
        }
        if (Size > 1024 * 1024 * 1024)
        {
            float nSize = (float)Size / (1024 * 1024 * 1024);
            rtn = nSize.ToString("####0.0") + "GB";
        }
        else if (Size > 1024 * 1024)
        {
            float nSize = (float)Size / (1024 * 1024);
            rtn = nSize.ToString("####0.0") + "MB";
        }
        else if (Size > 1024)
        {
            float nSize = (float)Size / (1024);
            rtn = nSize.ToString("####0.0") + "KB";
        }
        else if (Size > 0)
            rtn = Size + " Byte";
        return rtn;
    }


    public List<System.IO.FileInfo> DirSearch(string sDir, List<System.IO.FileInfo> temp = null)
    {
        bool bAccess = true;
        bAccess = IsAccessible(sDir);
        if (!bAccess)
        {
            string strErr = XmlConf.GetErrMsg("E_0214");        //해당 디렉토리 접근권한이 없습니다.
            ShowMessage("error", strErr);
            return null;
        }

        if (temp == null)
            temp = new List<System.IO.FileInfo>();
        DirectoryInfo di = new DirectoryInfo(sDir);


        foreach (var item in Directory.GetDirectories(sDir))
        {
            System.IO.FileInfo fInfo = new System.IO.FileInfo(item);
            temp.Add(fInfo);
            DirSearch(item, temp);
        }

        foreach (var item in di.GetFiles())
        {
            temp.Add(item);
        }
        return temp;
    }

    public bool IsAccessible(string RealPath)
    {
        //get directory info
        DirectoryInfo realpath = new DirectoryInfo(RealPath);
        try
        {
            //if GetDirectories works then is accessible
            realpath.GetDirectories();
            return true;
        }
        catch (Exception)
        {
            //if exception is not accesible
            return false;
        }
    }

    public void SetFileAdd(HsStream hs)
    {
        if (hs == null)
            return;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        pageService.SetFileAdd(groupID, hs);
    }

    public List<HsStream> GetHsStreamList()
    {
        return HsStreamList;
    }

    public void SetHsStreamSubFolder(string strPath, List<string> strRootPath, DateTime date)
    {
        HsStream hsStream = null;
        hsStream = new HsStream();
        hsStream.FileName = strPath;
        for (int i = 0; i < strRootPath.Count; i++)
        {
            string strTempStartPath = strRootPath[i] + "\\";
            if (hsStream.FileName.Contains(strTempStartPath))
                hsStream.FileName = hsStream.FileName.Replace(strTempStartPath, "");
        }
        /*
        int index = -1;
        index = strPath.LastIndexOf("\\");
        if (index >= 0)
        {
            hsStream.FileName = strPath.Substring(0, index);
        }
        */

        hsStream.Type = "DIR";
        hsStream.IsDir = true;
        hsStream.stream = null;
        hsStream.MemoryType = HsStreamType.MemoryStream;
        hsStream.RelativePath = strPath;
        hsStream.ModifyTime = date;
        hsStream.Size = 0;
        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
        //HsStreamList.Add(hsStream);
        SetFileAdd(hsStream);
        // Console.WriteLine("Read SubDirectory : " + hsStream.FileName);
    }

    public int GetFileListAddCount()
    {
        return HsStreamList.Count();
    }

    public bool GetRootPathFind(string strFilePath)
    {
        bool bFind = false;
        string strTempPath = "";
        strFilePath = strFilePath.Replace("/", "\\");
        for (int i = 0; i < strRootPath.Count; i++)
        {
            strTempPath = strRootPath[i] + "\\";
            if (strTempPath.Equals(strFilePath))
                bFind = true;
        }
        return bFind;
    }


    private async void FileExamResult(int per)
    {
        if (per < 0)
        {
            await refProgress.closePopUp();
            string strMsg = XmlConf.GetErrMsg("E_0212");                // 파일 로드 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        if (per >= 100)
        {
            //System.Threading.Thread.Sleep(500);
            await refProgress.closePopUp();
            int nErrCount = fileAddManage.GetAddErrCount();
            if (nErrCount > 0)
            {
                refTransferDenied.CopyData(fileAddManage.m_FileAddErrList);
                List<string> listReason = fileAddManage.GetMakeReason();
                refTransferDenied.CopyReason(listReason);
                await refTransferDenied.openPopUp();
            }
            return;
        }
        refProgress.SetProgressText(false);
        refProgress.ChangeProgress(per);
    }

    public int GetListTotalCount(List<string> list)
    {
        if ((list == null) || (list.Count <= 0))
            return 0;

        int count = list.Count;
        for (int i = 0; i < list.Count; i++)
        {
            string data = list[i];
            System.IO.FileInfo fInfo = new System.IO.FileInfo(data);
            FileAttributes attr = fInfo.Attributes;
            if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
            {
                List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                if (FileData == null)
                    continue;
                count += FileData.Count;
            }
        }

        return count;
    }


    public long GetRegListTotalSize()
    {
        long totalSize = 0;
        int nRegCount = GetFileListAddCount();
        if (nRegCount <= 0)
            return totalSize = 0;

        for (int i = 0; i < nRegCount; i++)
        {
            totalSize += HsStreamList[i].Size;
        }

        return totalSize;
    }

    public int GetRegListTotalCount()
    {
        return GetFileListAddCount();
    }

    public bool GetRegCountEnable(int nRegCount)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        int nEnableCount = sgLoginData.GetFileLimitCount();
        nRegCount = nRegCount + GetRegListTotalCount();

        if (FileAddManage.GetRegCountEnable(nEnableCount, nRegCount) != true)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0019");                 // 최대 {0}개 파일을 등록할 수 있습니다.
            strMsg = String.Format(strMsg, nEnableCount);
            ShowMessage("warn", strMsg);
            return false;
        }
        return true;
    }

    public bool GetRegSizeEnable(long nRegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        long nEnableSize = sgLoginData.GetFileLimitSize();
        long nConvEnableSize = nEnableSize * (1024 * 1024);                                           // byte 변환

        nRegSize = nRegSize + GetRegListTotalSize();

        if (FileAddManage.GetRegSizeEnable(nConvEnableSize, nRegSize) != true)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0027");                 // 파일은 {0} MB까지 전송할 수 있습니다.
            strMsg = String.Format(strMsg, nEnableSize);
            ShowMessage("warn", strMsg);
            StateHasChanged();
            return false;
        }
        return true;
    }

    public bool GetRegExamEnable(FileAddManage fileAddErr, HsStream hsStream, string strExt, bool bHidden)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        bool bWhite = sgLoginData.GetFileFilterType();
        string strFileExtInfo = sgLoginData.GetFileFilter();

        if (fileAddErr.GetExamFileAddEnable(hsStream, bWhite, strFileExtInfo, bHidden) != true)
            return false;

        return true;
    }

    public async Task<int> GetExamExtChange(FileAddManage fileAddErr, HsStream hsStream)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return -1;

        string strFileExtInfo = sgLoginData.GetFileFilter();
        if ((strFileExtInfo.Equals("") == true) || (strFileExtInfo.Equals(";") == true))
        {
            return 0;
        }

        if (await fileAddErr.GetExamFileExtChange(hsStream) != 0)
            return -1;
        return 0;
    }

    public async Task<int> GetExamCheckZip(FileAddManage fileAddErr, HsStream hsStream)
    {
        if (hsStream == null)
            return 0;

        string strExtType = hsStream.Type;
        strExtType = strExtType.ToUpper();
        if ((strExtType.Equals("ZIP")) || (strExtType.Equals("7Z")))
        {

            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
                groupID = sgSideBar.GroupId;

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData == null)
                return -1;

            bool bWhite = sgLoginData.GetFileFilterType();                              // true : White , false : black
            string strFileExtInfo = sgLoginData.GetFileFilter();
            bool bSys = sgLoginData.GetSystemPosition();
            string strZipDepthInfo = sgLoginData.GetZipDepthInfo(bSys);
            char sep = (char)'/';
            string[] strTemp = strZipDepthInfo.Split(sep);
            int MaxDepth = 0;
            int Option = 0;
            if (!strTemp[0].Equals(""))
            {
                MaxDepth = Convert.ToInt32(strTemp[0]);
            }
            if (!strTemp[1].Equals(""))
            {
                Option = Convert.ToInt32(strTemp[1]);
            }

            if (await fileAddErr.CheckZipFile(hsStream, bWhite, strFileExtInfo, MaxDepth, Option) != 0)
                return -1;

            if (await fileAddErr.GetExamFileExtChange(hsStream) != 0)                   // zip 파일 내부 검사 
                return -1;
        }
        return 0;
    }

    public async void RMouseFileAddAction(List<string> recvList)
    {
        //OnDrop(recvList);
        HsStream hsStream = null;

        fileAddManage.DataClear();

        foreach (var item in HsStreamList)
        {
            for (int i = 0; i < recvList.Count; i++)
            {
                string strItemFileName = Path.GetFileName(item.RelativePath);
                string strListFileName = Path.GetFileName(recvList[i]);
                if (strItemFileName == strListFileName)
                {
                    recvList.RemoveAt(i);
                }
            }
        }
        int nTotalCount = GetListTotalCount(recvList);
        if (nTotalCount <= 0)
            return;

        if (GetRegCountEnable(nTotalCount) == false)
        {
            return;
        }

        List<string> list = new List<string>(recvList);
        await refProgress.openPopUp();
        //System.Threading.Thread.Sleep(500);

        int per = 0;
        int nExamCount = 0;
        for (int i = 0; i < list.Count; i++)
        {
            string data = list[i];
            //Console.WriteLine($"File Dropped  {data}");
            if (data != null && data.Length > 0)
            {
                bool bFind = false;
                foreach (var item in HsStreamList)
                {
                    string strItemFileName = Path.GetFileName(item.RelativePath);
                    string strDataFileName = Path.GetFileName(data);
                    if (strItemFileName == strDataFileName)
                    //if (item.RelativePath == data)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                {
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);
                    continue;
                }



                System.IO.FileInfo fInfo = new System.IO.FileInfo(data);


                FileAttributes attr = fInfo.Attributes;

                if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                {
                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Type = fInfo.Attributes.ToString();
                    hsStream.StartPath = "";
                    hsStream.RelativePath = fInfo.Name;
                    hsStream.Size = fInfo.Length;
                    if (GetRegSizeEnable(hsStream.Size) == false)
                    {
                        SGFileExamEvent(100);
                        return;
                    }
                    if (GetDayRegSizeEnable(hsStream.Size) == false)
                    {
                        SGFileExamEvent(100);
                        return;
                    }
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");

                    if (fInfo.Name.LastIndexOf(".") > -1)
                        hsStream.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
                    else
                        hsStream.Type = "";

                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime SubDate = (DateTime)hsStream.ModifyTime;
                    string strSubDate = SubDate.ToShortDateString();
                    strSubDate = strSubDate.Replace("-", "");
                    string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", SubDate.Hour, SubDate.Minute, SubDate.Second);
                    hsStream.MTime = strSubDate + strSubTime;
                    hsStream.IsDir = false;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");

                    bool bHidden = false;
                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        bHidden = true;
                    if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden))
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        continue;
                    }
                    hsStream.stream = File.OpenRead(fInfo.FullName);
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    nExamCount++;
                    per = (nExamCount * 100) / nTotalCount;
                    SGFileExamEvent(per);

                }
                else if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    DirectoryInfo di = new DirectoryInfo(fInfo.FullName);
                    if (di.Exists != true)
                        continue;

                    if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                        continue;

                    hsStream = new HsStream();
                    hsStream.FileName = fInfo.Name;
                    hsStream.Size = 0;
                    hsStream.Type = "DIR";
                    hsStream.ModifyTime = fInfo.LastWriteTime;
                    DateTime date = (DateTime)hsStream.ModifyTime;
                    string strDate = date.ToShortDateString();
                    strDate = strDate.Replace("-", "");
                    string strTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                    hsStream.MTime = strDate + strTime;
                    hsStream.RelativePath = fInfo.FullName;
                    hsStream.IsDir = true;
                    hsStream.StartPath = hsStream.RelativePath;
                    string strStartPath = hsStream.StartPath;
                    hsStream.stream = null;
                    hsStream.MemoryType = HsStreamType.FileStream;
                    if (!hsStream.StartPath.Equals(""))
                    {
                        int index = -1;
                        index = hsStream.StartPath.LastIndexOf("\\");
                        if (index >= 0)
                        {
                            hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                            string startPath = hsStream.StartPath + "\\";
                            if (!hsStream.RelativePath.Equals(startPath))
                                hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                        }
                    }
                    else
                        hsStream.RelativePath = hsStream.RelativePath;

                    hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                    //HsStreamList.Add(hsStream);
                    SetFileAdd(hsStream);
                    nExamCount++;

                    List<System.IO.FileInfo> FileData = DirSearch(fInfo.FullName);
                    if (FileData == null)
                    {
                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                        continue;
                    }

                    //nTotalCount += FileData.Count;
                    foreach (var item in FileData)
                    {
                        hsStream = new HsStream();
                        hsStream.FileName = item.Name;
                        hsStream.Type = item.Attributes.ToString();
                        hsStream.StartPath = strStartPath;
                        hsStream.RelativePath = item.FullName;
                        if (!hsStream.StartPath.Equals(""))
                        {
                            int index = -1;
                            index = hsStream.StartPath.LastIndexOf("\\");
                            if (index >= 0)
                            {
                                hsStream.StartPath = hsStream.StartPath.Substring(0, index);
                                string startPath = hsStream.StartPath + "\\";
                                if (!hsStream.RelativePath.Equals(startPath))
                                    hsStream.RelativePath = hsStream.RelativePath.Replace(startPath, "");
                            }
                        }
                        else
                            hsStream.RelativePath = hsStream.RelativePath;

                        if ((hsStream.Type.Equals("Directory")) || (hsStream.Type.Equals("Hidden, Directory")))
                        {
                            hsStream.Size = 0;
                            hsStream.Type = "DIR";
                            hsStream.stream = null;
                            hsStream.MemoryType = HsStreamType.FileStream;
                            hsStream.IsDir = true;
                        }
                        else
                        {
                            hsStream.Size = item.Length;
                            if (GetRegSizeEnable(hsStream.Size) == false)
                            {
                                SGFileExamEvent(100);
                                return;
                            }
                            if (GetDayRegSizeEnable(hsStream.Size) == false)
                            {
                                SGFileExamEvent(100);
                                return;
                            }
                        }
                        if (hsStream.Type.Equals("Archive"))
                        {
                            if (item.Name.LastIndexOf(".") > -1)
                                hsStream.Type = item.Name.Substring(item.Name.LastIndexOf(".") + 1);
                            else
                                hsStream.Type = "";

                            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                            //hsStream.stream = File.OpenRead(item.FullName);
                            hsStream.IsDir = false;

                        }

                        hsStream.ModifyTime = item.LastWriteTime;
                        DateTime SubDate = (DateTime)hsStream.ModifyTime;
                        string strSubDate = SubDate.ToShortDateString();
                        strSubDate = strSubDate.Replace("-", "");
                        string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", date.Hour, date.Minute, date.Second);
                        hsStream.MTime = strSubDate + strSubTime;
                        hsStream.MemoryType = HsStreamType.FileStream;
                        hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
                        if (hsStream.IsDir == false)
                        {
                            bool bHidden = false;
                            if ((attr & FileAttributes.Hidden) == FileAttributes.Hidden)
                                bHidden = true;
                            if (!GetRegExamEnable(fileAddManage, hsStream, hsStream.Type, bHidden))
                            {
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per);
                                continue;
                            }
                        }
                        if (!hsStream.Type.Equals("DIR"))
                        {
                            hsStream.stream = File.OpenRead(item.FullName);
                            if (await GetExamExtChange(fileAddManage, hsStream) != 0)
                            {
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per);
                                continue;
                            }
                            if (await GetExamCheckZip(fileAddManage, hsStream) != 0)
                            {
                                hsStream.stream = null;
                                nExamCount++;
                                per = (nExamCount * 100) / nTotalCount;
                                SGFileExamEvent(per);
                                continue;
                            }
                        }
                        //HsStreamList.Add(hsStream);
                        SetFileAdd(hsStream);

                        nExamCount++;
                        per = (nExamCount * 100) / nTotalCount;
                        SGFileExamEvent(per);
                    }
                }
            }
        }

        // HsStreamList = GetHsStreamList();
        //StateHasChanged();
        NotifyChange(null);
        //StateHasChanged();
    }


    public bool RMFileExist(string strRMFilePath)
    {
        FileAddManage fileAddmanage = new FileAddManage();
        return fileAddmanage.RMFileExist(strRMFilePath);
    }
    public void RMouseFileAction(int groupID)
    {
        FileAddManage fileAddmanage = new FileAddManage();

        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
        if (!fileAddmanage.RMFileExist(strRMouseFilePath))
            return;

        List<string> ListFile = fileAddmanage.LoadRMFileAdd(strRMouseFilePath);
        RMouseFileAddAction(ListFile);
    }

    public bool GetDayRegSizeEnable(long nRegSize)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        nRegSize = nRegSize + GetRegListTotalSize();

        if (pageService.GetDayFileTransSizeEnable(groupID, nRegSize) != true)
        {
            DayFileChangeNotiEvent dayFileChange = null;
            dayFileChange = HSCmdCenter.sgPageEvent.GetDayFileChangeNotiEvent(groupID);
            if (dayFileChange == null)
                return false;

            dayFileChange(groupID);

            string strMsg = XmlConf.GetErrMsg("E_0105");    // 일일 전송 최대 사이즈는 {0}MB입니다./r/n일일 전송 사이즈를 초과하였습니다.
            Int64 FileMaxSize = pageService.GetDayFileMaxSize(groupID);
            strMsg = String.Format(strMsg, FileMaxSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);

            return false;
        }
        return true;
    }

}
