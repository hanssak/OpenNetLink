@using System.Collections.Generic
@using System
@using System.IO
@using System.Threading.Tasks
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData

<div style="width:100%;height:50%;padding:1px 1px 1px 0px;overflow:hidden;">
    @if (sgFile != null && sgFile.Count > 0)
    {
        @if (dragLabel > 0) { dragLabel = 1; }
        <ol data-draggable="target" style="height:100%;">

            @foreach (SGFileInfo item in sgFile)
            {
                @if (item.Type == 3)
                {
                    <Draggable Data="@item.Path" Zone="@item.Name" DragLabel="@dragLabel" Type="@item.Name" Path="@item.Path" DirType="@item.Type" UpdateList="LoadListFiles">
                        @((MarkupString)("<i class='fas fa-folder' style='color:#f0cb00;'></i>"))   @item.getNameStr(false)
                    </Draggable>
                }
                else
                {
                    <Draggable Data="@item.Path" Zone="@item.Name" DragLabel="@dragLabel" Type="@item.Name" Path="@item.Path" DirType="@item.Type" UpdateList="LoadListFiles">
                        @((MarkupString)(item.Type==1 ? "<i class='fas fa-file' style='color:#8a8a8a;'></i>" : "<i class='fas fa-folder' style='color:#f0cb00;'></i>"))   @item.getNameStr(false) @item.getSizeStr()
                    </Draggable>
                }
                @if (dragLabel > 0) { dragLabel++; }
            }
        </ol>
    }
</div>

@code {
    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    public int dragLabel = 1;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<FileTreeList>();

    public void ClearListFiles()
    {
        sgFile.Clear();
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();

        try
        {
            if (Directory.GetParent(stPath) != null)
            {
                string strUpperPath = Directory.GetParent(stPath).FullName;
                if (strUpperPath != null && strUpperPath.Length > 0)
                {
                    SGFileInfo fileEntry = new SGFileInfo();
                    fileEntry.Name = "..";
                    fileEntry.Size = 0;
                    fileEntry.Path = strUpperPath;
                    fileEntry.Ext = "";
                    fileEntry.Type = 3;         //상위디렉토리 버튼
                    sgFile.Add(fileEntry);
                }
            }
        }
        catch (Exception ex0)
        {
            CLog.Here().Error("GetParentError:" + ex0.Message);
        }

        IEnumerable<string> fList = null;
        try
        {
            //EnumerationOptions opt = new EnumerationOptions { IgnoreInaccessible = true };

            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error("Exception:" + ex3.Message);
        }

        foreach (SGFileInfo item in sgFile)
        {
            CLog.Here().Information("item.Path:" + item.Path);
            CLog.Here().Information("item.Name:" + item.Name);
            CLog.Here().Information("dragLabel:" + dragLabel);
            CLog.Here().Information("item.Type:" + item.Type);
            CLog.Here().Information("item.getNameStr:" + item.getNameStr(false));
            CLog.Here().Information("item.getSizeStr:" + item.getSizeStr());
        }
        StateHasChanged();
    }
}
