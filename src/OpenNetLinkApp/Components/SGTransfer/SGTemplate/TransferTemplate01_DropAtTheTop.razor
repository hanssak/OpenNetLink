@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGTransfer
@using OpenNetLinkApp.Pages.Transfer
@using HsNetWorkSG
@using HsNetWorkSGData
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@using AgLogManager
@using OpenNetLinkApp.Pages.PCURL
@using BlazorInputFile
@using OpenNetLinkApp.Common
@using OfficeExtractor
@using Data.SGDicData.SGAlz;
@using OpenNetLinkApp.Components.SGTransfer.SGTemplate;


@inject XmlConfService XmlConf
@inject DragAndDropService DragAndDropService
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject WebWindow Window
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService
@inject IFileReaderService fileReaderService
@inject ISGAppUpdaterService AppUpdaterSvc;

<div class="row">
    <div class="col-md-3 pr-0">
        <div class="card card-navy card-outline card-boder" style="height:60vh;">

            <FileTree @ref="refFileTree" OnSelectPathFromFileTree="changeSelectPath"></FileTree>
            <!-- 파일리스트 -->
            <div id="divFileList" style="width:100%;height:50%;padding:1px 1px 1px 0px;overflow:auto">
            </div>
            <!-- 파일리스트 -->
        </div>
    </div>


    <div class="col-md-9">
        <div id="divRightContent" class="card card-navy card-outline card-boder1" style="background-color: #e9eef7;height:60vh;">

            <form class="form-horizontal">

                <div id="divRightUpperSide" class="card-body">
                    <div class="col-md-12">
                        <div class="form-group row mb-1" style="border:1px solid #c7d6e9;">
                            <label for="1" class="col-sm-1 col-form-label text-center" style="background-color:#eff8ff;">@XmlConf.GetTitle("T_TRANS_TITLE")</label>
                            <div class="col-sm-11 pr-0 pl-0">
                                <input type="text" class="form-control p-2 border-0" style="border-radius:0px;" id="1" placeholder="@strCurTitle" value="@strInitTitle" @onchange="@(e=>TitleValueChanged.InvokeAsync(e.Value.ToString()))" autocomplete="off">
                                <input type="text" hidden="hidden" />
                            </div>
                        </div>

                        <div class="form-group row mb-3" style="border:1px solid #c7d6e9;">
                            <label for="2" class="col-sm-1 col-form-label text-center " style="background-color:#eff8ff;">@XmlConf.GetTitle("T_DETAIL_DESC")</label>
                            <div class="col-sm-11 pr-0 pl-0">
                                <textarea class="form-control p-2 border-0 " rows="2" placeholder="@strCurDesc" value="@strInitDesc" @onchange="@(e=>DescValueChanged.InvokeAsync(e.Value.ToString()))"></textarea>
                            </div>
                        </div>
                    </div>


                    <div class="form-group  clearfix mb-2">
                        <div class="float-left pt-1">
                            <div class="form-check">
                                <table>
                                    <tr>
                                        <td>
                                            <input type="checkbox" class="form-check-input" id="exampleCheck2" checked="@bAfterCheck" @onclick="(OnChangeAfterCheck.InvokeAsync)" hidden="@bAfterApprChkHIde" disabled="@bAfterApprDisable">
                                        </td>
                                        <td>
                                            <label class="form-check-label" for="exampleCheck2" hidden="@bAfterApprChkHIde"><b>@strAfterApprove</b></label>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            @if (SGAppMgrSvc.OpConfigInfoService.GetUseFileSelectDelete(groupIDbyParam))
                            {
                                <div>
                                    <label><font color="red">@strSelectFileDelComment</font></label>
                                </div>
                            }
                        </div>
                        <div class="float-right">
                            <div class="float-right">
                                <table>
                                    <tr>
                                        @if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                                        {
                                            <th>@XmlConf.GetTitle("T_RECV_NETWORK")</th>
                                            <td class="pr-2">
                                                <button type="button" @onclick="@(OnBasicSelectOpenPopup.InvokeAsync)" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDestNetWork<i class="fas fa-angle-down pl-2"></i></button>
                                            </td>
                                        }
                                        <td>
                                            <button type="button" class="btn btn-md btn-green" @onclick="@(OnCheckApprLine.InvokeAsync)"><i class="fas fa-share"></i>@strFileSend</button>
                                            <button type="button" class="btn btn-md btn-blue" @onclick="@(OnOpenFileDialogOpenPopup.InvokeAsync)"><i class="fas fa-file-upload"></i>@strFileReg</button>
                                            <button type="button" class="btn btn-md btn-black" @onclick="@(e => RemoveAllFile())"><i class="fas fa-times"></i>@strFileDel</button>
                                            <button type="button" class="btn btn-md btn-red" @onclick="@(e => RemoveSelectFile())" hidden="@bFileSelectDeleteBtn"><i class="fas fa-times"></i>@strSelectFileDel</button>

                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>

                </div>

                <div id="divDropFile" class="card-body p-0" style="height:100%;">
                    <DropFileList @ref="refDropFileList"></DropFileList>
                </div>

            </form>
        </div>
    </div>

</div>


@code
{
    [Parameter] public int groupIDbyParam { get; set; }

    [Parameter] public string strInitTitle { get; set; }
    [Parameter] public string strInitDesc { get; set; }    

    [Parameter] public EventCallback<string> TitleValueChanged { get; set; }    
    [Parameter] public EventCallback<string> DescValueChanged { get; set; }

    [Parameter] public bool bAfterCheck { get; set; } = false;

    [Parameter] public string strDestNetWork { get; set; }
    // 3망 - 클립보드 전송 UI
    [Parameter] public Dictionary<string, SGNetOverData> dicDestSysPos { get; set; }

    /// <summary>
    /// 사후결재 CheckBox Hide 유무(By:서버정책, true : 숨김, false : 보여줌)
    /// </summary>
    [Parameter] public bool bAfterApprChkHIde { get; set; } = true;

    /// <summary>
    /// 사후결재 checkBox Disable 설정유무(By:서버정책, true : 사용못함, false : 사용함)
    /// </summary>
    [Parameter] public bool bAfterApprDisable { get; set; }
    
    [Parameter] public EventCallback OnChangeAfterCheck { get; set; }
    [Parameter] public EventCallback OnBasicSelectOpenPopup { get; set; }
    [Parameter] public EventCallback OnOpenFileDialogOpenPopup { get; set; }
    [Parameter] public EventCallback OnCheckApprLine { get; set; }
    
    public string stSelectPath { get; set; }

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<TransferTemplate01_DropAtTheTop>();

    private string strCurrentTitleValue;
    private string strCurrentDescValue;

    public string strAfterApprove = "";
    public string strCurTitle = "";
    public string strCurDesc = "";

    public string strFromName = "-";
    public string strToName = "-";
    public string strSelectFileDel = "";
    public string strSelectFileDelComment = "";

    public string strFileSend = "";
    public string strFileDel = "";
    public string strFileReg = "";

    /// <summary>
    /// 선택 삭제 버튼 사용 유무
    /// </summary>
    public bool bFileSelectDeleteBtn = false;
    FileTree refFileTree;

    private static Action<List<string>> ActionFileSelectOK;
    //private static Action<string> actionLoadFileList;

    //[JSInvokable("JSLoadListFiles")]    //좌측 하위 리스트에서, 폴더 더블클릭 시 호출
    //public static void JSLoadListFiles(string path)
    //{
    //    actionLoadFileList.Invoke(path);
    //}


    //Drag&Drop 관련 액션
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction1;
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction2;

    ISGVersionConfigService versionConfigSvc;
    ISGSideBarUIService SideBarUISvc;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService OpConfigSvc;
    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    DropFileList refDropFileList;

    public DropFileList GetDropFileList() => refDropFileList;



    private void changeSelectPath(string args)
    {
        stSelectPath = args;
        LoadListFiles(stSelectPath);
        //StateHasChanged();
    }

    public void GetAfterChk()
    {
        bAfterCheck = (!bAfterCheck);

        int groupID = groupIDbyParam;
        if (groupID > -1)
            pageService.SetAfterApproveCheck(groupID, bAfterCheck);

        StateHasChanged();
    }


    private async Task RemoveAllFile()
    {
        await refDropFileList.RemoveAllFile();
    }
    private async Task RemoveSelectFile()
    {
        await refDropFileList.RemoveSelectFile();
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        versionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
        OnSettingByGroupID(groupIDbyParam);
        InitText();
        base.OnInitialized();
    }

    int nDrawPageGroupID = -1;          // 전달받은 groupID 별로 화면구성 - 다중접속화면구성
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            base.OnAfterRenderAsync(firstRender);
        }
        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            refFileTree?.RefreshTree();
            nDrawPageGroupID = groupIDbyParam;
        }
    }

    public void InitText()
    {
        strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");                  // 사후결재
        strFileSend = XmlConf.GetTitle("T_FILE_SENDFILE");                              // 파일 보내기
        strFileDel = XmlConf.GetTitle("T_FILE_FILEDEL");                                // 파일 삭제
        strSelectFileDel = XmlConf.GetTitle("T_FILE_SELECT_DELETE");                    // 선택 삭제
        strSelectFileDelComment = XmlConf.GetTitle("T_FILE_SELECT_DELETE_COMMENT");     // ※체크박스 선택 후 선택삭제를 클릭해 주세요.
        strFileReg = XmlConf.GetTitle("T_FILE_FILEREG");                                // 파일등록

        strCurTitle = XmlConf.GetTitle("T_FILE_EMPTYTITLE");                                // 제목을 입력하십시오. (최대 60자)
        strCurDesc = XmlConf.GetTitle("T_FILE_EMPTYDESC");                                // 설명을 입력하십시오. (최대 80자)
    }

    protected void OnSettingByGroupID(int groupID)
    {
        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);
        bFileSelectDeleteBtn = !OpConfigSvc.GetUseFileSelectDelete(groupID);
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();
        try
        {
            if (Directory.GetParent(stPath) != null)
            {
                string strUpperPath = Directory.GetParent(stPath).FullName;
                if (strUpperPath != null && strUpperPath.Length > 0)
                {
                    SGFileInfo fileEntry = new SGFileInfo();
                    fileEntry.Name = "..";
                    fileEntry.Size = 0;
                    fileEntry.Path = strUpperPath;
                    fileEntry.Ext = "";
                    fileEntry.Type = 3;         //상위디렉토리 버튼
                    sgFile.Add(fileEntry);
                }
            }
        }
        catch (Exception ex0)
        {
            CLog.Here().Error("LoadListFiles, GetParentError:" + ex0.Message);
        }

        IEnumerable<string> fList = null;
        try
        {
            //EnumerationOptions opt = new EnumerationOptions { IgnoreInaccessible = true };

            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("LoadListFiles, UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("LoadListFiles, Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error("LoadListFiles, Exception:" + ex3.Message);
        }

        string listHtml = makeSubFileList();
        object[] param = { "divFileList", listHtml };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
        StateHasChanged();
    }

    public int dragLabel = 1;
    private string makeSubFileList()
    {
        StringBuilder stRtn = new StringBuilder();
        if (sgFile != null && sgFile.Count > 0)
        {
            if (dragLabel > 0) { dragLabel = 1; }
            foreach (SGFileInfo item in sgFile)
            {
                if (item.Type == 3)
                {
                    stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "' onclick='refreshList(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                    stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    stRtn.Append(item.getNameStr(false));
                    stRtn.Append(@"</div>");
                }
                else
                {
                    if (item.Type == 1)
                    {
                        stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "'>");
                        stRtn.Append(@"<i class='fas fa-file' style='color:#8a8a8a;'></i>&nbsp;");
                    }
                    else
                    {
                        stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "' ondblclick='refreshList(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    }
                    stRtn.Append(item.getNameStr(false) + " " + item.getSizeStr());
                    stRtn.Append(@"</div>");
                }
                if (dragLabel > 0) { dragLabel++; }
            }
        }
        return stRtn.ToString();
    }

}