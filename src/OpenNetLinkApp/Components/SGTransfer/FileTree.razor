@using System.Collections.Generic
@using System
@using System.IO
@using System.Threading.Tasks
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics
@using AgLogManager

<div style="width:100%;height:50%;border-bottom:1px solid #ddd; padding:0px;overflow:auto">
    <div @onclick="toUpperTree">
        <i class="fas fa-folder align-items-center" style="padding-left:17px;cursor:pointer;"></i>
        <span style="cursor:pointer;width:100px;">&nbsp;..</span>
    </div>
    <div>
        <RadzenTree Change="@OnSelectPath" Data="@entries" Expand="@LoadFiles" Style="width: 100%;height:100%;overflow:auto;">
            <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate" />
        </RadzenTree>
    </div>
</div>
<div style="width:100%;height:50%;padding:1px 1px 1px 0px;overflow:hidden;">

    @if (sgFile != null && sgFile.Count > 0)
    {
        @if (dragLabel > 0)
        { dragLabel = 1; }
        <ol data-draggable="target" style="height:100%;">
            @foreach (SGFileInfo item in sgFile)
            {
                <li>
                    @item.Name
                </li>
                @if (dragLabel > 0)
                { dragLabel++; }
            }
        </ol>
    }
</div>



@code {
    public int dragLabel = 1;
    public string[] dirs { get; set; }
    IEnumerable<string> entries = null;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    public string curDir { get; set; }

    public bool IsVisible { get; set; }
    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    private string stTreeDir = String.Empty;

    [Parameter]
    public EventCallback<TreeEventArgs> OnSelectPathFromFileTree { get; set; }
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<FileTree>();

    private void toUpperTree()
    {
        Debug.WriteLine(stTreeDir);
        if (Directory.GetParent(stTreeDir) != null)
        {
            stTreeDir = Directory.GetParent(stTreeDir).FullName;
            entries = Directory.GetDirectories(stTreeDir);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        IsVisible = true;
        //string[] drives = Directory.GetLogicalDrives();
        string[] drives = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
        if (drives != null && drives.Length > 0)
        {
            //entries = Directory.GetLogicalDrives();
            //EnumerationOptions opt = new EnumerationOptions { IgnoreInaccessible = true };
            //entries = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));

            entries = Directory.EnumerateFileSystemEntries(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile))
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);

            stTreeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

            LoadListFiles(stTreeDir);
        }
    }
    void Log(string eventName, string value)
    {
        events.Add(DateTime.Now, $"{eventName}: {value}");
    }

    void OnSelectPath(TreeEventArgs args)
    {
        dragLabel = 1;
        Log("Change", $"Item Text: {args.Text}");
        curDir = args.Text;

        LoadListFiles(args.Value as string);

        OnSelectPathFromFileTree.InvokeAsync(args); //부모컴포넌트에 이벤트 전달
    }

    public void LoadListFiles(string stPath)
    {
        CLog.Here().Information("PATH:" + stPath);
        if (sgFile != null && sgFile.Count > 0)
            sgFile.Clear();

        try
        {
            if (Directory.GetParent(stPath) != null)
            {
                string strUpperPath = Directory.GetParent(stPath).FullName;
                if (strUpperPath != null && strUpperPath.Length > 0)
                {
                    SGFileInfo fileEntry = new SGFileInfo();
                    fileEntry.Name = "..";
                    fileEntry.Size = 0;
                    fileEntry.Path = strUpperPath;
                    fileEntry.Ext = "";
                    fileEntry.Type = 3;         //상위디렉토리 버튼
                    sgFile.Add(fileEntry);
                }
            }
        }
        catch (Exception ex0)
        {
            CLog.Here().Error("GetParentError:" + ex0.Message);
        }

        IEnumerable<string> fList = null;
        try
        {
            //EnumerationOptions opt = new EnumerationOptions { IgnoreInaccessible = true };

            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error("Exception:" + ex3.Message);
        }

        foreach (SGFileInfo item in sgFile)
        {
            
            CLog.Information("item.Path:" + item.Path);
            CLog.Information("item.Name:" + item.Name);
            CLog.Information("dragLabel:" + dragLabel);
            CLog.Information("item.Type:" + item.Type);
            CLog.Information("item.getNameStr:" + item.getNameStr());
            CLog.Information("item.getSizeStr:" + item.getSizeStr());
        }
    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        try
        {
            var directory = args.Value as string;
            //Debug.WriteLine("PATH2:" + directory);
            //args.Children.Data = Directory.EnumerateFileSystemEntries(directory)
            //    .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden) ) == 0);
            //IEnumerable<string> iEnumDir = Directory.EnumerateDirectories(directory)
            //.Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);

            IEnumerable<string> iEnumDir = Directory.EnumerateFileSystemEntries(directory)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Directory)) != 0);


            args.Children.Data = iEnumDir;
            args.Children.Text = GetTextForNode;
            args.Children.HasChildren = (path) => Directory.Exists((string)path);
            args.Children.Template = FileOrFolderTemplate;

            Log("Expand", $"Text: {args.Text}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    string GetTextForNode(object data)
    {
        string name = Path.GetFileName((string)data);
        //Console.WriteLine("FileName : " + name);
        if (name == null || name.Length < 1)
        {
            if ((data as string).Length >= 2) name = data.ToString().Substring(0, 2);
        }
        return name;
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", isDirectory ? "folder" : "insert_drive_file");

        if (!isDirectory)
        {
            builder.AddAttribute(2, "Style", "margin-left: 24px");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    public class SGFileInfo
    {
        public string Name { get; set; }
        public string Path { get; set; }
        public long Size { get; set; }
        public string Ext { get; set; }
        public int Type { get; set; }       //1:파일 2:디렉토리

        public string getSizeStr()
        {
            string rtn = "";
            if (Size == 0)
            {
                rtn = "";
            }
            if (Size > 1024 * 1024 * 1024)
            {
                float nSize = (float)Size / (1024 * 1024 * 1024);
                rtn = "(" + nSize.ToString("####0.0") + "GB" + ")";
            }
            else if (Size > 1024 * 1024)
            {
                float nSize = (float)Size / (1024 * 1024);
                rtn = "(" + nSize.ToString("####0.0") + "MB" + ")";
            }
            else if (Size > 1024)
            {
                float nSize = (float)Size / (1024);
                rtn = "(" + nSize.ToString("####0.0") + "KB" + ")";
            }
            else if (Size > 0)
                rtn = "(" + Size + " Byte)";
            return rtn;
        }
        public string getNameStr()
        {
            if (Name.Length < 20)
                return Name;
            else
                return Name.Substring(0, 19);
        }

        public SGFileInfo() { }
        public SGFileInfo(string path, string name, int age, long size)
        {
            Name = name;
            Path = path;
            Size = size;
        }
    }
}
