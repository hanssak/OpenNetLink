@inherits LayoutComponentBase
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using HsNetWorkSG
@using Serilog
@using Serilog.Events
@using AgLogManager
@inject HSCmdCenter HsCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject XmlConfService XmlConf
@inject WebWindow Window
@inject NavigationManager MyNavigationManager
@inject ISGAppUpdaterService AppUpdaterSvc;
@inject IJSRuntime JSRuntime
<!-- Navbar -->
<nav id="main-nav" class="main-header navbar navbar-expand navbar-white navbar-light text-md navbar-default border-0">
    <HeaderUI />
</nav>
<!-- /.Navbar -->
<!-- Main Sidebar Container -->
<aside id="left-sidebar" class="main-sidebar sidebar-dark-primary elevation-4" style="background-image: url('/images/adminlte/slide_bg_1.png');background-position:right bottom; background-size: cover;">
    <!-- Brand Logo -->
    <a href="/Welcome" class="brand-link border-0 m-0 p-0 text-center">
        <img src="/images/adminlte/logo_l.png" alt=" Logo" class="brand-text float-left">
    </a>
    <a href="/Welcome" class="brand-link border-0">
        <img src="/images/adminlte/logo_s.png" alt="Logo" class="logo-xs">
    </a>
    <!-- /.Brand Logo -->

    <SideBarUI />
</aside>
<!-- /.Main Sidebar Container -->
<!-- Content Wrapper. Contains page content -->
<div id="main-body" class="content-wrapper">
    @Body
    <LogIn_DisplayLock></LogIn_DisplayLock>
</div>
<!-- /.Content-Wrapper -->
<!-- Control Sidebar -->
<aside class="control-sidebar control-sidebar-dark" ondrop="return false;" ondragover="return false;">
    <!-- Control sidebar content goes here -->
    <CtrlSideUI />
</aside>
<!-- /.Control Sidebar -->
<!-- Main Footer -->
<footer id="main-footer" class="main-footer" ondrop="return false;" ondragover="return false;">
    <FooterUI />
</footer>
<!-- /.Main Footer -->

<Update_NotiPopUp @ref="refUpdate_NotiPopUp"></Update_NotiPopUp>
<VirusReport @ref="refVirusReport"></VirusReport>
@code
{
    VirusReport refVirusReport;
    Update_NotiPopUp refUpdate_NotiPopUp;
    ISGCtrlSideUIService CtrlSideUISvc;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MainLayout>();

    protected override void OnInitialized()
    {
        CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;
        HsCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(AptAndVirusNoti);
        HsCmdCenter.sgPageEvent.SetClientUpgradeNotiEvent(UpdateNoti);
        //HsCmdCenter.sgPageEvent.SetClientUpgradeExeNotiEvent(clientUpgradeExe);


    }

    protected override void OnAfterRender(bool firstRender)
    {
        if( firstRender)
        {
            JSRuntime.InvokeAsync<object>("preventDrop");
            JSRuntime.InvokeAsync<object>("preventDragStart");
        }

        base.OnAfterRender(firstRender);
    }

    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;

        APTAndVirusNotiDBInsert aptAndvirusNotiDBInsert = null;
        if (aptAndvirusNotiDBInsert != null)
        {
            aptAndvirusNotiDBInsert(groupID, cmd, e);
        }
        bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);
        await refVirusReport.openPopUp();

    }

    public async void UpdateNoti(PageEventArgs e)
    {
        string strSvrCliVersion = e.strMsg;
        if (strSvrCliVersion.Equals(""))
        {
            return;
        }
        string strCliVersion = HsCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
        {
            return;
        }

        strSvrCliVersion = strSvrCliVersion.ToUpper();
        CLog.Here().Information("UpdateNoti Server Client Version {0}", strSvrCliVersion);
        strCliVersion = strCliVersion.ToUpper();
        if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
        //if(true)
        {
            string strSvrVersion = e.strMsg;
            refUpdate_NotiPopUp.SetVersionText(strSvrCliVersion);
            refUpdate_NotiPopUp.SetType(1);
            //refUpdate_PopUp.SetNotiUpdateEventAdd(NotiUpdateExe);
            await refUpdate_NotiPopUp.openPopUp();
            //OpenDownloadUpdate();
        }
        else
            return;
    }

}