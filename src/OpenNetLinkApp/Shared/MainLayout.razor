@inherits LayoutComponentBase
@using OpenNetLinkApp.Data.SGDicData.SGUnitData;
@using OpenNetLinkApp.PageEvent;
@using HsNetWorkSG;
@using Serilog;
@using Serilog.Events;
@using AgLogManager;
@using System.Collections.Concurrent;
@using System.Text.Json;
@using OpenNetLinkApp.Pages.Transfer;
@using HsNetWorkSGData;
@using OpenNetLinkApp.Data.SGQuery;
@using OpenNetLinkApp.Common;

@inject HSCmdCenter HsCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject XmlConfService XmlConf
@inject WebWindow Window
@inject NavigationManager MyNavigationManager
@inject ISGAppUpdaterService AppUpdaterSvc;
@inject IJSRuntime JSRuntime
@inject PageStatusService pageService
<!-- Navbar -->
<nav id="main-nav" class="main-header navbar navbar-expand navbar-white navbar-light text-md navbar-default border-0">
    <HeaderUI />
</nav>
<!-- /.Navbar -->
<!-- Main Sidebar Container -->
<aside id="left-sidebar" class="main-sidebar sidebar-dark-primary elevation-4" style="z-index:1101;background-image: url('/images/adminlte/slide_bg_1.png');background-position:right bottom; background-size: cover;">
    @if (listNetWork != null && listNetWork.Count > 1)
    {
        <!-- Brand Logo -->
        <a class="brand-link border-0 m-0 p-0 text-center">
            <img src="/images/adminlte/logo_l.png" alt=" Logo" class="brand-text float-left">
        </a>
        <a class="brand-link border-0">
            <img src="/images/adminlte/logo_s.png" alt="Logo" class="logo-xs">
        </a>
    }
    else
    {
        <!-- Brand Logo -->
        <a class="brand-link border-0 m-0 p-0 text-center">
            <img src="/images/adminlte/logo_l.png" alt=" Logo" class="brand-text float-left">
        </a>
        <a class="brand-link border-0">
            <img src="/images/adminlte/logo_s.png" alt="Logo" class="logo-xs">
        </a>
    }
    <SideBarUI />
</aside>
<!-- /.Main Sidebar Container -->
<!-- Content Wrapper. Contains page content -->
<div id="main-body" class="content-wrapper">
    @Body
    <LogIn_DisplayLock></LogIn_DisplayLock>
</div>
<!-- /.Content-Wrapper -->
<!-- Control Sidebar -->
<aside class="control-sidebar control-sidebar-dark" ondrop="return false;" ondragover="return false;">
    <!-- Control sidebar content goes here -->
    <CtrlSideUI />
</aside>
<!-- /.Control Sidebar -->
<!-- Main Footer -->
<footer id="main-footer" class="main-footer" ondrop="return false;" ondragover="return false;">
    <FooterUI />
</footer>
<!-- /.Main Footer -->

<Update_NotiPopUp @ref="refUpdate_NotiPopUp"></Update_NotiPopUp>
<VirusReport @ref="refVirusReport"></VirusReport>
<SecurityApproverSelectPopUp @ref="refSecurityAproverSelectPopUp" OnSelectOK="doSelectApporveOk" OnSelectCancel="doDLPCancel"></SecurityApproverSelectPopUp>
<SecurityPopUp @ref="refSecurityPopUp" OnSelectCancel="doDLPCancel"></SecurityPopUp>
<SecurityConfirm @ref="refSecurityConfirm" OnOK="doDLPOk" OnCancel="doDLPCancel"></SecurityConfirm>
<DownloadProgress></DownloadProgress>

@code
{
    VirusReport refVirusReport;
    Update_NotiPopUp refUpdate_NotiPopUp;
    ISGCtrlSideUIService CtrlSideUISvc;
    ISGopConfigService siteConfig;
    ISGNetworkService NetWorkSvc;
    List<ISGNetwork> listNetWork = null;
    SecurityApproverSelectPopUp refSecurityAproverSelectPopUp;
    SecurityPopUp refSecurityPopUp;
    SecurityConfirm refSecurityConfirm;
    bool bDlpUse = false;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MainLayout>();

    public ConcurrentQueue<Tuple<int, SGData>> _queDlpNoti = new ConcurrentQueue<Tuple<int, SGData>>();

    protected override void OnInitialized()
    {
        CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;
        siteConfig = SGAppMgrSvc.OpConfigInfoService;
        HsCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(AptAndVirusNoti);
        HsCmdCenter.sgPageEvent.SetClientUpgradeNotiEvent(UpdateNoti);
        //HsCmdCenter.sgPageEvent.SetClientUpgradeExeNotiEvent(clientUpgradeExe);
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        listNetWork = NetWorkSvc.NetWorkInfo;
        SetUpEvent();
    }

    private void doDLPOk(List<string> lstInfo)
    {
        int groupid = Int32.Parse(lstInfo[0]);
        string transSeq = lstInfo[1];
        string netSystem = lstInfo[2];

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
        if (sgLoginData == null)
        {
            bDlpUse = false;
            return;
        }

        string stPrivacy = sgLoginData.GetTagData("PRIVACYAPPROVE");
        string stDuputyMode = sgLoginData.GetTagData("PRIVACYAPPROVEMOD");
        if (stPrivacy == "2")
        {
            string title = lstInfo[3];
            string msg = String.Format(XmlConf.GetInfoMsg("I_0221"), title);
            refSecurityAproverSelectPopUp.setDesc(msg);
            refSecurityAproverSelectPopUp.deputyMod = stDuputyMode;
            refSecurityAproverSelectPopUp.lstInfo = lstInfo;
            refSecurityAproverSelectPopUp.BindEvent();
            refSecurityAproverSelectPopUp.openPopUp();
        }
        else
        {

            HsCmdCenter.sgSendData.RequestSend_PRIVACY_CONTINUE(HsCmdCenter.GetConnectNetWork(groupid), sgLoginData.GetUserID(), transSeq, "1", "", netSystem);
            bDlpUse = false;   //컨펌팝업 재실행 방지
            ShowMessage("warning", XmlConf.GetTitle("T_INSERT_COMPETE"));
            DeleteAndCheckDlpQueue();
        }
    }

    private void doSelectApporveOk(List<string> lstInfo)
    {
        int groupid = Int32.Parse(lstInfo[0]);
        string transSeq = lstInfo[1];
        string netSystem = lstInfo[2];
        string title = lstInfo[3];
        string apvSeq = lstInfo[4];

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
        if (sgLoginData == null)
            return;

        HsCmdCenter.sgSendData.RequestSend_PRIVACY_CONTINUE(HsCmdCenter.GetConnectNetWork(groupid), sgLoginData.GetUserID(), transSeq, "1", apvSeq, netSystem);
        bDlpUse = false;   //컨펌팝업 재실행 방지
        ShowMessage("warning", XmlConf.GetTitle("T_INSERT_COMPETE"));
        DeleteAndCheckDlpQueue();

    }


    private void doDLPCancel(List<string> lstInfo)
    {
        int groupid = Int32.Parse(lstInfo[0]);
        string transSeq = lstInfo[1];
        string netSystem = lstInfo[2];
        string confirmSeq = "NONE";
        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
        if (sgLoginData == null)
        {
            bDlpUse = false;
            return;
        }
        HsCmdCenter.sgSendData.RequestSend_PRIVACY_CONTINUE(HsCmdCenter.GetConnectNetWork(groupid), sgLoginData.GetUserID(), transSeq, "2", confirmSeq, netSystem);
        bDlpUse = false;    //컨펌팝업 재실행 방지
        ShowMessage("warning", XmlConf.GetErrMsg("E_0030"));
        DeleteAndCheckDlpQueue();
    }

    private void DeleteAndCheckDlpQueue()
    {
        Tuple<int, SGData> temp = null;
        _queDlpNoti.TryDequeue(out temp);
        if (_queDlpNoti.Count > 0)
        {
            SendTransDetail();
        }
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void SetUpEvent()
    {
        //Network 세팅을 보고 Event를 설정한다.
        foreach (SGNetwork sgNet in listNetWork)
        {
            HsCmdCenter.sgPageEvent.SetPrivacyNotiEventAdd(sgNet.GroupID, PrivacyNotifyResult); //개인정보 검출 이벤트 추가
            HsCmdCenter.sgPageEvent.SetQueryReciveEvent(sgNet.GroupID, eCmdList.ePRIVACYFILELIST, DetailSearchResult);
        }
    }

    string stTitle = "";
    string stNotiNetSystem = "";
    public async void PrivacyNotifyResult(int groupid, SGData e)
    {
        //개인정보 검출 결과 NOTIFY
        string transSeq = e.GetBasicTagData("TRANSSEQ");
        string stNotiNetSystem = e.GetBasicTagData("NETOVERSYSTEM");
        string ApvKind = e.GetBasicTagData("APPROVEKIND");
        string stTitle = e.GetBasicTagData("TITLE");
        if (stNotiNetSystem.Length < 1)
            stNotiNetSystem = "0";

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
        if (sgLoginData == null)
            return;
        string stPrivacy = sgLoginData.GetTagData("PRIVACYAPPROVE");
        string stVIPMode = sgLoginData.GetTagData("PRIVACYAPPROVEVIP");
        string stDuputyMode = sgLoginData.GetTagData("PRIVACYAPPROVEMOD");
        bool bSendFileContinue = false;
        bSendFileContinue = SGAppMgrSvc.OpConfigInfoService.GetUseDlpFoundSendContinue(groupid);

        //VIP이면 개인정보 노출되어도 바로 전송
        if (stVIPMode == "0" && sgLoginData.IsVipUser() == true) //결재해야 하는데 VIP면 결재안함
        {
            HsCmdCenter.sgSendData.RequestSend_PRIVACY_CONTINUE(HsCmdCenter.GetConnectNetWork(groupid), sgLoginData.GetUserID(), transSeq,
            "1", "NONE", stNotiNetSystem);    //1 : 전송 진행
        }
        else if (bSendFileContinue)
        {
            CLog.Here().Information($"PrivacyNotifyResult, groupid : {groupid}, OpConfigIn : bDlpFoundSendContinue : {bSendFileContinue}");
            // DLP 검출되면, 정보보호 결재자 추가없이 전송진행
            HsCmdCenter.sgSendData.RequestSend_PRIVACY_CONTINUE(HsCmdCenter.GetConnectNetWork(groupid), sgLoginData.GetUserID(), transSeq,
            "1", "NONE", stNotiNetSystem);    //1 : 전송 진행, NONE
        }
        else
        {
            bool sgData = _queDlpNoti.Any(x => x.Item1 == groupid && x.Item2.GetBasicTagData("TRANSSEQ") == transSeq);

            if (!sgData)
                _queDlpNoti.Enqueue(new Tuple<int, SGData>(groupid, e));


            if (bDlpUse)
                return;
            //개인정보 검출 시 진행되는 부분
            SendTransDetail();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeAsync<object>("preventDrop");
            JSRuntime.InvokeAsync<object>("preventDragStart");
        }

        base.OnAfterRender(firstRender);
    }

    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;

        APTAndVirusNotiDBInsert aptAndvirusNotiDBInsert = null;
        if (aptAndvirusNotiDBInsert != null)
        {
            aptAndvirusNotiDBInsert(groupID, cmd, e);
        }

        @*bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);*@

        Common.Enums.PreworkType BlockType = Common.Enums.PreworkType.BLOCK_NONE;
        if (cmd == eCmdList.eVIRUSSCAN)
            BlockType = Common.Enums.PreworkType.VIRUS_SCAN;
        else if (cmd == eCmdList.eAPTSCAN)
            BlockType = Common.Enums.PreworkType.APT_SCAN;
        else if (cmd == eCmdList.eDrmBlockNoti)
            BlockType = Common.Enums.PreworkType.DRM_SCAN;

        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, BlockType);

        await refVirusReport.openPopUp();

    }

    /// <summary>
    /// (Only) 서버 노티 발생 시 처리
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public async void UpdateNoti(int groupId, PageEventArgs e)
    {
        string strSvrCliVersion = e.strMsg;
        if (strSvrCliVersion.Equals(""))
        {
            return;
        }
        string strCliVersion = HsCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
        {
            return;
        }

        strSvrCliVersion = strSvrCliVersion.ToUpper();
        CLog.Here().Information($"groupID : {groupId} - UpdateNoti Server Client Version {strSvrCliVersion}");
        strCliVersion = strCliVersion.ToUpper();

        CLog.Here().Information($"groupID : {groupId} - MainLayOut Server Client Version {strSvrCliVersion}");
        CLog.Here().Information($"groupID : {groupId} - MainLayOut Local Client Version {strCliVersion}");

        if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
        {
            //업데이트  진행중이면 SKIP 하도록 처리 (KYH)
            (Enums.UpdateStatusType status, int groupId) nowUpdateInfo = AppUpdaterSvc.GetNowUpdateInfo();
            if (nowUpdateInfo.status != Enums.UpdateStatusType.NONE && nowUpdateInfo.groupId > -1)
            {
                CLog.Here().Information($"nowUpdateInfo.groupId : {groupId} - Update Already Started By GroupID[{nowUpdateInfo.groupId}] / Status[{nowUpdateInfo.status.ToString()}]");
                return;
            }

            //업데이트 진행은 아니지만, Update Cancel 중이면 SKIP
            if (AppUpdaterSvc.IsCancelRequested)
            {
                CLog.Here().Information($"groupId : {groupId} SKIP - Update Canceling...");
                return;
            }


            string strSvrVersion = e.strMsg;
            refUpdate_NotiPopUp.SetVersionText(strSvrCliVersion);
            refUpdate_NotiPopUp.SetType(1);
            //refUpdate_PopUp.SetNotiUpdateEventAdd(NotiUpdateExe);

            if (SGAppMgrSvc.OpConfigInfoService.GetUseForceUpdate(0))
            {
                ClientUpgradeExeEvent clientUpdateExe = null;
                clientUpdateExe = HsCmdCenter.sgPageEvent.GetClientUpgradeExeNotiEvent();
                if (clientUpdateExe != null)
                    clientUpdateExe(groupId);
            }
            else
            {

                //업데이트 노티 팝업 사용 가능여부 반환
                //다른 망에서 이미 해당 노티 팝업을 표시하였다면, 노티 패스
                if (refUpdate_NotiPopUp.popUpGroupID < 0)
                    await refUpdate_NotiPopUp.openPopUp(groupId);
                else
                    CLog.Here().Information($"nowUpdateInfo.groupId : {groupId} - Update Noti Popup Already Started By GroupID[{refUpdate_NotiPopUp.popUpGroupID}]");
            }
            //OpenDownloadUpdate();
        }
        else
            return;
    }

    public async void DetailSearchResult(int groupId, object[] e)
    {
        SGData data = e[0] as SGData;
        List<Dictionary<int, string>> listData = data.GetSvrRecordData("RECORD");

        if (listData == null || listData.Count == 0)
            return;

        string stDataType = listData[0][1];   //데이터타입
        string stTransSeq = listData[0][0];   //TransSeq

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);
        if (sgLoginData == null)
            return;

        string stPrivacy = sgLoginData.GetTagData("PRIVACYAPPROVE");
        string stVIPMode = sgLoginData.GetTagData("PRIVACYAPPROVEVIP");
        string stDuputyMode = sgLoginData.GetTagData("PRIVACYAPPROVEMOD");

        List<string> lstInfo = new List<string>();
        lstInfo.Add(groupId.ToString());
        lstInfo.Add(stTransSeq);
        lstInfo.Add(stNotiNetSystem);
        lstInfo.Add(stTitle);

        List<FileInfoData> mFileData = new List<FileInfoData>();
        foreach (Dictionary<int, string> dic in listData)
        {
            FileInfoData temp = new FileInfoData();
            temp.stDLP = dic[5];
            temp.stDLPDesc = dic[9];
            temp.strFileName = dic[2];
            temp.strFileSize = dic[3];
            temp.strFileType = dic[4];

            long tempLong = 0;
            if (long.TryParse(temp.strFileSize, out tempLong))
            {
                temp.strFileSize = CsFunction.GetSizeStr(tempLong);
            }
            temp.strFileName = CsFunction.GetFileRename(false, temp.strFileName);

            mFileData.Add(temp);
        }


        //DatyType 0 : 일반 파일  1 : 클립보드 텍스트  2 : 클립보드 이미지
        if (stDataType != "0")
        {
            if (stPrivacy == "0")
            {
                string msg = String.Format(XmlConf.GetWarnMsg("W_0095"), stTitle);
                refSecurityConfirm.listInfo = lstInfo;
                refSecurityConfirm.fileInfoDatas = mFileData;
                refSecurityConfirm.Refresh();
                await Task.Delay(1000);
                await refSecurityConfirm.openPopUp();
            }
            else
            {
                string msg = String.Format(XmlConf.GetWarnMsg("W_0258"));
                refSecurityPopUp.setDesc(String.Format(msg, stTitle));
                refSecurityPopUp.listInfo = lstInfo;
                await Task.Delay(1000);
                await refSecurityPopUp.openPopUp();
            }
        }
        else
        {

            string msg = String.Format(XmlConf.GetWarnMsg("W_0095"), stTitle);

            refSecurityConfirm.listInfo = lstInfo;
            refSecurityConfirm.fileInfoDatas = mFileData;
            refSecurityConfirm.Refresh();
            await Task.Delay(1000);
            await refSecurityConfirm.openPopUp();

        }
    }

    /// <summary>
    /// 개인정보 검출 상세정보 위한 쿼리
    /// </summary>
    /// <param name="userID">로그인 ID</param>
    /// <param name="transSeq">TransSeq</param>
    /// <returns>쿼리문</returns>
    private void SendTransDetail()
    {
        //HsCmdCenter.sgPageEvent.SetDetailSearchEventAdd(groupId, DetailSearchResult);           // 상세보기 조회 결과


        //개인정보 검출 결과 NOTIFY
        Tuple<int, SGData> sgData = null;
        bool result = _queDlpNoti.TryPeek(out sgData);

        if (!result)
            return;

        bDlpUse = true;

        stNotiNetSystem = sgData.Item2.GetBasicTagData("NETOVERSYSTEM");
        stTitle = sgData.Item2.GetBasicTagData("TITLE");
        string transSeq = sgData.Item2.GetBasicTagData("TRANSSEQ");
        if (stNotiNetSystem.Length < 1)
            stNotiNetSystem = "0";

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(sgData.Item1);
        if (sgLoginData == null)
            return;

        string sql = SGQueryExtend.GetTransferInfoPrivacy(transSeq);
        HsNetWork hsNetWork = HsCmdCenter.GetConnectNetWork(sgData.Item1);
        HsCmdCenter.sgSendData.RequestCommonSendQuery(hsNetWork, eCmdList.ePRIVACYFILELIST, sgLoginData.GetUserID(), sql);

    }

}