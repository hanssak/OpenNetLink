@using System.Collections.Generic
@using System.Runtime.InteropServices
@using OpenNetLinkApp.Models.SGHeader
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Models.SGUserInfo
@using Serilog
@using Serilog.Events
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using WebWindows
@using HsNetWorkSG
@using System.Runtime
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using HsNetWorkSGData

@inject ISGAppManagerService SGAppMgrSvc
@inject ISGAppUpdaterService SGAppUpdaterSvc
@inject WebWindow Window
@inject HSCmdCenter HsCmdCenter
@inject XmlConfService XmlConf
@inject IJSRuntime jsRuntime
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

@implements IDisposable
<!-- Navbar -->
<SGHeaderUI HeaderUISvc="@HeaderUISvc" UserInfoSvc="@UserInfoSvc" SideBarUISvc="@SideBarUISvc" />
<!--<VirusReport @ref="refVirusReport"></VirusReport>-->
<!-- /.navbar -->


@code
{
    ISGHeaderUIService HeaderUISvc;
    ISGSideBarUIService SideBarUISvc;
    ISGUserInfoService UserInfoSvc;
    ISGAppConfigService AppConfigSvc;
    ISGSiteConfigService siteConfig;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<HeaderUI>();
    byte[] byteArray = null;
    SGSettingsDBProc sgSettingProc;
    //VirusReport refVirusReport;

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    protected override void OnInitialized()
    {
        sgSettingProc = SGSettingsDBProc.Instance;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        HeaderUISvc = SGAppMgrSvc.HeaderUIService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        UserInfoSvc = SGAppMgrSvc.UserInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        SetPlatFormInfo();
        SGAppUpdaterSvc.Init(AppConfigSvc.GetUpdateSvcIP(), AppConfigSvc.GetUpdatePlatform());

        HeaderUISvc.OnChangeHeader += StateHasChanged;
        /* For: Change Header UI State to be rendered according to Sidebar action */
        SideBarUISvc.OnChangeActMenu += StateHasChanged;
        UserInfoSvc.OnChangeUserInfo += StateHasChanged;

        Window.ClipBoardOccured += ClipBoardHandler;
        Window.RecvClipBoardOccured += RecvClipBoardHandler;
        Window.NavigateURLOccured += NavigateURLHandler;

        HsCmdCenter.sgPageEvent.SetServerNotiEvent(RecvServerNoti);
        HsCmdCenter.sgPageEvent.SetApproveActionNotiEvent(ApprActionNoti);
        HsCmdCenter.sgPageEvent.SetLogoutNotiEvent(LogoutAction);
        HsCmdCenter.sgPageEvent.SetChgPassWDNotiEvent(ChangePassWordNoti);
        HsCmdCenter.sgPageEvent.SetOffLineNotiEvent(OffLineNoti);
        // HsCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(AptAndVirusNoti);
        HsCmdCenter.sgPageEvent.SetAddRMHeaderEventAdd(RMHeaderNoti);

        HsCmdCenter.sgPageEvent.SetBoardNotiSearchEventAdd(BoardNotifyResult);                      // 공지사항 조회 결과.
        HsCmdCenter.sgPageEvent.SetAPTAndVirusNotiDBInsertEventAdd(AptAndVirusDBInsert);

        HsCmdCenter.sgPageEvent.SetFileRecvProgressEventAdd(FileRecvProgress);
    }

    public void Dispose()
    {
        HeaderUISvc.OnChangeHeader -= StateHasChanged;
        SideBarUISvc.OnChangeActMenu -= StateHasChanged;
        UserInfoSvc.OnChangeUserInfo -= StateHasChanged;
        Window.ClipBoardOccured -= ClipBoardHandler;
        Window.RecvClipBoardOccured -= RecvClipBoardHandler;
        Window.NavigateURLOccured -= NavigateURLHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();

            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
            {
                HsCmdCenter.sgPageEvent.SetRecvClipEventAdd(listNetWork[nIdx].GroupID, RecvClipBoard);
            }

        }
    }


    /**
    *@biref 
    */
    public void RecvClipBoard(int groupid, RecvClipEventArgs e)
    {
        int nClipDataLen = e.ClipDataSize;
        int nType = e.nDataType;

        //byte[] clipData = new byte[nClipDataLen];
        //Array.Copy(e.ClipData, 0, clipData, 0, nClipDataLen);
        byte[] clipData = e.ClipData.ToArray();

        Window.SetClipBoardData(groupid, nType, nClipDataLen, clipData);
    }


    /**
    *@biref 3중망 상황에서 클립보드 송신시 Toast Title 보내고자 하는 정보 정확하게 구함
    */
    public bool GetClipboardToastTitle(int groupID, ref string strTitle)
    {

        if (pageService.m_str3NetDestSysID.Length < 1)
            return false;

        string strFromName = "";
        string strToName = "";
        String[] listNetOverPolicy = pageService.m_str3NetDestSysID.Split("/");

        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        strTitle = strFromName;
        strTitle += " → ";


        if (listNetOverPolicy.Count() < 2)
        {
            //strTitle += XmlConf.GetTitle("T_TRANS_NETOVER_ALL");

            Dictionary<string, SGNetOverData> dicDestSysPos = null;
            dicDestSysPos = pageService.GetTargetSystemList(groupID);

            bool bGetTagetNetName = false;
            string strTargetSysid = "";
            int nPos = -1;
            nPos = pageService.m_str3NetDestSysID.IndexOf(",");
            if (nPos > 1)
            {
                strTargetSysid = pageService.m_str3NetDestSysID.Substring(0, nPos);

                if (dicDestSysPos != null && dicDestSysPos.Count > 1 && strTargetSysid.Length > 0)
                {
                    foreach(var item in dicDestSysPos)
                    {
                        if (item.Value.strDestSysid == strTargetSysid)
                        {
                            strTargetSysid = item.Key;
                            bGetTagetNetName = true;
                            break;
                        }
                    }
                }
            }

            if (bGetTagetNetName)
                strTitle += strTargetSysid;
            else
                strTitle += XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
        }
        else
        {
            strTitle += XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
        }

        return true;
    }


    /**
    *@biref 클립보드 보내고 Message 및 Toast 등 UI 표현
    */
    public void SendClipBoardAfterMsg(int ret, ClipBoardData clipData)
    {

        if (ret >= 0)
        {
            CLIPALM_TYPE clipAlarmType = AppConfigSvc.GetClipAlarmType();
            string strText = XmlConf.GetInfoMsg("I_0032");                      // 클립보드를 전송하였습니다.
            if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.UI))
                ShowMessage("info", strText);
            OS_NOTI os_noti = OS_NOTI.CLIPBOARD;

            // string strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
            string strTitle = "";

            Dictionary<string, SGNetOverData> dicDestSysPos = null;
            dicDestSysPos = pageService.GetTargetSystemList(clipData.nGroupId);

            if (pageService.m_str3NetDestSysID.Length < 1)
                strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
            else
            {
                // strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
                if (GetClipboardToastTitle(clipData.nGroupId, ref strTitle) == false)
                    strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
            }


            if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.OS))
            {
                if (HsCmdCenter.GetFileRecvPossible(clipData.nGroupId) == true)
                    Window.Notification(os_noti, strTitle, strText);
            }
            SendDayClipInfo();

            InsertMessage(NOTI_TYPE.USER, clipData.nGroupId, LSIDEBAR.MENU_CATE_ROOT, eMsgType.eMsgClipSend, "", strText);
        }

    }


    /**
    *@biref 
    */
    public void ClipBoardHandler(object sender, ClipBoardData clipData)
    {
        if (!siteConfig.GetUseClipBoard(clipData.nGroupId))
            return;
        //CLog.Here().Information("Incremented count to {CurrentCount}", currentCount);
        string strMsg = "";
        if (pageService.GetConnectStatus(clipData.nGroupId) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (pageService.GetDayClipboardCountEnable(clipData.nGroupId) != true)
        {
            bool bFilePreView = pageService.GetDayInfoPrev(clipData.nGroupId);
            if (bFilePreView == true)
            {
                DayClipChangeNotiEvent dayClipChange = null;
                dayClipChange = HsCmdCenter.sgPageEvent.GetDayClipChangeNotiEvent(clipData.nGroupId);
                if (dayClipChange == null)
                    return;
                dayClipChange(clipData.nGroupId);
            }
            strMsg = XmlConf.GetErrMsg("E_0110");    // 클립보드의 일일 전송 횟수를 초과했습니다./r/n클립보드는 일일 최대 {0}번까지 전송할 수 있습니다.
            int ClipMaxCount = pageService.GetDayClipMaxCount(clipData.nGroupId);
            strMsg = String.Format(strMsg, ClipMaxCount);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);

            return;
        }

        if (pageService.GetDayClipboardSizeEnable(clipData.nGroupId, clipData.nLength) != true)
        {
            bool bFilePreView = pageService.GetDayInfoPrev(clipData.nGroupId);
            if (bFilePreView == true)
            {
                DayClipChangeNotiEvent dayClipChange = null;
                dayClipChange = HsCmdCenter.sgPageEvent.GetDayClipChangeNotiEvent(clipData.nGroupId);
                if (dayClipChange == null)
                    return;
                dayClipChange(clipData.nGroupId);
            }
            strMsg = XmlConf.GetErrMsg("E_0109");    // 클립보드의 일일 전송 사이즈를 초과했습니다./r/n클립보드는 일일 최대 {0}MB까지 전송할 수 있습니다.
            Int64 ClipMaxSize = pageService.GetDayClipMaxSize(clipData.nGroupId);
            strMsg = String.Format(strMsg, ClipMaxSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }


        switch (clipData.nType)
        {
            case CLIPTYPE.TEXT:
                {
                    string strClipText = Marshal.PtrToStringAnsi(clipData.pMem);
                    Log.Information($"Throw: ClipBoardEvent: {strClipText}");
                }
                break;
            case CLIPTYPE.IMAGE:
                {
                    unsafe
                    {
                        // byte *src = (byte *)clipData.pMem.ToPointer();
                    }
                }
                break;
        }

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipData.nGroupId);
        Int64 MaxClipSize = sgLoginData.GetClipboardLimitSize();
        if (MaxClipSize > 0 && (MaxClipSize * 1024 * 1024) < clipData.nLength)
        {
            strMsg = XmlConf.GetErrMsg("E_0101");    // 전송하고자 하는 클립보드의 데이터가 전송 제한을 초과하였습니다./r/n클립보드는 최대 {0}MB까지 전송할 수 있습니다.
            strMsg = String.Format(strMsg, MaxClipSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }
        string strUserID = sgLoginData.GetUserID();
        byteArray = new byte[clipData.nLength];
        Marshal.Copy(clipData.pMem, byteArray, 0, clipData.nLength);

        // KKW - Clipboard 실제 전송
        int ret = 0;

        if (pageService.m_str3NetDestSysID.Length < 1)
            ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);      // Clipboard Data 실제 전송하는 부분
        else
        {

            String[] listNetOverPolicy = pageService.m_str3NetDestSysID.Split("/");

            if (listNetOverPolicy.Count() < 2)
                ret = HsCmdCenter.SendClipboard(clipData.nGroupId, pageService.m_str3NetDestSysID, strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);
            else
            {
                int nIdx = 0;
                int nTempRet = 0;
                for (; nIdx < listNetOverPolicy.Count(); nIdx++)
                {
                    if (listNetOverPolicy[nIdx].Length > 0)
                    {
                        nTempRet = HsCmdCenter.SendClipboard(clipData.nGroupId, listNetOverPolicy[nIdx], strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);
                        if (nTempRet < 0)
                            ret = nTempRet;
                        else if (ret >= 0)      // SendClipboard 한번 실패하면, 아래에서 Message 띄우지 않음.
                            ret = nTempRet;
                    }
                }
            }

        }

        SendClipBoardAfterMsg(ret, clipData);

    }

    public void RecvClipBoardHandler(object sender, int groupID)
    {
        CLIPALM_TYPE clipAlarmType = AppConfigSvc.GetClipAlarmType();
        string strText = XmlConf.GetInfoMsg("I_0193");                         // 클립보드를 수신받았습니다.
        if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.UI))
            ShowMessage("info", strText);
        OS_NOTI os_noti = OS_NOTI.CLIPBOARD;

        // string strTitle = XmlConf.GetNetworkTitle(groupID);
        // 단말망 -> 업무망
        string strFromNet = "";
        string strToNet = "";
        XmlConf.GetNetworkTitle(groupID, out strFromNet, out strToNet);
        string strTitle = strToNet + " → " + strFromNet;

        if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.OS))
        {
            if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
                Window.Notification(os_noti, strTitle, strText);
        }

        InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_ROOT, eMsgType.eMsgClipRecv, "", strText);
    }

    // SGSideBarUI 와 동일
    public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        // ChangeActiveMenuWrap
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
    }

    public void NavigateURLHandler(object sender, string navURI)
    {
        int nGroupID = 0;
        string strGroupID = "";
        string strMenuName = "";

        // KKW
        CLog.Here().Information("Toast-Click-navURI : {0}", navURI);

        int nPos = -1;
        bool bChangedMenu = false;

        try
        {

            // 왼쪽 SideBar Navigate 되는 곳으로 선택되게 적용
            nPos = navURI.LastIndexOf('/');
            if (nPos > 0 && navURI.Length > 3 && nPos < navURI.Length - 1)
            {
                strGroupID = navURI.Substring(nPos + 1);
                nGroupID = Convert.ToInt32(strGroupID);

                // 결재권한이 있을때에만 결재관리로 넘어가게 적용가능
                /*SGLoginData sgLoginData = null;
                SGUserData sgUserData = null;
                sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
                sgUserData = (SGUserData)HsCmdCenter.GetUserData(nGroupID);
                bool bApprMenuUse = false;

                if (sgLoginData != null && sgUserData != null)
                {
                    if (sgLoginData.GetApprove() == true)   // 3망 Mode가 상관없이 Login때 사용하는 결재 권한으로 결재관리 조회 UI 생성
                        if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                            bApprMenuUse = true;
                }*/

                KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                eventArgs.Key = "Enter";

                // 결재관리 확인 - 선택변경
                strMenuName = "transferApprove";
                nPos = navURI.IndexOfAny(strMenuName.ToCharArray());
                ISGSideBarUI activeMenu = null;
                if (nPos > 0)
                //if (nPos > 0 && bApprMenuUse)
                {
                    activeMenu = SideBarUISvc.FindSubMenu(nGroupID, 0, 2);

                    if (activeMenu != null)
                    {
                        ChangeActiveMenuWrap(eventArgs, activeMenu);
                        bChangedMenu = true;
                    }
                }

                if (bChangedMenu == false)
                {
                    // 전송관리 확인 - 선택변경
                    strMenuName = "transManage";
                    nPos = navURI.IndexOfAny(strMenuName.ToCharArray());
                    if (nPos > 0)
                    {
                        activeMenu = SideBarUISvc.FindSubMenu(nGroupID, 0, 1);
                        if (activeMenu != null)
                        {
                            ChangeActiveMenuWrap(eventArgs, activeMenu);
                            bChangedMenu = true;
                        }
                    }
                }

                // 기능 동작하나 위에 방식 사용
                /*if (nPos > 0 && pageService.m_approveMenuArray[nGroupID] != null)
                {
                    SideBarUISvc.ChgActiveMenu(eventArgs, pageService.m_approveMenuArray[nGroupID]);
                    bChangedMenu = true;
                }

                if (bChangedMenu == false)
                {
                    // 전송관리 확인 - 선택변경
                    strMenuName = "transManage";
                    nPos = navURI.IndexOfAny(strMenuName.ToCharArray());
                    if (nPos > 0 && pageService.m_TransMenuArray[nGroupID] != null)
                    {
                        SideBarUISvc.ChgActiveMenu(eventArgs, pageService.m_TransMenuArray[nGroupID]);
                        bChangedMenu = true;
                    }
                }*/

            }

        }
        catch(Exception e)
        {
            CLog.Here().Information("Toast-Click-Navigate-Exception(Msg) : {0}", e.Message);
        }

        if (bChangedMenu)
            MyNavigationManager.NavigateTo(navURI);

    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    public void RecvServerNoti(int groupID, eCmdList cmd, PageEventArgs e)
    {
        OS_NOTI os_noti = ConvertCmd(cmd);
        string naviURI = "";
        if (os_noti == OS_NOTI.WAIT_APPR)
        {
            bool bUseApprWaitNoti = AppConfigSvc.GetUseApprWaitNoti();
            if (!bUseApprWaitNoti)
                return;

            naviURI = "/transferApprove/";
            naviURI += groupID.ToString();
        }
        else if (os_noti == OS_NOTI.NOTICE)
        {
            string strBoardHash = e.strMsg;
            string strPrevBoardHash = pageService.GetBoardHash(groupID);
            if (!strBoardHash.Equals(""))
            {
                pageService.SetBoardHash(groupID, strBoardHash);
                BoardNotifySearch();
                return;
            }
        }

        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = NotiMsgMake(cmd, e);
        if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
            Window.Notification(os_noti, strTitle, strMsg, naviURI);

        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
            return;

        eAlarmType eAType = sgMsgData.GetConvertOSNotiAlarmTitle(os_noti);
        LSIDEBAR sidebar = sgMsgData.GetConvertOSNotiMenuCategory(os_noti);
        InsertAlarm(groupID, sidebar, eAType, "", strMsg);
        //InsertAlarm(groupID, sidebar, eAType, naviURI, strMsg);
    }


    public void ApprActionNoti(int groupID, eCmdList cmd, ApproveActionEventArgs e)
    {
        OS_NOTI os_noti = ConvertCmd(cmd, e.Action);
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = NotiMsgMake(cmd, e);
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
            return;
        eAlarmType eAType = sgMsgData.GetConvertOSNotiAlarmTitle(os_noti);
        LSIDEBAR sidebar = sgMsgData.GetConvertOSNotiMenuCategory(os_noti);
        InsertAlarm(groupID, sidebar, eAType, "", strMsg);
        if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
            Window.Notification(os_noti, strTitle, strMsg);
    }


    public OS_NOTI ConvertCmd(eCmdList cmd, int Action = 0)
    {
        OS_NOTI os_noti = (OS_NOTI)0;
        switch (cmd)
        {
            case eCmdList.eAPPROVECOUNT:
                os_noti = OS_NOTI.WAIT_APPR;
                break;

            case eCmdList.eEMAILAPPROVENOTIFY:
                os_noti = OS_NOTI.MAIL_APPR;
                break;

            case eCmdList.eAPPROVEACTIONNOTIFY:
                if (Action == 1)
                    os_noti = OS_NOTI.CONFIRM_APPR;
                else if (Action == 2)
                    os_noti = OS_NOTI.REJECT_APPR;
                break;

            case eCmdList.eBOARDNOTIFY:
                os_noti = OS_NOTI.NOTICE;
                break;

            default:
                break;
        }
        return os_noti;
    }

    public string NotiMsgMake(eCmdList cmd, EventArgs e)
    {
        string strMsg = "";
        switch (cmd)
        {
            case eCmdList.eAPPROVECOUNT:
                strMsg = XmlConf.GetInfoMsg("I_0052");                      // 새로운 승인 요청자료가 있습니다.
                break;

            case eCmdList.eEMAILAPPROVENOTIFY:
                strMsg = XmlConf.GetInfoMsg("I_0098");                      // 새로운 메일승인 요청자료가 {0}건 존재합니다.
                PageEventArgs pEventArgs = (PageEventArgs)e;
                strMsg = String.Format(strMsg, pEventArgs.count);
                break;

            case eCmdList.eAPPROVEACTIONNOTIFY:
                ApproveActionEventArgs apprActionArgs = (ApproveActionEventArgs)e;
                if (apprActionArgs.Action == 1)
                {
                    strMsg = XmlConf.GetInfoMsg("I_0152");                  // 승인 되었습니다./r/n제목 : {0}
                }
                else if (apprActionArgs.Action == 2)
                {
                    strMsg = XmlConf.GetInfoMsg("I_0151");                  // 반려 되었습니다./r/n제목 : {0}
                }
                strMsg = String.Format(strMsg, apprActionArgs.strTitle);
                strMsg = strMsg.Replace("/r/n", "\n");
                break;

            case eCmdList.eVIRUSSCAN:
            case eCmdList.eAPTSCAN:
                AptAndVirusEventArgs aptAndVirusArgs = (AptAndVirusEventArgs)e;
                string strTransSeq = aptAndVirusArgs.strTransSeq;
                string strTitle = aptAndVirusArgs.strTitle;
                string strContent = aptAndVirusArgs.strMsg;
                strMsg = XmlConf.GetWarnMsg("W_0089");                                      // 전송 파일에 바이러스가 발견 되었습니다./r/n/r/n제목 : {0}/r/n바이러스내역 : {1}/r/n/r/n전송관리의 상세보기에서 확인하십시오.
                strMsg = String.Format(strMsg, strTitle, strContent);
                break;

            default:
                break;
        }
        return strMsg;
    }
    public void SendDayClipInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HsCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }

    /**
    *@brief 서버에서 Logout CMD 받았을때 처리함수
    */
    public void LogoutAction(int groupID, PageEventArgs e)
    {

        /*SGSettingData sgSettingData = null;
        sgSettingData = sgSettingProc.SelectSettingData(groupID);
        if (sgSettingData == null)
            return;
        sgSettingProc.SetSettingAutoLogin(groupID, false);*/

        List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
        int count = listNetWork.Count;


        ShowMessage("warn", e.strMsg);

        // 통신쪽 Logout 처리
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        if (pageService.GetConnectStatus(groupID))
            HsCmdCenter.SendLogOut(groupID, strUserID);


        pageService.SetInitApprLine(groupID, false);
        pageService.SetLoadApprBaseLine(groupID, false);
        pageService.SetConnectStatus(groupID, false);
        pageService.SetLogoutStatus(groupID, true);

        // UI쪽 Logout 처리
        SideBarUISvc.DeleteMenuAllButRoot(groupID);

        // Page 이동
        int i = 0;
        ISGSideBarUI activeMenu = null;
        for (; i < count; i++)
        {

            if (pageService.GetLogoutStatus(listNetWork[i].GroupID) == false)
            {

                KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                eventArgs.Key = "Enter";

                //activeMenu = SideBarUISvc.FindSubMenu(listNetWork[i].GroupID, 0, 0);
                activeMenu = SideBarUISvc.FindRootMenu(listNetWork[i].GroupID);
                if (activeMenu != null)
                {
                    ChangeActiveMenuWrap(eventArgs, activeMenu);
                    MyNavigationManager.NavigateTo(activeMenu.Path);
                }

                break;
            }

        }

        if (i < count)
            return;

        jsRuntime.InvokeAsync<object>("beforeLogOut");
        MyNavigationManager.NavigateTo("/LogIn/Logout");

        /*pageService.SetLoginComplete(groupID, false);
        pageService.SetInitApprLine(groupID, false);
        pageService.SetLoadApprBaseLine(groupID, false);
        pageService.SetConnectStatus(groupID, false);
        pageService.SetLogoutStatus(groupID, true);

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        string strUserID = sgLoginData.GetUserID();
        HsCmdCenter.SendLogOut(groupID, strUserID);

        if (groupID == 0)
            MyNavigationManager.NavigateTo("/LogIn");*/

    }

    public void ChangePassWordNoti(int groupID, PageEventArgs e)
    {
        ePassWDType epType = pageService.GetPassWDChgType(groupID);
        if (epType == ePassWDType.eNone)
            return;

        switch (epType)
        {
            case ePassWDType.eINITPASSWDCHG:
                InitPassWDCHGEvent initPassWDChgEvent = null;
                initPassWDChgEvent = pageService.GetInitPassWDCHGEvent(groupID);
                if (initPassWDChgEvent == null)
                    break;
                initPassWDChgEvent(groupID, e);
                break;
            case ePassWDType.eDAYPASSWDCHG:
                DayPassWDCHGEvent dayPassWDChgEvent = null;
                dayPassWDChgEvent = pageService.GetDayPassWDCHGEvent(groupID);
                if (dayPassWDChgEvent == null)
                    break;
                dayPassWDChgEvent(groupID, e);
                break;
            case ePassWDType.eUSERPASSWDCHG:
                UserPassWDCHGEvent userPassWDChgEvent = null;
                userPassWDChgEvent = pageService.GetUserPassWDCHGEvent(groupID);
                if (userPassWDChgEvent == null)
                    break;
                userPassWDChgEvent(groupID, e);
                break;
            default:
                break;
        }
    }

    public async void OffLineNoti(int groupID)
    {

        // 통신쪽에서 계속 Offline됐다고 Noti 보내주는 것으로 보임
        if (pageService.GetConnectStatus(groupID) == false)
            return;

        pageService.SetConnectStatus(groupID, false);

        OS_NOTI os_noti = OS_NOTI.OFFLINE;
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = XmlConf.GetInfoMsg("I_0198");               // 오프라인 되었습니다.
        if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
            Window.Notification(os_noti, strTitle, strMsg, "");
        await jsRuntime.InvokeAsync<object>("closeAllPopup");

    }

    /*
    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;
        bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);
        await refVirusReport.openPopUp();

    }
    */

    public void RMHeaderNoti(int groupID, PageEventArgs e)
    {
        string strCurFileSendInfo = pageService.GetCurFileSendInfo(groupID);
        MyNavigationManager.NavigateTo(strCurFileSendInfo);
        System.Threading.Thread.Sleep(1000);
        AddFileRMEvent addFileRM_Event = HsCmdCenter.sgPageEvent.GetAddFileRMEvent(groupID);
        if (addFileRM_Event != null)
        {
            addFileRM_Event(groupID, e);
        }
    }

    public void SetPlatFormInfo()
    {
        System.OperatingSystem osInfo = System.Environment.OSVersion;
        CLog.Here().Information("Platform: {0:G}", osInfo.Platform);
        CLog.Here().Information("Version String: {0}", osInfo.VersionString);
        CLog.Here().Information("Version Information: Major - {0} , Minor - {1} , Service Pack - '{2}'", osInfo.Version.Major, osInfo.Version.Minor, osInfo.ServicePack);

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            AppConfigSvc.SetUpdatePlatform("windows");
        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
        {
            AppConfigSvc.SetUpdatePlatform("mac");
        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
        {
            if (File.Exists("/etc/system-release"))
                AppConfigSvc.SetUpdatePlatform("redhat");
            else if (File.Exists("/etc/lsb-release"))
                AppConfigSvc.SetUpdatePlatform("debian");
            else
                AppConfigSvc.SetUpdatePlatform("debian");
        }
    }
    public void BoardNotifySearch()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            return;
        }
        string strUserID = sgLoginData.GetUserID();
        SGQueryExtend sgQueryExtend = new SGQueryExtend();
        string strQuery = sgQueryExtend.GetSGNotify(strUserID);
        HsCmdCenter.SendBoardNotiSearch(groupID, strUserID, strQuery);
    }

    public void BoardNotifyResult(int groupid, PageEventArgs e)
    {
        SGData sgData = null;
        sgData = HsCmdCenter.GetBoardNoti(groupid);
        if (sgData == null)
        {
            return;
        }

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData == null)
            return;
        string strUserSeq = sgUserData.GetUserSequence();

        AllDeleteDBBoardNoti(groupid, strUserSeq);

        SGMsgData sgMsgData = new SGMsgData();

        string strResultData = sgData.GetBasicTagData("RECORD");

        if (strResultData.Equals(""))
        {
            return;
        }
        string[] strResult = strResultData.Split('\u0003');

        for (int i = 0; i < strResult.Length; i++)
        {
            string[] strSubResult = strResult[i].Split('\u0001');

            string strNotiSeq = strSubResult[0];                        // 공지사항 Seq.
            string strHead = strSubResult[1];                           // 공지사항 제목.
            string strNotiContent = strSubResult[2];                    // 공지사항 내용.
            SQLiteDB.InsertNotiInfo(NOTI_TYPE.SYSTEM, groupid, strUserSeq, strNotiSeq, LSIDEBAR.MENU_CATE_ROOT, "", "", strHead, strNotiContent);
        }
        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupid);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupid);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupid);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupid);

        BoardNotiAfterTotalBoardEvent boardNotiAfterTotalBoard = null;
        boardNotiAfterTotalBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterTotalBoardEvent();
        if (boardNotiAfterTotalBoard != null)
            boardNotiAfterTotalBoard(groupid);
        /*
        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HsCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
        */
    }

    public void AllDeleteDBBoardNoti(int groupID, string strUserSeq)
    {
        int DataCount = 0;
        DataCount = SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.SYSTEM, groupID, strUserSeq);
        if (DataCount <= 0)
            return;

        List<SGNotiData> listNotiData = null;
        listNotiData = SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.SYSTEM, groupID, strUserSeq, 1000);
        if ((listNotiData == null) || (listNotiData.Count <= 0))
            return;

        SGMsgData sgMsgData = new SGMsgData();
        string strHead = sgMsgData.GetConvertMessageTitle(eMsgType.eMsgBoardNoti);

        for (int i = 0; i < listNotiData.Count; i++)
        {
            if (!listNotiData[i].Seq.Equals("0"))
            {
                SGNotiData sgNotiData = listNotiData[i];
                SQLiteDB.DeleteNotiInfo(sgNotiData);
            }
        }
    }

    public void InsertAlarm(int groupID, LSIDEBAR menuCategory, eAlarmType eAlarmType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertAlarmTitle(eAlarmType);
        string strAlarmContent = body;
        SQLiteDB.InsertAlarmInfo(groupID, strUserSeq, menuCategory, path, "", strHead, strAlarmContent);

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        AlarmNotiAfterDashBoardEvent alarmNotiAfterDashBoard = null;
        alarmNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetAlarmNotiAfterDashBoardEvent(groupID);
        if (alarmNotiAfterDashBoard != null)
            alarmNotiAfterDashBoard(groupID);

        NotiAfterTotalAlarmEvent NotiAfterAlarm = null;
        NotiAfterAlarm = HsCmdCenter.sgPageEvent.GetNotiAfterTotalAlarmEvent();
        if (NotiAfterAlarm != null)
            NotiAfterAlarm();
    }

    public void InsertMessage(NOTI_TYPE type, int groupID, LSIDEBAR menuCategory, eMsgType eMsgType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertMessageTitle(eMsgType);
        string strNotiContent = body;
        SQLiteDB.InsertNotiInfo(type, groupID, strUserSeq, "0", menuCategory, path, "", strHead, strNotiContent);   // KKW

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HsCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }

    public void AptAndVirusDBInsert(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strMsg = "";
        string strFileTransTitle = e.strTitle;

        eAlarmType eAType = eAlarmType.eNone;
        if (cmd == eCmdList.eVIRUSSCAN)
        {
            strMsg = XmlConf.GetWarnMsg("W_0253");              // 전송파일에 바이러스가 발견되었습니다.(제목 : {0})
            eAType = eAlarmType.eAlarmVirus;
        }
        else
        {
            strMsg = XmlConf.GetWarnMsg("W_0254");              // 전송파일에 악성코드가 검출되었습니다.(제목 : {0})
            eAType = eAlarmType.eAlarmApt;
        }

        strMsg = String.Format(strMsg, strFileTransTitle);

        InsertAlarm(groupID, LSIDEBAR.MENU_CATE_FILE, eAType, "", strMsg);
    }

    public void FileRecvProgress(int groupID, PageEventArgs e)
    {
        string strFromName = "";
        string strToName = "";
        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        string strMsg = "";
        if (e.result != 0)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ShowProgress(groupID, 4, 100, strFromName, strToName, e.strMsg);
            return;
        }

        int per = e.count;

        if (per == -100)
        {
            strMsg = XmlConf.GetErrMsg("E_0221");           // 수신 파일 압축해제 및 복호화 도중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ShowProgress(groupID, 4, 100, strFromName, strToName, e.strMsg);
            return;
        }
        if (per == -200)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ShowProgress(groupID, 4, 100, strFromName, strToName, e.strMsg);
            return;
        }
        int type = 0;
        if (per >= 100)
        {
            type = 2;
            ShowProgress(groupID, type, 100, strFromName, strToName, e.strMsg);
            System.Threading.Thread.Sleep(500);
            type = 3;                                       // close
                                                            // HSCmdCenter.SetFileRecving(groupID, false);
        }
        else if (per == 0)
        {
            bool bRecving = false;
            bRecving = HsCmdCenter.GetFileRecving(groupID);
            if (bRecving == true)
                return;

            type = 1;                                        // open
            HsCmdCenter.SetFileRecving(groupID, true);
        }
        else if ((per > 0) && (per < 100))
        {
            type = 2;                                       // update
            HsCmdCenter.SetFileRecving(groupID, true);
        }
        else
            return;

        ShowProgress(groupID, type, per, strFromName, strToName, e.strMsg);
    }

    // type : 1 - open , 2 - update ,3 -close
    private async void ShowProgress(int groupID, int type, int per, string strFromName, string strToName, string strTransSeq)
    {
        object[] param = { };
        string identifier = "";
        string strID = groupID.ToString();
        strID = "RECV" + strID + strTransSeq;
        string strProgress = String.Format("{0}%", per);
        string strFileRecvInfo = XmlConf.GetInfoMsg("I_0097");              // 파일수신 중입니다./r/n수신이 완료될 때까지 기다려 주십시오.
        strFileRecvInfo = strFileRecvInfo.Replace("/r/n", "<br>");
        strFileRecvInfo = strFileRecvInfo + "<br>";

        string strProgressInfo = "-";
        if ((per >= 0) && (per <= 50))
            strProgressInfo = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
        else if ((per > 50) && (per <= 100))
            strProgressInfo = XmlConf.GetTitle("T_FILERECVHSZIP_PER");           // 압축해제 및 복호화 진행률
        else
            strProgress = "-";

        strFileRecvInfo = strFileRecvInfo + strProgressInfo + " : " + strProgress;

        switch (type)
        {
            case 1:
                identifier = "fireProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFromName + " <i class='fas fa-long-arrow-alt-right p-1'></i> " + strToName;
                param[2] = strFileRecvInfo;
                pageService.SetFileRecving(true);
                //param = { strID, "업무망 <i class='fas fa-long-arrow-alt-right p-1'></i> 인터넷망", "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 1%" });
                //await JSRuntime.InvokeAsync<object>("fireProgressMessage", param);
                break;
            case 2:
                identifier = "updateProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFileRecvInfo;
                //param[1] = "문구 변경 테스트";
                param[2] = strProgress;
                //param = { strID, "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 90%", "90%" };
                // await JSRuntime.InvokeAsync<object>("updateProgressMessage", param2);
                break;
            case 3:
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFileRecving(false);
                System.Threading.Thread.Sleep(300);
                //param = { strID };
                // await JSRuntime.InvokeAsync<object>("closeProgressMessage", param3);
                break;

            case 4:             // 파일 수신 중 오류
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFileRecving(false);
                System.Threading.Thread.Sleep(300);
                //await jsRuntime.InvokeAsync<object>(identifier, param);
                // return;
                break;

            default:
                break;

        }
        await jsRuntime.InvokeAsync<object>(identifier, param);

        if (type == 3)
        {
            HsCmdCenter.SetFileRecving(groupID, false);
            //string strModulePath = System.IO.Directory.GetCurrentDirectory();
            //string strDownPath = strModulePath + "\\DownLoad";
            string strDownPath = AppConfigSvc.GetRecvDownPath(groupID);
            CLog.Here().Information("RecvDownPath : {strDownPath}", strDownPath);
            bool bOpen = AppConfigSvc.GetFileRecvFolderOpen();
            if (bOpen)
                Window.OpenFolder(strDownPath);

            string strMsg = XmlConf.GetInfoMsg("I_0208");                                                         // 파일 수신이 완료되었습니다.
            InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileRecv, "", strMsg);
        }
        else if (type == 4)
        {
            HsCmdCenter.SetFileRecving(groupID, false);
            //InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileRecv, "", XmlConf.GetInfoMsg("E_0219"));
        }

    }
}
