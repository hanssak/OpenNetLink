@using System.Collections.Generic
@using System.Runtime.InteropServices
@using OpenNetLinkApp.Models.SGHeader
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Models.SGUserInfo
@using Serilog
@using Serilog.Events
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using WebWindows
@using HsNetWorkSG
@using System.Runtime
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using HsNetWorkSGData
@using System.IO;
@using System;
@using System.Threading;
@using System.Text.Encodings;
@using OpenNetLinkApp.Pages.Transfer

@inject ISGAppManagerService SGAppMgrSvc
@inject ISGAppUpdaterService SGAppUpdaterSvc
@inject WebWindow Window
@inject HSCmdCenter HsCmdCenter
@inject XmlConfService XmlConf
@inject IJSRuntime jsRuntime
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager
@implements IDisposable

<SelectReceiveFolder @ref="refSelectReceiveFolder"></SelectReceiveFolder>
<ClipBoardTypeSelect @ref="refClipBoardTypeSelect" OnClipTypeSelect="ClipBoardTypeSelectResult"></ClipBoardTypeSelect>
<SGHeaderUI HeaderUISvc="@HeaderUISvc" UserInfoSvc="@UserInfoSvc" SideBarUISvc="@SideBarUISvc" />
<SGAlert @ref="refSGAlertApproveAfter" OnConfirm="ApproveAfterTransFile" Guid="HeaderUIApporveAfterAlert"></SGAlert>

@code
{
    ISGHeaderUIService HeaderUISvc;
    ISGSideBarUIService SideBarUISvc;
    ISGUserInfoService UserInfoSvc;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService OpConfigSvc;
    ISGVersionConfigService VersionConfigSvc;
    ISGSiteConfigService siteConfig;
    ISGNetworkService NetWorkSvc;
    SelectReceiveFolder refSelectReceiveFolder;
    ClipBoardTypeSelect refClipBoardTypeSelect;
    SGAlert refSGAlertApproveAfter;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<HeaderUI>();
    byte[] byteArray = null;
    ClipBoardData clipPreSelectedData = new ClipBoardData();

    Dictionary<string, bool> dicIPv4Num = new Dictionary<string, bool>();

    Dictionary<int, List<string>> dicExceptionUrlList = new Dictionary<int, List<string>>();
    Dictionary<int, List<string>> dicUrlList = new Dictionary<int, List<string>>();
    Dictionary<int, bool> dicBWpolicy = new Dictionary<int, bool>();
    Mutex mutex = new Mutex();

    SGSettingsDBProc sgSettingProc;
    //VirusReport refVirusReport;
    private string m_sendedUrl;
    private DateTime m_sendedTime;

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;
    private string m_sendedClipboardFilePath = String.Empty;
    List<HsStream> FileList = new List<HsStream>();

    protected override void OnInitialized()
    {
        sgSettingProc = SGSettingsDBProc.Instance;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        HeaderUISvc = SGAppMgrSvc.HeaderUIService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        UserInfoSvc = SGAppMgrSvc.UserInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;

        GetIpV4Str();
        SetPlatFormInfo();
        SGAppUpdaterSvc.Init(AppConfigSvc.GetUpdateSvcIP(), VersionConfigSvc.GetUpdatePlatform());

        HeaderUISvc.OnChangeHeader += StateHasChanged;
        /* For: Change Header UI State to be rendered according to Sidebar action */
        SideBarUISvc.OnChangeActMenu += StateHasChanged;
        UserInfoSvc.OnChangeUserInfo += StateHasChanged;

        Window.ClipBoardOccured += ClipBoardHandler;
        Window.RecvClipBoardOccured += RecvClipBoardHandler;
        Window.NavigateURLOccured += NavigateURLHandler;

        HsCmdCenter.sgPageEvent.SetServerNotiEvent(RecvServerNoti);
        HsCmdCenter.sgPageEvent.SetApproveActionNotiEvent(ApprActionNoti);
        HsCmdCenter.sgPageEvent.SetLogoutNotiEvent(LogoutAction);
        HsCmdCenter.sgPageEvent.SetChgPassWDNotiEvent(ChangePassWordNoti);
        HsCmdCenter.sgPageEvent.SetOffLineNotiEvent(OffLineNoti);
        // HsCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(AptAndVirusNoti);
        HsCmdCenter.sgPageEvent.SetAddRMHeaderEventAdd(RMHeaderNoti);

        HsCmdCenter.sgPageEvent.SetBoardNotiSearchEventAdd(BoardNotifyResult);                      // 공지사항 조회 결과.
        HsCmdCenter.sgPageEvent.SetAPTAndVirusNotiDBInsertEventAdd(AptAndVirusDBInsert);

        //HsCmdCenter.sgPageEvent.SetFileRecvProgressEventAdd(FileRecvProgress);
        HsCmdCenter.sgPageEvent.SetFileRecvProgressMasterEventAdd(FileRecvProgress);
    }

    public void Dispose()
    {
        HeaderUISvc.OnChangeHeader -= StateHasChanged;
        SideBarUISvc.OnChangeActMenu -= StateHasChanged;
        UserInfoSvc.OnChangeUserInfo -= StateHasChanged;
        Window.ClipBoardOccured -= ClipBoardHandler;
        Window.RecvClipBoardOccured -= RecvClipBoardHandler;
        Window.NavigateURLOccured -= NavigateURLHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();

            GetIpV4Str();

            //string strUserID = "";

            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
            {
                HsCmdCenter.sgPageEvent.SetRecvClipEventAdd(listNetWork[nIdx].GroupID, RecvClipBoard);
                HsCmdCenter.sgPageEvent.SetBrowserRecvUrlEventAdd(listNetWork[nIdx].GroupID, RecvUrlDatafromBrowser);
                HsCmdCenter.sgPageEvent.SetServerRecvUrlEventAdd(listNetWork[nIdx].GroupID, RecvUrlDatafromServer); // RecvUrlDatafromServer
                HsCmdCenter.sgPageEvent.SetServerURLlistEventAdd(listNetWork[nIdx].GroupID, UrlListDatafromServer);
                HsCmdCenter.sgPageEvent.SetUrlRedirectUserPolicyEventAdd(listNetWork[nIdx].GroupID, SetUrlPolicyDataToNetworkLib);

                HsCmdCenter.sgPageEvent.SetAddFIleRecvErrEventAdd(listNetWork[nIdx].GroupID, RecvFileErrInfo);
                //HsCmdCenter.sgPageEvent.SetFileForwardNotifyEventAdd(listNetWork[nIdx].GroupID, FileForwardNotify); //파일전달 알람 이벤트
                HsCmdCenter.SetUseOSMaxPath(listNetWork[nIdx].GroupID, siteConfig.GetUseOSMaxFilePath());
            }
        }
    }


    /// <summary>
    /// 클립보드 data system에 넣는 함수
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    public void RecvClipBoard(int groupid, RecvClipEventArgs e)
    {

        CLog.Here().Information($"HeaerUI - RecvClipBoard - groupID : {groupid}, Type : {e.nDataType}, ClipBoard(Original Type) Recv !!!");

        int nClipDataLen = e.ClipDataSize;
        int nType = e.nDataType;

        //byte[] clipData = new byte[nClipDataLen];
        //Array.Copy(e.ClipData, 0, clipData, 0, nClipDataLen);
        byte[] clipData = e.ClipData.ToArray();

        Window.SetClipBoardData(groupid, nType, nClipDataLen, clipData);
    }


    /// <summary>
    /// 해당 망 서버에 접속되어 있는지 유무
    /// </summary>
    /// <param name="groupid"></param>
    /// <returns></returns>
    public bool CanConnectServer(int groupid)
    {
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);

        string strErrorMsg = "";
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;

        if (listNetWork.Count > 1)
        {
            strErrorMsg = listNetWork[groupid].FromName;
            strErrorMsg += ", ";
        }

        if (strErrorMsg.Length > 0)
            strErrorMsg += XmlConf.GetErrMsg("E_0236");
        else
            strErrorMsg = XmlConf.GetErrMsg("E_0236");


        if (sgLoginData == null)
        {
            CLog.Here().Information("sgLoginData - null : {0}", groupid);
            ShowMessage("error", strErrorMsg);
            return false;
        }

        if (pageService.GetConnectStatus(groupid) == false || pageService.GetLogoutStatus(groupid))
        {
            CLog.Here().Information("{0} GetConnectStatus - false 혹은 GetLogoutStatus - true", groupid);
            ShowMessage("info", strErrorMsg);
            return false;
        }

        return true;

    }


    /// <summary>
    /// 자료 송.수신중인지 확인
    /// </summary>
    /// <param name="groupid"></param>
    /// <returns></returns>
    public bool isFileOperationDoingWithServer(int groupid)
    {

        string strErrorMsg = "";
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;

        if (listNetWork.Count > 1)
        {
            strErrorMsg = listNetWork[groupid].FromName;
            strErrorMsg += ", ";
        }

        // 파일 수신
        if (HsCmdCenter.GetFileRecving(groupid))
        {
            CLog.Here().Information("{0} GetFileRecving - true", groupid);

            if (strErrorMsg.Length > 0)
                strErrorMsg += XmlConf.GetErrMsg("E_0237");
            else
                strErrorMsg = XmlConf.GetErrMsg("E_0237");

            ShowMessage("error", strErrorMsg);
            return true;
        }

        // 파일 송신
        if (HsCmdCenter.GetFileSending(groupid))
        {
            CLog.Here().Information("{0} GetFileSending - true", groupid);

            if (strErrorMsg.Length > 0)
                strErrorMsg += XmlConf.GetErrMsg("E_0238");
            else
                strErrorMsg = XmlConf.GetErrMsg("E_0238");

            ShowMessage("error", strErrorMsg);
            return true;
        }


        return false;
    }


    /// <summary>
    /// UrlRedirection 기능 사용 유무 서버 설정 상태
    /// </summary>
    /// <param name="groupid"></param>
    /// <returns></returns>
    public bool GetUseUrlSendServer(int groupid)
    {

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);

        if (sgLoginData == null)
        {
            CLog.Here().Information($"groupID : {0} - GetUseUrlSendServer - sgLoginData null", groupid);
            return false;
        }

        return sgLoginData.GetURLRedirect();
    }


    /// <summary>
    /// UrlRedirection 기능 사용 유무 Agent 설정 상태
    /// </summary>
    /// <param name="groupid"></param>
    /// <returns></returns>
    public bool GetUseUrlSendAgent(int groupid)
    {

        CLog.Here().Information($"GetUseUrlSendAgent : {0}, groupid : {groupid}", OpConfigSvc.GetURLAutoTrans(groupid));

        return OpConfigSvc.GetURLAutoTrans(groupid);
    }

    /// <summary>
    /// URL Data 길이가 최대 값을 넘는지 확인
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    /// <returns></returns>
    public bool isUrlLengthOver(int groupid, RecvUrlEventArgs e)
    {

        if (e.strUrlData.Length >= 120 * 1024)
        {
            CLog.Here().Information($"groupID : {0} - UrlLength Over Max(120*1024) : {1}", groupid, e.strUrlData.Length);
            ShowMessage("error", XmlConf.GetErrMsg("E_0116"));
            return true;
        }

        return false;
    }


    /// <summary>
    /// URL Data를 Server로 보낸다.
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="strUserID"></param>
    /// <param name="strUrlData"></param>
    /// <returns></returns>
    public bool SendUrlData(int groupid, string strUserID, string strUrlData)
    {
        if (HsCmdCenter.SendUrlData(groupid, strUserID, strUrlData) < 0)
            return false;

        return true;
    }


    /// <summary>
    /// 사용자 ID를 알아온다.
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="strUserID"></param>
    /// <returns></returns>
    public bool GetUserID(int nGroupID, ref string strUserID)
    {

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
        if (sgLoginData == null)
            return false;

        strUserID = sgLoginData.GetUserID();

        return (strUserID.Length > 0);
    }


    /// <summary>
    /// IP인지 확인하는데 사용하는 값을 얻어온다.
    /// </summary>
    public void GetIpV4Str()
    {

        // ipV4에 들어가는 값들 초기화
        if (dicIPv4Num.Count < 1)
        {
            int nIdx = 0;
            string strIPone = "";
            for (; nIdx < 256; nIdx++)
            {
                strIPone = String.Format($"{nIdx}");
                dicIPv4Num.Add(strIPone, true);
            }
        }

    }


    /// <summary>
    /// Url에서 Domain 만 뽑아낸다
    /// </summary>
    /// <param name="strUrlData"></param>
    /// <returns></returns>
    public bool ParseUrl(ref string strUrlData)
    {
        int nPos = strUrlData.IndexOf("//");
        if (nPos >= 0)
        {
            nPos += 2;
            strUrlData = strUrlData.Substring(nPos);
        }

        String[] ListParsedData = strUrlData.Split("/");

        if (ListParsedData.Count() > 1)
            strUrlData = ListParsedData[0];

        return true;
    }


    /// <summary>
    /// URL Exception 목록에 있는지 확인
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="strUrlData"></param>
    /// <returns></returns>
    public bool isinUrlExceptionList(int nGroupID, string strUrlData)
    {

        SGUrlListData sgUrlData = null;
        sgUrlData = (SGUrlListData)HsCmdCenter.GetURLlistData(nGroupID);
        if (sgUrlData == null)
            return false;

        if (sgUrlData.GetURLexceptionlistCount() < 1)
            return false;

        string strTempUrl = strUrlData;
        int nPos = strTempUrl.IndexOf("//");
        if (nPos >= 0)
        {
            strTempUrl = strTempUrl.Substring(nPos + 2);
        }

        List<string> listUrl = new List<string>();
        if (sgUrlData.GetURLexceptionlist(ref listUrl))
        {

            string strCompareUrl = strTempUrl;
            string strLowItem = "";

            foreach (var item in listUrl)
            {

                // url이 www. 로 시작되면 이런 TYpe으로 만들어서 비교
                strCompareUrl = strTempUrl;
                strCompareUrl = strCompareUrl.ToLower();

                if (item.Length > 4 && item.Substring(0, 4) == "www.")
                {
                    if ((strCompareUrl.Length >= 4 && strCompareUrl.Substring(0, 4) != "www.") || strCompareUrl.Length < 4)
                    {
                        strCompareUrl = "www." + strCompareUrl;
                    }
                }


                if (item.Length > 0)
                {
                    strLowItem = item.ToLower();
                    if (strLowItem == strCompareUrl)
                    {
                        CLog.Here().Information($"groupID : {nGroupID} - isinUrlExceptionList Found : {strCompareUrl}");
                        return true;
                    }
                }

            }

            CLog.Here().Information($"groupID : {nGroupID} - isinUrlExceptionList Not Found : {strTempUrl}");

        }

        return false;
    }


    /// <summary>
    /// IP 형태인지 확인
    /// </summary>
    /// <param name="strUrl"></param>
    /// <returns></returns>
    public bool isIPaddr(string strUrl)
    {

        String[] listUrlOne = strUrl.Split(".");
        if (listUrlOne == null || listUrlOne.Count() > 4)
            return false;

        bool bResult = false;
        bool bIsIPv4One = false;
        int nIdx = 0;
        int nJdx = 0;

        for (; nIdx < listUrlOne.Count(); nIdx++)
        {
            bIsIPv4One = false;
            bResult = dicIPv4Num.TryGetValue(listUrlOne[0], out bIsIPv4One);
            if (bResult == false)   // 없으면, IP Type 아님
                return false;
            else
            {
                nJdx = nIdx + 1;
                if (listUrlOne[0] == "0")
                {
                    if (nJdx == 1 || nJdx == 4) // 주소중에 처음과 마지막이 0이면 도메인으로 인식
                        return false;
                }
                else if (listUrlOne[0] == "*")
                {
                    if (nJdx == 1)  // 주소중에  *가 있으면 도메인으로 인식
                        return false;
                }

            }

        }


        return true;
    }


    /// <summary>
    /// IP 형태로 Url List에 있는지 확인 - 해당 IP 대역에 있으면 List에 있는 걸로 판단(단순 '==' 비교 방식아님)
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="strUrl"></param>
    /// <returns></returns>
    public bool CheckIPAddr(int nGroupID, string strUrl)
    {

        if (strUrl.Length < 1)
            return false;

        bool bFound = false;
        SGUrlListData sgUrlData = null;
        sgUrlData = (SGUrlListData)HsCmdCenter.GetURLlistData(nGroupID);
        if (sgUrlData == null)
            return false;

        if (sgUrlData.GetURLlistCount() < 1)
            return false;

        List<string> listUrl = new List<string>();
        if (sgUrlData.GetURLlist(ref listUrl))
        {
            int nLen = strUrl.Length;
            while (true)
            {
                int nPos = strUrl.IndexOf(".");
                if (nPos < 0)
                    break;

                if (listUrl.IndexOf(strUrl) >= 0)
                    return true;

                nLen--;
                strUrl = strUrl.Substring(0, nLen);
                strUrl += "*";
            }

        }

        return bFound;
    }


    /// <summary>
    /// Url List에 있는지 확인 - (단순 '==' 비교 방식아님)
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="strUrl"></param>
    /// <returns></returns>
    public bool CheckDomain(int nGroupID, string strUrl)
    {

        if (strUrl.Length < 1)
            return false;

        if (CheckIPAddr(nGroupID, strUrl))
            return true;

        SGUrlListData sgUrlData = null;
        sgUrlData = (SGUrlListData)HsCmdCenter.GetURLlistData(nGroupID);
        if (sgUrlData == null)
            return false;

        if (sgUrlData.GetURLlistCount() < 1)
            return false;

        List<string> listUrl = new List<string>();
        if (sgUrlData.GetURLlist(ref listUrl))
        {

            // 정확하게 일치하는 목록이 있는지 확인
            int nPos = listUrl.IndexOf(strUrl);
            if (nPos >= 0)
                return true;

            // www 붙이면 같은 목록 있는지 확인
            string strCompareUrl = strUrl;
            if (strCompareUrl.IndexOf("www.") < 0)
            {
                strCompareUrl = "www." + strUrl;
                nPos = listUrl.IndexOf(strCompareUrl);
                if (nPos >= 0)
                    return true;
            }


            // "*." 붙여서 확인
            string strDomainEx = "*." + strUrl;
            string strUrlEx = "*." + strUrl;
            int len = strUrlEx.Length;
            for (int n = 0; n < len; n++)
            {
                nPos = strDomainEx.IndexOf(".");
                if (nPos < 0)
                    return false;

                nPos = listUrl.IndexOf(strDomainEx);
                if (nPos >= 0)
                    return true;

                if (n == 0)
                    strDomainEx = strUrlEx.Substring(n + 2);
                else
                    strDomainEx = strUrlEx.Substring(n + 1);

                strDomainEx = "*" + strDomainEx;
            }

        }

        return false;
    }


    /// <summary>
    /// strUrlData가 전송가능한 목록인지 유무를 알려줌 (return true:전송가능 false:전송차단)
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="strUrlData"></param>
    /// <returns></returns>
    public bool isSendUrlList(int nGroupID, string strUrlData)
    {

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
        if (sgLoginData == null)
            return false;

        CLog.Here().Information($"groupID : {nGroupID} - isSendUrlList Check : {strUrlData}");

        SGUrlListData sgUrlData = null;
        sgUrlData = (SGUrlListData)HsCmdCenter.GetURLlistData(nGroupID);
        if (sgUrlData == null)
            return false;

        eUrlType eUType = sgUrlData.GetURLuseType();
        if (eUType == eUrlType.eNone)
            return false;

        bool bisExceptionList = isinUrlExceptionList(nGroupID, strUrlData);

        if (eUType == eUrlType.eBlackList && bisExceptionList)
            return true;
        if (eUType != eUrlType.eBlackList && bisExceptionList)
            return false;

        ParseUrl(ref strUrlData);

        bool bFound = false;
        bool bIsIPType = isIPaddr(strUrlData);
        if (bIsIPType)
            bFound = CheckIPAddr(nGroupID, strUrlData);
        else
            bFound = CheckDomain(nGroupID, strUrlData);

        if (eUType == eUrlType.eWhiteList)
            return bFound;
        else
            return !bFound;

    }


    /// <summary>
    /// URL Data를 Extention 으로 부터 받아 서버로 전송하는 함수
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    public void UrlListDatafromServer(int groupid, PageEventArgs e)
    {
        CLog.Here().Information($"groupID : {groupid} - Recv UrlList from Server - result : {e.result}");

        if (e.result != 0)
        {
            CLog.Here().Information($"groupID : {groupid} - Recv UrlList from Server Failed!");
            return;
        }

        SetUrlPolicyDataToNetworkLib(groupid, true);

    }


    /// <summary>
    /// UrlList 동시 접근 문제 발생하지 않도록 Read / Write 1곳에서 처리
    /// (GetUrlListfromNetLib - true: Urlredirection 서버 정책 변경에 의한 watcher Thread에 정책반영유무, false : 사용자가 설정변경으로 인한 watcher Thread에 정책반영유무)
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="GetUrlListfromNetLib"></param>
    public void SetUrlPolicyDataToNetworkLib(int groupid, bool GetUrlListfromNetLib)
    {


        mutex.WaitOne();
        bool bListChangSave = false;

        try
        {
            // Network에서 urllist Data를 받아옴
            if (GetUrlListfromNetLib)
            {
                SGUrlListData sgUrlData = null;
                sgUrlData = (SGUrlListData)HsCmdCenter.GetURLlistData(groupid);
                if (sgUrlData == null)
                {
                    CLog.Here().Information($"groupID : {groupid} - GetURLlistData Failed!");
                    return;
                }

                eUrlType eUType = sgUrlData.GetURLuseType();
                if (eUType == eUrlType.eNone)
                {
                    CLog.Here().Information($"groupID : {groupid} - GetURLuseType Failed!");
                    return;
                }


                // WhiteList / BlackList 최신으로 적용
                bool bWBpolicy = true;  // true : WhiteList, false : BlackList
                if (dicBWpolicy.TryGetValue(groupid, out bWBpolicy))
                {
                    dicBWpolicy.Remove(groupid);

                    // white - Black 변경되면
                    if ((bWBpolicy && eUType == eUrlType.eBlackList) || (!bWBpolicy && eUType == eUrlType.eWhiteList))
                        bListChangSave = true;
                }
                else
                    bListChangSave = true;

                dicBWpolicy.Add(groupid, (eUType == eUrlType.eWhiteList));


                // urlexceptionlist 최신으로 적용
                List<string> listRecvUrlException = new List<string>();
                if (sgUrlData.GetURLexceptionlist(ref listRecvUrlException))
                {

                    List<string> listExistUrlException = null;

                    if (dicExceptionUrlList.TryGetValue(groupid, out listExistUrlException) == false)
                    {
                        // 없으면 추가
                        dicExceptionUrlList.Add(groupid, listRecvUrlException);
                        bListChangSave = true;
                    }
                    else
                    {
                        // 같지 않을때만 변경
                        if (listExistUrlException.SequenceEqual(listRecvUrlException) == false)
                        {
                            dicExceptionUrlList.Remove(groupid);
                            dicExceptionUrlList.Add(groupid, listRecvUrlException);
                            bListChangSave = true;
                        }
                    }
                }

                // urllist 최신으로 적용
                List<string> listRecvUrl = new List<string>();
                if (sgUrlData.GetURLlist(ref listRecvUrl))
                {

                    List<string> listExistUrl = null;

                    if (dicUrlList.TryGetValue(groupid, out listExistUrl) == false)
                    {
                        // 없으면 추가
                        dicUrlList.Add(groupid, listRecvUrl);
                        bListChangSave = true;
                    }
                    else
                    {
                        // 같지 않을때만 변경
                        if (listExistUrl.SequenceEqual(listRecvUrl) == false)
                        {
                            dicUrlList.Remove(groupid);
                            dicUrlList.Add(groupid, listRecvUrl);
                            bListChangSave = true;
                        }
                    }
                }
            }


            // list 정책이 변경되었거나, 사용자가 urlresirection 설정을 변경했을때에만 통신단에 정책 재설정
            if (bListChangSave || GetUrlListfromNetLib == false)
            {

                // 통신쪽에 변경된 사항들 저장
                List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
                for (int i = 0; i < listNetWork.Count; i++)
                {
                    @*            HSCmdCenter.sgPageEvent.SetSvrEventAdd(listNetWork[i].GroupID, SvrResult);
                        pageService.SetLogoutStatus(listNetWork[i].GroupID, true);*@

                    // HsNetWork GetConnectNetWork

                    if (listNetWork[i].GroupID == groupid)
                    {
                        HsNetWork hsNetWork = null;
                        hsNetWork = HsCmdCenter.GetConnectNetWork(groupid);
                        if (hsNetWork != null)
                        {
                            CLog.Here().Information($"groupID : {groupid} - UrlRedirection Policy ReSet !!!");

                            if (bListChangSave)
                                CLog.Here().Information($"groupID : {groupid} - URLLIST_Ack policy Changed !!!");
                            else if (GetUrlListfromNetLib == false)
                                CLog.Here().Information($"groupID : {groupid} - URLRedirection User policy Changed !!!");


                            bool bWBState = true;   // true:White
                            List<string> listUrlException = null;
                            List<string> listUrl = null;

                            if (dicUrlList.TryGetValue(groupid, out listUrl) &&
                                dicExceptionUrlList.TryGetValue(groupid, out listUrlException) &&
                                dicBWpolicy.TryGetValue(groupid, out bWBState))
                            {


                                // 망별주소와 Type 사용 : OpConfigSvc.GetURLAutoAfterBrowser(groupid).ElementAt(0), OpConfigSvc.GetForwardUrl(groupid)

                                bool bUseUrlRedirection = GetUseUrlSendServer(groupid);
                                CLog.Here().Information($"groupID : {groupid} -  ### UrlRedirection  Use Server policy : {bUseUrlRedirection}");

                                if (bUseUrlRedirection)
                                {
                                    bUseUrlRedirection = OpConfigSvc.GetURLAutoTrans(groupid);
                                    CLog.Here().Information($"groupID : {groupid} -  ### UrlRedirection  Use User policy : {bUseUrlRedirection}");
                                }

                                // 0x00 : White, 0x01 : Black
                                // hsNetWork
                                HsNetWorkSG.HsHttpWatcher.SetUrlList(groupid, bUseUrlRedirection,
                                    OpConfigSvc.GetURLAutoAfterBrowser(0).ElementAt(0), OpConfigSvc.GetForwardUrl(0),
                                    (dicBWpolicy[groupid] ? 0x00 : 0x01), listUrl, listUrlException);

                                CLog.Here().Information($"groupID : {groupid} -  ### UrlRedirection policy - SetUrlListis Call !!!");

                            }
                            else
                            {
                                CLog.Here().Information($"groupID : {groupid} -  ### URLLIST_Ack policy is Not received  ### UrlRedirection Can not operate !!!");
                            }

                        }

                        return;
                    }
                }

            }
            else
            {
                CLog.Here().Information($"groupID : {groupid} - URLLIST_Ack Called, But policy is Not Changed !!!");
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Information($"groupID : {groupid} -  ### SetUrlPolicyDataToNetworkLib - Exception : {ex.Message}");
        }
        finally
        {
            mutex.ReleaseMutex();
        }

    }

    private static string GetDomainPart(string url)
    {
        var doubleSlashesIndex = url.IndexOf("://");
        var start = doubleSlashesIndex != -1 ? doubleSlashesIndex + "://".Length : 0;
        var end = url.IndexOf("/", start);
        if (end == -1)
            end = url.Length;
        string trimmed = url.Substring(start, end - start);
        if (trimmed.StartsWith("www."))
            trimmed = trimmed.Substring("www.".Length);
        return trimmed;
    }

    /// <summary>
    /// URL Data를 Extention 으로 부터 받아 서버로 전송하는 함수
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    public void RecvUrlDatafromBrowser(int groupid, RecvUrlEventArgs e)
    {

        CLog.Here().Information($"groupID : {groupid} - Recv Url from Browser : {e.strUrlData}");

        // 서버에 접속되어 있는지 확인
        if (CanConnectServer(groupid) == false)
            return;

        // 파일 송.수신 중인지 확인
        if (isFileOperationDoingWithServer(groupid))
            return;

        // urlredirection을 하도록 정책설정이 되어 있는지 확인 - Server
        if (GetUseUrlSendServer(groupid) == false)
            return;

        // urlredirection을 하도록 정책설정이 되어 있는지 확인 - Agent
        if (GetUseUrlSendAgent(groupid) == false)
            return;
        //동일 도메인 전달 방지 코드 2021/03/27 YKH
        string sendUrl = GetDomainPart(e.strUrlData);
        TimeSpan span = System.DateTime.Now - m_sendedTime;
        if (sendUrl == m_sendedUrl && span.TotalSeconds < 2)
            return;
        m_sendedUrl = sendUrl;
        m_sendedTime = DateTime.Now;

        // 사용자 ID 얻기
        string strUserID = "";
        if (GetUserID(groupid, ref strUserID) == false)
            return;

        CLog.Here().Information($"groupID : {groupid} - Send Url To Server : {e.strUrlData}");

        // URL 전송
        bool bRet = SendUrlData(groupid, strUserID, e.strUrlData);
        if (bRet)
        {
            if (OpConfigSvc.GetURLAutoAfterMsg(groupid))
            {

                string strMsg = "";
                List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
                for (int i = 0; i < listNetWork.Count; i++)
                {
                    if (listNetWork[i].GroupID == groupid)
                    {
                        strMsg = listNetWork[i].ToName;
                        break;
                    }
                }

                if (strMsg.Length < 1)
                    strMsg = XmlConf.GetInfoMsg("I_0217");

                strMsg += XmlConf.GetInfoMsg("I_0216");

                ShowMessage("info", strMsg);
            }
        }

    }


    public string GetSizeStr(long size)
    {
        string rtn = "";
        if (size == 0)
        {
            rtn = "0 KB";
            return rtn;
        }

        if (size > 1024 * 1024 * 1024)
        {
            float nSize = (float)size / (1024 * 1024 * 1024);
            rtn = nSize.ToString("####0.0") + "GB";
        }
        else if (size > 1024 * 1024)
        {
            float nSize = (float)size / (1024 * 1024);
            rtn = nSize.ToString("####0.0") + "MB";
        }
        else if (size > 1024)
        {
            float nSize = (float)size / (1024);
            rtn = nSize.ToString("####0.0") + "KB";
        }
        else if (size > 0)
            rtn = size + " Byte";
        return rtn;
    }

    public void RecvFileErrInfo(int groupid, SGData e)
    {


        try
        {
            string result = e.GetSvrRecordTagData("RESULT");

            CLog.Here().Information($"RecvFileErrInfo (#####) - groupID : {groupid} - RESULT : {result} ");

            if (result == "1")
            {
                string strReason = "";
                string strMsg = "";
                string strTransSeq;
                string strPushType;

                List<Dictionary<int, string>> detailData = e.GetSvrRecordData2("RECORD");
                detailData[0].TryGetValue(0, out strTransSeq);
                detailData[0].TryGetValue(4, out strPushType);
                strReason = e.GetSvrRecordTagData("REASON");

                if (strReason == "저장소 용량 확인")
                {
                    long nFileSize = 0;
                    if (e.GetSvrRecordTagData("FILESIZE") != null && e.GetSvrRecordTagData("FILESIZE") != "")
                    {
                        nFileSize = long.Parse(e.GetSvrRecordTagData("FILESIZE"));  // 결과레코드수
                    }

                    if (nFileSize == 0)
                        strMsg = XmlConf.GetWarnMsg("W_0256");           // 파일수신 디스크용량 부족/r/n/r/n수신 디스크를 정리하여 용량을 확보해 주십시오.
                    else
                    {

                        string strFileSize = GetSizeStr(nFileSize);
                        strMsg = XmlConf.GetWarnMsg("W_0058");           // 파일수신 디스크용량 부족/r/n/r/n수신 디스크를 정리하여 용량을 확보해 주십시오./r/n/r/n필요한 디스크 용량크기 : {0}
                        strMsg = String.Format(strMsg, strFileSize, nFileSize);
                    }

                    strMsg = strMsg.Replace("/r/n", "<br>");
                    ShowMessage("error", strMsg);
                }

                else if (strReason == "파일경로 길이 초과")
                {
                    if (HsCmdCenter.GetFileRecving(groupid))
                        return;

                    // 전송파일 길이가 시스템 길이({0})보다 길어서 파일 및 폴더를 생성할 수 없습니다.<![CDATA[<br>]]>파일 수신폴더를 재설정해 주십시오.(1회적용)
                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        strMsg = string.Format(XmlConf.GetWarnMsg("W_0210"), HsCmdCenter.GetReceiveFilePathLengthMax(groupid));
                    //해당 OS에서는 전송파일길이가 시스템 길이({0}자)보다 길어 파일 및 폴더를 생성할 수 없습니다.<![CDATA[<br>]]>Window에서 수신하여 주세요
                    else
                        strMsg = string.Format(XmlConf.GetWarnMsg("W_0259"), HsCmdCenter.GetReceiveFilePathLengthMax(groupid));

                    refSelectReceiveFolder.setDesc(strMsg);

                    List<string> lstInfo = new List<string>();

                    lstInfo.Add(groupid.ToString());
                    lstInfo.Add(strTransSeq);
                    lstInfo.Add(strPushType);
                    refSelectReceiveFolder.lstInfo = lstInfo;

                    Task.Run(async () => { await refSelectReceiveFolder.openPopUp(groupid, AppConfigSvc.GetRecvDownPath(groupid)); });
                }

                // HsCmdCenter.sgPageEvent.SetFileRecvProgressEventAdd(FileRecvProgress);
                HsCmdCenter.sgPageEvent.SetFileRecvProgressMasterEventAdd(FileRecvProgress);
                return;
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Information($"groupID : {groupid} - RecvFileErrInfo(Exception) : {ex.Message}");
        }

    }

    /// <summary>
    /// URL Data를 Server로 부터 받아 처리하는 함수
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    public void RecvUrlDatafromServer(int groupid, RecvUrlEventArgs e)
    {
        CLog.Here().Information($"groupID : {groupid} - Recv Url from Server : {e.strUrlData}");

        // 받은 URL로 기본브라우져를 띄우는 동작 - 기본 웹브라우져로 실행

#if _WINDOWS

        try
        {
            if (e.strUrlData != null && e.strUrlData.Length > 0)
                System.Diagnostics.Process.Start("explorer", e.strUrlData);
        }
        catch (Exception ex)
        {
            CLog.Here().Information($"groupID : {groupid} - RecvUrlDatafromServer(Exception) : {ex.Message}");
        }

#elif _LINUX

if (e.strUrlData != null && e.strUrlData.Length > 0)
{
string strProcessName = "";
int nIdx = 0;
for(; nIdx < 2 ; nIdx++)
{
try
{
// Linux OS Type 별로
if (nIdx == 0)
strProcessName = "x-www-browser";
else if (nIdx == 1)
strProcessName = "xdg-open";

System.Diagnostics.Process.Start(strProcessName, e.strUrlData.Trim());
break;
}
catch (Exception ex)
{
CLog.Here().Information("RecvUrlDatafromServer Web Execute(groupID : {0}) - process Name : {1}, Url : {2}, err-Msg : {3}",
groupid, strProcessName, e.strUrlData, ex.Message);
}
}
}
else
{
CLog.Here().Information("RecvUrlDatafromServer Web Execute - Failed : strUrlData Empty!");
}

#elif _MACOSX

try
{
if (e.strUrlData != null && e.strUrlData.Length > 0) {
System.Diagnostics.Process.Start("open", e.strUrlData.Trim());
}
}
catch (Exception ex)
{
CLog.Here().Information($"groupID : {groupid} - RecvUrlDatafromServer(Exception) : {ex.Message}");
}

#else


#endif



    }


    /// <summary>
    /// 3중망 상황에서 클립보드 송신시 Toast Title 보내고자 하는 정보 정확하게 구함
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="strTitle"></param>
    /// <returns></returns>
    public bool GetClipboardToastTitle(int groupID, ref string strTitle)
    {

        //        if (pageService.m_str3NetDestSysID.Length < 1)
        //            return false;

        Dictionary<string, SGNetOverData> dicDestSysPos = null;
        dicDestSysPos = pageService.GetTargetSystemList(groupID);
        if (dicDestSysPos == null || dicDestSysPos.Count < 2)
            return false;


        string strFromName = "";
        string strToName = "";
        String[] listNetOverPolicy = pageService.m_str3NetDestSysID.Split("/");

        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        strTitle = strFromName;
        strTitle += " → ";


        if (listNetOverPolicy.Count() < 2)
        {
            //strTitle += XmlConf.GetTitle("T_TRANS_NETOVER_ALL");


            bool bGetTagetNetName = false;
            string strTargetSysid = "";
            int nPos = -1;

            nPos = pageService.m_str3NetDestSysID.IndexOf(",");
            if (nPos > 1)
            {
                strTargetSysid = pageService.m_str3NetDestSysID.Substring(0, nPos);

                if (strTargetSysid.Length > 0)
                {
                    foreach (var item in dicDestSysPos)
                    {
                        if (item.Value.strDestSysid == strTargetSysid)
                        {
                            strTargetSysid = item.Key;
                            bGetTagetNetName = true;
                            break;
                        }
                    }
                }
            }
            else
            {
                // m_str3NetDestSysID 길이가 0 이거나 단축키로만 여기 왔을때

                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 1)
                    {
                        strTargetSysid = item.Key;
                        bGetTagetNetName = true;
                        break;
                    }
                }
            }

            if (bGetTagetNetName)
                strTitle += strTargetSysid;
            else
                strTitle += XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
        }
        else
        {
            strTitle += XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
        }

        return true;
    }


    /// <summary>
    /// 클립보드 보내고 Message 및 Toast 등 UI 표현
    /// </summary>
    /// <param name="ret"></param>
    /// <param name="clipData"></param>
    public void SendClipBoardAfterMsg(int ret, ClipBoardData clipData)
    {

        if (ret >= 0)
        {
            CLIPALM_TYPE clipAlarmType = AppConfigSvc.GetClipAlarmType();
            string strText = XmlConf.GetInfoMsg("I_0032");                      // 클립보드를 전송하였습니다.
            if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.UI))
                ShowMessage("info", strText);
            OS_NOTI os_noti = OS_NOTI.CLIPBOARD;

            // string strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
            string strTitle = "";

            Dictionary<string, SGNetOverData> dicDestSysPos = null;
            dicDestSysPos = pageService.GetTargetSystemList(clipData.nGroupId);

            if (dicDestSysPos == null || dicDestSysPos.Count < 2)
                strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);  // 원래 표시하던 방식
            else
            {
                // strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
                if (GetClipboardToastTitle(clipData.nGroupId, ref strTitle) == false)   // 3망전송 표시 방식
                    strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
            }


            if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.OS))
            {
                if (HsCmdCenter.GetFileRecvPossible(clipData.nGroupId) == true)
                    Window.Notification(os_noti, strTitle, strText);
            }
            SendDayClipInfo(clipData.nGroupId);

            InsertMessage(NOTI_TYPE.USER, clipData.nGroupId, LSIDEBAR.MENU_CATE_ROOT, eMsgType.eMsgClipSend, "", strText);
        }

    }

    /// <summary>
    /// 단축키로 3망 설정상황에서 클립보드 전송시도시 클립보드 보낼 정책값 설정
    /// </summary>
    /// <param name="clipData"></param>
    /// <param name="strDestNetOverData"></param>
    /// <returns></returns>
    public bool GetClipboardPolicyNetOverHotKeyUse(ref ClipBoardData clipData, ref string strDestNetOverData)
    {

        int nNetIndex = 0;
        SGLoginData sgLoginData = null;

        // 3망 상에서 단축키로 클립보드 보낸 Case
        if (clipData.nGroupId <= 99)
            return false;

        nNetIndex = clipData.nGroupId / 100;
        clipData.nGroupId = clipData.nGroupId % 100;

        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipData.nGroupId);

        if (sgLoginData != null && sgLoginData.GetUseOverNetwork2())
        {

            Dictionary<string, SGNetOverData> dicDestSysPos = null;
            dicDestSysPos = pageService.GetTargetSystemList(clipData.nGroupId);

            if (dicDestSysPos != null && dicDestSysPos.Count > 1 && nNetIndex > 0)
            {

                if (nNetIndex == 1) // Both 전송 단축키로 실행
                {
                    // 모든 systemID 설정해서 전달

                    foreach (var item in dicDestSysPos)
                    {
                        if (item.Value.nIdx == 1)
                        {
                            strDestNetOverData += item.Value.strDestSysid;
                            strDestNetOverData += ",";
                            strDestNetOverData += item.Value.strPolicy;
                        }

                        if (item.Value.nIdx > 1)
                        {
                            strDestNetOverData += ",";
                            strDestNetOverData += item.Value.strPolicy;
                        }
                    }

                    // '/'구분자로 2곳이상에 전달
                    strDestNetOverData += "/";

                    // 2번째 망에 전송 정책 설정 : "E101,31,31,0"
                    foreach (var item in dicDestSysPos)
                    {
                        if (item.Value.nIdx == 2)
                        {
                            strDestNetOverData += item.Value.strDestSysid;
                            break;
                        }
                    }

                    // 모든망별 정책값 추가
                    foreach (var item in dicDestSysPos)
                    {
                        if (item.Value.nIdx != 0)
                        {
                            // 망마다 정책정보 설정
                            strDestNetOverData += ",";
                            strDestNetOverData += item.Value.strPolicy;
                        }
                    }

                }
                else
                {
                    nNetIndex--;
                    // 해당 systemID만 설정해서 전달

                    foreach (var item in dicDestSysPos)
                    {
                        if (item.Value.nIdx == nNetIndex)
                        {
                            strDestNetOverData = item.Value.strDestSysid;
                            break;
                        }
                    }

                    foreach (var item in dicDestSysPos)
                    {
                        if (item.Value.nIdx > 0)
                        {
                            strDestNetOverData += ",";
                            strDestNetOverData += item.Value.strPolicy;
                        }
                    }

                }

                pageService.m_str3NetDestSysID = strDestNetOverData;

            }

        }



        return true;
    }

    /// <summary>
    /// 클립보드 전송전에 클립보드 일일 및 일회 전송 Size Check하는 함수
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="nClipSize"></param>
    /// <returns></returns>
    private int CheckClipBoardSendSize(int nGroupID, int nClipSize)
    {

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
        if (sgLoginData == null)
            return -1;

        string strMsg = "";

        if (pageService.GetDayClipboardSizeEnable(nGroupID, nClipSize) != true)
        {

            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{nGroupID}, SendFailed - Msg : DayClipboardSize Over Status!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(nGroupID);

            bool bFilePreView = pageService.GetDayInfoPrev(nGroupID);
            if (bFilePreView == true)
            {
                DayClipChangeNotiEvent dayClipChange = null;
                dayClipChange = HsCmdCenter.sgPageEvent.GetDayClipChangeNotiEvent(nGroupID);
                if (dayClipChange == null)
                    return -1;

                dayClipChange(nGroupID);
            }
            strMsg = XmlConf.GetErrMsg("E_0109");    // 클립보드의 일일 전송 사이즈를 초과했습니다./r/n클립보드는 일일 최대 {0}MB까지 전송할 수 있습니다.
            Int64 ClipMaxSize = pageService.GetDayClipMaxSize(nGroupID);
            strMsg = String.Format(strMsg, ClipMaxSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return -1;
        }


        Int64 MaxClipSize = sgLoginData.GetClipboardLimitSize();
        if (MaxClipSize > 0 && (MaxClipSize * 1024 * 1024) < (Int64)nClipSize)
        {

            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{nGroupID}, SendFailed - Msg : ClipboardLimitSize Over Status!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(nGroupID);

            strMsg = XmlConf.GetErrMsg("E_0101");    // 전송하고자 하는 클립보드의 데이터가 전송 제한을 초과하였습니다./r/n클립보드는 최대 {0}MB까지 전송할 수 있습니다.
            strMsg = String.Format(strMsg, MaxClipSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return -1;
        }

        return 0;
    }

    /// <summary>
    /// 클립보드 선택전송 기능(상황)으로 선택된 클립보드 전송 <br/>
    /// eUserSelectClipType : UI에서 사용자가 선택한 clipType
    /// </summary>
    /// <param name="eUserSelectClipType"></param>
    private void ClipBoardTypeSelectResult(CLIPTYPE eUserSelectClipType)
    {

        CLog.Here().Information($"HeaderUI - ClipBoardTypeSelectResult - (GroupID:{clipPreSelectedData.nGroupId}) (###########) : {eUserSelectClipType}");

        if (pageService.GetDayClipboardCountEnable(clipPreSelectedData.nGroupId) != true)
        {
            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipPreSelectedData.nGroupId}, SendFailed - Msg : DayClipboardCount Over Status!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipPreSelectedData.nGroupId);
            Window.SetClipSendFlag(clipPreSelectedData.nGroupId);

            string strMsg = XmlConf.GetErrMsg("E_0110");    // 클립보드의 일일 전송 횟수를 초과했습니다./r/n클립보드는 일일 최대 {0}번까지 전송할 수 있습니다.
            int ClipMaxCount = pageService.GetDayClipMaxCount(clipPreSelectedData.nGroupId);
            strMsg = String.Format(strMsg, ClipMaxCount);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);

            return;
        }

        if (eUserSelectClipType == CLIPTYPE.NONE)
        {
            CLog.Here().Information($"ClipBoard - ClipBoardHandler - SelectSend - UserCancel !");
            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipPreSelectedData.nGroupId);
            //ShowMessage("info", XmlConf.GetInfoMsg("I_0171"));   // 클립보드 전송이 취소 되었습니다.
            ShowMessage("warn", XmlConf.GetWarnMsg("W_0260"));   // 클립보드 전송이 취소 되었습니다.

            // 클립보드 선택전송 중간에 다른 클립보드 전송하려할때, 차단하는거 해제
            Window.SetClipSendFlag(clipPreSelectedData.nGroupId);
            return;
        }

        // 클립보드
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipPreSelectedData.nGroupId);
        string strUserID = sgLoginData.GetUserID();
        string clipFilePath = String.Empty;
        int nClipSize = 0;

        // Native에서 image를 먼저 저장함(code상에)
        nClipSize = (eUserSelectClipType == CLIPTYPE.IMAGE ? clipPreSelectedData.nLength : clipPreSelectedData.nExLength);
        if (nClipSize < 1)
        {
            CLog.Here().Information($"ClipBoard - Send( Empty ClipData Send Failed - UserSelectSend ) : 0kb!");
            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipPreSelectedData.nGroupId);
            ShowMessage("error", XmlConf.GetErrMsg("E_0244"));   // 빈 클립보드를 보낼 수 없습니다.

            // 클립보드 선택전송 중간에 다른 클립보드 전송하려할때, 차단하는거 해제
            Window.SetClipSendFlag(clipPreSelectedData.nGroupId);
            return;
        }

        if (eUserSelectClipType == CLIPTYPE.IMAGE)    // Native에서 image를 먼저 저장함(code상에)
        {
            byteArray = new byte[clipPreSelectedData.nLength];
            Marshal.Copy(clipPreSelectedData.pMem, byteArray, 0, clipPreSelectedData.nLength);
        }
        else
        {
            // CLIPTYPE.TEXT - Native Code 상에
            byteArray = new byte[clipPreSelectedData.nExLength];
            Marshal.Copy(clipPreSelectedData.pExMem, byteArray, 0, clipPreSelectedData.nExLength);
        }


        // ClipBoard Size Check
        if (CheckClipBoardSendSize(clipPreSelectedData.nGroupId, nClipSize) < 0)
        {
            // 클립보드 선택전송 중간에 다른 클립보드 전송하려할때, 차단하는거 해제
            Window.SetClipSendFlag(clipPreSelectedData.nGroupId);
            return;
        }

        SendClipBoardTry(clipPreSelectedData, eUserSelectClipType, nClipSize);

        // 클립보드 선택전송 중간에 다른 클립보드 전송하려할때, 차단하는거 해제
        Window.SetClipSendFlag(clipPreSelectedData.nGroupId);

    }


    /// <summary>
    /// 클립보드 전송 / 선택전송에서 다 호출하는 클립보드 전송에 사용되는 함수 <br/>
    /// eClipType : 사용자가 선택한 ClipType <br/>
    /// nClipSize : 사용자가 선택한 Clip 크기
    /// </summary>
    /// <param name="clipData"></param>
    /// <param name="eClipType"></param>
    /// <param name="nClipSize"></param>
    public void SendClipBoardTry(ClipBoardData clipData, CLIPTYPE eClipType, int nClipSize)
    {

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipData.nGroupId);
        string strUserID = sgLoginData.GetUserID();
        string clipFilePath = String.Empty;

        // Clipboard 선택전송에서 UI가 떠있는 상태에서 다시 Disconnect될 수도 있으므로 다시 체크
        string strMsg = "";
        if (pageService.GetConnectStatus(clipData.nGroupId) == false)
        {

            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipData.nGroupId}, SendFailed - Msg : Disconnect Status!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipData.nGroupId);

            strMsg = XmlConf.GetErrMsg("E_0242");           // 현재 오프라인 상태입니다./r/n로그인 및 접속후 사용 가능합니다.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (SGAppMgrSvc.SiteConfigInfoService.GetUseClipBoardFileTrans(clipData.nGroupId))
        {

            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipData.nGroupId}, FileTrans Type Send !!!");

            // 파일전송 권한이 없으면 클립보드도 못보냄, error 메세지와 함께 return;
            @*if (sgLoginData.GetFileTrans() == false)
                {
                    CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipData.nGroupId}, SendFailed - Msg : Disconnect Status!");

                    // Native에 할된 Memory 제거
                    Window.ClipDataFree(clipData.nGroupId);

                    ShowMessage("error", XmlConf.GetErrMsg("E_0245"));
                    return;
                }*@

            clipFilePath = SaveClipboardToFile(clipData, byteArray, eClipType);
            _curFileName = clipFilePath;
            _curGroupId = clipData.nGroupId;


            if (siteConfig.GetClipBoardApproveAfterLimit(clipData.nGroupId))
            {
                CheckApproveAfterLimit(clipData.nGroupId);
                return;
            }
            else
            {
                if (clipFilePath.Length > 1)
                {
                    //파일전송
                    FileTrans(clipData.nGroupId, MakeStream(clipFilePath));
                }


                // Native에 할당된 Memory 제거
                Window.ClipDataFree(clipData.nGroupId);
                Task.Delay(1000).Wait(); //서버에서 클립보드 테이블에 언제 Insert 하는지 몰라서 Delay를 주고 조회
                SendDayClipInfo(clipData.nGroupId);
                return;
            }
        }

        int ret = 0;
        if (pageService.m_str3NetDestSysID.Length < 1)
        {

            @*if (clipData.nType == CLIPTYPE.TEXT2IMG1SEL)    // 선택전송
                    ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)eClipType, nClipSize, byteArray);
                else
                    ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);  // 보통 일반전송*@

            // Clipboard Data 실제 전송하는 부분 ( 선택 / 일반 전송 포함 )
            ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)eClipType, nClipSize, byteArray);
        }
        else
        {

            String[] listNetOverPolicy = pageService.m_str3NetDestSysID.Split("/");

            if (listNetOverPolicy.Count() < 2)
            {
                // Clipboard Data 실제 전송하는 부분
                @*if (clipData.nType == CLIPTYPE.TEXT2IMG1SEL)    // 선택전송
                        ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)eClipType, (eClipType == CLIPTYPE.IMAGE ? clipData.nLength : clipData.nExLength), byteArray);
                    else
                        ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);  // 보통 일반전송*@

                // Clipboard Data 실제 전송하는 부분 ( 선택 / 일반 전송 포함 )
                ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)eClipType, nClipSize, byteArray);
            }
            else
            {
                int nIdx = 0;
                int nTempRet = 0;
                for (; nIdx < listNetOverPolicy.Count(); nIdx++)
                {
                    if (listNetOverPolicy[nIdx].Length > 0)
                    {

                        // Clipboard Data 실제 전송하는 부분
                        @*if (clipData.nType == CLIPTYPE.TEXT2IMG1SEL)    // 선택전송
                                //ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)eClipType, (eClipType == CLIPTYPE.IMAGE ? clipData.nLength : clipData.nExLength), byteArray);
                                nTempRet = HsCmdCenter.SendClipboard(clipData.nGroupId, listNetOverPolicy[nIdx], strUserID, 1, 1, (int)eClipType, (eClipType == CLIPTYPE.IMAGE ? clipData.nLength : clipData.nExLength), byteArray);
                            else
                                nTempRet = HsCmdCenter.SendClipboard(clipData.nGroupId, listNetOverPolicy[nIdx], strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);*@

                        // Clipboard Data 실제 전송하는 부분 ( 선택 / 일반 전송 포함 )
                        ret = HsCmdCenter.SendClipboard(clipData.nGroupId, listNetOverPolicy[nIdx], strUserID, 1, 1, (int)eClipType, nClipSize, byteArray);

                        if (nTempRet < 0)
                            ret = nTempRet;
                        else if (ret >= 0)      // SendClipboard 한번 실패하면, 아래에서 Message 띄우지 않음.
                            ret = nTempRet;
                    }
                }
            }

        }

        // Native에 할된 Memory 제거
        Window.ClipDataFree(clipData.nGroupId);

        SendClipBoardAfterMsg(ret, clipData);

        pageService.m_str3NetDestSysID = "";
    }

    private int _curGroupId = 0;
    private string _curFileName = String.Empty;

    public void ApproveAfterTransFile(string arg)
    {
        if (arg == "1")
        {
            if (!String.IsNullOrEmpty(_curFileName))
            {
                FileTrans(_curGroupId, MakeStream(_curFileName));
            }

            // Native에 할당된 Memory 제거
            Window.ClipDataFree(_curGroupId);
            Task.Delay(1000).Wait(); //서버에서 클립보드 테이블에 언제 Insert 하는지 몰라서 Delay를 주고 조회
            SendDayClipInfo(_curGroupId);
            return;
        }
    }

    public void ResultApproveAfter(int groupId, object[] e)
    {
        SGData sgData = e[0] as SGData;

        List<Dictionary<int, string>> result = sgData.GetSvrRecordData("RECORD");

        bool checkWarring = false;
        bool checkLimit = false;

        string message = String.Empty;
        message = String.Format(XmlConf.GetWarnMsg("W_0275"), result[0][7]);

        foreach (Dictionary<int, string> dic in result)
        {
            message += String.Format(XmlConf.GetWarnMsg("W_0276"), $"{dic[2]} {dic[3]}", dic[4]);

            if (dic[6] != "0")
            {
                checkWarring = true;
                message += String.Format(XmlConf.GetWarnMsg("W_0277"), dic[6]);
            }
            if (dic[5] != "0")
            {
                checkLimit = true;
                message += String.Format(XmlConf.GetWarnMsg("W_0277"), dic[5]);
            }
        }

        if (checkLimit)
        {
            refSGAlertApproveAfter.openPopUp(XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK"), message, 1, groupId, "2");
            return;
        }

        if (checkWarring)
        {
            refSGAlertApproveAfter.openPopUp(XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK"), message, 1, groupId, "1");
            return;
        }

        if (!String.IsNullOrEmpty(_curFileName))
        {
            FileTrans(_curGroupId, MakeStream(_curFileName));
        }

        // Native에 할당된 Memory 제거
        Window.ClipDataFree(_curGroupId);
        Task.Delay(1000).Wait(); //서버에서 클립보드 테이블에 언제 Insert 하는지 몰라서 Delay를 주고 조회
        SendDayClipInfo(_curGroupId);
        return;

    }

    /// <summary>
    /// WinClipboardLibrary 에서 등록한 키 누르면 실제 실행되는 함수(WebWindow.Native에서 클립보드 데이타를 추출 후 ClipBoardHandler 이벤트 호출된다)
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="clipData"></param>
    public void ClipBoardHandler(object sender, ClipBoardData clipData)
    {
        SGLoginData sgLoginData = null;
        string strDestNetOverData = "";
        CLog.Here().Information($"CliBoard - ClipBoardHandler - Policy(GroupID:{clipData.nGroupId}) : {pageService.m_str3NetDestSysID}");

        // 3망 상에서 단축키로 클립보드 보낸 Case
        if (clipData.nGroupId > 99)
        {
            pageService.m_str3NetDestSysID = "";
            if (GetClipboardPolicyNetOverHotKeyUse(ref clipData, ref strDestNetOverData))
                pageService.m_str3NetDestSysID = strDestNetOverData;
        }

        if (!pageService.GetUseClipBoard(clipData.nGroupId))
        {

            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipData.nGroupId}, SendFailed - Msg : No Use Clipboard Policy!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipData.nGroupId);
            return;
        }

        string strMsg = "";
        if (pageService.GetConnectStatus(clipData.nGroupId) == false)
        {

            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipData.nGroupId}, SendFailed - Msg : Disconnect Status!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipData.nGroupId);

            strMsg = XmlConf.GetErrMsg("E_0242");           // 현재 오프라인 상태입니다./r/n로그인 및 접속후 사용 가능합니다.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        CLog.Here().Information($"CliBoard - ClipBoardHandler - GetConnectStatus(true) - GroupID:{clipData.nGroupId}");

        if (pageService.GetDayClipboardCountEnable(clipData.nGroupId) != true)
        {
            CLog.Here().Information($"CliBoard - ClipBoardHandler - GroupID:{clipData.nGroupId}, SendFailed - Msg : DayClipboardCount Over Status!");

            // Native에 할된 Memory 제거
            Window.ClipDataFree(clipData.nGroupId);

            strMsg = XmlConf.GetErrMsg("E_0110");    // 클립보드의 일일 전송 횟수를 초과했습니다./r/n클립보드는 일일 최대 {0}번까지 전송할 수 있습니다.
            int ClipMaxCount = pageService.GetDayClipMaxCount(clipData.nGroupId);
            strMsg = String.Format(strMsg, ClipMaxCount);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);

            return;
        }

        // 클립보드
        CLIPTYPE eClipType = CLIPTYPE.NONE;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipData.nGroupId);
        string strUserID = sgLoginData.GetUserID();
        int nClipSize = 0;

        if (clipData.nType == CLIPTYPE.TEXT2IMG1SEL)
        {

            // image & Text 중에 선택 송신
            CLog.Here().Information($"ClipBoard - ClipBoardHandler - SelectSend - openPopUp: {clipData.nGroupId}");

            try
            {
                clipPreSelectedData = clipData;
                refClipBoardTypeSelect.openPopUp();
            }
            catch (Exception Aerr)
            {
                CLog.Here().Information($"ClipBoard - ClipBoardHandler - SelectSend - Exception-MSG: {Aerr.Message}");
            }

            return;

        }
        else
        {

            if (clipData.nLength < 1)
            {
                CLog.Here().Information($"ClipBoard - Send( Empty ClipData Send Failed ) : 0kb!");
                // Native에 할된 Memory 제거
                Window.ClipDataFree(clipData.nGroupId);
                ShowMessage("error", XmlConf.GetErrMsg("E_0244"));   // 빈 클립보드를 보낼 수 없습니다.
                return;
            }

            eClipType = clipData.nType;
            nClipSize = clipData.nLength;
            byteArray = new byte[clipData.nLength];
            Marshal.Copy(clipData.pMem, byteArray, 0, clipData.nLength);
        }

        if (CheckClipBoardSendSize(clipData.nGroupId, nClipSize) < 0)
            return;

        //클립보드 결재 옵션이 켜진경우 내용을 파일로 저장하고 파일전송으로 진행한다.
        //Clipboard 실제 전송(HSCmdCenter)  2021/06/08 YKH 클립보드 승인이 켜져 있는 경우는 클립보드 내용을 파일로 남기고 그파일을 전송하는 옵션이 추가됨

        //ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        //if (AppConfigSvc.GetClipboardFileTransUse())


        SendClipBoardTry(clipData, eClipType, nClipSize);

    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="stPath"></param>
    /// <returns></returns>
    private HsStream MakeStream(string stPath)
    {
        System.IO.FileInfo fInfo = new System.IO.FileInfo(stPath);
        FileAttributes attr = fInfo.Attributes;
        HsStream hsStream = new HsStream();

        hsStream.FileName = fInfo.Name;
        hsStream.Type = fInfo.Attributes.ToString();
        hsStream.StartPath = "";
        hsStream.RelativePath = fInfo.Name;
        hsStream.Size = fInfo.Length;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
        }
        else
        {
            hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
        }
        if (fInfo.Name.LastIndexOf(".") > -1)
            hsStream.Type = fInfo.Name.Substring(fInfo.Name.LastIndexOf(".") + 1);
        else
            hsStream.Type = "";

        hsStream.ModifyTime = fInfo.LastWriteTime;
        DateTime SubDate = (DateTime)hsStream.ModifyTime;
        string strSubDate = SubDate.ToShortDateString();
        strSubDate = strSubDate.Replace("-", "");
        string strSubTime = String.Format("{0,2:D2}{1,2:D2}{2,2:D2}", SubDate.Hour, SubDate.Minute, SubDate.Second);
        hsStream.MTime = strSubDate + strSubTime;
        hsStream.IsDir = false;
        hsStream.MemoryType = HsStreamType.FileStream;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            hsStream.RelativePath = hsStream.RelativePath.Replace("/", "\\");
        }
        else
        {
            hsStream.RelativePath = hsStream.RelativePath.Replace("\\", "/");
        }

        try
        {
            hsStream.stream = File.OpenRead(fInfo.FullName);
        }
        catch
        {
            CLog.Here().Information($"fileName : [{hsStream.FileName}] File Access deny!");
            hsStream.stream = null;
            return null;
        }
        return hsStream;
    }

    public void FileTransProgress(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {

            CLog.Here().Information($"HeaderUI - FileTransProgress - GroupID:{groupID} - Error(result-number) : {e.result}");

            HsCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0239");           // 클립보드 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            if (FileList.Count > 0)
            {
                FileList[0].stream.Close();
                FileList.Clear();
            }
            if (File.Exists(m_sendedClipboardFilePath))
                File.Delete(m_sendedClipboardFilePath);
            return;
        }
        if (e.count == -100)
        {
            HsCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0240");           // 클립보드 압축/암호화 도중 오류가 발생하였습니다.
            ShowMessage("error", strMsg);
            if (FileList.Count > 0)
            {
                FileList[0].stream.Close();
                FileList.Clear();
            }
            if (File.Exists(m_sendedClipboardFilePath))
                File.Delete(m_sendedClipboardFilePath);
            return;
        }
        if (e.count == -200)
        {
            HsCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0239");           // 클립보드 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            if (FileList.Count > 0)
            {
                FileList[0].stream.Close();
                FileList.Clear();
            }
            if (File.Exists(m_sendedClipboardFilePath))
                File.Delete(m_sendedClipboardFilePath);
            return;
        }
        if (e.count >= 100)
        {

            CLog.Here().Information($"HeaderUI - FileTransProgress - GroupID:{groupID} - Progress : {e.count}");

            strMsg = XmlConf.GetInfoMsg("I_0032");   // 클립보드를 전송하였습니다.
            ShowMessage("info", strMsg);

            if (FileList.Count > 0)
            {
                FileList[0].stream.Close();
                FileList.Clear();
            }
            if (File.Exists(m_sendedClipboardFilePath))
                File.Delete(m_sendedClipboardFilePath);
        }
        return;
    }

    /// <summary>
    /// 클립보드 파일형태로 전송하는 함수
    /// </summary>
    /// <param name="stream"></param>
    private void FileTrans(int groupId, HsStream stream)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = groupId;
        //if (sgSideBar != null)
        //    groupID = sgSideBar.GroupId;

        HsCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupID, FileTransProgress);

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = UserInfoSvc.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HsCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        string strUserID = sgLoginData.GetUserID();
        string strMid = sgLoginData.GetTagData("MID");
        string strPolicyFlag = sgLoginData.GetTagData("POLICYFLAG");
        string strTitle = ""; //DateTime.Now.ToString("yyyyMMddHHmsss") + " " + XmlConf.GetTitle("T_MENU_CLIPBOARD_SEND");

        bool bApprSendMail = false;
        bool bAfterApprove = false;
        int nDlp = 0;
        string strRecvPos = "0";
        string strZipPasswd = "";
        bool bPrivachApprove = false;
        string strSecureString = "";
        string strDataType = "1";               // 0 : 파일 전송, 1 : Text, 2 : bmp
        if (stream.Type == "txt")
        {
            strDataType = "1";
            strTitle = XmlConf.GetTitle("T_COMMON_CLIPBOARD_TEXT");
        }
        else if (stream.Type == "bmp")
        {
            strDataType = "2";
            strTitle = XmlConf.GetTitle("T_COMMON_CLIPBOARD_IMAGE");
        }
        else
        {
            strDataType = "1";
            strTitle = XmlConf.GetTitle("T_COMMON_CLIPBOARD_ETC");
        }

        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        string strUserSeq = sgUserData.UserSeq;

        List<string> ApprLineSeq = null;
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        string stApprLineSeq = sgApprLineData.GetApprAndLineSeqString(strUserSeq, strApprStep);
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 ||
            (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) ||
            siteConfig.GetUseClipBoardNoApproveButFileTrans())
            stApprLineSeq = "";

        // 클립보드 파일전송의 사후결재 설정
        if (siteConfig.GetClipUseAfterApprove() == 0)             // checkBox 설정따라 - 사용자선택따라(작업진행중...미완료상태)
            bAfterApprove = pageService.GetAfterApproveCheck(groupID);
        else if (siteConfig.GetClipUseAfterApprove() == 1)        // 사전
            bAfterApprove = false;
        else if (siteConfig.GetClipUseAfterApprove() == 2)        // 사후
            bAfterApprove = true;
        else
            bAfterApprove = pageService.GetAfterApproveCheck(groupID);

        // Vip / 전결재자 / 결재미사용 / 클립보드만결재없이전송 / 사후결재사용시간아님 / 결재라인이없을때(전결재자아닌데,결재자가없는상태-결재자선택강요없는설정)(작업진행중...미완료상태), 사전결재전송 강제
        if (stApprLineSeq == "" || pageService.GetAfterApprChkHide(groupID))
            bAfterApprove = false;


        FileList.Add(stream);
        Int64 TotalFileSize = stream.Size;

        @*FileAddManage fileAddManage = new FileAddManage();
            strTitle = fileAddManage.GetConvertTitleDesc(true, strTitle);
            strContents = fileAddManage.GetConvertTitleDesc(true, strContents);*@

        //수신자 목록체크(철자틀림)
        string stReceiver = "";
        string strDestNetOverData = "";
        int ret = HsCmdCenter.SendFileTrans(groupID, strUserID, strMid, strPolicyFlag, strTitle, strTitle, bApprSendMail, bAfterApprove, nDlp, strRecvPos, strZipPasswd, bPrivachApprove, strSecureString, strDataType, nApprStep, stApprLineSeq, FileList, strDestNetOverData, stReceiver);
        if (ret == -2)
        {
            string strMsg = "";
            strMsg = XmlConf.GetErrMsg("E_0162");
            ShowMessage("error", strMsg);
            return;
        }
    }

    private void CheckApproveAfterLimit(int groupID)
    {

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HsCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        bool bAfterApprove = false;
        if (siteConfig.GetClipUseAfterApprove() == 0)             // checkBox 설정따라 - 사용자선택따라(작업진행중...미완료상태)
            bAfterApprove = pageService.GetAfterApproveCheck(groupID);
        else if (siteConfig.GetClipUseAfterApprove() == 1)        // 사전
            bAfterApprove = false;
        else if (siteConfig.GetClipUseAfterApprove() == 2)        // 사후
            bAfterApprove = true;
        else
            bAfterApprove = pageService.GetAfterApproveCheck(groupID);

        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserData.UserSeq;
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        string stApprLineSeq = sgApprLineData.GetApprCommaSeqString(strUserSeq);
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false))
            stApprLineSeq = "";

        // Vip / 전결재자 / 결재미사용 / 사후결재사용시간아님 일때, 사전결재전송 강제
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || pageService.GetAfterApprChkHide(groupID))
            bAfterApprove = false;

        if (!String.IsNullOrEmpty(stApprLineSeq) && bAfterApprove)
        {
            //사후 결재일때 결재자 사후 결재 카운트 체크
            SGQueryExtend sGQueryExtend = new SGQueryExtend();
            string sql = sGQueryExtend.GetApproveAfterCount(stApprLineSeq, Common.Enums.EnumApproveTime.After);

            HsCmdCenter.sgPageEvent.SetQueryReciveEvent(groupID, eCmdList.eAPPROVEAFTERCOUNT, ResultApproveAfter);
            HsCmdCenter.CommonSendQuery(eCmdList.eAPPROVEAFTERCOUNT, groupID, sgLoginData.GetUserID(), sql);
        }
        else
        {
            if (!String.IsNullOrEmpty(_curFileName))
            {
                FileTrans(_curGroupId, MakeStream(_curFileName));
            }

            // Native에 할당된 Memory 제거
            Window.ClipDataFree(_curGroupId);
            Task.Delay(1000).Wait(); //서버에서 클립보드 테이블에 언제 Insert 하는지 몰라서 Delay를 주고 조회
            SendDayClipInfo(_curGroupId);
        }
    }

    public string SaveClipboardToFile(ClipBoardData clipData, byte[] ClipData, CLIPTYPE eClipUserSelectType)
    {
        string mtime = DateTime.Now.ToString("yyyyMMddHHmsss");
        string dirPath = Path.Combine(System.Environment.CurrentDirectory, "clipboard");
        string FileName = String.Empty;
        if (Directory.Exists(dirPath) == false) Directory.CreateDirectory(dirPath);


        if (clipData.nType == CLIPTYPE.TEXT2IMG1SEL)
        {
            if (eClipUserSelectType == CLIPTYPE.IMAGE)
            {
                // 사용자가 image 전송 선택

                FileName = Path.Combine(dirPath, DateTime.Now.ToString("yyyyMMddHHmsss") + ".bmp");
                FileStream fs = new FileStream(FileName, FileMode.CreateNew);
                BinaryWriter bw = new BinaryWriter(fs);
                bw.Write(ClipData, 0, clipData.nLength);
                bw.Close();
                fs.Close();

            }
            else if (eClipUserSelectType == CLIPTYPE.TEXT)
            {
                // 사용자가 Text 전송 선택

                FileName = Path.Combine(dirPath, DateTime.Now.ToString("yyyyMMddHHmsss") + ".txt");

                @*//string strTemp = System.Text.Encoding.Unicode.GetString(ClipData);
                    string strTemp = System.Text.Encoding.UTF8.GetString(ClipData);
                    FileStream fs = new FileStream(FileName, FileMode.CreateNew);
                    using StreamWriter file = new StreamWriter(fs, System.Text.Encoding.Unicode);
                    //file.WriteAsync(strTemp);
                    file.Write(strTemp);
                    file.Close();*@

                FileStream fs = new FileStream(FileName, FileMode.CreateNew);
                BinaryWriter bw = new BinaryWriter(fs);
                bw.Write(ClipData, 0, clipData.nExLength);
                bw.Close();
                fs.Close();
            }
        }
        else if (clipData.nType == CLIPTYPE.TEXT)
        {
            FileName = Path.Combine(dirPath, DateTime.Now.ToString("yyyyMMddHHmsss") + ".txt");

            @*//string strTemp = System.Text.Encoding.Unicode.GetString(ClipData);
                string strTemp = System.Text.Encoding.UTF8.GetString(ClipData);
                FileStream fs = new FileStream(FileName, FileMode.CreateNew);
                using StreamWriter file = new StreamWriter(fs, System.Text.Encoding.Unicode);
                //file.WriteAsync(strTemp);
                file.Write(strTemp);
                file.Close();*@

            FileStream fs = new FileStream(FileName, FileMode.CreateNew);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(ClipData, 0, clipData.nLength);
            bw.Close();
            fs.Close();

        }
        else if (clipData.nType == CLIPTYPE.IMAGE)
        {
            FileName = Path.Combine(dirPath, DateTime.Now.ToString("yyyyMMddHHmsss") + ".bmp");
            FileStream fs = new FileStream(FileName, FileMode.CreateNew);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(ClipData, 0, clipData.nLength);
            bw.Close();
            fs.Close();
        }
        else
            return FileName;

        m_sendedClipboardFilePath = FileName;
        return FileName;
    }

    /// <summary>
    /// 클립보드 data 수신되었음을 사용자에게 알려주는 함수(설정대로 동작함)
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="groupID"></param>
    public void RecvClipBoardHandler(object sender, int groupID)
    {

        //////////////////////////
        @*        RecvUrlEventArgs args = new RecvUrlEventArgs();
            args.strUrlData = "https://www.hanssak.co.kr";
            RecvUrlDatafromBrowser(groupID, args);*@
        //////////////////////////


        CLog.Here().Information($"HeaerUI - RecvClipBoardHandler - groupID : {groupID}, To User Message View");

        CLIPALM_TYPE clipAlarmType = AppConfigSvc.GetClipAlarmType();
        string strText = XmlConf.GetInfoMsg("I_0193");                         // 클립보드를 수신받았습니다.
        if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.UI))
            ShowMessage("info", strText);
        OS_NOTI os_noti = OS_NOTI.CLIPBOARD;

        // string strTitle = XmlConf.GetNetworkTitle(groupID);
        // 단말망 -> 업무망
        string strFromNet = "";
        string strToNet = "";
        XmlConf.GetNetworkTitle(groupID, out strFromNet, out strToNet);
        string strTitle = strToNet + " → " + strFromNet;

        if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.OS))
        {
            if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
                Window.Notification(os_noti, strTitle, strText);
        }

        InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_ROOT, eMsgType.eMsgClipRecv, "", strText);
    }

    public void FileForwardNotify(int groupid, SGData e)
    {
        string strForwardCount = e.GetSvrRecordTagData("FORWARDCOUNT");

        if (string.IsNullOrEmpty(strForwardCount)) return;
        string strText = XmlConf.GetInfoMsg("I_0084");                         // N건의 전송받을 데이터가 있습니다.
        strText = String.Format(strText, strForwardCount);

        OS_NOTI os_noti = OS_NOTI.WAIT_FILE;

        // string strTitle = XmlConf.GetNetworkTitle(groupID);
        // 단말망 -> 업무망
        string strFromNet = "";
        string strToNet = "";
        XmlConf.GetNetworkTitle(groupid, out strFromNet, out strToNet);
        string strTitle = strToNet + " → " + strFromNet;

        if (HsCmdCenter.GetFileRecvPossible(groupid) == true)
            Window.Notification(os_noti, strTitle, strText);

        InsertMessage(NOTI_TYPE.USER, groupid, LSIDEBAR.MENU_CATE_ROOT, eMsgType.eMsgFileWait, "", strText);
    }

    // SGSideBarUI 와 동일
    public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        // ChangeActiveMenuWrap
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
    }

    public void NavigateURLHandler(object sender, string navURI)
    {
        int nGroupID = 0;
        string strGroupID = "";
        string strMenuName = "";

        CLog.Here().Information("Toast-Click-navURI : {0}", navURI);

        int nPos = -1;
        bool bChangedMenu = false;

        try
        {

            // 왼쪽 SideBar Navigate 되는 곳으로 선택되게 적용
            nPos = navURI.LastIndexOf('/');
            if (nPos > 0 && navURI.Length > 3 && nPos < navURI.Length - 1)
            {
                strGroupID = navURI.Substring(nPos + 1);
                nGroupID = Convert.ToInt32(strGroupID);

                // 결재권한이 있을때에만 결재관리로 넘어가게 적용가능
                /*SGLoginData sgLoginData = null;
                SGUserData sgUserData = null;
                sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(nGroupID);
                sgUserData = (SGUserData)HsCmdCenter.GetUserData(nGroupID);
                bool bApprMenuUse = false;

                if (sgLoginData != null && sgUserData != null)
                {
                    // if (sgLoginData.GetApprove() == true)   // 3망 Mode가 상관없이 Login때 사용하는 결재 권한으로 결재관리 조회 UI 생성

                    // 3망 정책고려한 결재사용유무 설정
                    if (pageService.GetUseApproveNetOver(nGroupID, sgLoginData) && SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI() == false)
                        if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                            bApprMenuUse = true;
                }*/

                KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                eventArgs.Key = "Enter";

                // 결재관리 확인 - 선택변경
                strMenuName = "transferApprove";
                nPos = navURI.IndexOfAny(strMenuName.ToCharArray());
                ISGSideBarUI activeMenu = null;
                if (nPos > 0)
                //if (nPos > 0 && bApprMenuUse)
                {
                    activeMenu = SideBarUISvc.FindSubMenu(nGroupID, 0, 2);

                    if (activeMenu != null)
                    {
                        ChangeActiveMenuWrap(eventArgs, activeMenu);
                        bChangedMenu = true;
                    }
                }

                if (bChangedMenu == false)
                {
                    // 전송관리 확인 - 선택변경
                    strMenuName = "transManage";
                    nPos = navURI.IndexOfAny(strMenuName.ToCharArray());
                    if (nPos > 0)
                    {
                        activeMenu = SideBarUISvc.FindSubMenu(nGroupID, 0, 1);
                        if (activeMenu != null)
                        {
                            ChangeActiveMenuWrap(eventArgs, activeMenu);
                            bChangedMenu = true;
                        }
                    }
                }

                // 기능 동작하나 위에 방식 사용
                /*if (nPos > 0 && pageService.m_approveMenuArray[nGroupID] != null)
                {
                    SideBarUISvc.ChgActiveMenu(eventArgs, pageService.m_approveMenuArray[nGroupID]);
                    bChangedMenu = true;
                }

                if (bChangedMenu == false)
                {
                    // 전송관리 확인 - 선택변경
                    strMenuName = "transManage";
                    nPos = navURI.IndexOfAny(strMenuName.ToCharArray());
                    if (nPos > 0 && pageService.m_TransMenuArray[nGroupID] != null)
                    {
                        SideBarUISvc.ChgActiveMenu(eventArgs, pageService.m_TransMenuArray[nGroupID]);
                        bChangedMenu = true;
                    }
                }*/

            }

        }
        catch (Exception e)
        {
            CLog.Here().Information("Toast-Click-Navigate-Exception(Msg) : {0}", e.Message);
        }

        if (bChangedMenu)
            MyNavigationManager.NavigateTo(navURI);

    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    public void RecvServerNoti(int groupID, eCmdList cmd, PageEventArgs e)
    {
        OS_NOTI os_noti = ConvertCmd(cmd);
        string naviURI = "";
        if (os_noti == OS_NOTI.WAIT_APPR)
        {
            bool bUseApprWaitNoti = OpConfigSvc.GetUseApprWaitNoti();
            if (!bUseApprWaitNoti)
                return;

            if (SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI())
            {
                CLog.Here().Information("OS_NOTI.WAIT_APPR - But OpConfig is NoApproveManageUI - No insert Alarm : {0}",
                    SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI().ToString());
                return;
            }

            if (!pageService.GetSFMChecking())
            {
                SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
                if (sgLoginData == null)
                    return;
                ISGUserInfo sgUserData = UserInfoSvc.GetUserInfo(groupID);

                if (sgLoginData.GetApproveProxyRight() && sgUserData.GetUserApprPos() == 0)
                {
                    SFMRefreshEvent sfmRefreshEvent = HsCmdCenter.sgPageEvent.GetSFMRefreshEvent();
                    if (sfmRefreshEvent != null)
                    {
                        sfmRefreshEvent();
                    }
                }
            }

            naviURI = "/transferApprove/";
            naviURI += groupID.ToString();
        }
        else if (os_noti == OS_NOTI.NOTICE)
        {
            string strBoardHash = e.strMsg;
            string strPrevBoardHash = pageService.GetBoardHash(groupID);
            if (!strBoardHash.Equals(""))
            {
                pageService.SetBoardHash(groupID, strBoardHash);
                BoardNotifySearch();
                return;
            }
        }

        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = NotiMsgMake(cmd, e);
        if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
            Window.Notification(os_noti, strTitle, strMsg, naviURI);

        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
            return;

        eAlarmType eAType = sgMsgData.GetConvertOSNotiAlarmTitle(os_noti);
        LSIDEBAR sidebar = sgMsgData.GetConvertOSNotiMenuCategory(os_noti);

        InsertAlarm(groupID, sidebar, eAType, "", strMsg);
        //InsertAlarm(groupID, sidebar, eAType, naviURI, strMsg);
    }


    public void ApprActionNoti(int groupID, eCmdList cmd, ApproveActionEventArgs e)
    {
        OS_NOTI os_noti = ConvertCmd(cmd, e.Action);
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = NotiMsgMake(cmd, e);
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
            return;

        eAlarmType eAType = sgMsgData.GetConvertOSNotiAlarmTitle(os_noti);
        LSIDEBAR sidebar = sgMsgData.GetConvertOSNotiMenuCategory(os_noti);
        InsertAlarm(groupID, sidebar, eAType, "", strMsg);
        if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
            Window.Notification(os_noti, strTitle, strMsg);
    }


    public OS_NOTI ConvertCmd(eCmdList cmd, int Action = 0)
    {
        OS_NOTI os_noti = (OS_NOTI)0;
        switch (cmd)
        {
            case eCmdList.eAPPROVECOUNT:
                os_noti = OS_NOTI.WAIT_APPR;
                break;

            case eCmdList.eEMAILAPPROVENOTIFY:
                os_noti = OS_NOTI.MAIL_APPR;
                break;

            case eCmdList.eAPPROVEACTIONNOTIFY:
                if (Action == 1)
                    os_noti = OS_NOTI.CONFIRM_APPR;
                else if (Action == 2)
                    os_noti = OS_NOTI.REJECT_APPR;
                break;

            case eCmdList.eBOARDNOTIFY:
                os_noti = OS_NOTI.NOTICE;
                break;

            default:
                break;
        }
        return os_noti;
    }

    public string NotiMsgMake(eCmdList cmd, EventArgs e)
    {
        string strMsg = "";
        switch (cmd)
        {
            case eCmdList.eAPPROVECOUNT:
                strMsg = XmlConf.GetInfoMsg("I_0052");                      // 새로운 승인 요청자료가 있습니다.
                break;

            case eCmdList.eEMAILAPPROVENOTIFY:
                strMsg = XmlConf.GetInfoMsg("I_0098");                      // 새로운 메일승인 요청자료가 {0}건 존재합니다.
                PageEventArgs pEventArgs = (PageEventArgs)e;
                strMsg = String.Format(strMsg, pEventArgs.count);
                break;

            case eCmdList.eAPPROVEACTIONNOTIFY:
                ApproveActionEventArgs apprActionArgs = (ApproveActionEventArgs)e;
                if (apprActionArgs.Action == 1)
                {
                    strMsg = XmlConf.GetInfoMsg("I_0152");                  // 승인 되었습니다./r/n제목 : {0}
                }
                else if (apprActionArgs.Action == 2)
                {
                    strMsg = XmlConf.GetInfoMsg("I_0151");                  // 반려 되었습니다./r/n제목 : {0}
                }
                strMsg = String.Format(strMsg, apprActionArgs.strTitle);
                strMsg = strMsg.Replace("/r/n", "\n");
                break;

            case eCmdList.eVIRUSSCAN:
            case eCmdList.eAPTSCAN:
                AptAndVirusEventArgs aptAndVirusArgs = (AptAndVirusEventArgs)e;
                string strTransSeq = aptAndVirusArgs.strTransSeq;
                string strTitle = aptAndVirusArgs.strTitle;
                string strContent = aptAndVirusArgs.strMsg;
                strMsg = XmlConf.GetWarnMsg("W_0089");                                      // 전송 파일에 바이러스가 발견 되었습니다./r/n/r/n제목 : {0}/r/n바이러스내역 : {1}/r/n/r/n전송관리의 상세보기에서 확인하십시오.
                strMsg = String.Format(strMsg, strTitle, strContent);
                break;

            default:
                break;
        }
        return strMsg;
    }


    public void SendDayClipInfo(int groupId)
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = groupId;
        //if (sgSideBar != null)
        //    groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HsCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }

    /// <summary>
    /// 서버에서 Logout CMD 받았을때 처리함수
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    public void LogoutAction(int groupID, PageEventArgs e)
    {

        /*SGSettingData sgSettingData = null;
        sgSettingData = sgSettingProc.SelectSettingData(groupID);
        if (sgSettingData == null)
            return;
        sgSettingProc.SetSettingAutoLogin(groupID, false);*/

        List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
        int count = listNetWork.Count;


        ShowMessage("warn", e.strMsg);

        // 통신쪽 Logout 처리
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        if (pageService.GetConnectStatus(groupID))
            HsCmdCenter.SendLogOut(groupID, strUserID);


        pageService.SetInitApprLine(groupID, false);
        pageService.SetLoadApprBaseLine(groupID, false);
        pageService.SetConnectStatus(groupID, false);
        pageService.SetLogoutStatus(groupID, true);

        @*        HsNetWork hsNetWork = null;
            hsNetWork = HsCmdCenter.GetConnectNetWork(groupID);
            if (hsNetWork != null)
        *@

        CLog.Here().Information($"groupID : {groupID} - Logout CMD Recv from Server, UrlRedirection LogOut State ReSet !!!");
        HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupID, false);


        // UI쪽 Logout 처리
        SideBarUISvc.DeleteMenuAllButRoot(groupID);

        // Page 이동
        int i = 0;
        ISGSideBarUI activeMenu = null;
        for (; i < count; i++)
        {

            if (pageService.GetLogoutStatus(listNetWork[i].GroupID) == false)
            {

                KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                eventArgs.Key = "Enter";

                //activeMenu = SideBarUISvc.FindSubMenu(listNetWork[i].GroupID, 0, 0);
                activeMenu = SideBarUISvc.FindRootMenu(listNetWork[i].GroupID);
                if (activeMenu != null)
                {
                    ChangeActiveMenuWrap(eventArgs, activeMenu);
                    MyNavigationManager.NavigateTo(activeMenu.Path);
                }

                break;
            }

        }

        if (i < count)
            return;

        jsRuntime.InvokeAsync<object>("beforeLogOut");

        // Main.razor에서 판단해서 동작
        MyNavigationManager.NavigateTo("/LogIn/Logout");

        /*pageService.SetLoginComplete(groupID, false);
        pageService.SetInitApprLine(groupID, false);
        pageService.SetLoadApprBaseLine(groupID, false);
        pageService.SetConnectStatus(groupID, false);
        pageService.SetLogoutStatus(groupID, true);

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        string strUserID = sgLoginData.GetUserID();
        HsCmdCenter.SendLogOut(groupID, strUserID);

        if (groupID == 0)
            MyNavigationManager.NavigateTo("/LogIn");*/

    }

    public void ChangePassWordNoti(int groupID, PageEventArgs e)
    {
        ePassWDType epType = pageService.GetPassWDChgType(groupID);
        if (epType == ePassWDType.eNone)
            return;

        switch (epType)
        {
            case ePassWDType.eINITPASSWDCHG:
                InitPassWDCHGEvent initPassWDChgEvent = null;
                initPassWDChgEvent = pageService.GetInitPassWDCHGEvent(groupID);
                if (initPassWDChgEvent == null)
                    break;
                initPassWDChgEvent(groupID, e);
                break;
            case ePassWDType.eDAYPASSWDCHG:
                DayPassWDCHGEvent dayPassWDChgEvent = null;
                dayPassWDChgEvent = pageService.GetDayPassWDCHGEvent(groupID);
                if (dayPassWDChgEvent == null)
                    break;
                dayPassWDChgEvent(groupID, e);
                break;
            case ePassWDType.eUSERPASSWDCHG:
                UserPassWDCHGEvent userPassWDChgEvent = null;
                userPassWDChgEvent = pageService.GetUserPassWDCHGEvent(groupID);
                if (userPassWDChgEvent == null)
                    break;
                userPassWDChgEvent(groupID, e);
                break;
            default:
                break;
        }
    }

    public async void OffLineNoti(int groupID)
    {

        // 통신쪽에서 계속 Offline됐다고 Noti 보내주는 것으로 보임
        if (pageService.GetConnectStatus(groupID) == false)
            return;

        pageService.SetConnectStatus(groupID, false);
        pageService.SetLogoutStatus(groupID, true);

        CLog.Here().Information($"groupID : {groupID} - Offline Noti from NetworkLib, UrlRedirection LogOut State ReSet !!!");
        HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupID, false);


        @*
            // UI 메뉴들 삭제
            SideBarUISvc.DeleteMenuAllButRoot(groupID);

            // Page 이동
            int i = 0;
            List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
            int count = listNetWork.Count;

            ISGSideBarUI activeMenu = null;
            for (; i < count; i++)
            {

                if (pageService.GetLogoutStatus(listNetWork[i].GroupID) == false)
                {

                    KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                    eventArgs.Key = "Enter";

                    //activeMenu = SideBarUISvc.FindSubMenu(listNetWork[i].GroupID, 0, 0);
                    activeMenu = SideBarUISvc.FindRootMenu(listNetWork[i].GroupID);
                    if (activeMenu != null)
                    {
                        ChangeActiveMenuWrap(eventArgs, activeMenu);
                        MyNavigationManager.NavigateTo(activeMenu.Path);
                    }

                    break;
                }

            }*@


        OS_NOTI os_noti = OS_NOTI.OFFLINE;
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = XmlConf.GetInfoMsg("I_0198");               // 오프라인 되었습니다.
        if (HsCmdCenter.GetFileRecvPossible(groupID) == true)
            Window.Notification(os_noti, strTitle, strMsg, "");
        await jsRuntime.InvokeAsync<object>("closeAllPopup");

    }

    /*
    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;
        bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);
        await refVirusReport.openPopUp();

    }
    */



    /// <summary>
    /// 우클릭한 파일에서 groupID 값 찾아내기
    /// </summary>
    /// <param name="strRMouseFilePath"></param>
    /// <param name="groupID"></param>
    /// <returns></returns>
    public bool GetGroupIDfromRList(string strRMouseFilePath, ref int groupID)
    {

        System.IO.FileInfo fileInfo = new System.IO.FileInfo(strRMouseFilePath);
        if (fileInfo.Exists == false)
            return false;


        string strFilePathList = System.IO.File.ReadAllText(strRMouseFilePath);
        string[] strArray = strFilePathList.Split('\n').ToArray();
        if (strArray.Count() == 0)
            return false;

        int nCount = 0;

        foreach (var item in strArray)
        {
            if (nCount == 0 && item.Length > 0)
            {
                groupID = Convert.ToInt32(item);
                return true;
            }
        }

        return false;

    }


    /// <summary>
    /// 우클했을때, 실행되는 함수 - groupID 무조건 0으로 넘어옴
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    public void RMHeaderNoti(int groupID, PageEventArgs e)
    {

        CLog.Here().Information("RMHeaderNoti : {0}", groupID);

        // 우클릭 목록파일 확인
        @*        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
            if (GetGroupIDfromRList(strRMouseFilePath, ref groupID) == false)
            {
                CLog.Here().Information("RMHeaderNoti-Get Real-GroupID Failed");
                return;
            }
            CLog.Here().Information("RMHeaderNoti-Real-GroupID : {0}", groupID);*@

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0235"));
            CLog.Here().Information("RMHeaderNoti-sgLoginData null : Not Login!");
            return;
        }

        if (pageService.GetLogoutStatus(groupID))
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0235"));
            CLog.Here().Information($"RMHeaderNoti- GetLogoutStatus - GroupID : {groupID}");
            return;
        }

        ISGSideBarUI activeMenu = null;
        activeMenu = SideBarUISvc.FindSubMenu(groupID, 0, 0);
        if (activeMenu != null)
        {

            KeyboardEventArgs eventArgs = new KeyboardEventArgs();
            eventArgs.Key = "Enter";

            ChangeActiveMenuWrap(eventArgs, activeMenu);

            // activeMenu.Path
            CLog.Here().Information($"RMHeaderNoti-GroupID : {groupID}");


            AddFileRMEvent addFileRM_Event = HsCmdCenter.sgPageEvent.GetAddFileRMEvent(groupID);
            if (addFileRM_Event != null)
            {
                addFileRM_Event(groupID, e);

                CLog.Here().Information($"RMHeaderNoti-GroupID : {groupID}, Add Processed!");
            }


            // 다른화면에서 우클릭 이벤트 발생 시 RClickFileTrans로 이동 - 파일전송 도잉ㄹ GroupID 일때에만 화면이동없음
            string strWithGroupID = "/" + groupID.ToString();
            if (MyNavigationManager.Uri.Contains("/Transfer", StringComparison.OrdinalIgnoreCase) &&
                MyNavigationManager.Uri.Contains(strWithGroupID, StringComparison.OrdinalIgnoreCase))
            {
                CLog.Here().Information($"RMHeaderNoti-GroupID : {groupID}, {MyNavigationManager.Uri} Contain '/Transfer' ");
            }
            else
            {
                CLog.Here().Information($"RMHeaderNoti-GroupID : {groupID}, Uri : {MyNavigationManager.Uri}");
                MyNavigationManager.NavigateTo("/RCLickFileMid/" + groupID.ToString());  // activeMenu.Path
            }

            // groupID에 따라서 다른 Page 부름 - 첨부까지는 됨.
            @*if (groupID== 0)
                    MyNavigationManager.NavigateTo("/Transfer/0");
                else
                    MyNavigationManager.NavigateTo("/Transfer2/1");*@
        }

        //string strCurFileSendInfo = pageService.GetCurFileSendInfo(groupID);
        //MyNavigationManager.NavigateTo(strCurFileSendInfo);

        //아래 주석 내용 2189라인으로 이동 => 하단에서 우클릭 GetAddFile이벤트를 받다 보니 화면이 이동 된 후 파일리스트를 못보여줌
        /*
                Task.Delay(1000);
                AddFileRMEvent addFileRM_Event = HsCmdCenter.sgPageEvent.GetAddFileRMEvent(groupID);
                if (addFileRM_Event != null)
                {
                    addFileRM_Event(groupID, e);
                }
        */
    }

    public void SetPlatFormInfo()
    {
        System.OperatingSystem osInfo = System.Environment.OSVersion;
        CLog.Here().Information("Platform: {0:G}", osInfo.Platform);
        CLog.Here().Information("Version String: {0}", osInfo.VersionString);
        CLog.Here().Information("Version Information: Major - {0} , Minor - {1} , Service Pack - '{2}'", osInfo.Version.Major, osInfo.Version.Minor, osInfo.ServicePack);

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            VersionConfigSvc.SetUpdatePlatform("windows");
        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
        {
            VersionConfigSvc.SetUpdatePlatform("mac");
        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
        {
            if (File.Exists("/etc/system-release"))
                VersionConfigSvc.SetUpdatePlatform("redhat");
            else if (File.Exists("/etc/lsb-release"))
                VersionConfigSvc.SetUpdatePlatform("debian");
            else
                VersionConfigSvc.SetUpdatePlatform("debian");
        }
    }

    public void BoardNotifySearch()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            return;
        }
        string strUserID = sgLoginData.GetUserID();
        SGQueryExtend sgQueryExtend = new SGQueryExtend();
        string strQuery = sgQueryExtend.GetSGNotify(strUserID);
        HsCmdCenter.SendBoardNotiSearch(groupID, strUserID, strQuery);
    }


    public void BoardNotifyResult(int groupid, PageEventArgs e)
    {
        SGData sgData = null;
        sgData = HsCmdCenter.GetBoardNoti(groupid);
        if (sgData == null)
        {
            return;
        }

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData == null)
            return;
        string strUserSeq = sgUserData.GetUserSequence();

        AllDeleteDBBoardNoti(groupid, strUserSeq);

        SGMsgData sgMsgData = new SGMsgData();

        string strResultData = sgData.GetBasicTagData("RECORD");

        if (strResultData.Equals(""))
        {
            return;
        }
        string[] strResult = strResultData.Split('\u0003');

        for (int i = 0; i < strResult.Length; i++)
        {
            string[] strSubResult = strResult[i].Split('\u0001');

            string strNotiSeq = strSubResult[0];                        // 공지사항 Seq.
            string strHead = strSubResult[1];                           // 공지사항 제목.
            string strNotiContent = strSubResult[2];                    // 공지사항 내용.
            SQLiteDB.InsertNotiInfo(NOTI_TYPE.SYSTEM, groupid, strUserSeq, strNotiSeq, LSIDEBAR.MENU_CATE_ROOT, "", "", strHead, strNotiContent);
        }
        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupid);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupid);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupid);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupid);

        BoardNotiAfterTotalBoardEvent boardNotiAfterTotalBoard = null;
        boardNotiAfterTotalBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterTotalBoardEvent();
        if (boardNotiAfterTotalBoard != null)
            boardNotiAfterTotalBoard(groupid);
        /*
        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HsCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
        */
    }

    public void AllDeleteDBBoardNoti(int groupID, string strUserSeq)
    {
        int DataCount = 0;
        DataCount = SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.SYSTEM, groupID, strUserSeq);
        if (DataCount <= 0)
            return;

        List<SGNotiData> listNotiData = null;
        listNotiData = SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.SYSTEM, groupID, strUserSeq, 1000);
        if ((listNotiData == null) || (listNotiData.Count <= 0))
            return;

        SGMsgData sgMsgData = new SGMsgData();
        string strHead = sgMsgData.GetConvertMessageTitle(eMsgType.eMsgBoardNoti);

        for (int i = 0; i < listNotiData.Count; i++)
        {
            if (!listNotiData[i].Seq.Equals("0"))
            {
                SGNotiData sgNotiData = listNotiData[i];
                SQLiteDB.DeleteNotiInfo(sgNotiData);
            }
        }
    }

    public void InsertAlarm(int groupID, LSIDEBAR menuCategory, eAlarmType eAlarmType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertAlarmTitle(eAlarmType);
        string strAlarmContent = body;
        SQLiteDB.InsertAlarmInfo(groupID, strUserSeq, menuCategory, path, "", strHead, strAlarmContent);

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        AlarmNotiAfterDashBoardEvent alarmNotiAfterDashBoard = null;
        alarmNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetAlarmNotiAfterDashBoardEvent(groupID);
        if (alarmNotiAfterDashBoard != null)
            alarmNotiAfterDashBoard(groupID);

        NotiAfterTotalAlarmEvent NotiAfterAlarm = null;
        NotiAfterAlarm = HsCmdCenter.sgPageEvent.GetNotiAfterTotalAlarmEvent();
        if (NotiAfterAlarm != null)
            NotiAfterAlarm();
    }

    public void InsertMessage(NOTI_TYPE type, int groupID, LSIDEBAR menuCategory, eMsgType eMsgType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertMessageTitle(eMsgType);
        string strNotiContent = body;
        SQLiteDB.InsertNotiInfo(type, groupID, strUserSeq, "0", menuCategory, path, "", strHead, strNotiContent);   // KKW

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HsCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }

    public void AptAndVirusDBInsert(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strMsg = "";
        string strFileTransTitle = e.strTitle;

        eAlarmType eAType = eAlarmType.eNone;
        if (cmd == eCmdList.eVIRUSSCAN)
        {
            strMsg = XmlConf.GetWarnMsg("W_0253");              // 전송파일에 바이러스가 발견되었습니다.(제목 : {0})
            eAType = eAlarmType.eAlarmVirus;
        }
        else
        {
            strMsg = XmlConf.GetWarnMsg("W_0254");              // 전송파일에 악성코드가 검출되었습니다.(제목 : {0})
            eAType = eAlarmType.eAlarmApt;
        }

        strMsg = String.Format(strMsg, strFileTransTitle);

        InsertAlarm(groupID, LSIDEBAR.MENU_CATE_FILE, eAType, "", strMsg);
    }

    /// <summary>
    /// 파일수신후 특정 동작을 하는 함수(클립보드인지 판별해서 클립보드로 올려줌)
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    public void FileRecvAfterOperation(int groupID, RecvDataEventArgs e)
    {

        if (e.strDataType == ((int)FrameType.CLipTxt).ToString() ||
            e.strDataType == ((int)FrameType.CLipImg).ToString() ||
            e.strDataType == ((int)FrameType.CLipObj).ToString())
        {
            CLog.Here().Information($"HeaerUI - FileRecvAfterOperation - groupID : {groupID} - ClipBoard Recv !!!");

            RecvClipEventArgs clipArgs = new RecvClipEventArgs();

            // DataType
            int nDataType = Convert.ToInt32(e.strDataType);
            if (nDataType == (int)FrameType.CLipTxt)
                clipArgs.nDataType = (int)ClipDataType.DataTypeTxt;
            else if (nDataType == (int)FrameType.CLipImg)
                clipArgs.nDataType = (int)ClipDataType.DataTypeImg;
            else if (nDataType == (int)FrameType.CLipObj)
                clipArgs.nDataType = (int)ClipDataType.DataTypeObj;

            // ClipBoard Data 넣기

            try
            {
                byte[] pbyte = null;

                using (FileStream fs = new FileStream(e.strFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                {
                    pbyte = new byte[fs.Length];
                    clipArgs.ClipDataSize = (int)fs.Length;
                    fs.Read(pbyte, 0, (int)fs.Length);
                    fs.Close();
                    clipArgs.ClipData = pbyte;
                    File.Delete(e.strFilePath);
                }

                RecvClipBoard(groupID, clipArgs);

                CLog.Here().Information($"HeaerUI - FileRecvAfterOperation - groupID : {groupID} - Done(File To Clipboard)");
            }
            catch (Exception err)
            {
                CLog.Here().Information($"HeaerUI - FileRecvAfterOperation - groupID : {groupID} - Exception(File To Clipboard) - Msg : {err.Message}");
            }
        }

    }

    /// <summary>
    /// 파일수신할때 진행상태정보를 통신Lib에서 받는 함수
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    public void FileRecvProgress(int groupID, RecvDataEventArgs e)
    {

        string strFromName = "";
        string strToName = "";

        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        string strMsg = "";
        if (e.result != 0)
        {
            if (e.strDataType == ((int)FrameType.File).ToString() ||
                (e.strDataType == null || e.strDataType == "" || e.strDataType == ((int)FrameType.Dir).ToString()))
                strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            else if (e.strDataType == ((int)FrameType.CLipTxt).ToString() ||
                e.strDataType == ((int)FrameType.CLipImg).ToString() ||
                e.strDataType == ((int)FrameType.CLipObj).ToString())
                strMsg = XmlConf.GetErrMsg("E_0241");           // 클립보드 수신 중 오류가 발생되었습니다.

            ShowMessage("error", strMsg);
            ShowProgress(groupID, 4, 100, strFromName, strToName, e);
            return;
        }

        int per = e.count;

        if (per == -100)
        {
            strMsg = XmlConf.GetErrMsg("E_0221");           // 수신 파일 압축해제 및 복호화 도중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ShowProgress(groupID, 4, 100, strFromName, strToName, e);
            return;
        }
        if (per == -200)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ShowProgress(groupID, 4, 100, strFromName, strToName, e);
            return;
        }
        int type = 0;
        if (per >= 100)
        {

            CLog.Here().Information($"HeaerUI - FileRecvProgress(End) - groupID : {groupID} - Result : {e.result}, transSeq: {e.strMsg}, FileName: {e.strFilePath}, Frame.Type: {e.strDataType}");

            type = 2;
            ShowProgress(groupID, type, 100, strFromName, strToName, e);
            Task.Delay(500);
            type = 3;                                       // close
                                                            // HSCmdCenter.SetFileRecving(groupID, false);
            FileRecvAfterOperation(groupID, e);

        }
        else if (per == 0)
        {

            CLog.Here().Information($"HeaerUI - FileRecvProgress(Start) - groupID : {groupID} - Result : {e.result}, transSeq: {e.strMsg}, FileName: {e.strFilePath}, Frame.Type: {e.strDataType}");

            bool bRecving = false;
            bRecving = HsCmdCenter.GetFileRecving(groupID);
            if (bRecving == true)
                return;

            type = 1;                                        // open
            HsCmdCenter.SetFileRecving(groupID, true);
        }
        else if ((per > 0) && (per < 100))
        {
            type = 2;                                       // update
            HsCmdCenter.SetFileRecving(groupID, true);
        }
        else
            return;

        ShowProgress(groupID, type, per, strFromName, strToName, e);
    }

    // type : 1 - open , 2 - update ,3 -close
    private async void ShowProgress(int groupID, int type, int per, string strFromName, string strToName, RecvDataEventArgs e)
    {
        object[] param = { };
        string identifier = "";
        string strID = groupID.ToString();
        strID = "RECV" + strID + e.strMsg;   // e.strMsg == strTransSeq
        string strProgress = String.Format("{0}%", per);
        string strFileRecvInfo = XmlConf.GetInfoMsg("I_0097");              // 파일수신 중입니다./r/n수신이 완료될 때까지 기다려 주십시오.
        strFileRecvInfo = strFileRecvInfo.Replace("/r/n", "<br>");
        strFileRecvInfo = strFileRecvInfo + "<br>";

        string strProgressInfo = "-";
        if ((per >= 0) && (per <= 50))
            strProgressInfo = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
        else if ((per > 50) && (per <= 100))
            strProgressInfo = XmlConf.GetTitle("T_FILERECVHSZIP_PER");           // 압축해제 및 복호화 진행률
        else
            strProgress = "-";

        strFileRecvInfo = strFileRecvInfo + strProgressInfo + " : " + strProgress;

        switch (type)
        {
            case 1:
                identifier = "fireProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFromName + " <i class='fas fa-long-arrow-alt-right p-1'></i> " + strToName;
                param[2] = strFileRecvInfo;
                pageService.SetFileRecving(true);
                await Task.Delay(100);
                break;
            case 2:
                identifier = "updateProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFileRecvInfo;
                param[2] = strProgress;
                await Task.Delay(500);
                break;
            case 3:
                if (pageService.m_bScreenLock == true)
                    identifier = "closeProgressMessageOnScreenLock";
                else
                    identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFileRecving(false);
                await Task.Delay(1000);
                break;
            case 4:             // 파일 수신 중 오류
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFileRecving(false);
                await Task.Delay(1000);
                break;
            default:
                break;

        }
        await jsRuntime.InvokeAsync<object>(identifier, param);

        if (type == 3)
        {
            HsCmdCenter.SetFileRecving(groupID, false);
            //string strModulePath = System.IO.Directory.GetCurrentDirectory();
            //string strDownPath = strModulePath + "\\DownLoad";

            if (e.strDataType == ((int)FrameType.File).ToString() ||
                (e.strDataType == null || e.strDataType == "" || e.strDataType == ((int)FrameType.Dir).ToString()))
            {
                string strDownPath = HsCmdCenter.GetDownLoadPath(groupID);
                CLog.Here().Information("RecvDownPath : {strDownPath}", strDownPath);
                bool bOpen = AppConfigSvc.GetFileRecvFolderOpen();
                if (bOpen)
                    Window.OpenFolder(strDownPath);

                string strMsg = XmlConf.GetInfoMsg("I_0208");                                                         // 파일 수신이 완료되었습니다.
                ShowMessage("info", strMsg);
                InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileRecv, "", strMsg);
            }

        }
        else if (type == 4)
        {
            HsCmdCenter.SetFileRecving(groupID, false);
            //InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileRecv, "", XmlConf.GetInfoMsg("E_0219"));
        }

    }
}
