@using System.Collections.Generic
@using System.Runtime.InteropServices
@using OpenNetLinkApp.Models.SGHeader
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Models.SGUserInfo
@using Serilog
@using Serilog.Events
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using WebWindows
@using HsNetWorkSG
@using System.Runtime
@using OpenNetLinkApp.Data.SGQuery

@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject HSCmdCenter HsCmdCenter
@inject XmlConfService XmlConf
@inject IJSRuntime jsRuntime
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

@implements IDisposable
<!-- Navbar -->
<SGHeaderUI HeaderUISvc="@HeaderUISvc" UserInfoSvc="@UserInfoSvc" SideBarUISvc="@SideBarUISvc" />
<!-- /.navbar -->

@code
{
    ISGHeaderUIService HeaderUISvc;
    ISGSideBarUIService SideBarUISvc;
    ISGUserInfoService UserInfoSvc;
    ISGAppConfigService AppConfigSvc;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<HeaderUI>();
    byte[] byteArray = null;

    protected override void OnInitialized()
    {
        HeaderUISvc = SGAppMgrSvc.HeaderUIService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        UserInfoSvc = SGAppMgrSvc.UserInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        HeaderUISvc.OnChangeHeader += StateHasChanged;
        /* For: Change Header UI State to be rendered according to Sidebar action */
        SideBarUISvc.OnChangeActMenu += StateHasChanged;
        UserInfoSvc.OnChangeUserInfo += StateHasChanged;
        Window.ClipBoardOccured += ClipBoardHandler;
        Window.RecvClipBoardOccured += RecvClipBoardHandler;
        Window.NavigateURLOccured += NavigateURLHandler;

        HsCmdCenter.sgPageEvent.SetServerNotiEvent(RecvServerNoti);
        HsCmdCenter.sgPageEvent.SetApproveActionNotiEvent(ApprActionNoti);
        HsCmdCenter.sgPageEvent.SetLogoutNotiEvent(LogoutAction);
        HsCmdCenter.sgPageEvent.SetChgPassWDNotiEvent(ChangePassWordNoti);
        HsCmdCenter.sgPageEvent.SetOffLineNotiEvent(OffLineNoti);
    }

    public void Dispose()
    {
        HeaderUISvc.OnChangeHeader -= StateHasChanged;
        SideBarUISvc.OnChangeActMenu -= StateHasChanged;
        UserInfoSvc.OnChangeUserInfo -= StateHasChanged;
        Window.ClipBoardOccured -= ClipBoardHandler;
        Window.RecvClipBoardOccured -= RecvClipBoardHandler;
        Window.NavigateURLOccured -= NavigateURLHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();

            HsCmdCenter.sgPageEvent.SetRecvClipEventAdd(0, RecvClipBoard);
        }
    }

    public void RecvClipBoard(int groupid, RecvClipEventArgs e)
    {
        int nClipDataLen = e.ClipDataSize;
        int nType = e.nDataType;

        //byte[] clipData = new byte[nClipDataLen];
        //Array.Copy(e.ClipData, 0, clipData, 0, nClipDataLen);
        byte[] clipData = e.ClipData.ToArray();

        Window.SetClipBoardData(groupid, nType, nClipDataLen, clipData);
    }

    public void ClipBoardHandler(object sender, ClipBoardData clipData)
    {
        //CLog.Here().Information("Incremented count to {CurrentCount}", currentCount);
        string strMsg = "";
        if (pageService.GetConnectStatus(clipData.nGroupId) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (pageService.GetDayClipboardCountEnable(clipData.nGroupId) != true)
        {
            bool bFilePreView = pageService.GetDayInfoPrev(clipData.nGroupId);
            if (bFilePreView == true)
            {
                DayClipChangeNotiEvent dayClipChange = null;
                dayClipChange = HsCmdCenter.sgPageEvent.GetDayClipChangeNotiEvent(clipData.nGroupId);
                if (dayClipChange == null)
                    return;
                dayClipChange(clipData.nGroupId);
            }
            strMsg = XmlConf.GetErrMsg("E_0110");    // 클립보드의 일일 전송 횟수를 초과했습니다./r/n클립보드는 일일 최대 {0}번까지 전송할 수 있습니다.
            int ClipMaxCount = pageService.GetDayClipMaxCount(clipData.nGroupId);
            strMsg = String.Format(strMsg, ClipMaxCount);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);

            return;
        }

        if (pageService.GetDayClipboardSizeEnable(clipData.nGroupId, clipData.nLength) != true)
        {
            bool bFilePreView = pageService.GetDayInfoPrev(clipData.nGroupId);
            if (bFilePreView == true)
            {
                DayClipChangeNotiEvent dayClipChange = null;
                dayClipChange = HsCmdCenter.sgPageEvent.GetDayClipChangeNotiEvent(clipData.nGroupId);
                if (dayClipChange == null)
                    return;
                dayClipChange(clipData.nGroupId);
            }
            strMsg = XmlConf.GetErrMsg("E_0109");    // 클립보드의 일일 전송 사이즈를 초과했습니다./r/n클립보드는 일일 최대 {0}MB까지 전송할 수 있습니다.
            Int64 ClipMaxSize = pageService.GetDayClipMaxSize(clipData.nGroupId);
            strMsg = String.Format(strMsg, ClipMaxSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }


        switch (clipData.nType)
        {
            case CLIPTYPE.TEXT:
                {
                    string strClipText = Marshal.PtrToStringAnsi(clipData.pMem);
                    Log.Information($"Throw: ClipBoardEvent: {strClipText}");
                }
                break;
            case CLIPTYPE.IMAGE:
                {
                    unsafe
                    {
                        // byte *src = (byte *)clipData.pMem.ToPointer();
                    }
                }
                break;
        }

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipData.nGroupId);
        Int64 MaxClipSize = sgLoginData.GetClipboardLimitSize();
        if ((MaxClipSize * 1024 * 1024) < clipData.nLength)
        {
            strMsg = XmlConf.GetErrMsg("E_0101");    // 전송하고자 하는 클립보드의 데이터가 전송 제한을 초과하였습니다./r/n클립보드는 최대 {0}MB까지 전송할 수 있습니다.
            strMsg = String.Format(strMsg, MaxClipSize);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }
        string strUserID = sgLoginData.GetUserID();
        byteArray = new byte[clipData.nLength];
        Marshal.Copy(clipData.pMem, byteArray, 0, clipData.nLength);
        int ret = HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);
        if (ret >= 0)
        {
            CLIPALM_TYPE clipAlarmType = AppConfigSvc.GetClipAlarmType();
            string strText = XmlConf.GetInfoMsg("I_0032");                      // 클립보드를 전송하였습니다.
            if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.UI))
                ShowMessage("info", strText);
            OS_NOTI os_noti = OS_NOTI.CLIPBOARD;
            string strTitle = XmlConf.GetNetworkTitle(clipData.nGroupId);
            if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.OS))
                Window.Notification(os_noti, strTitle, strText);
            SendDayClipInfo();
        }
    }

    public void RecvClipBoardHandler(object sender, int groupID)
    {
        CLIPALM_TYPE clipAlarmType = AppConfigSvc.GetClipAlarmType();
        string strText = XmlConf.GetInfoMsg("I_0193");                         // 클립보드를 수신받았습니다.
        if( (clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.UI) )
            ShowMessage("info", strText);
        OS_NOTI os_noti = OS_NOTI.CLIPBOARD;
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        if ((clipAlarmType == CLIPALM_TYPE.OSUI) || (clipAlarmType == CLIPALM_TYPE.OS))
            Window.Notification(os_noti, strTitle, strText);
    }

    public void NavigateURLHandler(object sender, string navURI)
    {
        MyNavigationManager.NavigateTo(navURI);
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void RecvServerNoti(int groupID, eCmdList cmd, PageEventArgs e)
    {
        OS_NOTI os_noti = ConvertCmd(cmd);
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = NotiMsgMake(cmd, e);
        Window.Notification(os_noti, strTitle, strMsg);
    }
    public void ApprActionNoti(int groupID, eCmdList cmd, ApproveActionEventArgs e)
    {
        OS_NOTI os_noti = ConvertCmd(cmd, e.Action);
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = NotiMsgMake(cmd, e);
        Window.Notification(os_noti, strTitle, strMsg);
    }

    public OS_NOTI ConvertCmd(eCmdList cmd, int Action = 0)
    {
        OS_NOTI os_noti = (OS_NOTI)0;
        switch (cmd)
        {
            case eCmdList.eAPPROVECOUNT:
                os_noti = OS_NOTI.WAIT_APPR;
                break;

            case eCmdList.eEMAILAPPROVENOTIFY:
                os_noti = OS_NOTI.MAIL_APPR;
                break;

            case eCmdList.eAPPROVEACTIONNOTIFY:
                if (Action == 1)
                    os_noti = OS_NOTI.CONFIRM_APPR;
                else if (Action == 2)
                    os_noti = OS_NOTI.REJECT_APPR;
                break;
            default:
                break;
        }
        return os_noti;
    }

    public string NotiMsgMake(eCmdList cmd, EventArgs e)
    {
        string strMsg = "";
        switch (cmd)
        {
            case eCmdList.eAPPROVECOUNT:
                strMsg = XmlConf.GetInfoMsg("I_0052");                      // 새로운 승인 요청자료가 있습니다.
                break;

            case eCmdList.eEMAILAPPROVENOTIFY:
                strMsg = XmlConf.GetInfoMsg("I_0098");                      // 새로운 메일승인 요청자료가 {0}건 존재합니다.
                PageEventArgs pEventArgs = (PageEventArgs)e;
                strMsg = String.Format(strMsg, pEventArgs.count);
                break;

            case eCmdList.eAPPROVEACTIONNOTIFY:
                ApproveActionEventArgs apprActionArgs = (ApproveActionEventArgs)e;
                if (apprActionArgs.Action == 1)
                {
                    strMsg = XmlConf.GetInfoMsg("I_0152");                  // 승인 되었습니다./r/n제목 : {0}
                }
                else if (apprActionArgs.Action == 2)
                {
                    strMsg = XmlConf.GetInfoMsg("I_0151");                  // 반려 되었습니다./r/n제목 : {0}
                }
                strMsg = String.Format(strMsg, apprActionArgs.strTitle);
                strMsg = strMsg.Replace("/r/n", "\n");
                break;

            case eCmdList.eVIRUSSCAN:
            case eCmdList.eAPTSCAN:
                AptAndVirusEventArgs aptAndVirusArgs = (AptAndVirusEventArgs)e;
                string strTransSeq = aptAndVirusArgs.strTransSeq;
                string strTitle = aptAndVirusArgs.strTitle;
                string strContent = aptAndVirusArgs.strMsg;
                strMsg = XmlConf.GetWarnMsg("W_0089");                                      // 전송 파일에 바이러스가 발견 되었습니다./r/n/r/n제목 : {0}/r/n바이러스내역 : {1}/r/n/r/n전송관리의 상세보기에서 확인하십시오.
                strMsg = String.Format(strMsg, strTitle, strContent);
                break;

            default:
                break;
        }
        return strMsg;
    }
    public void SendDayClipInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HsCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }

    public void LogoutAction(int groupID, PageEventArgs e)
    {
        ShowMessage("warn", e.strMsg);
        pageService.SetLoginComplete(groupID,false);
        MyNavigationManager.NavigateTo("/LogIn");
    }

    public void ChangePassWordNoti(int groupID, PageEventArgs e)
    {
        ePassWDType epType = pageService.GetPassWDChgType(groupID);
        if (epType == ePassWDType.eNone)
            return;

        switch(epType)
        {
            case ePassWDType.eINITPASSWDCHG:
                InitPassWDCHGEvent initPassWDChgEvent = null;
                initPassWDChgEvent =pageService.GetInitPassWDCHGEvent(groupID);
                if (initPassWDChgEvent == null)
                    break;
                initPassWDChgEvent(groupID, e);
                break;
            case ePassWDType.eDAYPASSWDCHG:
                DayPassWDCHGEvent dayPassWDChgEvent = null;
                dayPassWDChgEvent = pageService.GetDayPassWDCHGEvent(groupID);
                if (dayPassWDChgEvent == null)
                    break;
                dayPassWDChgEvent(groupID, e);
                break;
            case ePassWDType.eUSERPASSWDCHG:
                UserPassWDCHGEvent userPassWDChgEvent = null;
                userPassWDChgEvent = pageService.GetUserPassWDCHGEvent(groupID);
                if (userPassWDChgEvent == null)
                    break;
                userPassWDChgEvent(groupID, e);
                break;
            default:
                break;
        }
    }

    public void OffLineNoti(int groupID)
    {
        pageService.SetConnectStatus(groupID, false);

        OS_NOTI os_noti = OS_NOTI.OFFLINE;
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        string strMsg = XmlConf.GetInfoMsg("I_0198");               // 오프라인 되었습니다.
        Window.Notification(os_noti, strTitle, strMsg);
    }
}
