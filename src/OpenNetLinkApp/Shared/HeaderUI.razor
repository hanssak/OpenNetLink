@using System.Collections.Generic
@using System.Runtime.InteropServices
@using OpenNetLinkApp.Models.SGHeader
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Models.SGUserInfo
@using Serilog
@using Serilog.Events
@using AgLogManager
@using OpenNetLinkApp.Data.SGDicData.SGUnitData

@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject HSCmdCenter HsCmdCenter

@implements IDisposable
<!-- Navbar -->
<SGHeaderUI HeaderUISvc="@HeaderUISvc" UserInfoSvc="@UserInfoSvc" SideBarUISvc="@SideBarUISvc" />
<!-- /.navbar -->

@code
{
    ISGHeaderUIService HeaderUISvc;
    ISGSideBarUIService SideBarUISvc;
    ISGUserInfoService UserInfoSvc;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<HeaderUI>();

    protected override void OnInitialized()
    {
        HeaderUISvc = SGAppMgrSvc.HeaderUIService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        UserInfoSvc = SGAppMgrSvc.UserInfoService;
        HeaderUISvc.OnChangeHeader += StateHasChanged;
        /* For: Change Header UI State to be rendered according to Sidebar action */
        SideBarUISvc.OnChangeActMenu += StateHasChanged;
        UserInfoSvc.OnChangeUserInfo += StateHasChanged;
        Window.ClipBoardOccured += ClipBoardHandler;
    }

    public void Dispose()
    {
        HeaderUISvc.OnChangeHeader -= StateHasChanged;
        SideBarUISvc.OnChangeActMenu -= StateHasChanged;
        UserInfoSvc.OnChangeUserInfo -= StateHasChanged;
        Window.ClipBoardOccured -= ClipBoardHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
    }

    public void ClipBoardHandler(object sender, ClipBoardData clipData)
    {
        //CLog.Here().Information("Incremented count to {CurrentCount}", currentCount);
        switch(clipData.nType)
        {
            case CLIPTYPE.TEXT:
                {
                    string strClipText = Marshal.PtrToStringAnsi(clipData.pMem);
                    Log.Information($"Throw: ClipBoardEvent: {strClipText}");
                } break;
            case CLIPTYPE.IMAGE:
                {
                    unsafe
                    {
                        // byte *src = (byte *)clipData.pMem.ToPointer();
                    }
                } break;
        }

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(clipData.nGroupId);
        string strUserID = sgLoginData.GetUserID();
        var byteArray = new byte[clipData.nLength];
        Marshal.Copy(clipData.pMem, byteArray, 0, clipData.nLength);
        HsCmdCenter.SendClipboard(clipData.nGroupId, strUserID, 1, 1, (int)clipData.nType, clipData.nLength, byteArray);
    }
}
