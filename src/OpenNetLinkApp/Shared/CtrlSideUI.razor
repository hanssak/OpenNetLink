@using System.Collections.Generic
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject WebWindow Window
@inject ISGAppManagerService SGAppMgrSvc
@inject ISGAppUpdaterService SGAppUpdaterSvc

@implements IDisposable

<!-- Control Sidebar -->
    <!-- Control sidebar content goes here -->

    <SGCtrlSideUI CtrlSideUISvc="@CtrlSideUISvc" AppConfigSvc="@AppConfigSvc" OpConfigSvc="@OpConfigSvc" VersionConfigSvc="@VersionConfigSvc" NetWorkSvc="@NetWorkSvc" AppUpdaterSvc="@SGAppUpdaterSvc" />

<!-- /.Control Sidebar -->

@code
{
    ISGCtrlSideUIService CtrlSideUISvc { get; set; }
    ISGAppConfigService AppConfigSvc { get; set; }
    ISGopConfigService OpConfigSvc { get; set; }
    ISGVersionConfigService VersionConfigSvc { get; set; }
    ISGNetworkService NetWorkSvc { get; set; }

    protected override void OnInitialized()
    {
        CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        CtrlSideUISvc.OnChangeCtrlSide += StateHasChanged;

        Window.SetTrayUse(AppConfigSvc.GetExitTrayMove());
    }

    public void Dispose()
    {
        CtrlSideUISvc.OnChangeCtrlSide -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            //StateHasChanged();
        }
    }
}
