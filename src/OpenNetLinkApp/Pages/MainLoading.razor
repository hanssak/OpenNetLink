@page  "/"
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Common
@using System.Text.Json;
@using AgLogManager
@using System.Timers
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject XmlConfService XmlConf
@inject ISGAppUpdaterService SGAppUpdaterSvc
@inject WebWindow window
@using HsNetWorkSG
@using HsNetWorkSGData

<div class="loading_y" translate="no">
    <section>
        <div class="sk-circle-bounce">
            <div class="sk-child sk-circle-1"></div>
            <div class="sk-child sk-circle-2"></div>
            <div class="sk-child sk-circle-3"></div>
            <div class="sk-child sk-circle-4"></div>
            <div class="sk-child sk-circle-5"></div>
            <div class="sk-child sk-circle-6"></div>
            <div class="sk-child sk-circle-7"></div>
            <div class="sk-child sk-circle-8"></div>
            <div class="sk-child sk-circle-9"></div>
            <div class="sk-child sk-circle-10"></div>
            <div class="sk-child sk-circle-11"></div>
            <div class="sk-child sk-circle-12"></div>
        </div>
        <!-- <div class="loading_title" @onclick="goLogIn"> -->
        <div class="loading_title">
            @_stateMessage
        </div>
    </section>
</div>
<SGAlert @ref="refSGAlertCryptoViolation" OnConfirm="ExitByCryptoViolation" Guid="modal-alert-mainloading-crypto"></SGAlert>
<ChangeIPPopUp @ref=refChangeIPPopUp Guid="modal-ipchange-mainloading" goToPageNewIPChange="AfterNewIPChange" IsInitialMode="true"></ChangeIPPopUp>
@code {
    ChangeIPPopUp refChangeIPPopUp;

    SGAlert refSGAlertCryptoViolation;
    SGSettingsDBProc sgSettingProc;

    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService OpConfigSvc;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MainLoading>(); //PopUpLogIn

    Timer conTimer = new Timer();
    object svr1005obj = new object();

    private bool bConnectServerTimeOut = false;
    private int currentConnectCount = 0;
    private string _stateMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            object[] param = { "none" };
            await JSRuntime.InvokeAsync<object>("initLogIn", param);
            if (!SGCrypto.ValidationResult)
                await refSGAlertCryptoViolation.openPopUp(XmlConf.GetTitle("T_COMMON_CRYPTO_VIOLATION_TITLE"), XmlConf.GetTitle("T_COMMON_CRYPTO_VIOLATION_MESSAGE"), 1, 0);
        }


        if (firstRender)
        {
            if (OpConfigSvc.GetPocMode(0) && string.IsNullOrEmpty(NetWorkSvc.NetWorkInfo[0].IPAddress))
            {
                await refChangeIPPopUp.openPopUp();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;

        _stateMessage = XmlConf.GetInfoMsg("I_0212");

        if (!string.IsNullOrEmpty(NetWorkSvc.NetWorkInfo[0].IPAddress))
            loadingProcess();
    }

    /// <summary>
    /// Popup에서 입력된 IP로 적용
    /// </summary>
    /// <param name="NewIp"></param>
    public void AfterNewIPChange(string NewIp)
    {
        NetWorkSvc.SaveIPAndReload(NewIp);
        loadingProcess();
    }

    void loadingProcess()
    {
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        pageService.listNetWork = NetWorkSvc.NetWorkInfo;
        sgSettingProc = SGSettingsDBProc.Instance;

        if (listNetWork.Count > 1)
            pageService.m_bIsMultiNetWork = true;       // 3망관련 UI 및 동작에 크게 영향줌(다중연결상황으로 파악함. 필요에 따라 설정값변경해서 배포)

        SGSettingData sgSettingData = null;
        for (int i = 0; i < listNetWork.Count; i++)
        {
            //HSCmdCenter.sgPageEvent.SetSvrEventAdd(listNetWork[i].GroupID, SvrResult); // kkw-예전

            HSCmdCenter.sgPageEvent.SetReadyEventAdd(listNetWork[i].GroupID, ReadyResult);
            pageService.SetLogoutStatus(listNetWork[i].GroupID, true);

            sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(listNetWork[i].GroupID);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(listNetWork[i].GroupID, "", "", "", "", 0);

            // Get : fileSvr 2105
            //HSCmdCenter.sgPageEvent.SetSvr2105EventAdd(listNetWork[i].GroupID, Svr1105Result);

            CLog.Here().Information($"Connect Network Check, From :{listNetWork[i].FromName}, To : {listNetWork[i].ToName}");
        }

        //HSCmdCenter.sgPageEvent.SetSvrEventAdd(0, SvrResult);
        //서버 접속 시도
        HSCmdCenter.Init();

        ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
        string strCurCliVersion = "";
        string strPlatform = "";
        if (VersionConfigSvc != null)
        {
            strCurCliVersion = VersionConfigSvc.GetSWVersion();
            strPlatform = VersionConfigSvc.GetUpdatePlatform();
        }
        // Toast에 사용되는 Text
        pageService.m_strLoginToastTitle = XmlConf.GetTitle("T_TOAST_LOGIN");
        pageService.m_strLoginToastMsg = XmlConf.GetInfoMsg("I_0213");
        pageService.m_strLoginToastMsg = pageService.m_strLoginToastMsg.Replace("\\n", "\n");

        // Toast 에서 전송관리 메뉴로 넘어가기 위해 저장
        pageService.m_TransMenuArray = new ISGSideBarUI[listNetWork.Count];
        pageService.m_TransMenuArray.Initialize();

        // Toast 에서 결재관리 메뉴로 넘어가기 위해 저장
        pageService.m_approveMenuArray = new ISGSideBarUI[listNetWork.Count];
        pageService.m_approveMenuArray.Initialize();

        //Ready 처리는 첫번째 Groupid만 구성
        HsNetWork hsNetWork = HSCmdCenter.GetConnectNetWork(listNetWork[0].GroupID);
        if (hsNetWork != null)
        {
            HSCmdCenter.RestReady(listNetWork[0].GroupID, "OpenNetLink", strCurCliVersion, strPlatform);
        }

        // 서버에서 응답없으면 Connect 재시도
        int interval = SGAppMgrSvc.OpConfigInfoService.GetLoginConnectDelaySecond(0) / SGAppMgrSvc.OpConfigInfoService.GetLoginConnectLimitCount(0);
        currentConnectCount++;

        conTimer.AutoReset = true;
        conTimer.Interval = interval * 1000;
        conTimer.Elapsed += new ElapsedEventHandler(dayTimer_Elapsed);
        conTimer.Start();
    }

    private void dayTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        CLog.Here().Information($@"{conTimer.Interval / 1000} sec after, Server Result Failed !!!");
        currentConnectCount++;
        if (currentConnectCount > SGAppMgrSvc.OpConfigInfoService.GetLoginConnectLimitCount(0))
        {
            _stateMessage = XmlConf.GetInfoMsg("I_0232");
            bConnectServerTimeOut = true;
            conTimer.Stop();
        }
        else
        {
            _stateMessage = XmlConf.GetInfoMsg("I_0248");
            _stateMessage = String.Format(_stateMessage, currentConnectCount);
            //서버접속 재시도
            HSCmdCenter.Init();
        }

        StateHasChanged();
    }

    private void goLogIn(int loginType)
    {
        //초기로그인 페이지 지정
        pageService.m_nLoginType = loginType;
        pageService.m_nCurViewPageGroupID = 0;

        // MyNavigationManager.NavigateTo("/fileException");
        if (String.IsNullOrEmpty(SGAppMgrSvc.OpConfigInfoService.GetOKTAUrl(0)))
            MyNavigationManager.NavigateTo((SGAppMgrSvc.OpConfigInfoService.GetUseSelectFirstConnectNetServer(0) && NetWorkSvc.NetWorkInfo.Count > 1) ? "/SelectNet" : "/LogIn");
        else
        {
            MyNavigationManager.NavigateTo("/Login_OKTA");
        }

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="loginType"></param>
    /// <param name="systemID"></param>
    public void Svr1105Result(int groupId, PageEventArgs e)
    {

        CLog.Here().Information($"Svr1105Result, groupId : {groupId}");

        try
        {
            int ret = e.result;

            if (ret == 0 && (e.strMsg?.Length ?? 0) > 0)
            {

                lock (svr1005obj)
                {

                    // NetPos Get
                    string strNetPos = "";
                    List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
                    for (int i = 0; i < listNetWork.Count; i++)
                    {
                        if (listNetWork[i].GroupID == groupId)
                        {
                            strNetPos = listNetWork[i].NetPos;
                            break;
                        }
                    }

                    if ((strNetPos?.Length ?? 0) < 1)
                    {
                        CLog.Here().Information($"Svr1105Result, groupId : {groupId}, NetPos : Empty!!! , No Change OpConfig.json");
                        return;
                    }


                    List<string> listVerinfo = new List<string>();
                    using (JsonDocument document = JsonDocument.Parse(e.strMsg))
                    {
                        JsonElement root = document.RootElement;
                        JsonElement configsElement = root.GetProperty("configs");

                        string strClientSWver = "";
                        strClientSWver = SGAppMgrSvc.VersionConfigInfoService.GetSWVersion();
                        //strClientSWver = "1.0.0.2";
                        listVerinfo.Clear();

                        // 적용할 Ver 찾음
                        foreach (JsonElement config in configsElement.EnumerateArray())
                        {

                            if (config.TryGetProperty("version", out JsonElement versionElement))
                            {
                                string strJsonVer = "";
                                strJsonVer = versionElement.GetString();
                                CLog.Here().Information($"Svr1105Result, groupId : {groupId}, Get Svr Json Config Ver :{strJsonVer}");
                                listVerinfo.Add(strJsonVer);
                            }
                            else
                            {
                                CLog.Here().Information($"Svr1105Result, groupId : {groupId}, Version Property Empty!");
                            }

                        }

                        if (listVerinfo.Count < 1)
                        {
                            CLog.Here().Information($"Svr1105Result, groupId : {groupId}, Svr Json Config Empty!");
                            return;
                        }

                        string strApplyVer = "";
                        strApplyVer = CsVersionFunc.GetTopVerString(strClientSWver, listVerinfo.ToArray());
                        listVerinfo.Clear();
                        CLog.Here().Information($"Svr1105Result, groupId : {groupId}, CurClientVer :{strClientSWver},  apply SvrJsonVer :{strApplyVer}");

                        foreach (JsonElement config in configsElement.EnumerateArray())
                        {

                            if (config.TryGetProperty("version", out JsonElement versionElement))
                            {
                                string strJsonVer = "";
                                strJsonVer = versionElement.GetString();
                                if (string.Compare(strApplyVer, strJsonVer) == 0)
                                {

                                    // 찾은 Ver에 적용
                                    CLog.Here().Information($"==========================================================================");
                                    foreach (JsonProperty property in config.EnumerateObject())
                                    {
                                        if (string.Compare(property.Name, "version") != 0)
                                        {
                                            // Memory 변경
                                            bool bResult = SGAppMgrSvc.OpConfigInfoService.SetPropertyVal(groupId, property.Name, (object)property.Value.GetRawText()); // (object)property.Value
                                            CLog.Here().Information($"Svr1105Result, groupId : {groupId}, Apply Op Json property : {property.Name}, Value : {property.Value}, {(bResult ? "Success!" : "Failed!")}");
                                        }
                                    }

                                    CLog.Here().Information($"==========================================================================");
                                    CLog.Here().Information($"Svr1105Result, groupId : {groupId}, CurClientVer :{strClientSWver},  apply SvrJsonVer :{strApplyVer}, DONE!!!");

                                    // Memory 변경된 값들 저장 json
                                    CLog.Here().Information($"==========================================================================");
                                    CLog.Here().Information($"Svr1105Result, groupId : {groupId}, Apply SvrJsonVer :{strApplyVer}, To File Save !!!");

                                    SGAppMgrSvc.OpConfigInfoService.SavePropertyToFile(groupId, strNetPos);

                                    break;
                                }
                            }
                        }


                    } // using (JsonDocument document = JsonDocument.Parse(e.strMsg))

                } // lock (svr1005obj)

            }
            else
            {
                CLog.Here().Information($"Svr1105Result, groupId : {groupId}, result : {ret}, json data : {e.strMsg}");
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"Svr1105Result, groupId : {groupId}, Exception-MSG : {ex.Message}");
        }

    }

    //public void ReadyResult(int groupId, string loginType, string systemID)
    public void ReadyResult(int groupId, int loginType, string sgNetType, string ipAddr)
    {
        //CLog.Here().Information($"SvrResult Init groupID : {groupId} LoginType : {loginType}");
        @*pageService.SetGroupIDLoginType(groupId, (eLoginType)Int32.Parse(loginType));
            CLog.Here().Information($"SvrResult ReSet groupID : {groupId}, LoginType : {(HsNetWork.UseHiddenLog ? loginType : "xxx")}");
            //pageService.m_DicGroupIDloginType[groupId] = (eLoginType)Int32.Parse(loginType);
        *@
    //사용자 지정 로그인 사용 시 서버로그인 타입은 Origin이여야 적용이 됨
        //사용자 지정 로그인 사용할 경우 해당 로그인 타입으로 지정
        if (OpConfigSvc.GetUseAppLoginType(groupId))
        {
            loginType = OpConfigSvc.GetAppLoginType(groupId);
        }
        if (OpConfigSvc.GetPocMode(0))
        {
            if (NetWorkSvc.NetWorkInfo?.Count > groupId)
            {
                if (String.IsNullOrEmpty(NetWorkSvc.NetWorkInfo[groupId].FromName))
                {
                    if (sgNetType == "IN")//내부
                    {
                        NetWorkSvc.NetWorkInfo[groupId].FromName = XmlConf.GetTitle("T_COMMON_LOGININNER");
                        NetWorkSvc.NetWorkInfo[groupId].ToName = XmlConf.GetTitle("T_COMMON_LOGINOUTER");
                    }
                    else if (sgNetType == "EX")//외부
                    {
                        NetWorkSvc.NetWorkInfo[groupId].FromName = XmlConf.GetTitle("T_COMMON_LOGINOUTER");
                        NetWorkSvc.NetWorkInfo[groupId].ToName = XmlConf.GetTitle("T_COMMON_LOGININNER");
                    }
                }
            }
        }

        conTimer.Stop();

        //groupId 별로 AppUpdaterServie 관리
        string RipNPort = ipAddr + ":3439";
        SGAppUpdaterSvc.Init(groupId, RipNPort, SGAppMgrSvc.VersionConfigInfoService.GetUpdatePlatform(), HSCmdCenter);

        if (groupId == 0)
        {
            if (SGCrypto.ValidationResult)
                goLogIn(loginType);
        }
    }


    private void ExitByCryptoViolation(string arg)
    {
        window.ProgramExit();
    }
}
