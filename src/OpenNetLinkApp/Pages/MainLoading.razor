@page  "/"
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using AgLogManager
@using System.Timers
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject XmlConfService XmlConf
@inject ISGAppUpdaterService SGAppUpdaterSvc
@using HsNetWorkSG
@using HsNetWorkSGData

<div class="loading_y" translate="no">
    <section>
        <div class="sk-circle-bounce">
            <div class="sk-child sk-circle-1"></div>
            <div class="sk-child sk-circle-2"></div>
            <div class="sk-child sk-circle-3"></div>
            <div class="sk-child sk-circle-4"></div>
            <div class="sk-child sk-circle-5"></div>
            <div class="sk-child sk-circle-6"></div>
            <div class="sk-child sk-circle-7"></div>
            <div class="sk-child sk-circle-8"></div>
            <div class="sk-child sk-circle-9"></div>
            <div class="sk-child sk-circle-10"></div>
            <div class="sk-child sk-circle-11"></div>
            <div class="sk-child sk-circle-12"></div>
        </div>
        <!-- <div class="loading_title" @onclick="goLogIn"> -->
        <div class="loading_title">
            @XmlConf.GetInfoMsg(bConnectServerTimeOut ? "I_0232" : "I_0212")
        </div>
    </section>
</div>

@code {


    SGSettingsDBProc sgSettingProc;

    ISGSiteConfigService siteConfig;
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService OpConfigSvc;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MainLoading>(); //PopUpLogIn

    Timer conTimer = new Timer();
    private bool bConnectServerTimeOut = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        object[] param = { "none" };
        await JSRuntime.InvokeAsync<object>("initLogIn", param);

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {

        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        pageService.listNetWork = NetWorkSvc.NetWorkInfo;
        sgSettingProc = SGSettingsDBProc.Instance;

        if (listNetWork.Count > 1)
            pageService.m_bIsMultiNetWork = true;       // 3망관련 UI 및 동작에 크게 영향줌(다중연결상황으로 파악함. 필요에 따라 설정값변경해서 배포)

        SGSettingData sgSettingData = null;

        for (int i = 0; i < listNetWork.Count; i++)
        {
            HSCmdCenter.sgPageEvent.SetSvrEventAdd(listNetWork[i].GroupID, SvrResult);
            pageService.SetLogoutStatus(listNetWork[i].GroupID, true);

            sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(listNetWork[i].GroupID);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(listNetWork[i].GroupID, "", "", "", "", 0);

            if (String.Compare(listNetWork[i].NetPos, "EX", true) == 0)
            {
                siteConfig.SetUseOver1auth(listNetWork[i].GroupID, true);
                siteConfig.SetUseAccessAllDrive(listNetWork[i].GroupID, true);
            }
            else if (String.Compare(listNetWork[i].NetPos, "CN", true) == 0 ||
                    String.Compare(listNetWork[i].NetPos, "NCI", true) == 0)
            {
                siteConfig.SetUseOver1auth(listNetWork[i].GroupID, true);
                // siteConfig.SetUseAccessAllDrive(listNetWork[i].GroupID, true); // 문서중앙화 - Test 및 확인 용도
            }
            else if (String.Compare(listNetWork[i].NetPos, "IN", true) == 0)
            {
                siteConfig.SetUseAccessAllDrive(listNetWork[i].GroupID, true);
            }

            // Hanssak in Office
            //siteConfig.SetUseAccessAllDrive(listNetWork[i].GroupID, true);

            CLog.Here().Information($"Connect Network Check, From :{listNetWork[i].FromName}, To : {listNetWork[i].ToName}");
        }

        //HSCmdCenter.sgPageEvent.SetSvrEventAdd(0, SvrResult);
        HSCmdCenter.Init();

        // Toast에 사용되는 Text
        pageService.m_strLoginToastTitle = XmlConf.GetTitle("T_TOAST_LOGIN");
        pageService.m_strLoginToastMsg = XmlConf.GetInfoMsg("I_0213");
        pageService.m_strLoginToastMsg = pageService.m_strLoginToastMsg.Replace("\\n", "\n");

        // Toast 에서 전송관리 메뉴로 넘어가기 위해 저장
        pageService.m_TransMenuArray = new ISGSideBarUI[listNetWork.Count];
        pageService.m_TransMenuArray.Initialize();

        // Toast 에서 결재관리 메뉴로 넘어가기 위해 저장
        pageService.m_approveMenuArray = new ISGSideBarUI[listNetWork.Count];
        pageService.m_approveMenuArray.Initialize();

        // 30초간 서버에서 응답없으면 메세지 변경
        conTimer.AutoReset = false;
        conTimer.Interval = 30 * 1000;
        conTimer.Elapsed += new ElapsedEventHandler(dayTimer_Elapsed);
        conTimer.Start();
    }

    private void dayTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        CLog.Here().Information($@"{conTimer.Interval / 1000} sec after, Server Result Failed !!!");
        bConnectServerTimeOut = true;
        StateHasChanged();
    }

    private void goLogIn(String loginType)
    {
        //초기로그인 페이지 지정
        pageService.m_nLoginType = Int32.Parse(loginType);
        pageService.m_nCurViewPageGroupID = 0;

        @*MyNavigationManager.NavigateTo("/fileException");*@

        MyNavigationManager.NavigateTo((SGAppMgrSvc.OpConfigInfoService.GetUseSelectFirstConnectNetServer() && NetWorkSvc.NetWorkInfo.Count > 1) ? "/SelectNet" : "/LogIn");

    }


    /// <summary>
    /// loginType : 5 OTP, 3:LDAP
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="loginType"></param>
    public void SvrResult(int groupId, string loginType)
    {
        CLog.Here().Information($"SvrResult Init groupID : {groupId} LoginType : {loginType}");
        pageService.SetGroupIDLoginType(groupId, (eLoginType)Int32.Parse(loginType));
        CLog.Here().Information($"SvrResult ReSet groupID : {groupId}, LoginType : {loginType}");
        //pageService.m_DicGroupIDloginType[groupId] = (eLoginType)Int32.Parse(loginType);

        //사용자 지정 로그인 사용 시 서버로그인 타입은 Origin이여야 적용이 됨
        //사용자 지정 로그인 사용할 경우 해당 로그인 타입으로 지정
        //if (AppConfigSvc.GetUseAppLoginType())
        //if (OpConfigSvc.GetUseAppLoginType())
        if (siteConfig.GetUseAppLoginType(groupId))
        {
            loginType = SGAppMgrSvc.SiteConfigInfoService.GetAppLoginType(groupId).ToString();
        }

        conTimer.Stop();


        //groupId 별로 AppUpdaterServie 관리
        string strRipNport = "";
        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            strRipNport = hsNetWork.GetRealHostInfo();
        }

        strRipNport += ":3439";
        SGAppUpdaterSvc.Init(groupId, strRipNport, SGAppMgrSvc.VersionConfigInfoService.GetUpdatePlatform(), HSCmdCenter);


        if (groupId == 0)
        {
            goLogIn(loginType);
        }

    }
}
