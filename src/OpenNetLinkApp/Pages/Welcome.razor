@page "/Welcome/{groupIDbyParam:int}"
@page "/Welcome"

@using Microsoft.JSInterop
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Pages.Config
@using Serilog
@using Serilog.Events
@using AgLogManager
@using HsNetWorkSGData
@using System.Text.Json
@inject XmlConfService XmlConf
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HsCmdCenter
@inject PageStatusService pageService
@*<div class="content-wrapper" style="background:url('/images/adminlte/main_tbg.png') no-repeat right top #f4f6f9;">*@

<section class="content1" style="padding-top:5px !important;background:url('/images/adminlte/main_tbg.png') no-repeat right top #f4f6f9; ">
    <div class="row">

        <div class="col-md-12">
            <div class="row justify-content-between">
                <div class="col-md-3"></div>
                <div class="col-md-4 text-center"><img src="/images/adminlte/main_title_1.png" class="mt-2 mb-2 img-fluid"></div>
                <div class="col-md-3">
                    <div class="m_title01 float-right" style="margin-top:15px;">@strNetFromName <i class="fas fa-long-arrow-alt-right p-1"></i> @strNetToName</div>
                </div>
            </div>
        </div>

        <div class="col-md-6" style="padding-right: 7px !important;">
            <div class="main_box1" style="height:100px;">
                <div class="main_title">@XmlConf.GetTitle("T_DASH_APV_STATUS")</div> <!--승인정보 현황 (최근 3개월)-->
                <table class="binfo">
                    <tbody>
                        <tr>
                            <th>@XmlConf.GetTitle("T_DASH_TRANSFER_REQUEST")</th> <!--전송 요청-->
                            <td>@strTransReqCount</td>
                            <th>@XmlConf.GetTitle("T_DASH_APPROVE_AWAIT")</th> <!--승인 대기 -->
                            <td>@strApprWaitCount</td>
                            <th>@XmlConf.GetTitle("T_DASH_APPROVE_COMPLETE")</th> <!--승인 완료 -->
                            <td>@strApprCofirmCount</td>
                            <th>@XmlConf.GetTitle("T_DASH_APPROVE_REJECT")</th> <!--승인 반려 -->
                            <td>@strApprRejectCount</td>
                        </tr>
                    </tbody>
                </table>

            </div>

        </div>


        <div class="col-md-6" style="padding-left:0px !important;">
            <!-- .col -->
            <div class="main_box1" style="height:100px;">
                <div class="row">
                    <div class="col-md-12">
                        <table class="user_b float-left">
                            <colgroup>
                                <col width="">
                                <col width="">
                            </colgroup>
                            <tr>
                                <th>@XmlConf.GetTitle("T_DASH_RECENT_LOGIN")</th> <!--최종 로그인-->
                                <td>@strLastLoginDate</td>
                            </tr>
                            <!-- 패스워드 유효기간 -->
                            @if (bShowPasswordUseTime)
                            {
                            <tr>
                                <th>@XmlConf.GetTitle("T_DASH_PWPERIOD_DATE")</th> <!--패스워드 유효기간 -->
                                <td>@strPWChgDate</td>
                            </tr>
                            }
                            <tr>
                                <th>@XmlConf.GetTitle("T_DASH_APPROVAL_RIGHT")</th> <!--결재권한-->
                                <td><span class="dday">@strApprPos</span></td>
                            </tr>
                        </table>
                        <div class=" float-right">
                            <button type="button" class="userinfo_btn" @onclick="@(e => goURL("/UserInfo"))">@XmlConf.GetTitle("T_DASH_USER_INFO_EDIT")</button>  <!--사용자 정보수정-->
                        </div>
                    </div>

                </div>

            </div>

        </div>


        <div class="col-md-6" style="padding-right:7px !important;">
            <div class="main_box1" style="height: 220px;">
                <div class="main_title">@XmlConf.GetTitle("T_DASH_1DAY_TRANSFER_STATUS")</div> <!--24시간 송수신 현황-->
                <table class="m_chart col-md-12 .table-responsive">
                    <tbody>
                        <tr>
                            <td style="width:33%;font-weight:bold">@XmlConf.GetTitle("T_DASH_FILE_TRANSFER_AMOUNT")</td>
                            <td style="width:33%;font-weight:bold">@XmlConf.GetTitle("T_COMMON_CLIPBOARD")</td>
                            <td style="width:33%;font-weight:bold">@XmlConf.GetTitle("T_DASH_RECEIVE_DIR_AMOUNT")</td>
                        </tr>
                        <tr>
                            <td style="padding:5px 15px 5px 5px;">
                                <div class="progress-group text-left">
                                    <!--파일전송용량-->
                                    <span class="progress-text">@XmlConf.GetTitle("T_DASHBOARD_SIZE")</span>
                                    <span class="float-right"><b>@(nDayUseFileSize)</b>/@(nDayMaxFileSize==0?"무제한":nDayMaxFileSize.ToString())</span>
                                    <div class="progress progress-sm">
                                        @if (nDayMaxFileSize == 0)
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="width: 100%;background-color:#f4a925"></div>
                                        }
                                        else
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #f4a925;width: @((nDayUseFileSize*100/nDayMaxFileSize))%"></div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td style="padding:5px 15px 5px 5px;">
                                <div class="progress-group text-left">
                                    <!-- 클립보드 용량-->
                                    <span class="progress-text">@XmlConf.GetTitle("T_DASHBOARD_SIZE")</span>
                                    <span class="float-right"><b>@(nDayUseClipSize)</b>/@(nDayMaxClipSize==0?"무제한":nDayMaxClipSize.ToString())</span>
                                    <div class="progress progress-sm">
                                        @if (nDayMaxClipSize == 0)
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #319bd8; width: 100%"></div>
                                        }
                                        else
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #319bd8; width: @((nDayUseClipSize*100/nDayMaxClipSize))%"></div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td rowspan="2">
                                <div class="main_chart">
                                    <canvas class="pl-3 pt-3" id="myCapacityChart" width="100" height="100"></canvas>
                                    @*<div class="text-center pr-1">(MB)</div>*@
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding: 5px 15px 5px 5px; text-align: center;">
                                <div class="progress-group text-left">
                                    <!--파일전송건수-->
                                    <span class="progress-text">@XmlConf.GetTitle("T_DASHBOARD_COUNT")</span>
                                    <span class="float-right"><b>@(nDayUseFileCount)</b>/@(nDayMaxFileCount==0?"무제한":nDayMaxFileCount.ToString())</span>
                                    <div class="progress progress-sm">
                                        @if (nDayMaxFileCount == 0)
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #d36300; width: 100% "></div>
                                        }
                                        else
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #d36300; width: @((nDayUseFileCount*100/nDayMaxFileCount))%"></div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td style="padding: 5px 15px 5px 5px; text-align: center;">
                                <div class="progress-group text-left">
                                    <!-- 클립보드 건수-->
                                    <span class="progress-text">@XmlConf.GetTitle("T_DASHBOARD_COUNT")</span>
                                    <span class="float-right"><b>@(nDayUseClipCount)</b>/@(nDayMaxClipCount==0?"무제한":nDayMaxClipCount.ToString())</span>
                                    <div class="progress progress-sm">
                                        @if (nDayMaxClipCount == 0)
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #577cc1; width: 100%"></div>
                                        }
                                        else
                                        {
                                            <div ondrop="return false;" ondragover="return false;" class="progress-bar" style="background-color: #577cc1; width: @((nDayUseClipCount*100/nDayMaxClipCount))%"></div>
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

        </div>



        <div class="col-md-6" style="padding-left:0px !important;">

            <div class="main_box1" style="height: 220px;">

                <div class="tabs">
                    <input type="radio" name="tabs" id="board1" checked="checked">
                    <label for="board1" style="width:25%;">@XmlConf.GetTitle("T_DASH_RECENT_ARTICLE")</label>   <!--최신글 -->
                    <div class="tab">
                        <table class="tab_table table-head-fixed table-hover w-100">
                            <tbody>
                                @foreach (BoardItem item in recentList)
                                {
                                    @if (item.Title.Length > 20)
                                    {
                                        strViewTitle = item.Title.Substring(0, 20) + "...";
                                    }
                                    else
                                        strViewTitle = item.Title;
                                    strViewDate = item.RegDate.Substring(0, 11);
                                    <tr>
                                        <td>@((MarkupString)item.getTypeTag())</td>
                                        <td @onclick="(e=>OpenDetailPopup(item))" style="cursor: pointer; width: 40%; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><span class="txt_line">@strViewTitle</span>@((MarkupString)item.getNewTag())</td>
                                        <td> @strViewDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <input type="radio" name="tabs" id="board2">
                    <label for="board2" style="width:25%;">@XmlConf.GetTitle("T_COMMON_NOTIFY")</label> <!--공지사항 -->
                    <div class="tab">
                        <table class="tab_table table-head-fixed table-hover w-100">
                            <tbody>
                                @foreach (BoardItem item in noticeList)
                                {
                                    @if (item.Title.Length > 20)
                                    {
                                        strViewTitle = item.Title.Substring(0, 20) + "...";
                                    }
                                    else
                                        strViewTitle = item.Title;
                                    strViewDate = item.RegDate.Substring(0, 11);
                                    <tr>
                                        <td>@((MarkupString)item.getTypeTag())</td>
                                        <td @onclick="(e=>OpenDetailPopup(item))" style="cursor:pointer;width: 40%; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><span class="txt_line">@strViewTitle</span>@((MarkupString)item.getNewTag())</td>
                                        <td> @strViewDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <input type="radio" name="tabs" id="board3">
                    <label for="board3" style="width:25%;">@XmlConf.GetTitle("T_DASH_ALARM")</label>  <!--알람 -->
                    <div class="tab">
                        <table class="tab_table table-head-fixed table-hover w-100">
                            <tbody>
                                @foreach (BoardItem item in alarmList)
                                {
                                    @if (item.Title.Length > 20)
                                    {
                                        strViewTitle = item.Title.Substring(0, 20) + "...";
                                    }
                                    else
                                        strViewTitle = item.Title;
                                    strViewDate = item.RegDate.Substring(0, 11);
                                    <tr>
                                        <td>@((MarkupString)item.getTypeTag())</td>
                                        <td @onclick="(e=>OpenDetailPopup(item))" style="cursor: pointer; width: 40%; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><span class="txt_line">@strViewTitle</span>@((MarkupString)item.getNewTag())</td>
                                        <td> @strViewDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <input type="radio" name="tabs" id="board4">
                    <label for="board4" style="width:25%;">@XmlConf.GetTitle("T_INFO_MESSAGE_LIST")</label>  <!--메세지 -->
                    <div class="tab">
                        <table class="tab_table table-head-fixed table-hover w-100">
                            <tbody>
                                @foreach (BoardItem item in messageList)
                                {
                                    @if (item.Title.Length > 20)
                                    {
                                        strViewTitle = item.Title.Substring(0, 20) + "...";
                                    }
                                    else
                                        strViewTitle = item.Title;
                                    strViewDate = item.RegDate.Substring(0, 11);
                                    <tr>
                                        <td>@((MarkupString)item.getTypeTag())</td>
                                        <td @onclick="(e=>OpenDetailPopup(item))" style="cursor:pointer;width:40%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><span class="txt_line">@strViewTitle</span>@((MarkupString)item.getNewTag())</td>
                                        <td> @strViewDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>





        <div class="col-md-6">

            <div class="main_box1 pt-3" style="height:250px;">
                <!-- Custom Tabs -->
                <div class="tabs">

                    @if (GetUseApproveMenu())
                    {
                        <input type="radio" name="tabs1" id="user1" checked="checked">
                    }
                    else
                    {
                        <input type="radio" name="tabs1" id="user1">
                    }
                    <label for="user1" style="width:50%;">@XmlConf.GetTitle("T_DASH_APPROVAL_STATUS")</label>  <!-- 결재 현황 -->
                    <div class="tab p-0">
                        <table class="table hs-table table-hover  mt-2 mb-2" style="font-size: 12px;table-layout: fixed;">
                            <tbody>
                                <tr>
                                    <th style="width:7%;">NO.</th>
                                    <th style="width:10%;">@XmlConf.GetTitle("T_DASH_APPROVAL")</th>
                                    <th style="width:10%;">@XmlConf.GetTitle("T_FILE_FORWARD_SEND")</th>
                                    <th style="width:14%;">@XmlConf.GetTitle("T_DASH_REQUESTOR")</th>
                                    <th style="width:40%;">@XmlConf.GetTitle("T_TRANS_TITLE")</th>
                                    <th style="width:18%;">@XmlConf.GetTitle("T_DETAIL_REQDAY")</th>

                                </tr>
                                @foreach (ApproveItem item in approveList)
                                {
                                    <tr>
                                        <td style="width:7%;">@item.dispNo</td>
                                        <td style="width:10%;">@item.apvType</td>
                                        <td style="width:10%;">@item.transKind</td>
                                        <td style="width:14%;">@item.requestorName</td>
                                        <td style="width:40%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                        <td style="width:18%;">@item.reqDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </div>


                    @if (GetUseApproveMenu())
                    {
                        <input type="radio" name="tabs1" id="user2">
                    }
                    else
                    {
                        <input type="radio" name="tabs1" id="user2" checked="checked">
                    }

                    <label for="user2" style="width:50%;">@XmlConf.GetTitle("T_DASH_REQUEST_STATUS")</label>  <!-- 요청 현황 -->
                    <div class="tab p-0">
                        <table class="table hs-table table-hover  mt-2 mb-2" style="font-size: 12px;table-layout: fixed;">
                            <tbody>
                                <tr>
                                    <th style="width:7%;">NO.</th>
                                    <th style="width:10%;">@XmlConf.GetTitle("T_DASH_APPROVAL")</th>
                                    <th style="width:10%;">@XmlConf.GetTitle("T_FILE_FORWARD_SEND")</th>
                                    <th style="width:16%;">@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th>
                                    <th style="width:40%;">@XmlConf.GetTitle("T_TRANS_TITLE")</th>
                                    <th style="width:18%;">@XmlConf.GetTitle("T_DETAIL_REQDAY")</th>

                                </tr>
                                @foreach (transItem item in requestList)
                                {
                                    <tr>
                                        <td style="width:7%;">@item.dispNo</td>
                                        <td style="width:10%;">@item.apvType</td>
                                        <td style="width:10%;">@item.transKind</td>
                                        <td style="width:16%;">@item.approverStatus</td>
                                        <td style="width:40%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                        <td style="width:18%;">@item.reqDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </div>

                </div>

            </div>

        </div>



        <div class="col-md-6 p-0" style="padding-right:7px !important;">
            <!-- .col -->
            <div class="main_box1 pt-3" style="height:140px;">
                <div class="main_title">Quick Menu</div>

                <div class="quick">

                    @if (bFileTransMenuUse)
                    {
                        <button ondrop="return false;" ondragover="return false;" class="quick_btn" @onclick="@(e => goURL("/transfer"))">
                            <div class="text-center"><img src="/images/adminlte/quick_01.png"></div>
                            <font color="black" style="font-weight:bold">@XmlConf.GetTitle("T_ETC_FILESEND")</font>  <!--파일전송-->
                        </button>
                    }

                    <button ondrop="return false;" ondragover="return false;" class="quick_btn" @onclick="@(e => goURL("/transManage"))">
                        <div class="text-center"><img src="/images/adminlte/quick_02.png"></div>
                        <font color="black" style="font-weight:bold">@XmlConf.GetTitle("T_COMMON_TRANSMANAGE")</font> <!--전송관리-->
                    </button>

                    @if (bApprMenuUse)
                    {
                        <button ondrop="return false;" ondragover="return false;" class="quick_btn" @onclick="@(e => goURL("/transferApprove"))">
                            <div class="text-center"><img src="/images/adminlte/quick_03.png"></div>
                            <font color="black" style="font-weight:bold">@XmlConf.GetTitle("T_COMMON_APPROVEMANAGE")</font> <!--결재관리-->
                        </button>
                    }

                    <button ondrop="return false;" ondragover="return false;" class="quick_btn" @onclick="@(e => goURL("/viewConf"))">
                        <div class="text-center"><img src="/images/adminlte/quick_04.png"></div>
                        <font color="black" style="font-weight:bold">@XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE")</font> <!--접속환경-->
                    </button>

                    <button ondrop="return false;" ondragover="return false;" class="quick_btn" @onclick="@(e => goURL("/netConf"))">
                        <div class="text-center"><img src="/images/adminlte/quick_05.png"></div>
                        <font color="black" style="font-weight:bold">@XmlConf.GetTitle("T_ETC_BASICSET_TITLE")</font> <!--기본설정-->
                    </button>
                </div>


            </div>

            <div class="main_box1" style="height:103px;">
                <table class="call mt-2">
                    <colgroup>
                        <col width="">
                        <col width="">
                        <col width="">
                    </colgroup>
                    <tr>
                        <td rowspan="3" class="pl-3 pr-3"><img src="/images/adminlte/m_help.png" class="mr-2"></td>
                        <th>@XmlConf.GetTitle("T_DASH_CONTACT_MANAGER")</th>
                        <td>@strAdminName</td>
                    </tr>
                    <tr>
                        <th>@XmlConf.GetTitle("T_DASH_CONTACT_PHONE")</th>
                        <td>@strAdminPhone</td>

                    </tr>
                    <tr>
                        <th>e-mail</th>
                        <td>@strAdminEmail</td>
                    </tr>
                </table>
            </div>

        </div>

    </div>

</section>

@*<div>@rnd</div>*@
<Update_PopUp @ref="refUpdate_PopUp"></Update_PopUp>

<ViewDetailPopUp @ref="refViewDetail"></ViewDetailPopUp>
<PublicBoardView @ref="refPublicBoardView"></PublicBoardView>
@code
{

    [Parameter]
    public int groupIDbyParam { get; set; }


    ViewDetailPopUp refViewDetail;
    PublicBoardView refPublicBoardView;
    ISGSiteConfigService siteConfig;

    int nDrawPageGroupID = -1;

    // 목적지 Data
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    string strUIdestInNetOverMode = "";              // UI상에 출력되는 목적지정보
    //public string strDestNetWork = "";

    private async Task OpenDetailPopup(BoardItem item)
    {
        int Type = item.ItemType; //1:알람, 2:메시지, 3:공지
        string strTitle = String.Empty;
        if (Type == 1)
            strTitle = XmlConf.GetTitle("T_DASH_ALARM_DETAIL");                // 알람 상세보기
        else if (Type == 2)
            strTitle = XmlConf.GetTitle("T_INFO_MESSAGE_LIST_DETAIL");                // 메시지 상세보기
        else
            strTitle = XmlConf.GetTitle("T_COMMON_NOTIFY_DETAIL");                // 공지사항 상세보기

        string strContent = item.strContent;
        string strHead = item.Title;
        string strDate = item.RegDate;

        string strUser = XmlConf.GetTitle("T_COMMON_USER");           // 사용자
        if (Type == 3)
            strUser = XmlConf.GetTitle("T_COMMON_ADMINISTRATOR");           // 관리자
        refPublicBoardView.SetText(strTitle, strContent, strDate, strHead, strUser);

        await refPublicBoardView.openPopUp();
    }

    List<BoardItem> recentList = new List<BoardItem>();
    List<BoardItem> noticeList = new List<BoardItem>();
    List<BoardItem> alarmList = new List<BoardItem>();
    List<BoardItem> messageList = new List<BoardItem>();
    List<ApproveItem> approveList = new List<ApproveItem>();
    List<transItem> requestList = new List<transItem>();

    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    public string strNetFromName = "업무망";
    public string strNetToName = "인터넷망";

    public int nDayMaxFileSize = 0;
    public int nDayMaxFileCount = 0;
    public int nDayMaxClipSize = 0;
    public int nDayMaxClipCount = 0;

    public int nDayUseFileSize = 0;
    public int nDayUseFileCount = 0;
    public int nDayUseClipSize = 0;
    public int nDayUseClipCount = 0;

    public string curFromDay = "YEAR0101";
    public string curToDay = "YEAR1231";
    public string curUserID = "";

    public string strLastLoginDate = "";
    public string strPWChgDate = "";        // 패스워드 유효기간
    public string strApprPos = "";          // 결재권한

    SGSettingsDBProc sgSettingProc;

    public string strTransReqCount = "0";             // 전송요청 카운트
    public string strApprWaitCount = "0";             // 승인대기 카운트
    public string strApprCofirmCount = "0";             // 승인 카운트
    public string strApprRejectCount = "0";             // 반려 카운트

    public int nDiskTotalSize = 0;
    public int nDiskFreeSize = 0;

    Update_PopUp refUpdate_PopUp;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<Welcome>();

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    public string strViewTitle = "";

    public string strViewDate = "";

    public string strAdminName = "";
    public string strAdminPhone = "";
    public string strAdminEmail = "";

    private bool bShowPasswordUseTime = false;

    int nUseNetOverFileTrans = -1;  // -1 : 3망상황아님, 0 : 3망상황에서 파일전송 모든곳에 미사용, 1 : 3망상황에서 파일전송 1곳에서라도 사용
    bool bFileTransMenuUse = false; // 파일전송 메뉴 나오게할지 유무
    bool bApprMenuUse = false;      // 결재관리 메뉴 나오게할지 유무


    /**
    *@brief 
    */
    public void InitText()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/

        int groupID = groupIDbyParam;

        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        if (listNetWork != null)
        {
            int count = listNetWork.Count;
            for (int i = 0; i < count; i++)
            {
                int gID = listNetWork[i].GroupID;
                if (gID == groupID)
                {
                    strNetFromName = listNetWork[i].FromName;
                    if (strUIdestInNetOverMode.Length > 0)
                        strNetToName = strUIdestInNetOverMode;
                    else
                        strNetToName = listNetWork[i].ToName;
                    break;
                }
            }
        }
    }

    /**
    *@brief 결재 / 전송 항목 List 가 타망 이동간 UI상에 제거되지 않아 제거 되어나오도록 수정적용
    */
    public void InitTransApprList()
    {
        approveList.Clear();
        requestList.Clear();
    }

    /**
    *@brief 사용자의 결재권한 string, 최종로그인 시간정보를 가져온다. 
    */
    public void InitUserInfo()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        string curDay = DateTime.Now.ToString("yyyy-MM-dd");
        string curTime = DateTime.Now.ToString("HH:mm:ss");

        strLastLoginDate = curDay + " " + curTime;

        SGSettingData sgSettingData = null;
        sgSettingData = sgSettingProc.SelectSettingData(groupID);
        if (sgSettingData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        strApprPos = sgUserData.GetUserApprposString();

    }

    /**
    *@brief 수신저장용량 정보 가져옴
    */
    public void InitDeviceInfo()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        string strRecvDownPath = "";
        strRecvDownPath = HsCmdCenter.GetDownLoadPath(groupID);
        if (strRecvDownPath.Equals(""))
            return;

        System.IO.DirectoryInfo info = new DirectoryInfo(strRecvDownPath);
        DriveInfo[] allDrives = DriveInfo.GetDrives();
        foreach (DriveInfo d in allDrives)
        {
            if (string.Compare(d.Name, info.Root.Name) == 0)
            {
                nDiskTotalSize = (int)(d.TotalSize / 1024 / 1024);
                nDiskFreeSize = (int)(d.AvailableFreeSpace / 1024 / 1024);
            }
        }
    }

    /**
    *@brief 
    */
    public void InitDBInfo()
    {

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;
        string strUserSeq = sgUserData.GetUserSequence();

        recentList.Clear();
        noticeList.Clear();
        alarmList.Clear();
        messageList.Clear();

        List<SGAlarmData> listAlarmData = null;
        List<SGNotiData> listNotiData = null;

        int nNotiDataCount = 0;
        nNotiDataCount = SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.ALL, groupID, strUserSeq);
        if (nNotiDataCount > 0)
            listNotiData = SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.ALL, groupID, strUserSeq, 1000);

        int nAlarmDataCount = 0;
        nAlarmDataCount = SQLiteDB.SelectAlarmInfoCount(groupID, strUserSeq);
        if (nAlarmDataCount > 0)
            listAlarmData = SQLiteDB.SelectAlarmInfoLimit(groupID, strUserSeq, 1000);

        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
            return;

        recentList = sgMsgData.GetRecentList(listNotiData, listAlarmData, 5);
        noticeList = sgMsgData.GetBoardList(listNotiData, 5);
        alarmList = sgMsgData.GetAlarmList(listAlarmData, 5);
        messageList = sgMsgData.GetBoardExceptionList(listNotiData, 5);

        if (recentList == null)
            recentList = new List<BoardItem>();
        if (noticeList == null)
            noticeList = new List<BoardItem>();
        if (alarmList == null)
            alarmList = new List<BoardItem>();
        if (messageList == null)
            messageList = new List<BoardItem>();

    }

    /**
    *@brief Quick Menu 선택으로 해당 메뉴로 이동
    */
    private void goURL(String path)
    {

        if (groupIDbyParam.ToString().Length > 0 && path.Length > 0)
        {
            // 명확하게 동작하게 하고 적용
            SelectSideBar(path);

            path += "/";
            path += groupIDbyParam.ToString();
        }

        MyNavigationManager.NavigateTo(path);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        sgSettingProc = SGSettingsDBProc.Instance;

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/

        // 동일 page 다시 view(Refresh)하기 위해 사용 - OnAfterRenderAsync에서 호출함
        /*
        int groupID = groupIDbyParam;

        HsCmdCenter.sgPageEvent.SetUseDayFileNotiEventAdd(groupID, UseDayFileResult);
        HsCmdCenter.sgPageEvent.SetUseDayClipNotiEventAdd(groupID, UseDayClipResult);

        HsCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, TransSearchResult);                  // 조회 데이터 결과.
        HsCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, TransSearchCount);              // 조회 데이터 수 결과.

        HsCmdCenter.sgPageEvent.SetApprSearchEventAdd(groupID, ApprSearchResult);
        HsCmdCenter.sgPageEvent.SetApprSearchCountEventAdd(groupID, ApprSearchCount);

        HsCmdCenter.sgPageEvent.SetDashBoardCountEventAdd(groupID, DashBoardCountResult);           // 대쉬보드 조회 결과.
        HsCmdCenter.sgPageEvent.SetDashBoardTransReqCountEventAdd(groupID, DashBoardTransReqCountResult);           // 대쉬보드 전송요청 Count 조회 결과.
        HsCmdCenter.sgPageEvent.SetDashBoardApprWaitCountEventAdd(groupID, DashBoardApprWaitCountResult);           // 대쉬보드 전송요청 Count 조회 결과.
        HsCmdCenter.sgPageEvent.SetDashBoardApprConfirmCountEventAdd(groupID, DashBoardApprConfirmCountResult);           // 대쉬보드 전송요청 Count 조회 결과.
        HsCmdCenter.sgPageEvent.SetDashBoardApprRejectCountEventAdd(groupID, DashBoardApprRejectCountResult);           // 대쉬보드 전송요청 Count 조회 결과.

        HsCmdCenter.sgPageEvent.SetPasswdChgDayEventAdd(groupID, PasswdChgDaySearchResult);         // 패스워드 날짜 조회 결과.
                                                                                                    //HsCmdCenter.sgPageEvent.SetBoardNotiSearchEventAdd(groupID,BoardNotifyResult);                      // 공지사항 조회 결과.

        HsCmdCenter.sgPageEvent.SetBoardNotiAfterDashBoardEventAdd(groupID, BoardNotiAfter);                // 공지사항 데이터 수신 후 화면 갱신

        HsCmdCenter.sgPageEvent.SetAlarmNotiAfterDashBoardEventAdd(groupID, AlarmNotiAfter);                // 알람 노티 수신 후 화면 갱신.

        HsCmdCenter.SetFileRecvPossible(groupID, true);

        InitText();
        InitUserInfo();
        InitDeviceInfo();
        InitDBInfo();
        InitAdministrator();

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        SendDayFileInfo();*/

    }

    /**
    *@brief 3망 모드 상황일때, 수신받는 바로 앞의 망이름으로 수신망을 표현,
    */
    public bool GetNetOverModeData(int groupID)
    {
        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData.GetUseOverNetwork2())
        {
            dicDestSysPos = pageService.GetTargetSystemList(groupID);
            if (dicDestSysPos != null && dicDestSysPos.Count > 1)
            {

                nUseNetOverFileTrans = 0;

                foreach (var item in dicDestSysPos)
                {
                    // 첫번째 반대망 이름 가져옴
                    if (item.Value.nIdx == 1 && item.Key.Length > 0)
                        strUIdestInNetOverMode = item.Key;

                    if ((item.Value.strDestSysid.Length > 0 && item.Value.bUseFileTrans && item.Key.Length > 0) &&
                       ((pageService.m_bIsMultiNetWork && item.Value.nIdx == 1) || (pageService.m_bIsMultiNetWork == false && item.Value.nIdx != 0)))
                        //if (item.Value.bUseFileTrans)
                        nUseNetOverFileTrans = 1;
                }
            }

        }

        return false;
    }

    /**
    *@brief 3망 모드 상황일때, Quick Menu에 버튼들 나오게 할지 유무 처리
    */
    public bool SetQuickMenuModify(int groupID)
    {

        SGLoginData sgLoginData = null;
        SGUserData sgUserData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);


        if (sgLoginData != null && sgUserData != null)
        {
            if (nUseNetOverFileTrans < 0)
                bFileTransMenuUse = sgLoginData.GetFileTrans();     // 3망 Mode가 아닐때는 기존 파일전송 권한으로 UI 구성
            else if (nUseNetOverFileTrans > 0)
                bFileTransMenuUse = true;                           // 3망 Mode 일때는 설정값보고 UI 구성
            else
                bFileTransMenuUse = false;                           // 3망 Mode 일때, 파일전송 사용않함

            // if (sgLoginData.GetApprove() == true)                        // 3망 Mode가 상관없이 Login때 사용하는 결재 권한으로 결재관리 조회 UI 생성
            if (pageService.GetUseApproveNetOver(groupID, sgLoginData))     // 3망 정책고려한 결재사용유무 설정
                if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                    bApprMenuUse = true;
        }


        return false;
    }


    /**
    *@brief 
    */
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await JSRuntime.InvokeAsync<object>("initWelcome");
        await JSRuntime.InvokeAsync<object>("exitLogIn");
        await JSRuntime.InvokeAsync<object>("adJustWindowsize");

        /*
        object[] param = { nDayMaxFileSize, nDayUseFileSize };
        await JSRuntime.InvokeAsync<object>("initTransferChart", param);

        object[] param2 = { nDayMaxFileCount, nDayUseFileCount };
        await JSRuntime.InvokeAsync<object>("initTransferCountChart", param2);

        object[] param3 = { nDayMaxClipSize, nDayUseClipSize };
        await JSRuntime.InvokeAsync<object>("initClipBoardChart", param3);

        object[] param5 = { nDayMaxClipCount, nDayUseClipCount };
        await JSRuntime.InvokeAsync<object>("initClipBoardCountChart", param5);
        */


        if (nDiskFreeSize <= 0)
            nDiskFreeSize = 1;
        else if (nDiskFreeSize > 1024)
            nDiskFreeSize = nDiskFreeSize / 1024;
        if (nDiskTotalSize <= 0)
            nDiskTotalSize = 1;
        else if (nDiskTotalSize > 1024)
            nDiskTotalSize = nDiskTotalSize / 1024;
        object[] param4 = { nDiskFreeSize, nDiskTotalSize };
        await JSRuntime.InvokeAsync<object>("initCapaChart", param4);

        if (firstRender)
        {

            /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
                groupID = sgSideBar.GroupId;*/

            int groupID = groupIDbyParam;

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
            if (sgLoginData == null)
                return;

            if (ClientPatch(sgLoginData))
            {
                string strSvrVersion = sgLoginData.GetServClientVersion();
                refUpdate_PopUp.SetVersionText(strSvrVersion);
                refUpdate_PopUp.SetType(0);
                //refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                await refUpdate_PopUp.openPopUp();
                return;
            }

        }

        CLog.Here().Information($"Welcome - OnAfterRenderAsync - Called (groupID : {groupIDbyParam})! ");

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {

            nDrawPageGroupID = groupIDbyParam;

            int groupID = groupIDbyParam;

            HsCmdCenter.sgPageEvent.SetUseDayFileNotiEventAdd(groupID, UseDayFileResult);
            HsCmdCenter.sgPageEvent.SetUseDayClipNotiEventAdd(groupID, UseDayClipResult);

            HsCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, TransSearchResult);                  // 조회 데이터 결과.
            HsCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, TransSearchCount);              // 조회 데이터 수 결과.

            HsCmdCenter.sgPageEvent.SetApprSearchEventAdd(groupID, ApprSearchResult);
            HsCmdCenter.sgPageEvent.SetApprSearchCountEventAdd(groupID, ApprSearchCount);

            HsCmdCenter.sgPageEvent.SetDashBoardCountEventAdd(groupID, DashBoardCountResult);           // 대쉬보드 조회 결과.
            HsCmdCenter.sgPageEvent.SetDashBoardTransReqCountEventAdd(groupID, DashBoardTransReqCountResult);           // 대쉬보드 전송요청 Count 조회 결과.
            HsCmdCenter.sgPageEvent.SetDashBoardApprWaitCountEventAdd(groupID, DashBoardApprWaitCountResult);           // 대쉬보드 결재요청 Count 조회 결과.
            HsCmdCenter.sgPageEvent.SetDashBoardApprConfirmCountEventAdd(groupID, DashBoardApprConfirmCountResult);           // 대쉬보드 전송요청 Count 조회 결과.
            HsCmdCenter.sgPageEvent.SetDashBoardApprRejectCountEventAdd(groupID, DashBoardApprRejectCountResult);           // 대쉬보드 전송요청 Count 조회 결과.

            HsCmdCenter.sgPageEvent.SetPasswdChgDayEventAdd(groupID, PasswdChgDaySearchResult);         // 패스워드 날짜 조회 결과.
                                                                                                        //HsCmdCenter.sgPageEvent.SetBoardNotiSearchEventAdd(groupID,BoardNotifyResult);                      // 공지사항 조회 결과.

            HsCmdCenter.sgPageEvent.SetBoardNotiAfterDashBoardEventAdd(groupID, BoardNotiAfter);                // 공지사항 데이터 수신 후 화면 갱신

            HsCmdCenter.sgPageEvent.SetAlarmNotiAfterDashBoardEventAdd(groupID, AlarmNotiAfter);                // 알람 노티 수신 후 화면 갱신.

            HsCmdCenter.SetFileRecvPossible(groupID, true);

            GetNetOverModeData(groupID);

            SetQuickMenuModify(groupID);

            InitText();

            StateHasChanged();

            InitUserInfo();
            InitDeviceInfo();
            InitDBInfo();
            InitAdministrator();
            InitTransApprList();

            LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
            loginAfterSGHeaderUI = HsCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
            if (loginAfterSGHeaderUI != null)
                loginAfterSGHeaderUI(groupID);

            LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
            loginAfterSGSideBar = HsCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
            if (loginAfterSGSideBar != null)
                loginAfterSGSideBar(groupID);

            GetUsePasswordUseDay();

            SendDayFileInfo();

            StateHasChanged();

        }


    }


    /**
    *@brief 1일 파일전송 사용 최대값 알아냄. 용량 / 건수  정보알아내는 query Server로 전달
    */
    public void SendDayFileInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            SendDayClipInfo();
            return;
        }

        Int64 nMaxSize = sgLoginData.GetDayFileTransferLimitSize();
        if (nMaxSize == 0)
            nDayMaxFileSize = 0;
        else
            nDayMaxFileSize = (int)nMaxSize;
        nDayMaxFileCount = sgLoginData.GetDayFileTransferLimitCount();

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            SendDayClipInfo();
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayFileTransInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HsCmdCenter.SendUseDayFileTransInfo(groupID, strUserID, strQuery);
    }

    /**
    *@brief 1일 클립보드 사용 최대값 알아냄. 용량 / 건수  정보알아내는 query Server로 전달
    */
    public void SendDayClipInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            TransSearchData(1);

            // KKW - Query개수 줄여봄
            //TransSearchCount();
            return;
        }

        Int64 nMaxSize = sgLoginData.GetDayClipboardLimitSize();
        if (nMaxSize == 0)
            nDayMaxClipSize = 0;
        else
            nDayMaxClipSize = (int)nMaxSize;
        nDayMaxClipCount = sgLoginData.GetDayClipboardLimitCount();

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {

            TransSearchData(1);

            // KKW - Query개수 줄여봄
            //TransSearchCount();
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HsCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }

    /**
    *@brief 1일 파일전송 사용한 용량 / 건수  정보 서버에서 받음, 연이어 클립보드 사용량 정보서버에요청함
    */
    public void UseDayFileResult(int groupID, FileAndClipDayArgs e)
    {

        CLog.Here().Information($"clipboard - ### - use size recv (groupID : {groupID})! ");

        pageService.SetDayUseFile(groupID, e.Size, e.Count);
        if (e.Size <= 0)
            nDayUseFileSize = 0;
        else
        {
            nDayUseFileSize = (int)(e.Size / 1024 / 1024);
            if (nDayUseFileSize <= 0)
                nDayUseFileSize = 1;
        }

        if (e.Count <= 0)
            nDayUseFileCount = 0;
        else
        {
            nDayUseFileCount = e.Count;
        }

        SendDayClipInfo();
    }


    /**
    *@brief 1일 클립보드 사용한 용량 / 건수  정보 서버에서 받음
    */
    public void UseDayClipResult(int groupID, FileAndClipDayArgs e)
    {

        CLog.Here().Information($"FileTrans - ### - use size recv (groupID : {groupID})! ");

        pageService.SetDayUseClip(groupID, e.Size, e.Count);
        if (e.Size <= 0)
            nDayUseClipSize = 0;
        else
        {
            nDayUseClipSize = (int)(e.Size / 1024 / 1024);
            if (nDayUseClipSize <= 0)
                nDayUseClipSize = 1;
        }

        if (e.Count <= 0)
            nDayUseClipCount = 0;
        else
        {
            nDayUseClipCount = e.Count;
        }

        TransSearchData(1);

        // Query개수 줄여봄
        // TransSearchCount();
    }


    /**
    *@brief 파일전송 요청현황 List 항목 개수 정보를 서버에 Query
    */
    public void TransSearchCount()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            ApproveSearchCount();
            return;
        }

        curUserID = sgLoginData.GetUserID();

        //string strYear = DateTime.Now.ToString("yyyy");
        //curFromDay = curFromDay.Replace("YEAR", strYear);
        //curToDay = curToDay.Replace("YEAR", strYear);

        GetDatePeriod(out curFromDay, out curToDay);
        if (curFromDay.Length == 8)
            curFromDay = curFromDay + "000000";
        if (curToDay.Length == 8)
            curToDay = curToDay + "235959";

        TransferParam param = new TransferParam("", "", "", "", curFromDay, curToDay, curUserID, 5, 1);
        TransferDao dao = new TransferDao();
        string strQueryCount = dao.TotalCount(param);   // 쿼리 데이터 카운트
        string str = dao.List(param);                  // 확인용
        HsCmdCenter.SendTransListCountQuery(groupID, curUserID, strQueryCount);
    }


    /**
    *@brief 파일전송 요청현황 List 를 서버에 Query
    */
    public void TransSearchData(int pageNum)
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        //string strYear = DateTime.Now.ToString("yyyy");
        //curFromDay = curFromDay.Replace("YEAR", strYear);
        //curToDay = curToDay.Replace("YEAR", strYear);

        GetDatePeriod(out curFromDay, out curToDay);
        if (curFromDay.Length == 8)
            curFromDay = curFromDay + "000000";
        if (curToDay.Length == 8)
            curToDay = curToDay + "235959";


        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            ApproveSearchData(1);

            // Query개수 줄여봄
            // ApproveSearchCount();
            return;
        }

        curUserID = sgLoginData.GetUserID();
        TransferParam param = new TransferParam("", "", "", "", curFromDay, curToDay, curUserID, 5, 1);
        TransferDao dao = new TransferDao();
        string strQuery = dao.List(param);   // 쿼리 데이터 카운트
        HsCmdCenter.SendTransListQuery(groupID, curUserID, strQuery);
    }


    /**
    *@brief 파일전송 요청현황 List 항목 개수 정보를 서버에서 받음
    */
    public void TransSearchCount(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;

        if (e.count <= 0)
        {
            ApproveSearchCount();
            return;
        }
        TransSearchData(1);
    }

    /**
    *@brief 파일전송 요청현황 List 를 서버에서 받음
    */
    public void TransSearchResult(int groupId, PageEventArgs e)
    {

        int ret = e.result;
        if (ret != 0)
        {
            // ret : 결재요청 개수 0개이면, result 1 됨.
            CLog.Here().Information($"TransSearchResult - result:{ret}, Msg:{e.strMsg}");
            if (ret == 1)
                CLog.Here().Information($"TransSearchResult - Maybe Count:0");
        }

        requestList.Clear();

        SGTransManageData sgData = null;
        sgData = (SGTransManageData)HsCmdCenter.GetTransManageData(groupId);
        if (sgData == null)
        {
            ApproveSearchData(1);

            // KKW - Query개수 줄여봄
            // ApproveSearchCount();
            return;
        }

        List<Dictionary<int, string>> TransSearchList = null;
        TransSearchList = sgData.GetQuerySearchData();
        int nCount = 0;
        if (TransSearchList != null)
            nCount = TransSearchList.Count;

        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> dic = TransSearchList[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if (tmpStr.Equals(""))
                    continue;
            }

            transItem tData = new transItem();
            tData.dispNo = i + 1;
            tData.apvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
            tData.transKind = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
            tData.Title = sgData.GetTitle(dic);                         // 제목
            tData.approverStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)
            tData.reqDate = sgData.GetQueryTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
            if (!tData.reqDate.Equals(""))
                tData.reqDate = tData.reqDate.Substring(0, 10);
            requestList.Add(tData);
        }

        ApproveSearchData(1);

        // KKW - Query개수 줄여봄
        // ApproveSearchCount();
    }


    /**
    *@brief 결재요청 받은 개수 정보 서버에 Query
    */
    public void ApproveSearchCount()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        //string strYear = DateTime.Now.ToString("yyyy");
        //curFromDay = curFromDay.Replace("YEAR", strYear);
        //curToDay = curToDay.Replace("YEAR", strYear);

        GetDatePeriod(out curFromDay, out curToDay);
        if (curFromDay.Length == 8)
            curFromDay = curFromDay + "000000";
        if (curToDay.Length == 8)
            curToDay = curToDay + "235959";

        ApproveParam param = new ApproveParam(curFromDay, curToDay, "", "", "", "", "", curUserID, 5, 1);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();
        ApproveDao dao = new ApproveDao();
        string strCountQuery = dao.TotalCount(param);
        HsCmdCenter.SendApprListCountQuery(groupID, curUserID, strCountQuery);
    }


    /**
    *@brief 결재요청 받은 List 정보서버에 Query
    */
    public void ApproveSearchData(int pageNum)
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/

        int groupID = groupIDbyParam;

        //string strYear = DateTime.Now.ToString("yyyy");
        //curFromDay = curFromDay.Replace("YEAR", strYear);
        //curToDay = curToDay.Replace("YEAR", strYear);

        GetDatePeriod(out curFromDay, out curToDay);
        if (curFromDay.Length == 8)
            curFromDay = curFromDay + "000000";
        if (curToDay.Length == 8)
            curToDay = curToDay + "235959";

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        ApproveParam param = new ApproveParam(curFromDay, curToDay, "", "", "", "", "", curUserID, 5, 1);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();
        ApproveDao dao = new ApproveDao();
        string strQuery = dao.List(param);
        HsCmdCenter.SendApprListQuery(groupID, curUserID, strQuery);
    }


    /**
    *@brief 결재요청 받은 개수 정보 서버에서 결과값 받음
    */
    public void ApprSearchCount(int groupId, PageEventArgs e)
    {
        if (e.count <= 0)
        {

            DashBoardTransReqCount();

            //StateHasChanged();
            return;
        }

        ApproveSearchData(1);
    }


    /**
    *@brief 결재요청 받은 List 정보서버에서 받음
    */
    public void ApprSearchResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        if (ret != 0)
        {
            // ret : 결재요청 개수 0개이면, result 1 됨.
            CLog.Here().Information($"ApprSearchResult - result:{ret}, Msg:{e.strMsg}");
            if (ret == 1)
                CLog.Here().Information($"ApprSearchResult - Maybe Count:0");
        }

        approveList.Clear();

        SGApprManageData sgData = null;
        sgData = (SGApprManageData)HsCmdCenter.GetApprManageData(groupId);
        if (sgData == null)
        {
            DashBoardTransReqCount();
            return;
        }

        List<Dictionary<int, string>> ApprSearchList = null;
        ApprSearchList = sgData.GetQuerySearchData();

        int nCount = 0;
        if (ApprSearchList != null)
            nCount = ApprSearchList.Count;

        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> dic = ApprSearchList[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if (tmpStr.Equals(""))
                    continue;
            }

            ApproveItem aData = new ApproveItem();
            aData.dispNo = i + 1;
            aData.apvType = sgData.GetApprKind(dic);                       // 결재종류 (선결/후결)
            aData.transKind = sgData.GetTransKind(dic);                 // 전송구분 (반출/반입)
            aData.requestorName = sgData.GetApproveReqUser(dic);           // 승인요청자
            aData.Title = sgData.GetTitle(dic);                            // 제목
            aData.reqDate = sgData.GetQueryTransReqDay(dic);                  // 승인요청일(type : YYYY-MM-DD hh:mm:ss)
            if (!aData.reqDate.Equals(""))
                aData.reqDate = aData.reqDate.Substring(0, 10);
            approveList.Add(aData);
        }

        DashBoardTransReqCount();
        //DashBoardSearchCount();
        //StateHasChanged();
    }


    /**
    *@brief UI상에 승인정보현황에 전송요청, 승인대기, 승인완료, 승인반려 개수 표시할것들 query 서버에보냄
    */
    public void DashBoardSearchCount()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            StateHasChanged();
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGQueryExtend sgQueryExtend = new SGQueryExtend();
        string strDate = DateTime.Now.ToString("yyyyMMdd");
        string strQuery = sgQueryExtend.GetDashboardCountQuery(strUserSeq, strDate);
        HsCmdCenter.SendDashBoardCount(groupID, curUserID, strQuery);
    }


    /**
    *@brief UI상에 승인정보현황 전송요청, 승인대기, 승인완료, 승인반려 개수 표시할것들 정보 받음
    */
    public void DashBoardCountResult(int groupId, PageEventArgs e)
    {
        if (e.result != 0)
        {
            StateHasChanged();
            return;
        }

        string strResultData = e.strMsg;

        string[] strResult = strResultData.Split('\u0001');

        if (strResult.Length < 4)
        {
            StateHasChanged();
            return;
        }

        strTransReqCount = strResult[0];                // 전송요청 카운트
        strApprWaitCount = strResult[1];                // 승인대기 카운트
        strApprCofirmCount = strResult[2];              // 승인 카운트
        strApprRejectCount = strResult[3];              // 반려 카운트

        int nPassWDExpiredDay = 0;
        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);
        string strPassWDExpiredDay = sgLoginData.GetPassWDExpiredDay();
        if (!strPassWDExpiredDay.Equals(""))
            nPassWDExpiredDay = Convert.ToInt32(strPassWDExpiredDay);

        if (nPassWDExpiredDay <= 0)
        {
            strPWChgDate = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");      // 사용 안함.
            StateHasChanged();
            return;
        }
        else
            PasswdChgDaySearch();

        //StateHasChanged();
    }


    /**
    *@brief 최근 3개월 전송요청 개수 정보 Query
    */
    public void DashBoardTransReqCount()
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            DashBoardApprInfoCount("1");    // 1 : 승인대기
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGQueryExtend sgQueryExtend = new SGQueryExtend();
        //string strToDate = DateTime.Now.ToString("yyyy");
        string strFromDate = "";
        string strToDate = "";
        GetDatePeriod(out strFromDate, out strToDate);


        string strQuery = sgQueryExtend.GetDashboardTransReqCountQuery(strUserSeq, strFromDate, strToDate);
        HsCmdCenter.SendDashBoardTransReqCount(groupID, curUserID, strQuery);
    }


    /**
    *@brief 최근 3개월 전송요청 개수 정보 Query 결과
    */
    public void DashBoardTransReqCountResult(int groupId, PageEventArgs e)
    {
        if (e.result != 0)
        {
            DashBoardApprInfoCount("1");    // 1 : 승인대기
            return;
        }

        strTransReqCount = e.strMsg;
        DashBoardApprInfoCount("1");      // 1 : 승인대기
    }


    /**
    *@brief 최근 3개월 승인대기 / 승인 / 반려 개수 정보 Query 결과
    *@param 1 : 승인대기
    *@param 2 : 승인
    *@param 3 : 반려
    */
    public void DashBoardApprInfoCount(string strApprStatus)
    {
        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        //string strYear = DateTime.Now.ToString("yyyy");
        //curFromDay = curFromDay.Replace("YEAR", strYear);
        //curToDay = curToDay.Replace("YEAR", strYear);

        string strFromDate = "";
        string strToDate = "";
        GetDatePeriod(out strFromDate, out strToDate);

        ApproveParam param = new ApproveParam(strFromDate, strToDate, "", "", strApprStatus, "", "", curUserID, 5, 1);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();
        ApproveDao dao = new ApproveDao();
        string strCountQuery = dao.TotalCount(param);

        if (strApprStatus.Equals("1"))                           // 승인대기
        {
            HsCmdCenter.SendDashBoardApprWaitCount(groupID, curUserID, strCountQuery);
        }
        else if (strApprStatus.Equals("2"))                      // 승인
        {
            HsCmdCenter.SendDashBoardApprConfirmCount(groupID, curUserID, strCountQuery);
        }
        else if (strApprStatus.Equals("3"))                      // 반려
        {
            HsCmdCenter.SendDashBoardApprRejectCount(groupID, curUserID, strCountQuery);
        }
        else
        {
            int nPassWDExpiredDay = 0;
            string strPassWDExpiredDay = sgLoginData.GetPassWDExpiredDay();
            if (!strPassWDExpiredDay.Equals(""))
                nPassWDExpiredDay = Convert.ToInt32(strPassWDExpiredDay);

            if (nPassWDExpiredDay <= 0)
            {
                strPWChgDate = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");      // 사용 안함.
                StateHasChanged();
                return;
            }
            else
                PasswdChgDaySearch();
        }
    }


    /**
    *@brief 최근 3개월 승인대기 Query 결과
    */
    public void DashBoardApprWaitCountResult(int groupId, PageEventArgs e)
    {
        if (e.result != 0)
        {
            DashBoardApprInfoCount("2");    // 2 : 승인
            return;
        }

        strApprWaitCount = e.strMsg;
        DashBoardApprInfoCount("2");      // 2 : 승인
    }

    /**
    *@brief 최근 3개월 승인 Query 결과
    */
    public void DashBoardApprConfirmCountResult(int groupId, PageEventArgs e)
    {
        if (e.result != 0)
        {
            DashBoardApprInfoCount("3");    // 3 : 반려
            return;
        }

        strApprCofirmCount = e.strMsg;
        DashBoardApprInfoCount("3");      // 3 : 반려
    }

    /**
    *@brief 최근 3개월 반려 Query 결과
    */
    public void DashBoardApprRejectCountResult(int groupId, PageEventArgs e)
    {
        if (e.result != 0)
        {
            PasswdChgDaySearch();
            return;
        }

        strApprRejectCount = e.strMsg;

        int nPassWDExpiredDay = 0;
        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);
        string strPassWDExpiredDay = sgLoginData.GetPassWDExpiredDay();
        if (!strPassWDExpiredDay.Equals(""))
            nPassWDExpiredDay = Convert.ToInt32(strPassWDExpiredDay);

        if (nPassWDExpiredDay <= 0)
        {
            strPWChgDate = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");      // 사용 안함.
        }

        PasswdChgDaySearch();
    }


    /**
    *@brief password 검색 유효기간 서버에 Query
    */
    public void PasswdChgDaySearch()
    {

        if (bShowPasswordUseTime == false)
        {
            StateHasChanged();
            return;
        }

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            StateHasChanged();
            //BoardNotifySearch();
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGQueryExtend sgQueryExtend = new SGQueryExtend();
        string strQuery = sgQueryExtend.GetPasswdChgDay(strUserSeq);
        HsCmdCenter.SendPasswdChgDay(groupID, curUserID, strQuery);
    }

    /**
    *@brief password 검색 유효기간 정보 서버서 받은 결과
    */
    public void PasswdChgDaySearchResult(int groupid, PageEventArgs e)
    {
        if (e.result != 0)
        {
            StateHasChanged();
            //BoardNotifySearch();
            return;
        }

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*/
        int groupID = groupIDbyParam;


        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);

        if ((sgLoginData == null) || (sgUserData == null))
        {
            StateHasChanged();
            //BoardNotifySearch();
            return;
        }

        string strPasswdChgDay = e.strMsg;
        strPasswdChgDay = strPasswdChgDay.Replace("\u0001", "");
        int nPassWDExpiredDay = 0;
        string strPassWDExpiredDay = sgLoginData.GetPassWDExpiredDay();
        if (!strPassWDExpiredDay.Equals(""))
            nPassWDExpiredDay = Convert.ToInt32(strPassWDExpiredDay);

        DateTime StartTime = DateTime.Now;
        DateTime EndTime;
        if (strPasswdChgDay.Equals("00000000"))
        {
            EndTime = StartTime;
        }
        else
        {
            string strYear = strPasswdChgDay.Substring(0, 4);
            string strMonth = strPasswdChgDay.Substring(4, 2);
            string strDay = strPasswdChgDay.Substring(6, 2);
            strPasswdChgDay = String.Format("{0}-{1}-{2}", strYear, strMonth, strDay);
            EndTime = Convert.ToDateTime(strPasswdChgDay);
        }
        //EndTime = StartTime.AddDays(nPassWDExpiredDay);

        string strTime = sgSettingProc.GetSettingDelayDspPw(groupID);
        SGPassWDPeriodData sgPassWdPeriodData = new SGPassWDPeriodData();
        string strUserSeq = sgUserData.GetUserSequence();
        DateTime LocalTime = sgPassWdPeriodData.GetLocalDBPassWDDelayTime(strTime, strUserSeq);
        string strStartDay = StartTime.ToString("yyyy-MM-dd");

        ePassWDChgType ePassChgType = sgLoginData.GetPasswordExpiredMethodSystemRunEnv();
        if (ePassChgType == ePassWDChgType.eAfterward)
        {
            if (LocalTime.CompareTo(EndTime) > 0)
                EndTime = LocalTime;
        }
        string strEndDay = EndTime.ToString("yyyy-MM-dd");

        strPWChgDate = String.Format("{0} ~ {1}", strStartDay, strEndDay);

        StateHasChanged();
        //BoardNotifySearch();

    }
    /*
    public void BoardNotifySearch()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        if (sgLoginData == nul
    *
    *l)
        {
            StateHasChang
     ed();
 
    *           return;
        }
        string strUserID = sgLoginData.GetUserID();
        SGQueryExtend sgQueryExtend = new SGQueryExtend();
        string strQuery = sgQueryExtend.GetSGNotify(strUserID);
        HsCmdCenter.SendBoardNotiSearch(groupID, strUserID, strQuery);
    }
    public void BoardNotifyResult(int groupid, PageEventArgs e)
    {
        noticeList.Clear();
        SGData sgData = null;
        sgData = HsCmdCenter.GetBoardNoti(groupid);
        if(sgData==null)
        {
            StateHasChanged();
            return;
        }

        string strResultData = sgData.GetBasicTagData("RECORD");

        if(strResultData.Equals(""))
        {
            StateHasChanged();
            return;
        }
        string[] strResult = strResultData.Split('\u0003');

        for(int i=0;i<strResult.Length;i++)
        {
            string[] strSubResult = strResult[i].Split('\u0001');
            BoardItem boardItem = new BoardItem();
            boardItem.ItemType = 3;                                     // 공지사항
            boardItem.Title = strSubResult[1];
            boardItem.RegDate = DateTime.Now.ToString();
            boardItem.IsNew = true;
            noticeList.Add(boardItem);
        }
        StateHasChanged();
    }
    */

    /**
    *@brief 알람 리스트 결과받음
    */
    public void AlarmNotiAfter(int groupid)
    {
        alarmList.Clear();
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        int count = 0;
        count = SQLiteDB.SelectAlarmInfoCount(groupid, strUserSeq);
        if (count <= 0)
            return;

        List<SGAlarmData> listSGAlarmData = null;
        listSGAlarmData = SQLiteDB.SelectAlarmInfoLimit(groupid, strUserSeq, 5);
        if (listSGAlarmData.Count <= 0)
            return;

        for (int i = 0; i < listSGAlarmData.Count; i++)
        {
            BoardItem boardItem = new BoardItem();
            boardItem.ItemType = 3;                                     // 공지사항
            boardItem.Title = listSGAlarmData[i].Head;
            //if (boardItem.Title.Length > 24)
            //{
            //   boardItem.Title = boardItem.Title.Substring(0, 24);
            //   boardItem.Title = boardItem.Title + "...";
            //}
            boardItem.RegDate = " " + DateTime.Now.ToString("yyyy-MM-dd");
            boardItem.IsNew = true;
            boardItem.strContent = listSGAlarmData[i].Body;
            alarmList.Add(boardItem);
        }
        InitDBInfo();
        StateHasChanged();
    }

    /**
    *@brief 공지사항 리스트 결과받음
    */
    public void BoardNotiAfter(int groupid)
    {
        noticeList.Clear();
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupid);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        int count = 0;
        count = SQLiteDB.SelectNotiInfoCount(NOTI_TYPE.SYSTEM, groupid, strUserSeq);
        if (count <= 0)
            return;

        List<SGNotiData> listSGNotiData = null;
        listSGNotiData = SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.SYSTEM, groupid, strUserSeq, 5);
        if (listSGNotiData.Count <= 0)
            return;

        for (int i = 0; i < listSGNotiData.Count; i++)
        {
            BoardItem boardItem = new BoardItem();
            boardItem.ItemType = 3;                                     // 공지사항
            boardItem.Title = listSGNotiData[i].Head;
            //if (boardItem.Title.Length > 24)
            //{
            //    boardItem.Title = boardItem.Title.Substring(0, 24);
            //    boardItem.Title = boardItem.Title + "...";
            //}
            boardItem.RegDate = " " + DateTime.Now.ToString("yyyy-MM-dd");
            boardItem.IsNew = true;
            boardItem.strContent = listSGNotiData[i].Body;
            noticeList.Add(boardItem);
        }
        InitDBInfo();
        StateHasChanged();
    }

    /**
    *@biref 
    */
    public bool ClientPatch(SGLoginData sgLoginData)
    {
        //return false;
        if (sgLoginData == null)
            return false;
        bool bUpdate = sgLoginData.GetClientUpgrade();
        if (!bUpdate)
            return false;

        string strSvrCliVersion = sgLoginData.GetServClientVersion();
        if (strSvrCliVersion.Equals(""))
            return false;
        strSvrCliVersion = strSvrCliVersion.ToUpper();
        CLog.Here().Information("DashBoard Server Client Version {0}", strSvrCliVersion);

        string strCliVersion = HsCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
            return false;
        strCliVersion = strCliVersion.ToUpper();

        CLog.Here().Information("WelCome Server Client Version {0}", strSvrCliVersion);
        CLog.Here().Information("WelCome Local Client Version {0}", strCliVersion);

        if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
        {
            return true;
        }
        else
            return false;

    }


    /**
    *@biref 
    */
    public void InitAdministrator()
    {
        string strNetworkFileName = "wwwroot/conf/Administrator.json";
        string jsonString = File.ReadAllText(strNetworkFileName);
        List<Administrator> listNetworks = new List<Administrator>();
        using (JsonDocument document = JsonDocument.Parse(jsonString))
        {
            JsonElement root = document.RootElement;
            JsonElement AdminElement = root.GetProperty("ADMINISTRATOR");
            foreach (JsonElement adminElement in AdminElement.EnumerateArray())
            {
                Administrator sgAdmin = new Administrator();
                string strJsonElement = adminElement.ToString();
                var options = new JsonSerializerOptions
                {
                    ReadCommentHandling = JsonCommentHandling.Skip,
                    AllowTrailingCommas = true,
                    PropertyNameCaseInsensitive = true,
                };
                sgAdmin = JsonSerializer.Deserialize<Administrator>(strJsonElement, options);
                strAdminName = sgAdmin.Name;
                strAdminPhone = sgAdmin.Phone;
                strAdminEmail = sgAdmin.Email;
            }
        }
    }

    public void GetDatePeriod(out string strFromDate, out string strToDate)
    {
        DateTime dateTo = DateTime.Now;
        DateTime dateFrom = dateTo.AddMonths(-3);       // 최근 3개월

        strToDate = dateTo.ToString("yyyy-MM-dd");
        strFromDate = dateFrom.ToString("yyyy-MM-dd");

        strToDate = strToDate.Replace("-", "");
        strFromDate = strFromDate.Replace("-", "");
    }

    // 패스워드 유효기간 표시할지 유무
    public bool GetUsePasswordUseDay()
    {

        int nGroupID = groupIDbyParam;

        SGSvrData sgSvrData = null;
        sgSvrData = (SGSvrData)HsCmdCenter.GetSGSvrData(nGroupID);
        if (sgSvrData == null)
            return false;

        //string strLoginType = sgSvrData.GetLoginType();
        string strLoginType = sgSvrData.GetBasicTagData("LOGINTYPE");
        eLoginType eData = eLoginType.eLOGINTYPE_ORIGIN;
        bool bRet = false;

        if (strLoginType.Length > 0)
        {
            eData = (eLoginType)Convert.ToInt32(strLoginType);
            bRet = true;
        }

        bShowPasswordUseTime = (eData == eLoginType.eLOGINTYPE_ORIGIN);
        bShowPasswordUseTime = false;

        return bRet;
    }

    // SGSideBarUI 와 동일
    public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        // ChangeActiveMenuWrap
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
    }

    public void SelectSideBar(string navURI)
    {

        int nGroupID = 0;
        string strMenuName = "";

        CLog.Here().Information("Welcome-MoveSideBar Forcus-Click-navURI : {0}", navURI);

        int nPos = -1;
        bool bChangedMenu = false;

        try
        {

            // 왼쪽 SideBar Navigate 되는 곳으로 선택되게 적용
            if (navURI.Length > 1)
            {

                nGroupID = groupIDbyParam;

                bool bEmailUse = siteConfig.GetUseEmailApprove(nGroupID);
                bool bPCURLUse = siteConfig.GetUsePCURL(nGroupID);
                bool bClipBoardApprUse = siteConfig.GetUseClipApprove(nGroupID);
                int nParentID = 0;
                ISGSideBarUI activeMenu = null;

                // 결재권한이 있을때에만 결재관리로 넘어가게 적용가능

                KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                eventArgs.Key = "Enter";

                // 결재관리 확인 - 선택변경
                strMenuName = "transferApprove";
                nPos = navURI.IndexOf(strMenuName);
                if (nPos > -1)
                {
                    activeMenu = SideBarUISvc.FindSubMenu(nGroupID, nParentID, 2);
                    if (activeMenu != null)
                    {
                        ChangeActiveMenuWrap(eventArgs, activeMenu);
                        bChangedMenu = true;
                    }
                }

                // 전송관리 확인 - 선택변경
                if (bChangedMenu == false)
                {
                    strMenuName = "transManage";
                    nPos = navURI.IndexOf(strMenuName);
                    if (nPos > -1)
                    {
                        activeMenu = SideBarUISvc.FindSubMenu(nGroupID, nParentID, 1);
                        if (activeMenu != null)
                        {
                            ChangeActiveMenuWrap(eventArgs, activeMenu);
                            bChangedMenu = true;
                        }
                    }
                }

                // 파일전송 확인 - 선택변경
                if (bChangedMenu == false)
                {
                    strMenuName = "transfer";
                    nPos = navURI.IndexOf(strMenuName);
                    if (nPos > -1)
                    {
                        activeMenu = SideBarUISvc.FindSubMenu(nGroupID, nParentID, 0);
                        if (activeMenu != null)
                        {
                            ChangeActiveMenuWrap(eventArgs, activeMenu);
                            bChangedMenu = true;
                        }
                    }
                }


                if (bEmailUse)
                {
                    // 메일 관리
                    nParentID++;
                }

                if (bPCURLUse)
                {
                    // PCURL 관리
                    nParentID++;
                }

                if (bClipBoardApprUse)
                {
                    // 클립보드 결재
                    nParentID++;
                }

                // 환경설정
                nParentID++;

                // 접속환경 - 선택변경
                if (bChangedMenu == false)
                {
                    strMenuName = "viewConf";
                    nPos = navURI.IndexOf(strMenuName);
                    if (nPos > -1)
                    {
                        activeMenu = SideBarUISvc.FindSubMenu(nGroupID, nParentID, 1);
                        if (activeMenu != null)
                        {
                            ChangeActiveMenuWrap(eventArgs, activeMenu);
                            bChangedMenu = true;
                        }
                    }
                }

                // 기본설정 확인 - 선택변경
                if (bChangedMenu == false)
                {
                    strMenuName = "netConf";
                    nPos = navURI.IndexOf(strMenuName);
                    if (nPos > -1)
                    {
                        activeMenu = SideBarUISvc.FindSubMenu(nGroupID, nParentID, 2);
                        if (activeMenu != null)
                        {
                            ChangeActiveMenuWrap(eventArgs, activeMenu);
                            bChangedMenu = true;
                        }
                    }
                }

            }

        }
        catch (Exception e)
        {
            CLog.Here().Information("Welcome-MoveSideBar Forcus-Click-Exception(Msg) : {0}", e.Message);
        }

    }


    /**
    *@biref 결재 Tab UI가 나와야 하는지 유무를 알려줌
    */
    public bool GetUseApproveMenu()
    {
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        SGUserData sgUserData = null;
        sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);


        if (sgLoginData != null && sgUserData != null)
        {
            // if (sgLoginData.GetApprove() == true)                        // 3망 Mode가 상관없이 Login때 사용하는 결재 권한으로 결재관리 조회 UI 생성
            if (pageService.GetUseApproveNetOver(groupID, sgLoginData))     // 3망 정책고려한 결재사용유무 설정
                if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                    return true;
        }

        return false;
    }


    public class Administrator
    {
        public string Name { get; set; }        // 이름
        public string Phone { get; set; }       // 전화번호
        public string Email { get; set; }       // E - Mail

    }

    public class transItem
    {
        public int dispNo { get; set; }
        public string apvType { get; set; }    //1:선결, 2:후결
        public string transKind { get; set; }   //1:반출, 2:반입
        public string Title { get; set; }
        public string approverStatus { get; set; }        // 결재 상태
        public string reqDate { get; set; }
        public transItem()
        {
            dispNo = 0;
            apvType = transKind = Title = approverStatus = reqDate;
        }
    }

    public class ApproveItem
    {
        public int dispNo { get; set; }
        public string apvType { get; set; }    //1:선결, 2:후결
        public string transKind { get; set; }   //1:반출, 2:반입
        public string requestorName { get; set; }           // 승인요청자
        public string Title { get; set; }
        public string reqDate { get; set; }
        public ApproveItem()
        {
            dispNo = 0;
            apvType = transKind = requestorName = Title = reqDate;
        }
    }


}
