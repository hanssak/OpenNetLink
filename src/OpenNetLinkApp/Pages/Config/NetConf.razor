@page "/netConf"
@page "/netConf/{groupIDbyParam:int}"

@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject IJSRuntime jsRuntime
@inject NavigationManager MyNavigationManager
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_ETC_BASICSET_TITLE")</h1>                                                            <!--기본설정-->
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_ETC_BASICSET_TITLE")</li>                                               <!--기본설정-->
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary card-outline mb-3">
                    <div class="card-body" style="height:auto;padding:0 0 0 0;">

                        <!--tab -->
                        <div class="col-14 col-sm-12">
                            <div class="card card-primary card-outline card-outline-tabs" style="box-shadow:none;">
                                <div class="card-header border-bottom-0">
                                    <ul class="nav nav-tabs pt-2" id="custom-tabs-four-tab" role="tablist">
                                        @if (bUseAutoLogin)
                                        {
                                            <li class="nav-item">
                                                <a class="nav-link  text-md text-bold" id="custom-tabs-four-messages-tab" data-toggle="pill" href="#custom-tabs-four-messages" role="tab" aria-controls="custom-tabs-four-messages" aria-selected="false">@XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX")</a>             <!--자동로그인-->
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div class="card-body" style="padding:0 0 0 0;">
                                    <div class="tab-content" id="custom-tabs-four-tabContent">
                                        @if (bUseAutoLogin == true)
                                        {
                                            <div class="tab-pane fade show active" id="custom-tabs-four-messages" role="tabpanel" aria-labelledby="custom-tabs-four-messages-tab">

                                                <div class="col-md-10">
                                                    <div class="title_set"><i class="fas fa-user-circle  mr-1"></i>@XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX")</div>                <!--자동 로그인-->
                                                    <div class="card-body pt-0" style="height:450px;">


                                                        <div class="row ml-2">
                                                            <div class="col-md-12" style="line-height:25px;">

                                                                @XmlConf.GetInfoMsg("I_0199")<br>                                  <!--자동로그인 적용 - 로그인 창이 뜨지 않고 바로 접속이 가능합니다.-->
                                                                @XmlConf.GetInfoMsg("I_0200")<br><br>                      <!--자동로그인 해제 - 로그인 창이 뜨고, 아이디/패스워드 입력하고 접속합니다.-->
                                                                @XmlConf.GetInfoMsg("I_0201")<br><br>                                      <!--아래 자동로그인 여부를 선택하시면, 적용됩니다.-->
                                                            </div>
                                                            <div class="col-md-12">
                                                                <div class="row" style=" border:1px solid #ddd; background-color:#f9f9f9; padding-top:10px; padding-bottom:10px; padding-left:30px;">
                                                                    <div class="custom-control custom-radio mr-3 ">
                                                                        <input ondrop="return false;" ondragover="return false;" class="custom-control-input" type="radio" id="customRadio1" name="customRadio" checked="@bAutoLoginContinue" @onclick="AutoLoginApply">
                                                                        <label for="customRadio1" class="custom-control-label pt-1">@XmlConf.GetTitle("T_MENU_AUTOLOGIN_APPLY")</label>                            <!--자동로그인 적용-->
                                                                    </div>
                                                                    <div class="custom-control custom-radio">
                                                                        <input ondrop="return false;" ondragover="return false;" class="custom-control-input" type="radio" id="customRadio2" name="customRadio" checked="@(!bAutoLoginContinue)" @onclick="AutoLoginClear">
                                                                        <label for="customRadio2" class="custom-control-label pt-1">@XmlConf.GetTitle("T_MENU_AUTOLOGIN_CLEAR")</label>                            <!--자동로그인 해제-->
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <!-- /.card -->
                            </div>
                        </div>

                        <!--./tab -->

                    </div>
                </div>
            </div>
        </div>
    </div>

</section>





@code {
    //********************************************************************************
    //대결재 기능, 인증서 전송은 기능 제거함, 소스도 추후 제거 필요함 2021/06/01 YKH
    //********************************************************************************
    [Parameter]
    public int groupIDbyParam { get; set; }

    //int nDrawPageGroupID = -1;                  // 중복실행 방지 Flag 및 groupId 지정

    public bool bAutoLoginContinue;
    public bool bUseAutoLogin;
    SGSettingsDBProc sgSettingProc;
    ISGSideBarUIService SideBarUISvc;
    ISGSiteConfigService siteConfig;
    //대결재 변수
    private LinkedList<ProxyInfo> ProxySearch = new LinkedList<ProxyInfo>();
    private LinkedList<ProxyInfo> ProxySelect = new LinkedList<ProxyInfo>();
    private string stSelectProxy = "";
    private string stTargetSelect = "";
    private static Action<string> actionAssign;
    private static Action<string> actionTargetSelect;

    public bool bDeputyApprove = false;
    public bool bCertSend = false;

    public string strActiveTab = "";

    private void deleteSelectedItem(String index)
    {
        //Console.WriteLine(ProxySelect.Count);
        foreach(ProxyInfo item in ProxySelect)
        {
            if( item.Index == index )
            {
                ProxySelect.Remove(item);
                break;
            }
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        sgSettingProc = SGSettingsDBProc.Instance;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        bUseAutoLogin = siteConfig.GetUseAutoLogin(groupID);
        bAutoLoginContinue = sgSettingProc.GetSettingAutoLogin(groupID);

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {
            bDeputyApprove = sgLoginData.GetDeputyApprove();
        }
        bCertSend = siteConfig.GetUseCertSend(groupID);


        actionAssign = AssignProxy;
        actionTargetSelect = SelectTarget;
        //대결재 심플  데이타
        ProxySearch.AddLast(new ProxyInfo("001", "개발3팀", "사원", "1번님"));
        ProxySearch.AddLast(new ProxyInfo("002", "개발3팀", "사원", "2번님"));
        ProxySearch.AddLast(new ProxyInfo("003", "개발3팀", "사원", "3번님"));
        ProxySearch.AddLast(new ProxyInfo("004", "개발3팀", "사원", "4번님"));
        ProxySearch.AddLast(new ProxyInfo("005", "개발3팀", "사원", "5번님"));
        ProxySearch.AddLast(new ProxyInfo("006", "개발3팀", "사원", "6번님"));
        ProxySearch.AddLast(new ProxyInfo("007", "개발3팀", "사원", "7번님"));
        ProxySearch.AddLast(new ProxyInfo("008", "개발3팀", "사원", "8번님"));
        ProxySearch.AddLast(new ProxyInfo("009", "개발3팀", "사원", "9번님"));
        ProxySearch.AddLast(new ProxyInfo("010", "개발3팀", "사원", "10번님"));
        ProxySearch.AddLast(new ProxyInfo("011", "개발3팀", "사원", "11번님"));
        ProxySearch.AddLast(new ProxyInfo("012", "개발3팀", "사원", "12번님"));
        ProxySearch.AddLast(new ProxyInfo("013", "개발3팀", "사원", "13번님"));
        ProxySearch.AddLast(new ProxyInfo("014", "개발3팀", "사원", "14번님"));
        ProxySearch.AddLast(new ProxyInfo("015", "개발3팀", "사원", "15번님"));
        ProxySearch.AddLast(new ProxyInfo("016", "개발3팀", "사원", "16번님"));
        ProxySearch.AddLast(new ProxyInfo("018", "개발3팀", "사원", "17번님"));
        ProxySearch.AddLast(new ProxyInfo("019", "개발3팀", "사원", "17번님"));

        ProxySelect.AddLast(new ProxyInfo("000", "개발3팀", "사원", "0번님"));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initPageLeft");
        }
        base.OnAfterRender(firstRender);
    }


    private void AddSelectApprover()
    {
        if (stSelectProxy.Length < 1)
            return;
        ProxyInfo apv = ProxySearch.FirstOrDefault(x => x.Index == stSelectProxy);
        if (apv != null)
        {
            ProxyInfo apvAsign = ProxySelect.FirstOrDefault(x => x.Index == stSelectProxy);
            if (apvAsign == null)
                ProxySelect.AddLast(apv);
        }
        StateHasChanged();
    }


    private void RemoveAssignApprover()
    {
        ProxyInfo apvTarget = ProxySelect.FirstOrDefault(x => x.Index == stTargetSelect);
        if (apvTarget != null)
            ProxySelect.Remove(apvTarget);
        StateHasChanged();
    }

    [JSInvokable("ProxyTargetSelect2")]
    public static void ProxyTargetSelect2(string value)
    {
        actionTargetSelect.Invoke(value);
    }

    private void SelectTarget(string value)
    {
        stTargetSelect = value;
        StateHasChanged();
    }

    [JSInvokable("ProxySearchSelect2")]
    public static void ProxySearchSelect2(string value)
    {
        actionAssign.Invoke(value);
    }

    private void AssignProxy(string value)
    {
        stSelectProxy = value;
        StateHasChanged();
    }


    public void AutoLoginStatusChange()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        sgSettingProc.SetSettingAutoLogin(groupID, bAutoLoginContinue);

        StateHasChanged();
    }


    public void AutoLoginApply()
    {

        // 자동로그인 적용
        if (!bAutoLoginContinue)
            bAutoLoginContinue = true;

        if (siteConfig.GetUseOneToMultiLogin())
        {
            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            foreach (ISGNetwork Net in listNetWork)
            {
                sgSettingProc.SetSettingAutoLogin(Net.GroupID, bAutoLoginContinue);
            }
        }
        else
        {
            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
                groupID = sgSideBar.GroupId;

            sgSettingProc.SetSettingAutoLogin(groupID, bAutoLoginContinue);
        }

        StateHasChanged();
    }


    public void AutoLoginClear()
    {
        // 자동로그인 해제
        if (bAutoLoginContinue)
            bAutoLoginContinue = false;


        if (siteConfig.GetUseOneToMultiLogin())
        {
            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            foreach (ISGNetwork Net in listNetWork)
            {
                sgSettingProc.SetSettingAutoLogin(Net.GroupID, bAutoLoginContinue);
            }
        }
        else
        {
            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
                groupID = sgSideBar.GroupId;

            sgSettingProc.SetSettingAutoLogin(groupID, bAutoLoginContinue);
        }

        StateHasChanged();
    }


    private void HomeMove()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }

    }


    public class ProxyInfo
    {
        public ProxyInfo(string index, string deptname, string grade, string name)
        {
            Index = index;
            DeptName = deptname;
            Grade = grade;
            Name = name;
        }

        public string Index { get; set; }
        public string DeptName { get; set; }
        public string Grade { get; set; }
        public string Name { get; set; }
    }
}
