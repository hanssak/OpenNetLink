@page "/alarmList"
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSGData
@using OpenNetLinkApp.PageEvent
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HsCmdCenter
@inject IJSRuntime jsRuntime

       
<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_INFO_ALARM")</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/Welcome">Home</a></li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_INFO_ALARM")</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary card-outline mb-3">
                    <div class="card-body">



                        <div class="col-md-10">
                            <div class="table-responsive">
                                <div class="title_notice"><i class="fas fa-bell mr-2"></i>@XmlConf.GetTitle("T_INFO_CHECK_ALARM")</div>
                                <table class="table_notice table_notice_hover">
                                    <colgroup>
                                        <col width="7%">
                                        <col width="10%">
                                        <col width="20%">
                                        <col width="*">
                                        <col width="20%">
                                    </colgroup>
                                    <tr>
                                        <th><input type="checkbox" checked="@bAllCheck" @onclick="(e=>AllCheckStateUpdate())"></th>
                                        <th>@XmlConf.GetTitle("T_INFO_NETWORK_KIND")</th>
                                        <th>@XmlConf.GetTitle("T_INFO_MESSAGE_TITLE")</th>
                                        <th>@XmlConf.GetTitle("T_INFO_MESSAGE_LIST")</th>
                                        <th>@XmlConf.GetTitle("T_INFO_TIME")</th>
                                    </tr>
                                    @foreach (AlarmData item in listData)
                                    {
                                        <tr>
                                            <td class="text-center"><input type="checkbox" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))"></td>
                                            <td>@item.strNetWorkInfo</td>
                                            <td>@item.strTitle</td>
                                            <td class="text-left"><a href="" class="cont1">@item.strMsg</a></td>
                                            <td>@item.strTime</td>
                                        </tr>
                                    }
                                </table>


                                <!--S page -->

                                <div class="clearfix" style="padding:1.25rem 0;">
                                    <div style="float:left;">
                                        <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@XmlConf.GetTitle("T_TRANS_TOTALPAGE") @nViewPageNo/@nTotalPages</div>
                                    </div>
                                    <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                               NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                               UpdateListPagingInvoke="UpdateList"></Pagenator>
                                </div>

                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int dispLimit = 1;
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int nStartPage = 1;
    public string curUserID = "";
    //ISGSideBarUIService SideBarUISvc;

    List<SGAlarmData> listAlarmData = new List<SGAlarmData>();
    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;
    List<AlarmData> listData = new List<AlarmData>();

    public bool bAllCheck = false;

    private void UpdateList(int pageNumber)
    {
        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            listData = GetAlarmData(nViewPageNo);
            StateHasChanged();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initPageLeft");
        }
        base.OnAfterRender(firstRender);
    }
    protected override void OnInitialized()
    {
        HsCmdCenter.sgPageEvent.SetNotiAfterTotalAlarmEventAdd(AlarmPageReflash);
        base.OnInitialized();
        GetDBAlarmData();
    }

    public void GetDBAlarmData()
    {
        listAlarmData.Clear();
        int count = HsCmdCenter.GetNetWorkCount();
        for (int i = 0; i < count; i++)
        {
            SGUserData sgUserData = null;
            sgUserData = (SGUserData)HsCmdCenter.GetUserData(i);
            if (sgUserData == null)
                continue;
            string strUserSeq = sgUserData.GetUserSequence();
            List<SGAlarmData> listTemp = SQLiteDB.SelectAlarmInfoLimit(i, strUserSeq, 1000);
            listAlarmData.AddRange(listTemp);
        }
        listAlarmData = listAlarmData.OrderByDescending(x => x.Time).ToList();

        SetPageinfo(listAlarmData.Count);

        GetAlarmData(nViewPageNo);
        StateHasChanged();
    }

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;
        if (nTotalPages <= 0)
            nTotalPages = 1;
        nViewPageNo = nStartPage = 1;
    }
    public List<AlarmData> GetAlarmData(int nViewPageNo)
    {
        if (nViewPageNo > nTotalPages)
            return null;

        int nDataCount = listAlarmData.Count;
        if (nDataCount <= 0)
        {
            nViewPageNo = 1;
            return null;
        }

        listData.Clear();
        int idx = (nViewPageNo - 1) * 10;
        int nLimitCount = 10;
        if (nDataCount < (idx + nLimitCount))
        {
            if (idx <= 0)
                nLimitCount = nDataCount;
            else
                nLimitCount = nDataCount % idx;
        }
        for (int i = idx; i < (nLimitCount+idx); i++)
        {
            string strNetWorkInfo = GetNetWorkInfo(listAlarmData[i].GroupId);
            string strTitle = listAlarmData[i].Head;
            string strMsg = listAlarmData[i].Body;
            string strTime = listAlarmData[i].Time?.ToString();
            listData.Add(new AlarmData(i,strNetWorkInfo, strTitle, strMsg, strTime));
        }

        return listData;
    }
    public string GetNetWorkInfo(int groupID)
    {
        string strFromName = "";
        string strToName = "";
        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        return strFromName;
    }
    public void AlarmPageReflash()
    {
        bAllCheck = false;
        GetDBAlarmData();
    }
    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = listData.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < nCount; i++)
        {
            listData[i].bCheck = bAllCheck;
        }

        StateHasChanged();
    }
    public void CheckStateUpdate(AlarmData item)
    {
        if (listData.Count <= 0)
            return;
        for (int i = 0; i < listData.Count; i++)
        {
            if (item.nIndex == listData[i].nIndex)
            {
                listData[i].bCheck = !(listData[i].bCheck);
                break;
            }
        }
        StateHasChanged();

    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }
    public class AlarmData
    {
        public bool bCheck;
        public int nIndex;
        public string strNetWorkInfo = "";      // 전송망
        public string strTitle = "";            // 제목
        public string strMsg = "";              // 메시지
        public string strTime = "";             // 시간

        public AlarmData()
        {
            nIndex = 0;
            bCheck = false;
            strNetWorkInfo = strTitle = strMsg = strTime = "";
        }
        public AlarmData(int idx, string strNetInfo, string title, string msg, string time)
        {
            bCheck = false;
            nIndex = idx;
            strNetWorkInfo = strNetInfo;
            strTitle = title;
            strMsg = msg;
            strTime = time;
        }
    }
}
