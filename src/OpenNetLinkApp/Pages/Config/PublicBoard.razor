@page "/publicBoard"
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSGData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGQuery
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HsCmdCenter
@inject IJSRuntime jsRuntime
@inject ISGAppManagerService SGAppMgrSvc
<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_COMMON_NOTIFY")</h1>                                                                             <!--공지사항-->
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/Welcome"><i class="fas fa-home mr-1"></i>Home</a></li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_COMMON_NOTIFY")</li>                                                                         <!--공지사항-->
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary card-outline mb-3">
                    <div class="card-body">



                        <div class="col-md-10">
                            <div class="table-responsive">
                                <div class="title_notice"><i class="fas fa-leaf mr-2"></i>@XmlConf.GetInfoMsg("I_0209")</div>                                               <!--새로운 소식을 알려드립니다.-->
                                <div class="table_notice table_notice_hover text-right">
                                    <button type="button" class="btn btn-md btn-red" @onclick="DelBoardData"><i class="fas fa-times-circle"></i>@strDelete</button>                                 <!--삭제-->
                                </div>
                                <table class="table_notice table_notice_hover">
                                    <colgroup>
                                        <col width="7%">
                                        <col width="10%">
                                        <col width="20%">
                                        <col width="*">
                                        <col width="20%">
                                    </colgroup>
                                    <tr>
                                        <th><input type="checkbox" checked="@bAllCheck" @onclick="(e=>AllCheckStateUpdate())"></th>
                                        <th>@XmlConf.GetTitle("T_INFO_NETWORK_KIND")</th>
                                        <th>@XmlConf.GetTitle("T_INFO_MESSAGE_TITLE")</th>
                                        <th>@XmlConf.GetTitle("T_INFO_MESSAGE_LIST")</th>
                                        <th>@XmlConf.GetTitle("T_INFO_TIME")</th>
                                    </tr>
                                    @foreach (BoardData item in listData)
                                    {
                                        <tr>
                                            <td class="text-center"><input type="checkbox" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))"></td>
                                            <td>@item.strNetWorkInfo</td>
                                            <td>@item.strTitle</td>
                                            <td class="text-left"><a href="" class="cont1">@item.strMsg</a></td>
                                            <td>@item.strTime</td>
                                        </tr>
                                    }
                                </table>


                                <!--S page -->

                                <div class="clearfix" style="padding:1.25rem 0;">
                                    <div style="float:left;">
                                        <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@XmlConf.GetTitle("T_TRANS_TOTALPAGE") : @nViewPageNo/@nTotalPages</div>
                                    </div>
                                    <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                               NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                               UpdateListPagingInvoke="UpdateList"></Pagenator>
                                </div>


                                <!--/.S page -->




                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int dispLimit = 1;
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int nStartPage = 1;
    public string curUserID = "";
    ISGSideBarUIService SideBarUISvc;

    List<SGNotiData> listBoardData = new List<SGNotiData>();
    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;
    List<BoardData> listData = new List<BoardData>();

    public bool bAllCheck = false;

    public string strDelete = "";

    public void InitText()
    {
        strDelete = XmlConf.GetTitle("T_ETC_DELETEDATA");           // 삭제
    }

    private void UpdateList(int pageNumber)
    {
        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            listData = GetBoardData(nViewPageNo);
            StateHasChanged();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
        }
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HsCmdCenter.sgPageEvent.SetBoardNotiAfterTotalBoardEventAdd(BoardPageReflash);

        InitText();
        base.OnInitialized();
        GetDBBoardData();
    }


    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;
        if (nTotalPages <= 0)
            nTotalPages = 1;
        nViewPageNo = nStartPage = 1;
    }

    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = listData.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < nCount; i++)
        {
            listData[i].bCheck = bAllCheck;
        }

        StateHasChanged();
    }
    public void CheckStateUpdate(BoardData item)
    {
        if (listData.Count <= 0)
            return;
        for (int i = 0; i < listData.Count; i++)
        {
            if (item.nIndex == listData[i].nIndex)
            {
                listData[i].bCheck = !(listData[i].bCheck);
                break;
            }
        }
        StateHasChanged();

    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }
    public List<BoardData> GetBoardData(int nViewPageNo)
    {
        if (nViewPageNo > nTotalPages)
            return listData;

        int nDataCount = listBoardData.Count;
        if (nDataCount <= 0)
        {
            nViewPageNo = 1;
            listData.Clear();
            return listData;
        }

        listData.Clear();
        int idx = (nViewPageNo - 1) * 10;
        int nLimitCount = 10;
        if (nDataCount < (idx + nLimitCount))
        {
            if (idx <= 0)
                nLimitCount = nDataCount;
            else
                nLimitCount = nDataCount % idx;
        }
        for (int i = idx; i < (nLimitCount + idx); i++)
        {
            string strNetWorkInfo = GetNetWorkInfo(listBoardData[i].GroupId);
            string strTitle = listBoardData[i].Head;
            string strMsg = listBoardData[i].Body;
            string strTime = listBoardData[i].Time?.ToString();

            if (listBoardData[i].Type == NOTI_TYPE.SYSTEM)
            {
                string strBoardSeq = listBoardData[i].Seq;
                listData.Add(new BoardData(listBoardData[i].GroupId,listBoardData[i].Id,i,strNetWorkInfo, strTitle, strMsg, strTime, strBoardSeq));
            }
        }

        return listData;
    }
    public void GetDBBoardData()
    {
        listBoardData.Clear();
        int count = HsCmdCenter.GetNetWorkCount();
        for (int i = 0; i < count; i++)
        {
            SGUserData sgUserData = null;
            sgUserData = (SGUserData)HsCmdCenter.GetUserData(i);
            if (sgUserData == null)
                continue;
            string strUserSeq = sgUserData.GetUserSequence();
            List<SGNotiData> listTemp = SQLiteDB.SelectNotiInfoLimit(NOTI_TYPE.SYSTEM, i, strUserSeq, 1000);
            listBoardData.AddRange(listTemp);
        }
        listBoardData = listBoardData.OrderByDescending(x => x.Time).ToList();

        SetPageinfo(listBoardData.Count);

        GetBoardData(nViewPageNo);
        StateHasChanged();
    }
    void BoardPageReflash(int groupID)
    {
        bAllCheck = false;
        GetDBBoardData();
    }
    public string GetNetWorkInfo(int groupID)
    {
        string strFromName = "";
        string strToName = "";
        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        return strFromName;
    }

    public void DelBoardData()
    {
        if (listData.Count <= 0)
            return;

        bool bCheckStatus = false;
        for (int i = 0; i < listData.Count; i++)
        {
            if (listData[i].bCheck)
            {
                bCheckStatus = true;
                break;
            }
        }
        string strMsg = "";
        if (!bCheckStatus)
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        List<BoardData> listTmpBoardData = new List<BoardData>();
        for(int i=0;i<listData.Count;i++)
        {
            if (listData[i].bCheck)
            {
                listTmpBoardData.Add(listData[i]);
            }
        }
        if(listTmpBoardData.Count<=0)
        {
            return;
        }

        SGQueryExtend sgQueryExtend = null;
        sgQueryExtend = new SGQueryExtend();
        if (sgQueryExtend == null)
            return;

        for (int i=0;i< listTmpBoardData.Count;i++)
        {
            int groupID = listTmpBoardData[i].groupID;
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
            if (sgLoginData == null)
                continue;

            string strUserID = sgLoginData.GetUserID();
            string strQuery = sgQueryExtend.GetSGNotifyStatus(listTmpBoardData[i].strBoardSeq,strUserID,"1");
            HsCmdCenter.SendBoardNotiConfirm(groupID, strUserID, strQuery);

            for (int j = 0; j < listBoardData.Count; j++)
            {
                if (listTmpBoardData[i].nID == listBoardData[j].Id)
                {
                    SGNotiData sgNotiData = null;
                    sgNotiData = listBoardData[j];
                    if (sgNotiData != null)
                        DelNotiInfo(sgNotiData);
                }
            }
        }
        StateHasChanged();
    }

    private bool DelNotiInfo(SGNotiData notiData)
    {
        SQLiteDB.DeleteNotiInfo(notiData);
        int groupID = notiData.GroupId;
        BoardDeleteHasChange(groupID);
        SideBarUISvc.EmitNotifyStateChangedActMenu();
        return true;
    }
    public void BoardDeleteHasChange(int groupID)
    {
        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        BoardNotiAfterTotalBoardEvent boardNotiAfterTotalBoard = null;
        boardNotiAfterTotalBoard = HsCmdCenter.sgPageEvent.GetBoardNotiAfterTotalBoardEvent();
        if (boardNotiAfterTotalBoard != null)
            boardNotiAfterTotalBoard(groupID);
    }

    public class BoardData
    {
        public int groupID;
        public long nID;
        public bool bCheck;
        public int nIndex;
        public string strNetWorkInfo = "";      // 전송망
        public string strTitle = "";            // 제목
        public string strMsg = "";              // 메시지
        public string strTime = "";             // 시간
        public string strBoardSeq = "";         // 공지사항 Seq

        public BoardData()
        {
            bCheck = false;
            nID = groupID = nIndex = 0;
            strNetWorkInfo = strTitle = strMsg = strTime = "";
        }
        public BoardData(int groupid,long id,int idx,string strNetInfo, string title, string msg, string time, string strSeq = "0")
        {
            groupID = groupid;
            nID = id;
            bCheck = false;
            nIndex = idx;
            strNetWorkInfo = strNetInfo;
            strTitle = title;
            strMsg = msg;
            strTime = time;
            strBoardSeq = strSeq;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
}