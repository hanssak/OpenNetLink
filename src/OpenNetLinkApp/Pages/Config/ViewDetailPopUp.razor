@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc

<div class="modal fade" id="ViewDetail_PopUp" data-backdrop="static">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                <h5 class="modal-title pt-1 text-bold ">@strTitle</h5>                             
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-body p-0">

                    <textarea class="form-control" rows="15" @bind="@stDetail"></textarea>



                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_FILE_FOLD")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    private string stDetail = String.Empty;

    public string strTitle = String.Empty;

    protected override void OnInitialized()
    {
        stDetail = "공지사항 디테일 팝업 신규 생성공지사항 디테일 팝업 신규 생성공지사항 디테일 팝업 신규 생성공지사항 디테일 팝업 신규 생성";
    }
    public void SetText(string title,string strText)
    {
        strTitle = title;
        stDetail = strText;
        StateHasChanged();
    }
    public async Task openPopUp()
    {
        object[] param = { "ViewDetail_PopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        object[] param = { "ViewDetail_PopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}
