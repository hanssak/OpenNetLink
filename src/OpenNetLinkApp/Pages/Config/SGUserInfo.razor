@page "/UserInfo"
@page "/UserInfo/{groupIDbyParam:int}"

@using System.Diagnostics
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSG
@inject IJSRuntime JSRuntime
@inject ISGAppManagerService SGAppMgrSvc
@inject IFileReaderService fileReaderService
@inject HSCmdCenter HSCmdCenter
@inject XmlConfService XmlConf
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager
<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_ETC_USER_INFO")</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_ETC_USER_INFO")</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary card-outline mb-3">
                    <div class="card-body">

                        <div class="col-md-12">
                            <div class="table">
                                <div class="title_set1">
                                    <i class="fas fa-caret-right mr-2"></i>@XmlConf.GetTitle("T_ETC_BASICINFO_TITLE")
                                </div>
                                <table class="table_set1">
                                    <colgroup>
                                        <col width="22%">
                                        <col width="78%">
                                    </colgroup>
                                    <tr>
                                        <th>@XmlConf.GetTitle("T_COMMON_USER_NAME")</th>
                                        <td>
                                            @(GetUserInfo()?.UserName) &nbsp;&nbsp;&nbsp;
                                            @if (pageService.GetGroupIDLoginType(groupIDbyParam) != eLoginType.eLOGINTYPE_AD && SGAppMgrSvc.OpConfigInfoService.GetUseUserPWChange(groupIDbyParam))
                                            {
                                                <button type="button" class="btn bg-gradient-secondary btn-xs col-md-3" style="width:500px;" @onclick="openPWChangePopUp">@XmlConf.GetTitle("T_ETC_CHANGE_PASSWORD")</button>
                                            }
                                        </td>
                                        <!-- <td rowspan="4" class="p-0 text-center align-middle">
                                        <img src="@stProfilePhotoPath" alt="User Avatar" class="img-size-90 img-circle"><br>
                                        <div class="row">
                                            <div class="col-md-12 mt-2" style="font-size:.7px !important;">
                                                <input type="file" id="profileInput" accept=".gif,.jpg,.jpeg,.png" style="display:none" @onchange="doRegist" />
                                            </div>
                                        </div>
                                        </td> -->
                                        <!--<button type="button" class="btn bg-gradient-secondary btn-xs col-md-3 " @onclick="OpenFileSelect">@XmlConf.GetTitle("T_PHOTO_REGIST")</button>-->
                                    </tr>
                                    <tr>
                                        <th>@XmlConf.GetTitle("T_COMMON_DEPT_NAME")</th>
                                        <td>@(GetUserInfo()?.DeptName)</td>
                                    </tr>
                                    <tr>
                                        <th>@XmlConf.GetTitle("T_COMMON_RANK_TITLE")</th>
                                        <td>@(GetUserInfo()?.Position)</td>
                                    </tr>
                                    <tr>
                                        <th>@XmlConf.GetTitle("T_COMMON_RANK_GRADE")</th>
                                        <td>@(GetUserInfo()?.Rank)</td>
                                    </tr>
                                </table>



                                <div class="table-responsive">
                                    <div class="title_set1"><i class="fas fa-caret-right mr-2"></i>@stTitleApvRight </div>
                                    <table class="table_set1">
                                        <colgroup>
                                            <col width="22%">
                                            <col width="28%">
                                            <col width="22%">
                                            <col width="28%">
                                        </colgroup>
                                        <tr>
                                            <th>@stTitleApvRight</th>
                                            <td>@stViewApproveRight</td>
                                            <th>@stTitlePrivacyApvRight</th>
                                            <td>@stViewPrivacyUser</td>
                                        </tr>
                                    </table>


                                    <div class="table-responsive">
                                        <div class="title_set1"><i class="fas fa-caret-right mr-2"></i>@stTitleTransDayLimit</div>
                                        <table class="table_set1">
                                            <colgroup>
                                                <col width="22%">
                                                <col width="28%">
                                                <col width="22%">
                                                <col width="28%">
                                            </colgroup>
                                            <tr>
                                                <th>@stTitleTransCountLimit</th>
                                                <td>@strDataDayFileTransMaxCount</td>
                                                <th>@stTitleTransSizeLimit</th>
                                                <td>@strDataDayFileTransMaxSize</td>
                                            </tr>
                                        </table>

                                        <div class="table-responsive">
                                            <div class="title_set1"><i class="fas fa-caret-right mr-2"></i>@stTitleDayClipboardMaxSize</div>
                                            <table class="table_set1">
                                                <colgroup>
                                                    <col width="22%">
                                                    <col width="28%">
                                                    <col width="22%">
                                                    <col width="28%">
                                                </colgroup>
                                                <tr>
                                                    <th>@stTitleTransCountLimit</th>
                                                    <td>@strDataDayClipboardMaxCount</td>
                                                    <th>@stTitleTransSizeLimit</th>
                                                    <td>@strDataDayClipboardMaxSize</td>
                                                </tr>
                                            </table>

                                            <div class="table-responsive">
                                                <div class="title_set1"><i class="fas fa-caret-right mr-2"></i>@stTitleExtLimitInfo</div>
                                                <table class="table_set1">
                                                    <colgroup>
                                                        <col width="100%">
                                                    </colgroup>
                                                    <tr>
                                                        <th>

                                                            <div class="row">
                                                                <div class="custom-control custom-radio mr-3 ml-1">
                                                                    <input class="custom-control-input" type="radio" id="customRadio1" name="customRadio" checked="@bExt1" disabled="true">
                                                                    <label for="customRadio1" class="custom-control-label pt-1">@stTitleExtWhite</label>
                                                                </div>
                                                                <div class="custom-control custom-radio">
                                                                    <input class="custom-control-input" type="radio" id="customRadio2" name="customRadio" checked="@bExt2" disabled="true">
                                                                    <label for="customRadio2" class="custom-control-label pt-1">@stTitleExtBlack</label>
                                                                </div>
                                                            </div>

                                                        </th>
                                                    </tr>
                                                    <tr>
                                                        <td colspan="2">@strExtInfo</td>
                                                    </tr>
                                                </table>

                                                <div class="table-responsive">
                                                    <div class="title_set1"><i class="fas fa-caret-right mr-2"></i>@stTitleURLAutoDedirect</div>
                                                    <table class="table_set1">
                                                        <colgroup>
                                                            <col width="100%">
                                                        </colgroup>
                                                        <tr>
                                                            <td>

                                                                <div class="row">
                                                                    <div class="custom-control custom-radio mr-3 ml-1">
                                                                        <input class="custom-control-input" type="radio" id="customRadio3" name="customRadio1" checked="@bUrlUse" disabled="true">
                                                                        <label for="customRadio3" class="custom-control-label pt-1 mr-2">@XmlConf.GetTitle("T_COMMON_FORWARD_USE")</label>
                                                                    </div>
                                                                    <div class="custom-control custom-radio">
                                                                        <input class="custom-control-input" type="radio" id="customRadio4" name="customRadio1" checked="@bUrlNotUse" disabled="true">
                                                                        <label for="customRadio4" class="custom-control-label pt-1">@XmlConf.GetTitle("T_COMMON_FORWARD_UNUSE")</label>
                                                                    </div>
                                                                </div>

                                                            </td>
                                                        </tr>

                                                    </table>


                                                </div>
                                            </div>


                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<PWChangeUser @ref="refPWChangeUser"></PWChangeUser>

@code {

    [Parameter]
    public int groupIDbyParam { get; set; }

    ISGSideBarUIService SideBarUISvc;
    ISGUserInfoService UserInfoSvc;
    public ElementReference inputTypeFileElement;
    IFileReaderRef dropReference;
    private string stProfilePhotoPath;
    PWChangeUser refPWChangeUser;

    private string stTitleApvRight;
    private string stTitlePrivacyApvRight;
    private string stTitleTransDayLimit;
    private string stTitleTransCountLimit;
    private string stTitleTransSizeLimit;
    private string stTitleDayClipboardMaxSize;
    private string stTitleExtLimitInfo;
    private string stTitleExtWhite;             // 허용(White)
    private string stTitleExtBlack;             //차단(black)
    private string stTitleURLAutoDedirect;

    private string stViewApproveRight;
    private string stViewPrivacyUser;
    // 일일 파일 전송 최대 회수
    private string strDataDayFileTransMaxCount;
    // 일일 파일 전송 최대 용량
    private string strDataDayFileTransMaxSize;
    // 일일 클립보드 전송 최대 회수
    private string strDataDayClipboardMaxCount;
    // 일일 클립보드 전송 최대 용량                                                                                                                                                                           // 일일 클립보드 전송 최대 용량
    private string strDataDayClipboardMaxSize;
    private bool bExt1 = true;
    private bool bExt2 = false;
    private string strExtInfo;
    private bool bUrlUse = true;
    private bool bUrlNotUse = false;

    private async Task openPWChangePopUp()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        pageService.SetPassWDChgType(groupID, ePassWDType.eUSERPASSWDCHG);
        HsNetWork hsNet = null;
        hsNet = HSCmdCenter.GetConnectNetWork(groupID);
        if (hsNet != null)
        {
            pageService.SetProtectedSessionKey(groupID, hsNet.GetProtectedSeedKey());
        }
        refPWChangeUser.Init();
        await refPWChangeUser.openPopUp();
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        UserInfoSvc = SGAppMgrSvc.UserInfoService;
        RefreshProfilePhoto();

        InitData();
    }

    void InitData()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        stTitleApvRight = XmlConf.GetTitle("T_INFO_USER_APPROVE_RIGHT");
        stTitlePrivacyApvRight = XmlConf.GetTitle("T_INFO_USER_PRIVACY_APPROVE_RIGHT");
        stTitleTransDayLimit = XmlConf.GetTitle("T_INFO_ONEDAY_FILESEND");
        stTitleTransCountLimit = XmlConf.GetTitle("T_INFO_ONEDAY_TRANCE_COUNTLIMIT");
        stTitleTransSizeLimit = XmlConf.GetTitle("T_INFO_ONEDAY_TRANCE_SIZELIMIT");
        stTitleDayClipboardMaxSize = XmlConf.GetTitle("T_INFO_ONEDAY_CLIPSEND");                             // 일일클립보드 전송 제한
        stTitleExtLimitInfo = XmlConf.GetTitle("T_eFAEXT");                                                  // 확장자 제한
        stTitleExtWhite = XmlConf.GetTitle("T_INFO_CHECK_EXTENSION_WHITE");                                  // 허용(White)
        stTitleExtBlack = XmlConf.GetTitle("T_INFO_CHECK_EXTENSION_BLACK");
        stTitleURLAutoDedirect = XmlConf.GetTitle("T_INFO_URLREDIRECT_AUTO");

        stViewApproveRight = sgUserData.GetUserApprposString();
        stViewPrivacyUser = sgUserData.GetUserPrivacyApprPosString();

        int nCount = 0;
        Int64 nSize = 0;


        if (sgLoginData.GetFileTrans())
        {
            nCount = sgLoginData.GetDayFileTransferLimitCount();
            if (nCount > 0)
                strDataDayFileTransMaxCount = String.Format(XmlConf.GetInfoMsg("I_0130"), nCount);
            else
                strDataDayFileTransMaxCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                              // 무제한

            nSize = sgLoginData.GetDayFileTransferLimitSize();
            if (nSize > 0)
                strDataDayFileTransMaxSize = String.Format(XmlConf.GetTitle("T_INFO_LIMMIT_SIZE"), nSize);
            else
                strDataDayFileTransMaxSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                              // 무제한
        }
        else
        {
            strDataDayFileTransMaxCount = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");
            strDataDayFileTransMaxSize = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");
        }

        if (sgLoginData.GetClipboard())
        {

            nCount = sgLoginData.GetDayClipboardLimitCount();
            if (nCount > 0)
                strDataDayClipboardMaxCount = String.Format(XmlConf.GetInfoMsg("I_0130"), nCount);                                      // 2000개까지 전송
            else
                strDataDayClipboardMaxCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                              // 무제한

            nSize = sgLoginData.GetDayClipboardLimitSize();
            if (nSize > 0)
                strDataDayClipboardMaxSize = String.Format(XmlConf.GetTitle("T_INFO_LIMMIT_SIZE"), nSize);                                 // 15,000MB까지 전송
            else
                strDataDayClipboardMaxSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                              // 무제한
        }
        else
        {
            strDataDayClipboardMaxCount = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");
            strDataDayClipboardMaxSize = XmlConf.GetTitle("T_INFO_LIMMIT_NOT_USED");
        }

        // 확장자 제한 타입
        if (sgLoginData.GetFileFilterType())
        {
            bExt1 = true;
            bExt2 = false;
        }
        else
        {
            bExt1 = false;
            bExt2 = true;
        }
        // 확장자 제한
        strExtInfo = sgLoginData.GetFileFilter();

        // URL 리다이렉션 사용 유무
        if (sgLoginData.GetURLRedirect())
        {
            bUrlUse = true;
            bUrlNotUse = false;
        }
        else
        {
            bUrlUse = false;
            bUrlNotUse = true;
        }


    }

    private void DeleteProfilePhoto()
    {
        string pathToContentRoot = string.Empty;
        var pathToExe = Process.GetCurrentProcess().MainModule.FileName;
        pathToContentRoot = Path.GetDirectoryName(pathToExe);

        string filepath = String.Empty;
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".png";
        System.IO.FileInfo f1 = new System.IO.FileInfo(filepath);
        if (f1.Exists)
        {
            f1.Delete();
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpg";
        System.IO.FileInfo f2 = new System.IO.FileInfo(filepath);
        if (f2.Exists)
        {
            f2.Delete();
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpeg";
        System.IO.FileInfo f3 = new System.IO.FileInfo(filepath);
        if (f3.Exists)
        {
            f3.Delete();
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".gif";
        System.IO.FileInfo f4 = new System.IO.FileInfo(filepath);
        if (f4.Exists)
        {
            f4.Delete();
        }
    }

    private void RefreshProfilePhoto()
    {
        string pathToContentRoot = string.Empty;
        var pathToExe = Process.GetCurrentProcess().MainModule.FileName;
        pathToContentRoot = Path.GetDirectoryName(pathToExe);

        string filepath = String.Empty;
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".png";
        System.IO.FileInfo f1 = new System.IO.FileInfo(filepath);
        if (f1.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".png";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpg";
        System.IO.FileInfo f2 = new System.IO.FileInfo(filepath);
        if (f2.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpg";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".jpeg";
        System.IO.FileInfo f3 = new System.IO.FileInfo(filepath);
        if (f3.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".jpeg";
            return;
        }
        filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + ".gif";
        System.IO.FileInfo f4 = new System.IO.FileInfo(filepath);
        if (f4.Exists)
        {
            stProfilePhotoPath = "/images/user/" + GetUserInfo().UserId + ".gif";
            return;
        }
        stProfilePhotoPath = "/images/avatar.png";
    }

    private ISGUserInfo GetUserInfo()
    {
        return UserInfoSvc.GetUserInfo(SideBarUISvc.ActiveMenu?.GroupId ?? 0);
    }

    private async Task OpenFileSelect()
    {
        //object[] param = { };
        await JSRuntime.InvokeAsync<object>("startClick");
    }

    private async Task doRegist()
    {
        DeleteProfilePhoto();
        string pathToContentRoot = string.Empty;
        var pathToExe = Process.GetCurrentProcess().MainModule.FileName;
        pathToContentRoot = Path.GetDirectoryName(pathToExe);
        Console.WriteLine("Call Do Regist...:" + pathToContentRoot);

        dropReference = fileReaderService.CreateReference(inputTypeFileElement);
        string targets = new string("profileInput");
        await dropReference.SetDragTargetElementAsync(targets);
        await dropReference.IsDragTargetElement(targets);
        await Task.Delay(500);
        await dropReference.AppendDragTargetElement(targets);

        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            Debug.WriteLine("FileName:" + fileInfo.Path);
            string stExt = Path.GetExtension(fileInfo.Name);

            if (stExt != ".jpg" && stExt != ".jpeg" && stExt != ".gif" && stExt != ".png")
            {
                object[] param = { "success", "시스템", "확장자는 jpg,jpeg,gif,png로 제한됩니다." };
                await JSRuntime.InvokeAsync<object>("fireToastMessage", param);
                return;
            }

            // Read into memory and act
            byte[] buffer = new byte[16 * 1024];
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(16 * 1024))
            {
                string filepath = pathToContentRoot + "/wwwroot/images/user/" + GetUserInfo().UserId + Path.GetExtension(fileInfo.Name);
                try
                {
                    int read = 0;
                    FileStream fs;
                    fs = new FileStream(filepath, FileMode.Create, FileAccess.Write);

                    while ((read = memoryStream.Read(buffer, 0, buffer.Length)) > 0)
                    {
                        fs.Write(buffer, 0, read);
                    }
                    fs.Close();

                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.StackTrace);
                }
            }
        }

        await dropReference.ClearValue();
        await dropReference.initFileReaderService(targets);
        await dropReference.DelDragTargetElementAsync(targets);
        RefreshProfilePhoto();
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            await JSRuntime.InvokeAsync<object>("initPageLeft");
        }
    }


    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        strNavigateWithGroupID += groupID.ToString();
        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }

    }

}
