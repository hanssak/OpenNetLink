
@page "/Transfer"
@using Microsoft.JSInterop
@using OpenNetLinkApp.Components.Transfer
@using OpenNetLinkApp.Components.PopUp
@using Radzen
@using Radzen.Blazor
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery 
@using OpenNetLinkApp.PageEvent 
@using HsNetWorkSG 

@using System.Diagnostics

@inject XmlConfService XmlConf
@inject DragAndDropService DragAndDropService
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
<!-- Content Wrapper. Contains page content -->
<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-4">
                <h1 class="m-0 text-dark">@strFileTrans</h1>                         <!--파일전송-->


            </div><!-- /.col -->
            <div class="col-sm-8">
                <ol class="breadcrumb float-sm-right">
                    <li><button type="button" @onclick="@OpenPreviewWindow" >OpenPreview</button></li>
                    <li>팝업:</li>
                    <li>
                        <select class="form-control" style="width:150px;" id="popupSelect" @onchange="openPopUp">
                            <option id="0" selected>없음</option>
                            <option id="1">공인인증서전송</option>
                            <option id="2">환경정보 확인중</option>
                            <option id="3">보안문자</option>
                            <option id="4">Google OTP</option>
                            <option id="5">패스워드변경(시스템)</option>
                            <option id="5">패스워드변경(사용자)</option>
                            <option id="5">패스워드변경(기본패스워드)</option>
                            <option id="6">@strApproverAdd 1</option>
                            <option id="7">@strApproverAdd 2</option>
                            <option id="8">@strApproverAdd 3</option>
                            <option id="9">전송제한</option>
                            <option id="10">MESSAGE</option>
                            <option id="11">GPKI</option>
                            <option id="12">로그인(인터넷망)</option>
                            <option id="12">로그인(화면잠금)</option>
                            <option id="12">로그인(업무망)</option>
                            <option id="12">로그인(메일연계)</option>
                            <option id="12">로그인(PCURL)</option>
                            <option id="13">반려팝업</option>
                            <option id="14">PDF변환</option>
                            <option id="15">파일전송진행율</option>
                            <option id="16">미리보기</option>
                        </select>
                    </li>
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">@strFileTrans</li>            <!--파일전송-->
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary card-outline mb-3">
                    <div class="card-body clearfix">
                        <label>@strApprLine</label>                                 <!--결재라인-->
                        <ApproveLine @ref="ApprLine"></ApproveLine>

                        <label style="float:right;">
                            <button type="button" class="btn btn-md bg-gradient-secondary" @onclick="@ApproveChooseAdd">
                                <i class="fas fa-plus-circle"></i> @strApproverAdd               <!--결재자 추가-->
                            </button>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.row -->

        <div class="row">
            <div class="col-md-12">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">@strFilePath</span>              <!--파일경로-->
                    </div>
                    <input type="text" class="form-control" placeholder="@stSelectPath" disabled="" value="@stSelectPath">
                </div>
            </div>
        </div>

        <!-- list -->

        <div class="row">

            <div class="col-md-3">
                <div class="card card-secondary card-outline" style="height:400px;">
                    <!-- /.card-header -->

                    <FileTree OnSelectPathFromFileTree="changeSelectPath"></FileTree>
                    <!-- /.card-body -->
                </div>
            </div>


            <div class="col-md-9">
                <div class="card card-secondary card-outline" style="height:400px;">
                    <!-- /.card-header -->
                    <div class="card-body">
                        <div class="form-group row">

                            <div class="col-sm-12">
                                <input type="text" class="form-control" id="inputEmail3" placeholder="@strCurTitle" @bind="strBindTitle">                  <!--제목을 입력하십시오. (최대 60자)-->
                            </div>
                        </div>
                        <div class="form-group row">

                            <div class="col-sm-12">
                                <textarea class="form-control" rows="2" placeholder="@strCurDesc" @bind="strBindDesc"></textarea>             <!--설명을 입력하십시오. (최대 80자)-->
                            </div>
                        </div>



                        <div class="row" style="padding-left:30px; vertical-align:middle;">
                            <div class="col-sm-2">
                                <div class="form-group">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@bAfterCheck" @onclick ="(e=>GetAfterChk())">
                                        <label class="form-check-label">@strAfterApprove</label>                <!--사후결재-->
                                    </div>
                                </div>


                            </div>


                            <div class="col-sm-10 text-right">
                                <!--<button type="button" class="btn btn-md bg-gradient-info" @onclick="@OpenTransferDenied">전송제한</button>-->            <!--전송제한-->
                                <!--<button type="button" class="btn btn-md bg-gradient-info" @onclick="@OpenGPKI">GPKI</button>
                                <button type="button" class="btn btn-md bg-gradient-primary" @onclick="@ShowToast">
                                    MESSAGE
                                </button>-->
                                <button type="button" class="btn btn-md bg-gradient-primary" @onclick="UploadFiles">
                                    <i class="fas fa-file-export  pr-2"></i>
                                    @strFileSend       <!--파일보내기-->
                                </button>
                                @*<button type="button" class="btn btn-md bg-gradient-info" @onclick="@OpenLogIn">@strLogin</button>  *@          <!--로그인-->

                                <button type="button" class="btn btn-md bg-gradient-secondary" @onclick="OpenFileDialog">
                                    <i class="fas fa-file pr-2"></i>
                                    @strFileReg         <!--파일등록-->
                                </button>
                                <button type="button" class="btn btn-md bg-gradient-danger" @onclick="@(e => RemoveAllFile())">
                                    <i class="fas fa-trash-alt pr-2"></i>
                                    @strFileDel         <!--파일삭제-->
                                </button>
                            </div>
                        </div>

                    </div>
                    <!-- /.card-body -->


                    <div class="card-body p-0" style="padding:0 1.25rem; !important;">
                        <DropFileList @ref="dropFile"></DropFileList>
                    </div>


                    <!--footer test-->
                    <div class="card-footer" style="padding:.5rem 1.25rem; !important; font-size:.8rem;">
                        <div style="float:left; width:30%;">
                            <div class="dataTable_info" id="example2_info" role="status" aria-live="polite">
                                <span><i class="fas fa-globe"></i>&nbsp;&nbsp; @strUrlAutoTrans</span>               <!--URL 자동전환 사용-->
                            </div>
                        </div>

                        <div style="float:right; width:auto;">

                            <ul class="pagination pagination-sm m-0 ">
                                <li>@strRemainFile : </li>                          <!--남은 일일 파일전송-->
                                <li style="padding:5px 10px; width:100px;">
                                    <div class="progress progress-xs">
                                        <div class="progress-bar bg-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 50%; vertical-align:middle;">
                                            <span class="sr-only">100% Complete (success)</span>
                                        </div>
                                    </div>
                                </li>
                                <li><label class="form-check-label">15,000 MB</label></li>
                                <li style="padding:5px 10px; width:100px;">
                                    <div class="progress progress-xs">
                                        <div class="progress-bar bg-info" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 100%; vertical-align:middle;">
                                            <span class="sr-only">100% Complete (success)</span>
                                        </div>
                                    </div>
                                </li>
                                <li><label class="form-check-label">@strCount</label></li>          <!--{0} 건-->
                            </ul>

                        </div>

                    </div>
                    <!--./footer test-->
                    <!-- /.card-footer -->
                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>

<LogIn @ref="LogInPopUp"></LogIn>
<LogIn_DisplayLock @ref="refLogIn_DisplayLock"></LogIn_DisplayLock>
<LogIn_GPKI @ref="refLogInGPKI" Mode="1"></LogIn_GPKI>
<LogIn_SecurityNetwork @ref="refLogIn_SecurityNetwork"></LogIn_SecurityNetwork>
<LogIn_Mail @ref="refLogIn_Mail"></LogIn_Mail>
<LogIn_PCURL @ref="refLogIn_PCURL"></LogIn_PCURL>

<ApproverSelect_PopUp @ref="refApproverSelect_PopUp"></ApproverSelect_PopUp>
<ApproverSelect_TreePopUp @ref="refApproverSelect_TreePopUp"></ApproverSelect_TreePopUp>
<ApproverSelect_StepPopUp @ref="refApproverSelect_StepPopUp"></ApproverSelect_StepPopUp>
<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>
<PWChange @ref="refPWChange"></PWChange>
<PWChangeUser @ref="refPWChangeUser"></PWChangeUser>
<PWChangeDefaultPW @ref="refPWChangeDefaultPW"></PWChangeDefaultPW>

<GoogleOTP @ref="refGoogleOTP"></GoogleOTP>
<SGAlert @ref="refSGAlert" OnConfirm="runConfirmAlert" OnCancel="runCancelAlert"></SGAlert>
<SGCapcha @ref="refSGCapcha"></SGCapcha>
<EnvLoading @ref="refEnvLoading"></EnvLoading>
<CertificateTransfer @ref="refCertificateTransfer"></CertificateTransfer>
<SGReject @ref="refSGReject"></SGReject>
<SGPDFTrans @ref="refSGPDFTrans"></SGPDFTrans>
<TransProgress @ref="refTransProgress"></TransProgress>
@code
{
    public string stSelectPath { get; set; }
    DropFileList dropFile;
    LogIn LogInPopUp;
    LogIn_DisplayLock refLogIn_DisplayLock;
    LogIn_SecurityNetwork refLogIn_SecurityNetwork;
    LogIn_GPKI refLogInGPKI;
    LogIn_Mail refLogIn_Mail;
    LogIn_PCURL refLogIn_PCURL;
    Transfer_Denied refTransferDenied;

    ApproverSelect_PopUp refApproverSelect_PopUp;
    ApproverSelect_TreePopUp refApproverSelect_TreePopUp;
    ApproverSelect_StepPopUp refApproverSelect_StepPopUp;
    PWChange refPWChange;
    PWChangeUser refPWChangeUser;
    PWChangeDefaultPW refPWChangeDefaultPW;
    GoogleOTP refGoogleOTP;
    SGAlert refSGAlert;
    SGCapcha refSGCapcha;
    EnvLoading refEnvLoading;
    CertificateTransfer refCertificateTransfer;
    SGReject refSGReject;
    SGPDFTrans refSGPDFTrans;
    TransProgress refTransProgress;

    public string strFileTrans = "";
    public string strFilePath = "";
    public string strAfterApprove = "";
    public string strLogin = "";
    public string strUrlAutoTrans = "";
    public string strCount = "";
    public string strRemainFile = "";
    public string strFileSend = "";
    public string strFileDel = "";
    public string strApprLine = "";
    public string strApproverAdd = "";
    public string strFileReg = "";

    public string strCurTeamName = "";

    public string strCurTitle = "";
    public string strCurDesc = "";

    public bool bAfterCheck = false;

    public string strBindTitle = "";
    public string strBindDesc = "";



    ISGSideBarUIService SideBarUISvc;

    ApproveLine ApprLine = new ApproveLine();

    private async Task openPopUp(ChangeEventArgs e)
    {
        switch (e.Value.ToString())
        {
            case "공인인증서전송":
                await refCertificateTransfer.openPopUp();
                break;
            case "환경정보 확인중":
                await refEnvLoading.openPopUp();
                break;
            case "보안문자":
                await refSGCapcha.openPopUp();
                break;
            case "Google OTP":
                await refGoogleOTP.openPopUp();
                break;
            case "패스워드변경(시스템)":
                await refPWChange.openPopUp();
                break;
            case "패스워드변경(사용자)":
                await refPWChangeUser.openPopUp();
                break;
            case "패스워드변경(기본패스워드)":
                await refPWChangeDefaultPW.openPopUp();
                break;
            case "결재자 추가 1":
                await refApproverSelect_PopUp.openPopUp();
                break;
            case "결재자 추가 2":
                await refApproverSelect_TreePopUp.openPopUp();
                break;
            case "결재자 추가 3":
                await refApproverSelect_StepPopUp.openPopUp();
                break;
            case "전송제한":
                await refTransferDenied.openPopUp();
                break;
            case "MESSAGE":
                //1. 토스트 메시지 사용법
                //type: success, info, waring, error 2020/07/02 YKH
                //object[] param = { "success", "시스템", "시스템 토스트 메시지 입니다. 자동닫기가 가능한 토스트 메시지 함수호출로 수행됨." };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param);

                //2. javascript alert 사용법
                //object[] param = { "JS Alert 메시지 호출입니다." };
                //await JSRuntime.InvokeAsync<object>("alertMessage", param);

                //3. 모달형 메시지, mode:1은 alert mode:2는 confirm
                await refSGAlert.openPopUp("시스템 알림", "이것은 시스템 알림 메시지 입니다.", 2);
                break;
            case "GPKI":
                await refLogInGPKI.openPopUp();
                break;
            case "로그인(인터넷망)":
                await LogInPopUp.openPopUp();
                break;
            case "로그인(화면잠금)":
                await refLogIn_DisplayLock.openPopUp();
                break;
            case "로그인(업무망)":
                await refLogIn_SecurityNetwork.openPopUp();
                break;
            case "로그인(메일연계)":
                await refLogIn_Mail.openPopUp();
                break;
            case "로그인(PCURL)":
                await refLogIn_PCURL.openPopUp();
                break;
            case "반려팝업":
                await refSGReject.openPopUp();
                break;
            case "PDF변환":
                refSGPDFTrans.ChangeProgress(10);
                await refSGPDFTrans.openPopUp();
                //진행율 변환 예제
                System.Threading.Thread.Sleep(2000);
                refSGPDFTrans.ChangeProgress(90);
                break;
            case "파일전송진행율":
                refTransProgress.ChangeProgress(10);
                await refTransProgress.openPopUp();
                //진행율 변환 예제
                System.Threading.Thread.Sleep(2000);
                refTransProgress.ChangeProgress(90);
                break;
            case "미리보기":
                object[] param = { "https://www.naver.com", "오픈윈도우", 200, 200 };
                await JSRuntime.InvokeAsync<object>("openWindow", param);
                break;
        }
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("startClick");
    }

    private async Task UploadFiles()
    {
        int TransDataCount = 0;
        TransDataCount = dropFile.GetFileListAddCount();
        if(TransDataCount<=0)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0016"); // 전송하고자 하는 파일이 없습니다./r/n전송파일을 등록해주십시오.
            strMsg = strMsg.Replace("/r/n", "<br/>");
            ShowMessage("warn", strMsg);
            return;
        }
        dropFile.SetFileLoadingEvent(FileLoadResult);
        await refTransProgress.openPopUp();
        await dropFile.UploadFiles();
    }

    private void FileLoadResult(int groupID, int per)
    {
        if(per<0)
        {
            refTransProgress.closePopUp();
            string strMsg = XmlConf.GetErrMsg("E_0212");                // 파일 로드 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        if(per>=100)
        {
            refTransProgress.SetProgressText(false);
            FileTrans();
            return;
        }
        refTransProgress.SetProgressText(false);
        refTransProgress.ChangeProgress(per);
    }

    private void FileTrans()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        string strUserID = sgLoginData.GetUserID();
        string strMid = sgLoginData.GetTagData("MID");
        string strPolicyFlag = sgLoginData.GetTagData("POLICYFLAG");
        string strTitle = strBindTitle;
        string strContents = strBindDesc;
        //string strTitle = strCurTitle;
        //string strContents = strCurDesc;
        bool bApprSendMail = false;
        bool bAfterApprove = bAfterCheck;
        int nDlp = 0;
        string strRecvPos = "0";
        string strZipPasswd = "";
        bool bPrivachApprove = false;
        string strSecureString = "";
        string strDataType = "0";               // 파일 전송
        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserData.GetUserSequence();
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);
        List<HsStream> FileList = null;
        FileList = dropFile.GetHsStreamList();

        if(strTitle.Equals(""))
        {
            int count = FileList.Count;
            string strFileName = FileList[0].FileName;
            if (count == 1)
                strTitle = strFileName;
            else
            {
                string tmpTitle = XmlConf.GetInfoMsg("I_0048");        // {0} 외 {1}건
                strTitle = String.Format(tmpTitle, strFileName, count - 1);
            }
        }

        if (strContents.Equals(""))
            strContents = "-";

        HSCmdCenter.SendFileTrans(groupID, strUserID, strMid, strPolicyFlag, strTitle, strContents, bApprSendMail, bAfterApprove, nDlp, strRecvPos, strZipPasswd, bPrivachApprove, strSecureString, strDataType, nApprStep, ApprLineSeq, FileList);
    }

    public void FileTransProgress(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }

        if (e.count >= 100)
        {
            strMsg = XmlConf.GetInfoMsg("I_0029");   // 파일 전송이 완료되었습니다.
            if(refTransProgress.GetOpen()==true)
                ShowMessage("info", strMsg);
            refTransProgress.closePopUp();
            dropFile.RemoveAllFile().Wait();
            strBindTitle = "";
            strBindDesc = "";
            StateHasChanged();
            return;
        }

        else if( (e.count>=0) && (e.count<=50))
        {
            refTransProgress.SetProgressText(true,true);                // 압축 및 암호화  진행 중 
            refTransProgress.ChangeProgress(e.count);
        }
        else if ((e.count > 50) && (e.count < 100))
        {
            refTransProgress.SetProgressText(true,false);               // 파일 전송 중 
            refTransProgress.ChangeProgress(e.count);
        }
        else
        {
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        InitText();

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        HSCmdCenter.sgPageEvent.SetDeptApprLineSearchEventAdd(groupID, ApproveChooseResult);
        HSCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupID, FileTransProgress);

        action1 = AddDataList;
        action2 = RemoveDataList;
        action3 = ClearDataList;
        base.OnInitialized();

    }
    public void GetAfterChk()
    {
        bAfterCheck = (!bAfterCheck);
        StateHasChanged();
    }
    public void ApproveChooseAdd()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strSysID = sgLoginData.GetSysID();
        string strUserID = sgLoginData.GetUserID();
        string strUserName = sgUserData.GetUserName();
        string strTeamName = sgUserData.GetTeamName();
        strCurTeamName = strTeamName;
        string strTeamCode = sgUserData.GetTeamCode();
        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, strUserName, strTeamName, strTeamCode, true);
        HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
    }

    public void ApproveChooseResult(int groupid, PageEventArgs e)
    {
        if(e.result!=0)
        {
            ShowMessage("error", e.strMsg);
            return;
        }
        refApproverSelect_PopUp.SetInitDeptName(strCurTeamName);
        refApproverSelect_PopUp.InitDeptApprInsert();
        refApproverSelect_PopUp.InitApprLine();
        OpenSelector1().Wait();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    //결재자 편집 창 팝업
    private async Task OpenSelector1()
    {
        refApproverSelect_PopUp.SetApprSelectChangeEvent(SetApprLineChange);
        await refApproverSelect_PopUp.openPopUp();
    }

    public void SetApprLineChange()
    {
        ApprLine.ApproveLineChange();
    }

    private void changeSelectPath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
    }

    public async Task LoadJavaScript()
    {
        await JSRuntime.InvokeVoidAsync("loadJavaScript");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadJavaScript();
            await base.OnAfterRenderAsync(firstRender);
            //로그인 팝업 샘플 2020/07/01 YKH
            //await OpenLogIn();
            StateHasChanged();
        }
        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        await stopClick();
    }

    public void runConfirmAlert(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Confirm Alert");
    }
    public void runCancelAlert(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Cancel Alert");
    }

    private void onSelectFilePath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
        Console.WriteLine("Event Trigered :" + stSelectPath);
    }

    private async Task stopClick()
    {
        object[] param = { "Message" };
        //DropZone 클릭방지코드
        //await JSRuntime.InvokeAsync<object>("stopClick");

        await JSRuntime.InvokeAsync<object>("exitLogIn");
    }

    private static Action<string, string> action1;
    private static Action<string> action2;
    private static Action action3;

    private async Task RemoveAllFile()
    {
        ClearDataList();
        await dropFile.RemoveAllFile();
    }

    private void AddDataList(string str, string type)
    {
        DragAndDropService.AddDataList(str, type);
    }
    private void RemoveDataList(string str)
    {
        DragAndDropService.removeDataList(str);
    }
    private void ClearDataList()
    {
        DragAndDropService.clearDataList();
        //dropFile.DataClear().Wait();
    }
    [JSInvokable("AddPath")]
    public static void AddPath(string path, string type)
    {
        Console.WriteLine("AddPath Call Excuted." + path + "    Type:" + type);
        action1.Invoke(path, type);
    }
    [JSInvokable("RemovePath")]
    public static void RemovePath(string path)
    {
        Console.WriteLine("AddPath Call Excuted." + path);
        action2.Invoke(path);
    }
    [JSInvokable("ClearPath")]
    public static void ClearPath()
    {
        Console.WriteLine("ClearPath Call Excuted.");
        action3.Invoke();
    }

    public void InitText()
    {
        strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                          // 파일 전송
        strFilePath = XmlConf.GetTitle("T_FILE_FILEPATH");                              // 파일 경로
        strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");                  // 사후결재
        strLogin = XmlConf.GetTitle("T_COMMON_LOGIN");                                  // 로그인
        strUrlAutoTrans = XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO");              // URL 자동전환 사용
        strCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
        strCount = String.Format(strCount, 10240);
        strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송
        strFileSend = XmlConf.GetTitle("T_FILE_SENDFILE");                              // 파일 보내기
        strFileDel = XmlConf.GetTitle("T_FILE_FILEDEL");                                // 파일 삭제
        strApprLine = XmlConf.GetTitle("T_FILE_APPROVELINE");                           // 결재라인
        strApproverAdd = XmlConf.GetTitle("T_FILE_APPROVER");                           // 결재자추가
        strFileReg = XmlConf.GetTitle("T_FILE_FILEREG");                                // 파일등록

        strCurTitle = XmlConf.GetTitle("T_FILE_EMPTYTITLE");                                // 제목을 입력하십시오. (최대 60자)
        strCurDesc = XmlConf.GetTitle("T_FILE_EMPTYDESC");                                // 설명을 입력하십시오. (최대 80자)
    }

    private void OpenPreviewWindow()
    {
        ProcessStartInfo startInfo = new ProcessStartInfo("PreviewUtil");
        startInfo.WindowStyle = ProcessWindowStyle.Normal;
        startInfo.Arguments = "https://192.168.2.231/weblink/CM001_Docs_Viewer.do?transSeq=202007232200000009&fileNo=1";
        // Run the external process & wait for it to finish
        using (Process proc = Process.Start(startInfo))
        {
            proc.WaitForExit();
        }
    }
}