@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using HsNetWorkSGData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGTreeSearch
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService

<div class="modal fade" id="ReceiverSelect_PopUp" data-backdrop="static">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                <h5 class="modal-title pt-1 text-bold ">@XmlConf.GetTitle("T_ETC_SEARCH_RECIVER")</h5>                             <!--수신자 조회-->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-body p-0">

                    <div class="box1" style=" width:46%;  float:left;">
                        @if (receiverSearchType == "SEARCH")
                        {   //Search
                            <SGDeptSearchList UseInputSearch="@useInputInTree" ShowUserID="@showUserId" Height="359" UserDataSource="@ReceiverSearch" ColumnIndexVisible="false"
                                          OnSearchClick="(searchArg)=> sgDeptSearch_SearchClick(searchArg[0], searchArg[1])" OnItemClick="(approve) => AssignApprover(approve.UserSeq)" OnItemDoubleClick="(item) => search_OnItemDoubleClick(item)" />
                        }
                        else //Tree
                        {
                            <SGDeptTreeList @ref="refSGDeptTreeList" UseInputSearch="@useInputInTree" ShowUserID="@showUserId" Height="359" TreeHeight="170" UserSearchList="@ReceiverSearch"
                                        OnItemClick="(approve) => AssignApprover(approve.UserSeq)" OnItemDoubleClick="(item) => search_OnItemDoubleClick(item)" />
                        }
                    </div>
                    <!--e table -->
                    <!--s btn -->
                    <div class="box2" style=" width:8%; height:300px; float:left;">
                        <div class="col-md-12 text-center" style="top:24% !important;">
                            <label class="p-1">@XmlConf.GetTitle("T_COMMON_SELECT2")</label>                                                       <!--선택-->
                        </div>
                        <div class="col-md-12 text-center" style="top:25% !important;">
                            <button type="button" class="btn bg-gradient-primary mb-3" style="width:41px; height:31px;" @onclick="AddSelectApprover"><i class="fas fa-angle-right fa-2x"></i></button>
                            <button type="button" class="btn bg-gradient-primary" style="width:41px; height:31px;" @onclick="RemoveAssignApprover"><i class="fas fa-angle-left fa-2x"></i></button>


                        </div><div class="col-md-12 text-center" style="top:44% !important;">
                            <label class="p-1">@XmlConf.GetTitle("T_COMMON_ALL")</label>                                                       <!--전체 -->
                        </div>
                        <div class="col-md-12 text-center" style="top:45% !important;">
                            <button type="button" class="btn bg-gradient-primary mb-3" style="width:41px; height:31px;" @onclick="AddAllSearchedUser"><i class="fas fa-angle-double-right fa-2x"></i></button>
                            <button type="button" class="btn bg-gradient-primary" style="width:41px; height:31px;" @onclick="RemoveAllReceiver"><i class="fas fa-angle-double-left fa-2x"></i></button>
                        </div>
                    </div>

                    <!--e btn -->
                    <!--s table -->
                    <div class="box1" style="width:46%;float:left;">
                        <SGDeptSearchList UseInputSearch="false" ShowUserID="@showUserId" Height="358" UserDataSource="@ReceiverSelect" ColumnIndexVisible="false"
                                          OnItemClick="(approve) => SelectTarget(approve.UserSeq)" OnItemDoubleClick="(item) => target_OnItemDoubleClick(item)" />
                    </div>
                    <!--e table -->
                </div>
                <!--/. content -->
            </div>

            <div class="modal-footer">
                <button type="button" class="btn bg-gradient-primary pl-4 pr-4 mr-0  float-right" @onclick="SelectOK">@strOK</button>
                <button type="button" class="btn bg-gradient-secondary pl-4 pr-4 mr-0  float-right" @onclick="SelectCancel">@strClose</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
@code {

    private LinkedList<ApproverInfo> ReceiverSearch = new LinkedList<ApproverInfo>();
    private LinkedList<ApproverInfo> ReceiverSelect = new LinkedList<ApproverInfo>();
    private string stSelectApprover = "";
    private string stTargetSelect = "";
    private static Action<string> actionAssign;
    private static Action<string> actionTargetSelect;
    private string receiverSearchType = "";
    private bool useInputInTree;
    private bool showUserId = false;
    private SGDeptTreeList refSGDeptTreeList;

    public string strApproverSearch = "";
    public string strDept = "";
    public string strName = "";
    public string strSearch = "";
    public string strOrder = "";
    public string strRank = "";
    public string strMostTop = "";
    public string strMostBottom = "";
    public string strTop = "";
    public string strDown = "";
    public string strOK = "";
    public string strClose = "";

    public string strCurDept = "";
    public string strCurName = "";
    [Parameter]
    public EventCallback<LinkedList<ApproverInfo>> OnSelectOK { get; set; }
    ISGSideBarUIService SideBarUISvc;


    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            DeptApprLine();
        }
    }
    public bool GetUserSeqExistence(string strUserSeq)
    {
        bool bRet = false;
        foreach (var item in ReceiverSelect)
        {
            if (strUserSeq.Equals(item.UserSeq))
            {
                bRet = true;
                break;
            }
        }
        return bRet;
    }
    public string GetUserSeqExistenceName(string strUserSeq)
    {
        string strName = "";
        foreach (var item in ReceiverSelect)
        {
            if (strUserSeq.Equals(item.UserSeq))
            {
                strName = item.Name;
                break;
            }
        }
        return strName;
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void search_OnItemDoubleClick(ApproverInfo doubleClickInfo)
    {
        stSelectApprover = doubleClickInfo.UserSeq;
        AddSelectApprover();
    }

    private void AddSelectApprover()
    {
        if (stSelectApprover.Length < 1)
            return;

        ApproverInfo apv = ReceiverSearch.FirstOrDefault(x => x.UserSeq == stSelectApprover);
        if (apv != null)
        {
            string strUserSeq = apv.UserSeq;
            if (GetUserSeqExistence(strUserSeq))
            {
                string strName = GetUserSeqExistenceName(strUserSeq);
                string strMsg = XmlConf.GetWarnMsg("W_0139");   //%s(%s) 사용자는 수신자로 등록되어 있습니다.
                strMsg = String.Format(strMsg, strName, strUserSeq);
                ShowMessage("warn", strMsg);
                return;
            }
            else
            {
                ReceiverSelect.AddLast(apv);
            }
        }
    }

    private void target_OnItemDoubleClick(ApproverInfo doubleClickInfo)
    {
        stTargetSelect = doubleClickInfo.UserSeq;
        RemoveAssignApprover();
    }

    private void RemoveAssignApprover()
    {
        ApproverInfo apvTarget = ReceiverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
            ReceiverSelect.Remove(apvTarget);
    }

    private void AddAllSearchedUser()
    {
        string strUserSeq = "";
        bool bIsUserSelectedReceiver = false;
        foreach (var item in ReceiverSearch)
        {
            strUserSeq = "";
            strUserSeq = item.UserSeq;
            if (GetUserSeqExistence(strUserSeq))
                bIsUserSelectedReceiver = true;
            else
                ReceiverSelect.AddLast(item);
        }

        if (bIsUserSelectedReceiver)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0257");
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
        }
    }

    private void RemoveAllReceiver()
    {
        ReceiverSelect.Clear();
    }

    public async Task openPopUp()
    {
        object[] param = { "ReceiverSelect_PopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void SelectOK()
    {

        OnSelectOK.InvokeAsync(ReceiverSelect); //부모컴포넌트에 이벤트 전달
        closePopUp();
    }

    public void SelectCancel()
    {
        closePopUp();
    }
    public void closePopUp()
    {
        object[] param = { "ReceiverSelect_PopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        actionAssign = AssignApprover;
        actionTargetSelect = SelectTarget;
        receiverSearchType = SGAppMgrSvc.OpConfigInfoService.GetReceiverSearchType(groupID);
        useInputInTree = SGAppMgrSvc.OpConfigInfoService.GetUseInputSearchInReceiverTree(groupID);
        showUserId  = SGAppMgrSvc.OpConfigInfoService.GetUserLineShowNameAndID(groupID);
        InitText();     
    }

    public void SetInitDeptName(string strDeptName)
    {
        strCurDept = strDeptName;
    }

    private void sgDeptSearch_SearchClick(string getInputDeptName, string getInputUserName)
    {
        strCurDept = getInputDeptName;
        strCurName = getInputUserName;

        DeptApprLine();
    }

    public void DeptApprLine(bool isInit = false)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strSysID = sgLoginData.GetSysID();
        string strUserID = sgLoginData.GetUserID();
        string strUserName = strCurName;
        string strTeamName = strCurDept;

        string strTeamCode = (isInit) ? sgUserData.GetUserTagData("TEAMCODE") : "";
        //if (strUserName == "" && strTeamName == "")
        //    strTeamCode = sgUserData.GetUserTagData("TEAMCODE");

        //결재자만검색, 모두 검색 구분자
        //int nSelectAll = sgLoginData.GetTagValueInteger("APPROVEPROXYRIGHT");

        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, DeptApprLineResult);

        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetReceiverSearchQuery(strUserID, strUserName, strTeamName, strTeamCode);
        //HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
        HSCmdCenter.SendListQuery(groupID, strUserID, strQuery);
    }
    public void DeptApprLineResult(int groupid, SGData e)
    {
        ReceiverSearch.Clear();
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        List<Dictionary<int, string>> listData = e.GetSvrRecordData2("RECORD");

        int cnt = 1;
        foreach (Dictionary<int, string> item in listData)
        {
            ApproverInfo target = new ApproverInfo();
            target.Index = String.Format("{0,2}", cnt.ToString());
            target.DeptName = item[3];
            target.Grade = item[5];
            target.Name = item[1];
            target.UserSeq = item[8];
            target.APPR_USERID= item[0];
            ReceiverSearch.AddLast(target);
            cnt++;
        }

        StateHasChanged();
    }

    public void BindEvent()
    {
        if (receiverSearchType == "TREE" && refSGDeptTreeList != null)
            refSGDeptTreeList.BindEvent(false);  //수신자 라인 추가는 무조건 일반사용자 노출
        else
            DeptApprLine(true);

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        receiverSearchType = SGAppMgrSvc.OpConfigInfoService.GetReceiverSearchType(groupID);
        useInputInTree = SGAppMgrSvc.OpConfigInfoService.GetUseInputSearchInReceiverTree(groupID);
        showUserId  = SGAppMgrSvc.OpConfigInfoService.GetUserLineShowNameAndID(groupID);
    }
    // [JSInvokable("ReceiverTargetSelect")]
    // public static void ReceiverTargetSelect(string value)
    // {
    //     actionTargetSelect.Invoke(value);
    // }
    private void SelectTarget(string value)
    {
        stTargetSelect = value;
        StateHasChanged();
    }

    // [JSInvokable("ReceiverSearchSelect")]
    // public static void ReceiverSearchSelect(string value)
    // {
    //     actionAssign.Invoke(value);
    // }
    //
    private void AssignApprover(string value)
    {
        stSelectApprover = value;
        StateHasChanged();
    }

    public void InitText()
    {
        strApproverSearch = XmlConf.GetTitle("T_COMMON_APPROVESEARCH");             // 결재자 조회
        strDept = XmlConf.GetTitle("T_COMMON_DEPT");                                // 부서
        strName = XmlConf.GetTitle("T_COMMON_NAME");                                // 이름
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            // 조회
        strOrder = XmlConf.GetTitle("T_COMMON_ORDER");                              // 순번
        strRank = XmlConf.GetTitle("T_COMMON_RANK");                                // 직급
        strMostTop = XmlConf.GetTitle("T_ETC_TOP");                                 // 맨위
        strMostBottom = XmlConf.GetTitle("T_ETC_BOTTOM");                           // 맨아래
        strTop = XmlConf.GetTitle("T_ETC_UP");                                      // 위
        strDown = XmlConf.GetTitle("T_ETC_DOWN");                                   // 아래
        strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
        strClose = XmlConf.GetTitle("T_FILE_FOLD");                                 // 닫기
    }

}
