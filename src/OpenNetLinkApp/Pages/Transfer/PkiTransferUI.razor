@page "/pkiTransfer"
@page "/pkiTransfer/{groupIDbyParam:int}"

@using OpenNetLinkApp.Data.SGDicData.SGGpki
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.Models.SGSideBar
@using HsNetWorkSGData
@using HsNetWorkSG
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using System.Text
@using System.Diagnostics
@using OpenNetLinkApp.Components.SGSearchCondition


@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager


<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@("인증서(NPKI)전송")</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@("인증서(NPKI)전송")</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">

        <div class="row">
            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">

                    <div class="mb-1">
                        <div class="mb-1 mt-2" style="line-height: 1.5; font-size: .9rem;font-weight: bold; color: #222;"> @XmlConf.GetInfoMsg("I_0187") </div>
                        <div class="col-md-12 text-center" style="height: 120px; width: 400px; margin: auto; display: block; ">
                            <button class="btn btn-outline-blue1 col-md-6 m1 @(stMedia == "hard" ? "active1" : "")" disabled=@bGpkiBtnDisable @onclick="@(e=>LocationSelect("hard"))">
                                <label class="mt-80">@XmlConf.GetTitle("T_COMMON_DRIVEFIXED")</label>
                            </button>
                            <button class="btn btn-outline-blue2 col-md-6 m1 @(stMedia == "usb" ? "active2" : "")" disabled=@bGpkiBtnDisable @onclick="@(e=>LocationSelect("usb"))">
                                <label class="mt-80">@XmlConf.GetTitle("T_COMMON_DRIVEREMOVABLE")</label>
                            </button>
                            <select class="form-control float-right col-md-3 p-0 mt-1" disabled=@bGpkiBtnDisable style="background-color:none !important; font-size:12px !important; padding:2px !important;" @onchange="SelectMoveDisk">
                                @foreach (string strDriveName in driveList)
                                {
                                    <option>@strDriveName</option>
                                }
                            </select>
                        </div>
                    </div>

                    @*<div class="col-md-7 login-card-body" style="height:600px; padding-left:0 !important; border-radius:0rem .7rem .7rem 0rem !important;">
                    </div>*@

                    <form class="form-horizontal">
                        <Footer @ref="refFooter"></Footer>
                    </form>
                </div>
            </div>
        </div>

    </div>
</section>

@code {


    SGGpkiLib sgGpkiLib = new SGGpkiLib();
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<PkiTransferUI>();

    [Parameter]
    public int groupIDbyParam { get; set; }
    private string stMedia = "hard";
    private List<GPKIFileInfo> listViewGpkiFileList = new List<GPKIFileInfo>();
    public bool bGpkiBtnDisable = false;                        // 버튼 사용 disable 유무 설정, true : 사용못함, false : 사용함

    public string strCurSelDriveName = "";              // 현재 사용자가 선택한 드라이브명
    public GPKIFileInfo objUserSelectedGpki;            // 사용자가 선택한 GPKI 인증서 정보

    public List<string> driveList = new List<string>();
    public string strUserinputGPKIPW = "";              // 사용자가 입력한 gpki-password

    Footer refFooter;

    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;


    /// <summary>
    /// 홈 이동 버튼
    /// </summary>
    private void HomeMove()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        //InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        @*HSCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, SearchResult);                  // 조회 데이터 결과.
            HSCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, SearchCount);              // 조회 데이터 수 결과.
                                                                                                    //HSCmdCenter.sgPageEvent.SetTransCancelEventAdd(groupID, TransCancelResult);             // 전송 취소 결과.

            strDestNetWork = strTotal;

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData.GetUseOverNetwork2())
            {
                dicDestSysPos = pageService.GetTargetSystemList(groupID);
            }*@

        //bUseDlpDataView = SGAppMgrSvc.OpConfigInfoService.GetUseUIdlpData(groupIDbyParam);


        base.OnInitialized();
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            //Task.Run(async () => { await TransSearchCount(); });
        }
    }


    /// <summary>
    /// Drive 선택
    /// </summary>
    /// <param name="media"></param>
    private void LocationSelect(string media)
    {
        stMedia = media;

        selectGPKIItemClean();

        listViewGpkiFileList.Clear();
        if (stMedia == "hard")
        {
            //InitGPKIHardDiskFileList();
        }
        else if (stMedia == "usb")
        {
            //InitGPKIMoveDiskFileList();
        }

        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    private void selectGPKIItemClean()
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            item.m_selected = "";
        }

        //objUserSelectedpki = null;

        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void SelectMoveDisk(ChangeEventArgs e)
    {
        strCurSelDriveName = e.Value.ToString();

        selectGPKIItemClean();

        LocationSelect("usb");
    }


}
