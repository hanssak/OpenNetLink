@page "/fileException"
@page "/fileException/{groupIDbyParam:int}"
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.Models.SGSideBar
@using System.Security.Cryptography
@using HsNetWorkSGData
@using HsNetWorkSG
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using System.Text
@using OpenNetLinkApp.Common
@using Serilog
@using AgLogManager

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_FILE_EXCEPTION")</h1>                        <!--파일 검사 예외 신청-->
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_FILE_EXCEPTION")</li>            <!--파일 검사 예외 신청-->
                </ol>
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <div class="col-md-12">

                            <div class="form-group row mb-1" style="border:1px solid #c7d6e9;">
                                <label for="1" class="col-sm-2 col-form-label text-center" style="background-color:#eff8ff;">@XmlConf.GetTitle("T_FILE_SELECT")</label>
                                <div class="col-sm-10 pr-0 pl-2" style="padding-top:1px;">

                                    <button type="button" class="btn btn-md btn-blue" @onclick="OpenFileDialog"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_FILE_SELECT")</button>  <!--파일 선택-->
                                    <button type="button" class="btn btn-md btn-red" @onclick="clearReqInfo"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_SELECT_CANCEL")</button>  <!--선택 취소-->
                                    <button type="button" class="btn btn-md btn-black" @onclick="sendRecordCheckRequest"><i class="fas fa-file-upload"></i>@XmlConf.GetTitle("T_EXCEPTION_REQ")</button> <!--예외 신청-->
                                    <label id="selectedFile">@("   " + m_filePath)</label>

                                </div>
                            </div>
                            <div class="form-group row mb-1" style="border:1px solid #c7d6e9;">
                                <label for="1" class="col-sm-2 col-form-label text-center" style="background-color:#eff8ff;">@XmlConf.GetTitle("T_ETC_DIVISION")</label>
                                <div class="col-sm-10 pr-0 pl-2 pt-1">
                                    <label class="pl-2"><input id="APT" name="flag" style="vertical-align:middle" value="APT" @onclick="(e => doAPTChk())" type="radio" checked="@bAPTCheck" />  APT</label>
                                    <label class="pl-2"><input id="Virus" name="flag" style="vertical-align:middle" value="Virus" @onclick="(e => doVirusChk())" type="radio" checked="@bVirusCheck" />  Virus</label>
                                    @*<label class="pl-2"><input id="DRM" name="flag" value="DRM" @onclick="(e => doDRMChk())" type="radio" checked="@bDRMCheck" />  DRM</label>
                                        <label class="pl-2"><input id="DLP" name="flag" value="DLP" @onclick="(e => doDLPChk())" type="radio" checked="@bDLPCheck" />  DLP</label>*@
                                </div>
                            </div>
                            <div class="form-group row mb-1" style="border:1px solid #c7d6e9;">
                                <label for="2" class="col-sm-2 col-form-label text-center pt-3" style="background-color:#eff8ff;">@XmlConf.GetTitle("T_URL_REQREASON")</label>
                                <div class="col-sm-10 pr-0 pl-0">
                                    <textarea @bind="strReason" id="reason" name="reason" class="form-control p-2 border-0 " rows="2" placeholder="@XmlConf.GetWarnMsg("W_0222")"></textarea>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <p></p>
        <p></p>
        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-12 text-right">
                <button type="button" class="btn btn-md btn-black" @onclick="@SearchBtnClick"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>  <!--조회-->
                <button type="button" class="btn btn-md btn-red" @onclick="@CancelCheckedItem"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_REQ_CANCEL")</button>  <!--요청 취소-->
            </div>
        </div>
        <!-- list -->

        <div class="row">
            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">


                    <form class="form-horizontal">

                        <div class="card-body  p-0">
                            <table id="table1" class="table table-head-fixed table-bordered table-hover" style="table-layout: fixed;">
                                <thead>
                                    <tr>
                                        <th style="text-align:center;vertical-align:middle;width:5%">
                                            <input class="input" type="checkbox" checked="@bAllCheck" @onclick="(e=>AllCheckStateUpdate())">
                                        </th>
                                        <th style="text-align:center;vertical-align:middle;width:10%;">@XmlConf.GetTitle("T_COMMON_TRANSKIND")</th>    <!-- 전송구분 -->
                                        <th style="text-align:center;vertical-align:middle;width:10%;">@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th> <!--승인상태-->
                                        <th style="text-align:center;vertical-align:middle;width:25%;">@XmlConf.GetTitle("T_COMMON_FILENAME")</th>      <!--파일명-->
                                        <th style="text-align:center;vertical-align:middle;width:20%;">@XmlConf.GetTitle("T_REQ_REASON")</th>           <!--요청사유-->
                                        <th style="text-align:center;vertical-align:middle;width:10%;">@XmlConf.GetTitle("T_FILE_SIZE")</th>         <!--파일크기!!-->
                                        <th style="text-align:center;vertical-align:middle;width:10%;">@XmlConf.GetTitle("T_EXCEPTION_TYPE")</th>           <!-- 검사종류 -->
                                        <th style="text-align:center;vertical-align:middle;width:20%;">@XmlConf.GetTitle("T_EXCEPTION_REQ_TIME")</th>                         <!--요청일시-->
                                        <th style="text-align:center;vertical-align:middle;width:20%;">@XmlConf.GetTitle("T_EXCEPTION_APPR_TIME")</th>                         <!--승인일시-->
                                        <th style="text-align:center;vertical-align:middle;width:12%;">@XmlConf.GetTitle("T_EXCEPTION_EXPIREDATE")</th>                         <!--만료일-->

                                    </tr>
                                </thead>
                                <tbody>

                                    @if (mData != null && mData.Count > 0)
                                    {
                                        @foreach (SGFileExceptionData item in mData)
                                        {
                                            <tr class="TransSearch">

                                                <td style="text-align:center;vertical-align:middle">
                                                    <input class="input" type="checkbox" disabled="@false" @onclick="(e=>CheckStateUpdate(item))" checked="@item.bCheck" />
                                                </td>

                                                <td style="text-align:center;vertical-align:middle">@item.systemID</td><!-- 전송구분 -->
                                                <td style="text-align:center;vertical-align:middle">@item.ApproveStatus</td>     <!--승인상태-->
                                                <td style="text-align:left;vertical-align:middle;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.FileName</td><!--파일명-->
                                                <td style="text-align:left;vertical-align:middle;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.strDesc</td><!--요청사유-->
                                                <td style="text-align:right;vertical-align:middle">@item.FileSize</td> <!--파일크기!!-->
                                                <td style="text-align:center;vertical-align:middle">@item.strInterLockFlagType</td><!-- 검사종류 -->
                                                <td style="text-align:center;vertical-align:middle">@item.ReqTime</td><!--요청일시-->
                                                <td style="text-align:center;vertical-align:middle">@item.ApprDoneTime</td><!--승인일시-->
                                                <td style="text-align:center;vertical-align:middle">@item.ExpiredDate</td><!--만료일-->
                                            </tr>
                                        }
                                    }

                                </tbody>
                            </table>
                        </div>

                        <div class="card-body pt-0">
                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@XmlConf.GetTitle("T_TRANS_TOTALPAGE") : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>
                        </div>

                        <!--footer test-->
                        <Footer></Footer>
                        <!--./footer test-->
                    </form>
                </div>
            </div>

        </div>
    </div>
</section>
<FileSelectPopUpForSingleSelect @ref="refFileSelectPopUpForSingleSelect" OnSelectOK="PopUpFileSelectOK"></FileSelectPopUpForSingleSelect>

@code {
    FileSelectPopUpForSingleSelect refFileSelectPopUpForSingleSelect;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;
    private static Action<List<string>> ActionFileSelectOK;
    string m_filePath = string.Empty;
    private bool bAPTCheck = false;
    private bool bVirusCheck = true;
    private bool bDRMCheck = false;
    private bool bDLPCheck = false;
    private string strReason = string.Empty;
    //패이징변수
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;
    List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정

    public List<SGFileExceptionData> mData = new List<SGFileExceptionData>();
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<FileExceptionView>();
    int nDrawPageGroupID = -1;

    // 전체 checkbox 운영용도
    public bool bAllCheck = false;

    // 처리중 확인
    private bool g_RequestProcessing = false;
    private int g_ninterLockFlag = 0;
    private string g_strFileName = "";

    /// <summary>
    /// 승인상태 값을 상태 String으로 변경
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    private string GetApproveString(string data)
    {

        if (data == null || data.Length < 1)
            return XmlConf.GetTitle("T_COMMON_UNKNOWN");

        string strRet = XmlConf.GetTitle("T_COMMON_UNKNOWN");     // 알수없음

        if (data == "0")
            strRet = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");   // 승인대기
        else if (data == "1")
            strRet = XmlConf.GetTitle("T_COMMON_APPROVE");        // 승인
        else if (data == "2")
            strRet = XmlConf.GetTitle("T_COMMON_REJECTION");      // 반려
        else if (data == "3")
            strRet = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");  // 요청취소

        return strRet;
    }

    /// <summary>
    /// 파일이름에 있는 특수문자 변경한걸 원래 특수문자로 변경
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    private string GetFileNameNormal(string name)
    {
        string newFileName = name;

        newFileName = SgExtFunc.hsFileRename(false, name);

        return newFileName;
    }

    /// <summary>
    /// 요청일시 날짜.시간정보 표현 방식으로 string 변경하는 함수 (사용X)
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    private string GetDateStringLong(string data)
    {
        string rtn = string.Empty;
        if (data == null || data.Length < 10)
            return "";
        rtn = data.Substring(0, 4) + "-" + data.Substring(4, 2) + "-" + data.Substring(6, 2) + " " + data.Substring(8, 2) + ":" + data.Substring(10, 2) + ":" + data.Substring(12, 2);
        return rtn;
    }

    /// <summary>
    /// 만기일 날짜 시간 정보 표현 형식으로 string을 변경하는 함수 (사용X)
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    private string GetDateStringShort(string data)
    {
        string rtn = string.Empty;
        if (data == null || data.Length < 10)
            return "";
        rtn = data.Substring(0, 4) + "-" + data.Substring(4, 2) + "-" + data.Substring(6, 2);
        return rtn;
    }

    /// <summary>
    /// 단순숫자 string을 "0KB" 와 같은 형식으로 변경
    /// </summary>
    /// <param name="stsize"></param>
    /// <returns></returns>
    public string GetSizeStr(string stsize)
    {
        string rtn = "";
        if (stsize == null || stsize.Length < 1)
            return "";
        long size = long.Parse(stsize);

        rtn = CsFunction.GetSizeStr(size);

        return rtn;
    }

    /// <summary>
    /// 신청한 예외 검사종류 표현하는 문자로 변환
    /// </summary>
    /// <param name="code"></param>
    /// <returns></returns>
    private string GetInterlockFlagString(string code)
    {
        if (code == "8")  //((Int32.Parse(code) & 8) == 8)
            return "DLP";
        else if (code == "1")
            return "APT";
        else if (code == "2")
            return "Anti-Virus";
        else if (code == "4")
            return "DRM";
        else
            return "-";
    }

    /// <summary>
    /// PageNumber에 맞게 List를 표현하도록 만드는 함수
    /// </summary>
    /// <param name="pageNumber"></param>
    private void UpdateList(int pageNumber)
    {
        //nViewPageNo = pageNumber + 1;

        @*if (nViewPageNo != (pageNumber + 1))
            {
                nViewPageNo = pageNumber + 1;
                // UpdateData();
            }
            else
            {
                nViewPageNo = pageNumber;
                //mData = ListData.Skip(pageNumber * nPageListCount).Take(nPageListCount).ToList();
                //mData = ListData.Take(nPageListCount).ToList();
            }

            if (nViewPageNo < 1)
                nViewPageNo = 1;*@

        nViewPageNo = pageNumber + 1;

        doSearch();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            doSearch();
        base.OnAfterRender(firstRender);
    }


    public void SearchBtnClick()
    {

        nViewPageNo = 1;

        doSearch();
    }

    /// <summary>
    /// 예외신청 LIST를 조회하는 함수( 등록된 개수가 있을때에 목록을 조회)
    /// </summary>
    public void doSearch()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
        //COUNT 요청응답
        HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strQueryCount = SGQueryExtend.GetSkipFileCount(sgUserData.GetUserSequence());
        //    "SELECT COUNT(*) AS count FROM tbl_skip_file_list WHERE user_seq=" + sgUserData.GetUserSequence();

        HSCmdCenter.SendCountQuery(groupID, curUserID, strQueryCount);
    }

    /// <summary>
    /// 검색된 개수를 보고 List 를 조회하는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SearchCountResult(int groupId, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");
        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        if (result != "0")
        {
            ShowMessage("error", reason);
            return;
        }
        if (count <= 0)
        {
            ShowMessage("warn", reason);            // 검색결과가 존재하지 않습니다.
            if (listData != null) listData.Clear();
            //UpdateList(0);
            SetPageinfo(totalCnt);
            StateHasChanged();
            return;
        }
        SetPageinfo(totalCnt);
        SearchList();
    }

    /// <summary>
    /// List 검색결과
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SearchListResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        int nCount = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수

        listData?.Clear();
        mData.Clear();

        listData = e.GetSvrRecordData2("RECORD");

        for (int i = 0; i < nCount; i++)
        {

            SGFileExceptionData aData = new SGFileExceptionData();
            aData.bCheck = false;

            string tmpStr = "";

            int itemCount = listData[i].Count;
            for (int k = 0; k < itemCount; k++)
            {
                tmpStr = "";
                listData[i].TryGetValue(k, out tmpStr);

                // k index = query에서 나온 결과 순서
                if (k == 0)     // fileSeq
                    aData.FileSeq = tmpStr;
                else if (k == 1)        // 전송구분
                    aData.systemID = XmlConf.GetTitle((tmpStr.Length > 0 && string.Compare(tmpStr.Substring(0, 1), "I", true) == 0) ? "T_COMMON_EXPORT" : "T_COMMON_IMPORT");
                else if (k == 2)        // 파일명
                    aData.FileName = GetFileNameNormal(tmpStr);
                else if (k == 3)        // 파일크기
                    aData.FileSize = GetSizeStr(tmpStr);
                else if (k == 4)        // 요청일시
                    aData.ReqTime = tmpStr;
                else if (k == 5)        // 승인일시
                    aData.ApprDoneTime = tmpStr;
                else if (k == 6)        // 만료일
                    aData.ExpiredDate = tmpStr;
                else if (k == 7)        // 요청사유
                    aData.strDesc = tmpStr;
                else if (k == 8)        // 검사종류
                    aData.strInterLockFlagType = GetInterlockFlagString(tmpStr);
                else if (k == 9)        // 승인상태
                    aData.ApproveStatus = GetApproveString(tmpStr);
            }

            mData.Add(aData);

        }

        //UpdateList(nViewPageNo);

        bAllCheck = false;

        StateHasChanged();
    }


    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    // LIST를 page 형태로 출력
    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;
    }

    /// <summary>
    /// 예외신청하는 파일이나 설명 등에 문제가 없는지 체크
    /// </summary>
    /// <returns></returns>
    private bool checkExceptionFile(int ninterLockFlag, out long fileSize)
    {
        fileSize = -1;
        if (ninterLockFlag == 0)
        {
            ShowMessage("warning", XmlConf.GetTitle("T_SELECT_NEEDED"));
            return false;
        }

        if (m_filePath == string.Empty)
        {
            ShowMessage("warning", XmlConf.GetTitle("T_FILE_SELECT_NEEDED"));
            return false;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;


        // 체크1. 서버에 연결된 상태인지 확인
        if (pageService.GetConnectStatus(groupID) == false)
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0218").Replace("/r/n", "<br>"));
            return false;
        }

        // 체크2. 선택한 파일이 실제 있는지 확인
        if (File.Exists(m_filePath) == false)
        {
            //ShowMessage("warning", XmlConf.GetWar("T_SELECT_NEEDED"));
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0279"));
            return false;
        }

        // 체크3. 설정에 따라 strReason 내용이 없으면 내용입력하라고 경고
        if (SGAppMgrSvc.OpConfigInfoService.GetUseFileExceptionDescCheck(groupID))
        {
            if (strReason == string.Empty || strReason.Length < 1)
            {
                ShowMessage("warning", XmlConf.GetWarnMsg("W_0222"));
                return false;
            }
        }

        // 체크4. FileSize 체크 - 0kb 파일도 hash는 나옴
        long lSizeinfo = CsFileFunc.GetFileSize(m_filePath);
        fileSize = lSizeinfo;
        if (lSizeinfo < 0)
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0281"));
            return false;
        }

        if (SGAppMgrSvc.OpConfigInfoService.GetEmptyfileTrans(groupID) == false)
        {
            if (lSizeinfo == 0)
            {
                ShowMessage("warning", XmlConf.GetWarnMsg("W_0280"));
                return false;
            }
        }

        // 체크5. 내용이 DB 컬럼사이즈보다 큰지 확인
        if (strReason.Length > 128)
        {
            ShowMessage("warning", XmlConf.GetTitle("T_INPUT_WARNING_128"));
            return false;
        }


        // 체크0. 해당 내용 이미 있는거 아닌지 확인 - sql function에서 확인 : func_nl_skipfilelistset


        return true;
    }

    /// <summary>
    /// 예외 신청 요청 기능
    /// </summary>
    private void sendRecordCheckRequest()
    {

        if (g_RequestProcessing)
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0282"));
            return;
        }

        g_RequestProcessing = true;

        long lfileSize = 0;
        int ninterLockFlag = 0;
        if (bAPTCheck)
            ninterLockFlag = 1;
        else if (bVirusCheck)
            ninterLockFlag = 2;
        else if (bDRMCheck)
            ninterLockFlag = 4;
        else if (bDLPCheck)
            ninterLockFlag = 8;

        // 신청 요건 확인
        if (checkExceptionFile(ninterLockFlag, out lfileSize) == false)
        {
            g_RequestProcessing = false;
            return;
        }

        g_ninterLockFlag = ninterLockFlag;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            g_RequestProcessing = false;
            return;
        }

        string systemid = (sgLoginData.GetSystemPosition() ? "I001" : "E001");

        System.IO.FileInfo fileInfo = null;
        fileInfo = new System.IO.FileInfo(this.m_filePath);

        g_strFileName = SgExtFunc.hsFileRename(true, fileInfo.Name);
        string strReasonData = strReason;
        strReasonData = strReasonData.Replace(" ", "");
        if (strReasonData.Length < 1)
            strReasonData = "-";

        string strsha384 = SHA384CheckSum(m_filePath);

        string strSql = SGQueryExtend.GetSkipFileListSet(systemid, g_strFileName, lfileSize, strReasonData, sgUserData.GetUserSequence(), strsha384, g_ninterLockFlag);
        @*string sql = string.Empty;
            sql = " select a.cnt1 + b.cnt2 AS CHKCNT FROM ";
            sql += " (select COUNT(*) AS cnt1 from tbl_skip_file_list ";
            sql += " where system_id='" + systemid + "' and file_name='" + newFileName + "' ";
            sql += " and checksum_val='" + SHA256CheckSum(m_filePath) + "' ";
            sql += " and expired_date is null and interlock_flag='" + flag.ToString() + "') a, ";
            sql += " (select COUNT(*) AS cnt2 from tbl_skip_file_list ";
            sql += " where system_id='" + systemid + "' and file_name='" + newFileName + "' ";
            sql += " and checksum_val='" + SHA256CheckSum(m_filePath) + "' ";
            sql += " and expired_date > to_char(now(), 'yyyymmddhh24miss') and interlock_flag='" + flag + "') b ";*@

        HSCmdCenter.sgPageEvent.SetQueryRecordExistCheckEvent(groupID, RecordCheckResult);
        HSCmdCenter.SendRecordExistCheckQuery(groupID, curUserID, strSql);

    }

    /// <summary>
    ///  예외신청이 최종적으로 완료되었음을 확인, msg 띄워줌
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SendNotiCmdDoneResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        if (result != null && result.Length > 0 && result == "0")
        {
            // 자료 등록성공 : 예외처리 신청이 완료되었습니다.
            ShowMessage("info", XmlConf.GetInfoMsg("I_0229"));

        }
    }

    /// <summary>
    /// 예외신청 sql Query 결과를 받아 이후 동작을 실행하는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void RecordCheckResult(int groupId, SGData e)
    {

        string result = e.GetTagData("RESULT");
        List<Dictionary<int, string>> checkData = e.GetSvrRecordData2("RECORD");
        if (checkData == null)
        {
            g_RequestProcessing = false;
            return;
        }

        string cnt = String.Empty;
        checkData[0].TryGetValue(0, out cnt);

        if (cnt == "1")
        {
            // 자료중복
            g_RequestProcessing = false;
            ShowMessage("error", XmlConf.GetInfoMsg("I_0219"));
            return;
        }
        else if (cnt == "0")
        {

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
            string curUserID = "";
            if (sgLoginData != null)
                curUserID = sgLoginData.GetUserID();

            SGUserData sgUserData = null;
            sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
            if (sgUserData == null)
                return;

            // Server에게 알림
            // HSCmdCenter.sgPageEvent.SetEvent(groupID, SendNotiCmdDoneResult);
            HSCmdCenter.sgPageEvent.SetGenericNotiType2EventAdd(groupId, SendNotiCmdDoneResult);
            HSCmdCenter.SendGenericNotiType2(groupId, curUserID, sgUserData.GetUserName(), sgUserData.GetTeamName(), g_strFileName, g_ninterLockFlag.ToString());

            // 선택한 파일정보 초기화
            clearReqInfo();

            g_RequestProcessing = false;

            // 등록된 자료 다시 조회
            SearchList();

        }
        else
        {
            g_RequestProcessing = false;
            // error 상황
            ShowMessage("error", XmlConf.GetInfoMsg("E_0251"));
            return;
        }
    }

    @*public void DetailResult(int groupId, SGData e)
        {
            string result = e.GetTagData("RESULT");
            if (result == "0")
                ShowMessage("success", XmlConf.GetTitle("T_INSERT_COMPETE"));
            else
                ShowMessage("error", XmlConf.GetTitle("T_INSERT_FAIL"));

            m_filePath = string.Empty;
            strReason = string.Empty;

            SearchList();
            StateHasChanged();
        }*@

    public string SHA384CheckSum(string filePath)
    {

        string strHash = "";

        try
        {
            strHash = CsHashFunc.SHA384BinBase64(filePath);
        }
        catch (Exception e)
        {
            CLog.Here().Information($"SHA384 - Exception - msg : {e.Message}, path : {filePath}");
        }

        return strHash;
    }


    /// <summary>
    /// 파일선택한거 정보, 요청내용 등 제거
    /// </summary>
    private void clearReqInfo()
    {
        m_filePath = string.Empty;
        strReason = "";
        StateHasChanged();
    }

    /// <summary>
    /// APT Radio 버튼 체크
    /// </summary>
    private void doAPTChk()
    {
        bAPTCheck = true;
        bVirusCheck = false;
        bDRMCheck = false;
        bDLPCheck = false;
        StateHasChanged();
    }

    /// <summary>
    /// Virus Radio 버튼 체크
    /// </summary>
    private void doVirusChk()
    {
        bVirusCheck = true;
        bAPTCheck = false;
        bDLPCheck = false;
        bDRMCheck = false;
        StateHasChanged();
    }

    /// <summary>
    /// DRM Radio 버튼 체크
    /// </summary>
    private void doDRMChk()
    {
        bDRMCheck = true;
        bVirusCheck = false;
        bAPTCheck = false;
        bDRMCheck = false;
        StateHasChanged();
    }

    /// <summary>
    /// DLP Radio 버튼 체크
    /// </summary>
    private void doDLPChk()
    {
        bDLPCheck = true;
        bVirusCheck = false;
        bDRMCheck = false;
        bAPTCheck = false;
        StateHasChanged();
    }

    /// <summary>
    /// 파일 선택 화면에서 파일선택했을때
    /// </summary>
    /// <param name="files"></param>
    private void PopUpFileSelectOK(List<string> files)
    {
        m_filePath = files[0];
        refFileSelectPopUpForSingleSelect.closePopUp();
        StateHasChanged();
    }

    [JSInvokable("JSaddFileToDropZoneForSingleSelect")]
    public static void JSaddFileToDropZoneForSingleSelect(string path)
    {
        List<string> lst = new List<string>();
        lst.Add(path);
        ActionFileSelectOK.Invoke(lst);
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task OpenFileDialog()
    {
        await refFileSelectPopUpForSingleSelect.openPopUp();
    }
    [Parameter]
    public int groupIDbyParam { get; set; }

    /// <summary>
    /// 결재 승인/반려로 Toast Popup 떠서 눌렀는데, 현재 이 파일예외처리 화면이면 그냥 화면만 갱신되도록 호출해주는 함수
    /// </summary>
    private void UpdateData()
    {
        doSearch();
    }

    protected override async Task OnInitializedAsync()
    {
        HSCmdCenter.sgPageEvent.SetPageDataRefreshEvent(Common.Enums.EnumPageView.FileException, UpdateData);
    }

    protected override void OnInitialized()
    {
        ActionFileSelectOK = PopUpFileSelectOK;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("exitLogIn", new object[] {""});
        await jsRuntime.InvokeAsync<object>("adJustWindowsize", new object[] {""});

        int groupID = groupIDbyParam;
        CLog.Here().Information($"fileException - OnAfterRenderAsync - Called (groupID : {groupIDbyParam})! ");

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;



            StateHasChanged();
        }

        if (firstRender)
        {
        }

        base.OnAfterRender(firstRender);
    }


    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        strNavigateWithGroupID += groupID.ToString();
        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }

    /// <summary>
    /// 전체체크 박스 - 클릭
    /// </summary>
    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);

        int nCount = mData.Count; // listData?.Count??0;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < mData.Count; i++)
        {
            mData[i].bCheck = bAllCheck;
        }

        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    public void CheckStateUpdate(SGFileExceptionData item)
    {

        //item.bCheck = !(item.bCheck);

        int nCount = mData.Count; // listData?.Count??0;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < nCount; i++)
        {
            SGFileExceptionData temp = mData[i];
            if (temp.FileSeq.Equals(item.FileSeq))
            {
                temp.bCheck = !temp.bCheck;
                mData[i] = temp;
                break;
            }
        }

        StateHasChanged();
    }

    /// <summary>
    /// List를 조회하는 Query를 서버로 전달하는 함수
    /// </summary>
    private void SearchList()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);

        // OpenNetLink
        @*string strQueryList = $@"SELECT A.* FROM (SELECT file_seq, system_id,file_name,file_size,appr_req_time,
            appr_res_time, expired_date, user_seq, interlock_flag, skip_flag, b.codename FROM tbl_skip_file_list INNER JOIN tbl_code_info b ON(skip_flag = b.code and b.basecode = 'C092') \
            WHERE user_seq={sgUserData.GetUserSequence()} ORDER BY appr_res_time DESC ) A LIMIT { nPageListCount} OFFSET { (nViewPageNo - 1) * nPageListCount}";*@

        // OpenNetLink - Query
        // SELECT A.* FROM (SELECT file_seq, system_id,file_name,file_size,appr_req_time, appr_res_time, expired_date,
        // user_seq, interlock_flag, skip_flag, b.codename FROM tbl_skip_file_list INNER JOIN tbl_code_info b ON(skip_flag = b.code and b.basecode = 'C092') WHERE user_seq=202203041700000001 ORDER BY appr_res_time DESC ) A LIMIT 10 OFFSET 0


        // (CASE WHEN APPR_RES_TIME IS NULL THEN '-' WHEN APPR_RES_TIME ='' THEN '-' WHEN APPR_RES_TIME =' ' THEN '-' ELSE APPR_RES_TIME END ) APPR_RES_TIME,
        // (CASE WHEN EXPIRED_DATE IS NULL THEN '-' WHEN EXPIRED_DATE ='' THEN '-' WHEN EXPIRED_DATE =' ' THEN '-' ELSE EXPIRED_DATE END ) EXPIRED_DATE,

        string strQueryList = SGQueryExtend.GetSkipFileList(sgUserData.GetUserSequence(), nPageListCount, nViewPageNo);
        HSCmdCenter.SendListQuery(groupID, curUserID, strQueryList);

    }

    /// <summary>
    /// 신청취소 결과 받는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void CancelUpdateListResult(int groupId, object[] e)
    {

        SGData sgdata = e[0] as SGData;

        string result = sgdata.GetTagData("RESULT");
        string reason = sgdata.GetTagData("REASON");

        if (result != null && result == "0")
        {
            ShowMessage("info", XmlConf.GetInfoMsg("I_0230"));

            // 승인상태가 변경된거 List 상에 표현해서 보여줌
            doSearch();
        }
        else
        {
            CLog.Here().Error($"FileExceptionView - CancelUpdateListResult - SQL Query Failed - result : {result}, reason : {reason}");
        }

    }


    /// <summary>
    /// 예외처리 신청한 항목들 취소시키는 동작
    /// </summary>
    private void CancelCheckedItem()
    {

        int nCount = mData.Count; // listData?.Count??0;
                                  //string strMsg = "";
        if (nCount <= 0)
        {
            // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", XmlConf.GetWarnMsg("W_0243"));
            return;
        }

        List<string> listCheckditem = new List<string>();
        for (int i = 0; i < nCount; i++)
        {
            SGFileExceptionData temp = mData[i];
            if (temp.bCheck)
            {
                listCheckditem.Add(temp.FileSeq);
            }
        }

        if (listCheckditem.Count < 1)
        {
            // 체크한 항목이 없습니다.
            ShowMessage("warn", XmlConf.GetWarnMsg("W_0283"));
            return;
        }


        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strQuery = SGQueryExtend.GetFileExceptionCancel(sgUserData.GetUserSequence(), listCheckditem);
        //string strQuery = $@"Hsck_Transaction:";
        //string strOneQuery = "";

        //foreach (string strFileSeq in listCheckditem)
        //{
        //    strOneQuery = $@"UPDATE TBL_SKIP_FILE_LIST SET SKIP_FLAG='3' WHERE FILE_SEQ={strFileSeq} AND USER_SEQ={sgUserData.GetUserSequence()}
        //";
        //    strQuery += strOneQuery;
        //}

        //strQuery = CsFunction.GetChangeNewLineToN(strQuery);

        listCheckditem.Clear();

        //LIST 요청응답

        // HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, CancelUpdateListResult);

        HSCmdCenter.sgPageEvent.SetQueryReciveEvent(groupID, eCmdList.eUPDATEQUERY, CancelUpdateListResult);

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupID);
        if (hsNetWork != null)
        {
            HSCmdCenter.sgSendData.RequestCommonSendQuery(hsNetWork, eCmdList.eUPDATEQUERY, sgUserData.GetUserID(), strQuery);
        }

        StateHasChanged();

    }

}
