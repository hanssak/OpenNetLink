@page "/securityApprove"
@page "/securityApprove/{groupIDbyParam:int}"
@page "/securityApprove/{groupIDbyParam:int}/{menuMode:int}"

@using HsNetWorkSG
@using OpenNetLinkApp.Services
@using HsNetWorkSGData;
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGQuery
@using AgLogManager

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strApprTitle</h1>                             <!--결재관리-->
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strApprTitle</li>                <!--결재관리-->
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-2" style="width:50px;">@strPeriod</th>                     <!--기간-->
                                <td style="width:25%;">
                                    @*<input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker7" readonly="readonly" value=@strFromDay>
                                        <span class="float-left col-md-1">-</span>
                                        <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker8" readonly="readonly" value=@strToDay>*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>
                                <th class="p-2" style="width:80px;"> @strApproveKind </th>               <!--결재종류-->
                                <td>
                                    @* 후결없음 - "전체"만 사용 *@
                                    <button type="button" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApprKindValue<i class="fas"></i></button>
                                </td>
                                <th class="p-2" style="width:80px;"> @strTransKind </th>               <!--전송구분-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransKindValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransKind"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransKindValue, str, ApproveSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransKind"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransKindValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2" style="width:80px;"> @strApproveStatus </th>               <!--승인상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strApprStatusValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("ApproveStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strApprStatusValue, str, ApproveSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("ApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApprStatusValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                            </tr>

                            <tr>
                                <th class="p-2 pt-2"> @strTitle </th>              <!--제목-->
                                <td class="pt-2" colspan="1"><input type="text" class="form-control col-md-11" placeholder=@strTitleInputInfo @bind="strTitleValue" @onkeyup="HandleKeyEvent"></td>    <!--제목을 입력하여 주십시요.-->

                                @if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                                {
                                    <th class="p-2">@XmlConf.GetTitle("T_RECV_NETWORK")</th>
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                @strDestNetWork
                                            </button>
                                            <div class="dropdown-menu" aria-labelledby="dropdownMenu4">
                                                @foreach (string str in Common.CsFunction.GetOptionValue("DestNetwork", dicDestSysPos))
                                                {
                                                    <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strDestNetWork, str, ApproveSearchCount))">@str</button>
                                                }
                                            </div>
                                        </div>
                                        <!--<button type="button" @onclick="@(()=>openCustomSelect("DestNetwork"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDestNetWork<i class="fas fa-angle-down pl-2"></i></button>-->
                                    </td>
                                }
                                <th class="p-2" style="width:80px;"> @strReqApprover </th>             <!--승인요청자-->
                                <td>
                                    <input type="text" class="form-control" placeholder=@strReqApprover @bind="strReqUserValue" @onkeyup="HandleKeyEvent">  <!--승인요청자-->
                                </td>
                            </tr>
                        </table>

                    </div>



                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                <div class="col-sm-12 text-right">
                    <button type="button" class="btn btn-md btn-black" @onclick="@ApproveSearchCount"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                    <button type="button" class="btn btn-md btn-blue" @onclick="ApproveAction"><i class="fas fa-check-circle"></i>@strBtnApprove</button>
                    <button type="button" class="btn btn-md btn-red" @onclick="ApproveReject"><i class="fas fa-times-circle"></i>@strBtnReject</button>
                </div>
            </div>
        </div>

        <div class="row">



            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">
                    <div class="card-body p-0">
                        <table class="table table-head-fixed table-bordered table-hover" style="table-layout: fixed;">
                            <thead>
                                <tr>
                                    <th style="text-align:center; vertical-align:middle;width:5%">
                                        <input class="input" type="checkbox" checked="@bAllCheck" @onclick="(e=>AllCheckStateUpdate())">
                                    </th>
                                    <th style="text-align:center; vertical-align:middle;width:7%">@strApproveKind</th>                             <!--결재종류-->
                                    <th style="text-align:center; vertical-align:middle;width:7%">@strTransKind</th>                             <!--전송구분-->
                                    <th style="text-align:center; vertical-align:middle;width:8%">@strReqApprover</th>                            <!--승인요청자-->
                                    <th style="text-align:center; vertical-align:middle;width:8%">@strApproveStatus</th>                             <!--승인상태-->
                                    <!-- <th style="text-align: center;width:8%">@strFileForward</th> -->                            <!--파일전달-->
                                    @if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                                    {
                                        <th style="text-align:center; vertical-align:middle;width:11%;">@XmlConf.GetTitle("T_RECV_NETWORK")</th>
                                        <!--목적지-->
                                    }
                                    <th style="text-align:center; vertical-align:middle;width:15%;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@strTitle</th>                                   <!--제목-->
                                    <th style="text-align:center; vertical-align:middle;width:14%">@strApproveReqDay</th>                            <!--승인요청일-->
                                    <th style="text-align:center; vertical-align:middle;width:14%">@strApproveDay</th>                                  <!--승인일-->
                                    <th style="text-align:center; vertical-align:middle;width:7%">@strApproveDetail</th>                             <!--상세보기-->
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (approveData item in mData)
                                {
                                    <tr>
                                        <td style="text-align:center; vertical-align:middle">
                                            <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                        </td>
                                        <td style="text-align:center; vertical-align:middle">@item.ApvType</td>
                                        <td style="text-align:center; vertical-align:middle">@item.TransferType</td>
                                        <td style="text-align:center; vertical-align:middle">@item.RequesterName</td>
                                        <td style="text-align:center; vertical-align:middle">@item.ApvStatus</td>
                                        <!-- <td style="text-align: center">@item.IsFile</td> -->   <!--파일전달 : 기능구현후 사용-->
                                        @if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                                        {
                                            <th style="text-align:center; vertical-align:middle;width:11%;">@item.strDestNet</th>
                                        }
                                        <td style="vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                        <td style="text-align: center; vertical-align:middle">@item.RequestTime</td>
                                        <td style="text-align:center; vertical-align:middle">@item.ApvTime</td>
                                        <td style="text-align:center; vertical-align:middle"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>ApprDetailSearch(item.TransSeq))"><i class="fas fa-search"></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>


                    <div class="card-body pt-0">

                        <!--S page -->


                        <div style="padding-top:1.25rem;">
                            <div style="float:left;">
                                <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>      <!--총페이지-->
                            </div>
                            <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                       NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                       UpdateListPagingInvoke="UpdateList"></Pagenator>
                        </div>


                        <!--/.S page -->


                    </div>






                    <!--footer test-->
                    <Footer></Footer>
                    <!--./footer test-->
                    <!-- /.card-footer -->
                    @*</form>*@

                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<ApprovePopUp @ref="refApprovePopUp"></ApprovePopUp>
<SGReject @ref="refSGSecureReject" Guid="modalSecureReject"></SGReject>
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>

@code {

    private async void openCustomSelect(string opt)
    {
        if (opt == "TransKind")
            await refSGCustomSelect.openPopUp(opt, strTransKindValue);
        else if (opt == "ApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strApprStatusValue);
        else if (opt == "DestNetwork")
            await refSGCustomSelect.openPopUp(opt, strDestNetWork, dicDestSysPos);
        else if (opt == "ApproveKind")
            await refSGCustomSelect.openPopUp(opt, strApprKindValue);
    }

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransKind")
            _strTransKindValue = stValue;
        else if (stOption == "ApproveStatus")
            _strApprStatusValue = stValue;
        else if (stOption == "DestNetwork")
            _strDestNetWork = stValue;
        else if (stOption == "ApproveKind")
            _strApprKindValue = stValue;
    }
    [Parameter]
    public int menuMode { get; set; } = 0;

    [Parameter]
    public int groupIDbyParam { get; set; }

    ApprovePopUp refApprovePopUp;
    SGCustomSelect refSGCustomSelect;
    PeriodDatePicker refPeriodDatePicker;

    public int TotalCount { get; set; }
    public List<approveData> mData = new List<approveData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    public string strApprTitle = "";
    public string strApproveKind = "";
    public string strPeriod = "";
    public string strPreAppr = "";
    public string strAfterAppr = "";
    public string strTransKind = "";
    public string strTotal = "";
    public string strCarryIn = "";
    public string strCarryOut = "";
    public string strApproveStatus = "";
    public string strApprove = "";
    public string strApproveWait = "";
    public string strReject = "";
    public string strApproveCancle = "";
    public string strReqApprover = "";
    public string strSearch = "";
    public string strBtnApprove = "";
    public string strBtnReject = "";
    public string strFileForward = "";
    public string strTitle = "";
    public string strApproveReqDay = "";
    public string strApproveDay = "";
    public string strApproveDetail = "";
    public string strURLAuto = "";
    public string strRemainFile = "";
    public string strTitleInputInfo = "";
    public string strTotalPage = "";

    public string strFromDay = "";
    public string strToDay = "";

    ISGAppConfigService AppConfigSvc;

    // 목적지 Data
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    public string strDestNetWork = "";
    public string _strDestNetWork
    {
        get { return strDestNetWork; }
        set
        {
            strDestNetWork = value;
            Task.Run(async () => { await ApproveSearchCount(); });
        }
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Task.Run(async () => { await ApproveSearchCount(); });
        }
    }

    public string strTransKindValue = "";
    public string _strTransKindValue
    {
        get { return strTransKindValue; }
        set
        {
            strTransKindValue = value;
            Task.Run(async () => { await ApproveSearchCount(); });
        }
    }

    public string strApprKindValue = "";
    public string _strApprKindValue
    {
        get { return strApprKindValue; }
        set
        {
            //strApprKindValue = value;
            strApprKindValue = strTotal; // "전체" 만
            Task.Run(async () => { await ApproveSearchCount(); });
        }
    }

    public string strApprStatusValue = "";
    public string _strApprStatusValue
    {
        get { return strApprStatusValue; }
        set
        {
            strApprStatusValue = value;
            Task.Run(async () => { await ApproveSearchCount(); });
        }
    }
    public string strTitleValue = "";
    public string strReqUserValue = "";


    public string curUserID = "";
    public string curApprKind = "";
    public string curTransKind = "";
    public string curApprStatus = "";
    public string curReqUserName = "";
    public string curTitle = "";
    public string curDestNetWork = "";

    ISGSideBarUIService SideBarUISvc;

    public bool bAllCheck = false;

    SGReject refSGSecureReject;

    int nDrawPageGroupID = -1;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<SecurityApproveUI>();

    private void UpdateList(int pageNumber)
    {
        //nViewPageNo = pageNumber + 1;
        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip(pageNumber * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }
    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }
    private void UpdateData()
    {
        ApproveSearchData(nViewPageNo);
    }

    //원데이타라고 가정함
    public List<approveData> ListData = new List<approveData>();

    public async Task OpenDetail(string transSeq)
    {
        Console.WriteLine("Open Detail Start" + transSeq);
        long ltransSeq = Convert.ToInt64(transSeq);

        refApprovePopUp.bIsPrivacyApproveDetail = true;
        refApprovePopUp.ReFresh();
        await refApprovePopUp.openPopUp(ltransSeq);

        //await refApprovePopUp.openPopUp(transSeq);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await jsRuntime.InvokeAsync<object>("exitLogIn", new object[] {""});
        await jsRuntime.InvokeAsync<object>("adJustWindowsize", new object[] {""});

        int groupID = groupIDbyParam;
        CLog.Here().Information($"securityApprove - OnAfterRenderAsync - Called (groupID : {groupIDbyParam})! ");

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;

            HSCmdCenter.sgPageEvent.SetApprSearchEventAdd(groupID, SearchResult);
            HSCmdCenter.sgPageEvent.SetApprSearchCountEventAdd(groupID, SearchCount);
            HSCmdCenter.sgPageEvent.SetApprBatchEvent(groupID, ApproveBatchResult);

            // 데이터 리프레쉬 등록
            HSCmdCenter.sgPageEvent.SetPageDataRefreshEvent(Common.Enums.EnumPageView.SecurityApproveUI, UpdateData);

            strDestNetWork = strTotal;

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData.GetUseOverNetwork2())
            {
                dicDestSysPos = pageService.GetTargetSystemList(groupID);
            }

            //jsRuntime.InvokeAsync<object>("initApproveUIPosition");
            jsRuntime.InvokeAsync<object>("initPageLeft");

            if (menuMode == 1)
            {
                refPeriodDatePicker.SetDateTime(DateTime.MinValue.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"));
                strApprStatusValue = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");
            }

            await ApproveSearchCount();

            StateHasChanged();
        }

        if (firstRender)
        {
        }
        base.OnAfterRender(firstRender);
    }


    public void ApprDetailSearch(string transSeq)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        HSCmdCenter.sgPageEvent.SetDetailSearchEventAdd(groupID, ApprDetailSearchResult);           // 상세보기 조회 결과

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendTransDetail(groupID, strUserID, transSeq);
    }

    public void ApprDetailSearchResult(int groupId, PageEventArgs e)
    {
        int nRet = e.result;
        string strMsg = e.strMsg;
        if (nRet != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        SGDetailData sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupId);
        if (sgDetailData == null)
            return;

        approveData tData = null;
        tData = GetApprListData(strMsg);
        if (tData != null)
        {
            string sTransSeq = tData.TransSeq;
            string sApprSeq = tData.ApprSeq;
            int nDataForwarded = GetForwarded(tData.IsFile);
            bool bTransCancel = false;
            bool bApprove = !(tData.bCheckDisable);
            bool bReject = false;
            string strTemp = XmlConf.GetTitle("T_DETAIL_AFTER_APPROVE");                      // 후결

            tData.ApvType = XmlConf.GetTitle("T_COMMON_APPROVE_BEFORE");        // 보안결재는 "선결"로 강제

            if (bApprove)
            {
                bReject = true;
                if (tData.ApvType.Equals(strTemp))
                    bReject = false;
            }


            sgDetailData.SetInit(true, sTransSeq, sApprSeq, nDataForwarded, bTransCancel, bApprove, bReject);

            HSCmdCenter.SetDetailDataChange(groupId, sgDetailData);

            refApprovePopUp.SetBindingData(tData.ApproverName, tData.ApvStatus, tData.ApvTime);
            OpenDetail(sTransSeq).Wait();
        }
    }

    public approveData GetApprListData(string strTransSeq)
    {
        approveData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
            return tdata;

        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.TransSeq.Equals(strTransSeq))
            {
                tdata = temp;
                break;
            }
        }
        return tdata;
    }

    public int GetForwarded(string strIsFile)
    {
        if (strIsFile.Equals("-"))
            return 0;
        else if (strIsFile.Equals("발송"))
            return 1;
        else if (strIsFile.Equals("수신"))
            return 2;
        else
            return 0;
    }

    protected override async Task OnInitializedAsync()
    {
        InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

        base.OnInitialized();

        //await ApproveSearchCount();
    }

    public void InitText()
    {
        strApprTitle = XmlConf.GetTitle("T_TOOL_APPROVESECURITY");                      // 보안결재
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                     // 결재종류
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                                // 기간
        strPreAppr = XmlConf.GetTitle("T_DETAIL_BEFORE_APPROVE");                       // 선결
        strAfterAppr = XmlConf.GetTitle("T_DETAIL_AFTER_APPROVE");                      // 후결
        strTransKind = XmlConf.GetTitle("T_COMMON_TRANSKIND");                          // 전송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                    // 전체
        strCarryIn = XmlConf.GetTitle("T_COMMON_IMPORT");                               // 반입
        strCarryOut = XmlConf.GetTitle("T_COMMON_EXPORT");                              // 반출
        strApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                  // 승인상태
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                              // 승인
        strApproveWait = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                     // 승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                             // 반려
        strApproveCancle = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");                  // 요청취소
        strReqApprover = XmlConf.GetTitle("T_COMMON_REQUESTER");                        // 승인요청자
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                                // 조회
        strBtnApprove = XmlConf.GetTitle("T_APPROVE_BTN");                              // 결재승인
        strBtnReject = XmlConf.GetTitle("T_REJECT_BTN");                                // 결재반려
        strFileForward = XmlConf.GetTitle("T_ETC_FILEFORWARD");                         // 파일전달
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                                   // 제목
        strApproveReqDay = XmlConf.GetTitle("T_COMMON_APPROVEREQDATE");                 // 승인요청일
        strApproveDay = XmlConf.GetTitle("T_COMMON_APPROVEDATE");                       // 승인일
        strApproveDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                     // 상세보기
        strURLAuto = XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO");                   // URL 자동전환 사용
        strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송
        strTitleInputInfo = XmlConf.GetWarnMsg("W_0021");                               // 제목을 입력하여 주십시오.
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                               // 총페이지

        strTransKindValue = strTotal;
        strApprKindValue = strTotal;
        strApprStatusValue = strTotal;
    }

    public async Task ApproveAction()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strApprSeq = GetCheckApprSeq();

        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        if (!SGAppMgrSvc.OpConfigInfoService.GetUseFileApproveReason(groupID))
        {

            SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
            string strUserID = "";
            if (sgLoginData != null)
                strUserID = sgLoginData.GetUserID();

            string strProcID = "A";
            string strReason = "Approve";
            string strApproveSeqs = "";
            for (int i = 0; i < ListData.Count; i++)
            {
                if (ListData[i].bCheck == true)
                {
                    string temp = (ListData[i].ApprSeq + '\u0002');
                    strApproveSeqs += temp;
                }
            }
            string strApprover = "1";
            string strApproveUserKind = "1";

            HSCmdCenter.SendApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, strApprover, strApproveUserKind);
        }
        else
        {
            refSGSecureReject.ResetReason(Common.Enums.EnumApproveType.Approve);
            refSGSecureReject.SetGroupID(groupID);
            refSGSecureReject.SetApprRejectEvent(ApproveSend);
            await refSGSecureReject.openPopUp();
        }
    }

    public void ApproveSend(int groupID, string strReason)
    {
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();
        string strProcID = "A";
        string strApproveSeqs = "";
        for (int i = 0; i < ListData.Count; i++)
        {
            if (ListData[i].bCheck == true)
            {
                string temp = (ListData[i].ApprSeq + '\u0002');
                strApproveSeqs += temp;
            }
        }
        string strApprover = "1";
        string strApproveUserKind = "1";

        HSCmdCenter.SendApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, strApprover, strApproveUserKind);
    }

    private async Task ApproveReject()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (GetCheckRejectPossible() != true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0092"); // 후결은 반려를 할 수 없습니다./r/n다시 확인하십시오.
            ShowMessage("info", strMsg);
            return;
        }
        string strApprSeq = GetCheckApprSeq();
        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }


        refSGSecureReject.ResetReason(Common.Enums.EnumApproveType.Reject);
        refSGSecureReject.SetGroupID(groupID);
        refSGSecureReject.SetApprRejectEvent(ApproveRejectSend);
        await refSGSecureReject.openPopUp();
    }

    public void ApproveRejectSend(int groupID, string strReason)
    {
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();
        string strProcID = "R";
        string strApproveSeqs = "";
        for (int i = 0; i < ListData.Count; i++)
        {
            if (ListData[i].bCheck == true)
            {
                string temp = (ListData[i].ApprSeq + '\u0002');
                strApproveSeqs += temp;
            }
        }
        string strApprover = "1";
        string strApproveUserKind = "1";

        HSCmdCenter.SendApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, strApprover, strApproveUserKind);
    }

    public string GetCheckApprSeq()
    {
        string strApprSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.bCheck)
            {
                strApprSeq = temp.TransSeq;
            }
        }
        return strApprSeq;
    }

    public bool GetCheckRejectPossible()
    {
        string strApprKind = "";
        string strTemp = XmlConf.GetTitle("T_COMMON_APPROVE_AFTER");        // 후결
        bool bRejectPossible = true;
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.bCheck == true)
            {
                strApprKind = temp.ApvType;
                if (strApprKind.Equals(strTemp))
                {
                    bRejectPossible = false;
                    break;
                }
            }
        }
        return bRejectPossible;
    }
    public async Task ApproveSearchCount()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        
        if(!strReqUserValue.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }

        if(!strTitleValue.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        curApprKind = GetApprKind();
        curTransKind = GetTransKind();
        curApprStatus = GetApprStatus();

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
            curDestNetWork = GetDestNetWorkSysID();

        curReqUserName = strReqUserValue;
        curTitle = strTitleValue;

        nViewPageNo = 1;

        await refPeriodDatePicker.RetriveDateFromJS();
        string curFromDay = refPeriodDatePicker.FromDateSearchValue;
        string curToDay = refPeriodDatePicker.ToDateSearchValue;

        ApproveParam param = new ApproveParam(curFromDay, curToDay, curApprKind, curTransKind, curApprStatus, curReqUserName, curTitle, curUserID, nPageListCount, nViewPageNo);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();

        string strCountQuery = "";
        param.Src_system_id = "";
        param.Dest_system_id = "";

        // 3망상황일때
        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {

            foreach (var item in dicDestSysPos)
            {
                // src
                if (item.Value.nIdx == 0)
                {
                    param.Src_system_id = item.Value.strDestSysid;
                }

                // Dest
                if (item.Key == strDestNetWork)
                {
                    param.Dest_system_id = item.Value.strDestSysid;
                    if (param.Src_system_id == param.Dest_system_id)    // 현재망으로 수신된 경우만 검색
                        param.Src_system_id = "";
                }

            }

            ApproveDao dao = new ApproveDao(); // 실제사용
            param.NetWorkType = Common.Enums.EnumNetWorkType.Multiple;
            param.IsSecurity = true;
            strCountQuery = dao.TotalCount(param, false, null);   // 쿼리 데이터 카운트
        }
        else
        {
            ApproveDao dao = new ApproveDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Single;
            param.IsSecurity = true;
            strCountQuery = dao.TotalCount(param, false, null);   // 쿼리 데이터 카운트
        }


        HSCmdCenter.SendApprListCountQuery(groupID, curUserID, strCountQuery);
    }

    public void ApproveSearchData(int pageNum)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (nViewPageNo == 0)
            nViewPageNo = 1;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

        Task.Run(async () => { await refPeriodDatePicker.RetriveDateFromJS(); });
        string curFromDay = refPeriodDatePicker.FromDateSearchValue;
        string curToDay = refPeriodDatePicker.ToDateSearchValue;

        ApproveParam param = new ApproveParam(curFromDay, curToDay, curApprKind, curTransKind, curApprStatus, curReqUserName, curTitle, curUserID, nPageListCount, nViewPageNo);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();

        string strQuery = "";
        param.Src_system_id = "";
        param.Dest_system_id = "";

        // 3망상황일때
        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {

            foreach (var item in dicDestSysPos)
            {
                // src - 소스가 분명히 분리되어 계산될 대에만 사용
                if (item.Value.nIdx == 0)
                {
                    param.Src_system_id = item.Value.strDestSysid;
                }

                // Dest
                if (item.Key == strDestNetWork)
                {
                    param.Dest_system_id = item.Value.strDestSysid;
                    if (param.Src_system_id == param.Dest_system_id)    // 현재망으로 수신된 경우만 검색
                        param.Src_system_id = "";
                }

            }

            ApproveDao dao = new ApproveDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Multiple;
            param.IsSecurity = true;


            strQuery = dao.List(param, false, null);   // 쿼리 데이터 리스트
        }
        else
        {
            ApproveDao dao = new ApproveDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Single;
            param.IsSecurity = true;

            strQuery = dao.List(param, false, null);   // 쿼리 데이터 리스트
        }

        HSCmdCenter.SendApprListQuery(groupID, curUserID, strQuery);
    }

    public string GetApprKind()
    {
        string strValue = "";
        return strValue;            // 전체만 검색되게 강제

        @*if (strApprKindValue.Equals(strTotal))                         // 전체
                strValue = "";
            else if (strApprKindValue.Equals(strPreAppr))                  // 선결
                strValue = "0";
            else if (strApprKindValue.Equals(strAfterAppr))                // 후결
                strValue = "1";
            else
                strValue = "";

            return strValue;*@
    }


    public string GetTransKind()
    {
        string strValue = "";

        if (strTransKindValue.Equals(strTotal))                         // 전체
            strValue = "";
        else if (strTransKindValue.Equals(strCarryOut))                 // 반출
            strValue = "1";
        else if (strTransKindValue.Equals(strCarryIn))                  // 반입
            strValue = "2";
        else
            strValue = "";

        return strValue;
    }


    public string GetApprStatus()
    {
        string strValue = "";

        if (strApprStatusValue.Equals(strTotal))                        // 전체
            strValue = "";
        else if (strApprStatusValue.Equals(strApproveWait))             // 승인대기
            strValue = "1";
        else if (strApprStatusValue.Equals(strApprove))                 // 승인
            strValue = "2";
        else if (strApprStatusValue.Equals(strReject))                  // 반려
            strValue = "3";
        else if (strApprStatusValue.Equals(strApproveCancle))           // 요청취소
            strValue = "4";

        return strValue;
    }

    /**
    *@brief 목적지(망)에서 선택한 망의 system_ID 값을 넘겨준다. 전체를 선택했을때에는 "" 공백리턴
    */
    public string GetDestNetWorkSysID()
    {
        string strValue = "";

        if (strDestNetWork.Equals(strTotal))                                // 전체
        {
            strValue = "";
            return strValue;
        }

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {
            foreach (var item in dicDestSysPos)
            {
                if (item.Key == strDestNetWork)
                {
                    strValue = item.Value.strDestSysid;
                    break;
                }
            }
        }

        return strValue;
    }


    /**
    *@brief
    */
    public void SearchCount(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        if (e.count <= 0)
        {
            ShowMessage("warn", strMsg);            // 검색결과가 존재하지 않습니다.
            ListData.Clear();
            UpdateList(0);
            SetPageinfo(e.count);
            StateHasChanged();
            return;
        }

        SetPageinfo(e.count);    // 페이징 계산
        UpdateData();
    }

    /**
    *@brief
    */
    public void SearchResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        if (ret != 0)
        {
            //ShowMessage(strMsg);
            return;
        }

        ListData.Clear();

        SGApprManageData sgData = null;
        sgData = (SGApprManageData)HSCmdCenter.GetApprManageData(groupId);
        if (sgData == null)
            return;

        List<Dictionary<int, string>> ApprSearchList = null;
        ApprSearchList = sgData.GetQuerySearchData();
        int nCount = ApprSearchList.Count;

        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> dic = ApprSearchList[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if (tmpStr.Equals(""))
                    continue;
            }

            approveData aData = new approveData();
            aData.bCheckDisable = !(sgData.GetApprEnableChk(dic));             // 결재 가능/불가능
            aData.bCheck = false;
            aData.TransSeq = sgData.GetTransSeq(dic);                      // TransSeq;
            aData.ApprSeq = sgData.GetApproveSeq(dic);                     // ApprSeq;

            aData.ApvType = sgData.GetApprKind(dic);                       // 결재종류 (선결/후결)

            @*if (aData.ApvType == XmlConf.GetTitle("T_COMMON_APPROVE_AFTER"))
                aData.ApvType = "후선결";*@// 후결인거 보기용도
            aData.ApvType = XmlConf.GetTitle("T_COMMON_APPROVE_BEFORE");    // 보안결재는 "선결"만 나오도록 처리

            aData.TransferType = sgData.GetTransKind(dic);                 // 전송구분 (반출/반입)
            aData.RequesterName = sgData.GetApproveReqUser(dic);           // 승인요청자
            aData.ApvStatus = sgData.GetApprStaus(dic);                    // 승인상태 (요청취소,승인대기,승인,반려)
            aData.IsFile = sgData.GetUseFileForward(dic);                  // 파일전달.

            if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                aData.strDestNet = sgData.GetDestNetworkName(dic, dicDestSysPos);          // 목적지 값

            aData.Title = sgData.GetTitle(dic);                            // 제목
            FileAddManage fileAddManage = new FileAddManage();
            aData.Title = fileAddManage.GetConvertTitleDesc(false, aData.Title);
            //aData.RequestTime = sgData.GetTransReqDay(dic);                // 승인요청일(type : YYYY-MM-DD hh:mm:ss)
            aData.RequestTime = sgData.GetQueryTransReqDay(dic);                  // 승인요청일(type : YYYY-MM-DD hh:mm:ss)
                                                                                  //aData.ApvTime = sgData.GetApprDay(dic);                        // 승인일
            aData.ApvTime = sgData.GetQueryApprDay(dic);                        // 승인일
            aData.TransStatusCode = sgData.GetTransStatusCode(dic);        // 전송상태 원본 코드( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
            aData.ApprStatusCode = sgData.GetApprStausCode(dic);           // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
            aData.ApprTablePos = sgData.GetApprDataPos(dic);               // 결재 테이블 위치 정보(C : 결재 테이블, H : 결재 이력테이블)
            aData.ApprPossible = sgData.GetApprPossible(dic);              // 결재 가능 여부(0: 결재불가능, 1:결재가능)
            aData.ApprStepStatus = sgData.GetApprStepPossible(dic);        // 결재자가 포함된 결재단계의 결재상태 정보(0: 결재불가능, 1:결재가능)

            ListData.Add(aData);
        }

        UpdateInitList(nViewPageNo);

        StateHasChanged();
    }

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;
        nViewPageNo = nStartPage = 1;
    }

    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = ListData.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < nCount; i++)
        {
            if (ListData[i].bCheckDisable != true)
                ListData[i].bCheck = bAllCheck;
        }

        StateHasChanged();
    }

    public void CheckStateUpdate(approveData item)
    {
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
                ListData[i] = temp;
                break;
            }
        }
        StateHasChanged();

    }

    public void ApproveBatchResult(int groupid, PageEventArgs e)
    {
        int ret = e.result;
        string strMsg = e.strMsg;
        if (ret != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        ShowMessage("info", strMsg);
        UpdateData();
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    private void HomeMove()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        strNavigateWithGroupID += groupID.ToString();
        ChangeActiveMenuEvent changeActiveMenuEvent = HSCmdCenter.sgPageEvent.GetChangeActiveMenu();
        if (changeActiveMenuEvent != null)
            changeActiveMenuEvent(groupID, strNavigateWithGroupID);
        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        //foreach (var MenuItem in SideBarUISvc.MenuList)
        //{
        //    if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
        //    {
        //        SideBarUISvc.ActiveMenu = MenuItem;
        //        break;
        //    }
        //}

    }


    public class approveData
    {
        public bool bCheckDisable { get; set; }           // 체크 가능 불가능
        public bool bCheck { get; set; }                  // 체크 상태
        public string TransSeq { get; set; }              // TransSeq
        public string ApprSeq { get; set; }               // ApproveSeq
        public string ApvType { get; set; }               // 결재 종류 (선결/후결)
        public string TransferType { get; set; }          // 전송 구분 (반출/반입)
        public string TransStatus { get; set; }           // 전송 상태 (전송대기, 전송취소, 전송실패)
        public string RequesterName { get; set; }         // 승인요청자
        public string ApproverName { get; set; }          // 승인자
        public string ApvStatus { get; set; }             // 결재상태(승인대기/승인/반려)
        public string IsFile { get; set; }                // 파일 전달 유무
        public string strDestNet { get; set; }            // 전송하고자하는 목적지 망이름
        public string Title { get; set; }                 // 제목
        public string RequestTime { get; set; }           // 전송요청일
        public string ApvTime { get; set; }               // 승인일
        public string TransStatusCode { get; set; }         //전송상태 원본 ( W : 전송대기 , C : 전송취소 , S : 수신완료 , F : 전송실패 )
        public string ApprStatusCode { get; set; }          //승인상태 원본 ( 1 : 승인대기 , 2 : 승인 , 3 : 반려 )
        public string ApprTablePos { get; set; }            // 결재 데이터 위치 ( C : 결재 테이블 , H : 결재 이력 테이블 )
        public string ApprPossible { get; set; }            // 결재 가능 여부 ( 1: 가능 , 0 : 불가능)
        public string ApprStepStatus { get; set; }          // 결재자가 포함된 결재단계의 결재 상태 ( 1 : 승인가능상태, 2 : 승인불가능상태 )


        public approveData()
        {
            bCheckDisable = bCheck = false;
            TransSeq = ApprSeq = ApvType = TransferType = RequesterName = ApproverName = ApvStatus = IsFile = Title = RequestTime = ApvTime = TransStatusCode = ApprStatusCode = ApprTablePos = ApprPossible = ApprStepStatus = strDestNet = "";
        }
        public approveData(bool bChkDisable, bool bChk, string seq, string apprseq, string apvtype, string transfertype, string reqname, string apvstatus, string isfile, string title, string reqtime, string apvtime,
            string strTransStatusCode, string strApprStatusCode, string strApprTablePos, string strApprPossible, string strApprStepStatus, string approverName)
        {
            bCheckDisable = bChkDisable;
            bCheck = bChk;
            TransSeq = seq;
            ApvType = apvtype;
            TransferType = transfertype;
            RequesterName = reqname;
            ApvStatus = apvstatus;
            IsFile = isfile;
            Title = title;
            RequestTime = reqtime;
            ApvTime = apvtime;
            TransStatusCode = strTransStatusCode;
            ApprStatusCode = strApprStatusCode;
            ApprTablePos = strApprTablePos;
            ApprPossible = strApprPossible;
            ApprStepStatus = strApprStepStatus;
            ApproverName = approverName;
        }
    }
}
