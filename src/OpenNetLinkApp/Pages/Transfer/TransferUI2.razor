@page "/Transfer"
@page "/Transfer/{groupIDbyParam:int}"

@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGTransfer
@using HsNetWorkSG
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@using AgLogManager
@using OpenNetLinkApp.Pages.PCURL
@using BlazorInputFile
@inject XmlConfService XmlConf
@inject DragAndDropService DragAndDropService
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject WebWindow Window
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService
@inject IFileReaderService fileReaderService

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strFileTrans</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    @*<li>팝업:</li>
                        <li>
                            <select class="form-control" style="width:150px;" id="popupSelect" @onchange="openPopUp">
                                <option id="0" selected="selected">없음</option>
                                <option id="1">공인인증서전송</option>
                                <option id="2">환경정보 확인중</option>
                                <option id="3">보안문자</option>
                                <option id="4">Google OTP</option>
                                <option id="5">패스워드변경(시스템)</option>
                                <option id="5">패스워드변경(사용자)</option>
                                <option id="5">패스워드변경(기본패스워드)</option>
                                <option id="6">@strApproverAdd 1</option>
                                <option id="7">@strApproverAdd 2</option>
                                <option id="8">@strApproverAdd 3</option>
                                <option id="9">전송제한</option>
                                <option id="10">MESSAGE</option>
                                <option id="11">GPKI</option>
                                <option id="12">로그인(인터넷망)</option>
                                <option id="12">로그인(업무망)</option>
                                <option id="12">로그인(메일연계)</option>
                                <option id="12">로그인(PCURL)</option>
                                <option id="13">반려팝업</option>
                                <option id="14">PDF변환</option>
                                <option id="15">파일전송진행율</option>
                                <option id="16">미리보기</option>
                                <option id="17">프로그래스알림</option>
                                <option id="18">프로그래스업데이트</option>
                                <option id="19">프로그래스닫기</option>
                                <option id="20">오프라인</option>
                                <option id="21">마우스우클릭</option>
                                <option id="22">OTP</option>
                                <option id="23">소프트웨어 업데이트</option>
                                <option id="24">바이러스팝업</option>
                                <option id="25">다운로드경로지정</option>
                                <option id="26">PCURL사용신청</option>
                                <option id="27">PCURL사용가능한URL</option>
                                <option id="28">ZIP파일미리보기</option>
                                <option id="29">화면잠금</option>
                            </select>
                        </li>*@
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strFileTrans</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-boder mb-3" style="box-shadow:none;">
                    <div class="card-body clearfix">
                        <label class="line-label border-right pr-4" style="border-color: #b3c8e4 !important;">@strApprLine</label>
                        <ApproveLine @ref="ApprLine"></ApproveLine>
                        <label style="float:right;">
                            <button type="button" class="btn btn-md btn-navy" @onclick="@ApproveChooseAdd" hidden="@bApprChooseAdd">
                                <i class="fas fa-user-plus"></i> @strApproverAdd
                            </button>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.row -->
        <!-- list -->

        <div class="row">

            <div class="col-md-3 pr-0">
                <div class="card card-navy card-outline card-boder" style="height:65vh;">

                    <FileTree OnSelectPathFromFileTree="changeSelectPath"></FileTree>
                    @*<FileTreeList @ref="refFileTreeList"></FileTreeList>*@

                    <!-- 파일리스트 -->
                    @*<ul id="olFileList" data-draggable="target" style="height:100%;"></ul>*@
                    <div id="divFileList" style="width:100%;height:50%;padding:1px 1px 1px 0px;overflow:auto">
                    </div>
                    <!-- 파일리스트 -->

                </div>
            </div>


            <div class="col-md-9">
                <div id="divRightContent" class="card card-navy card-outline card-boder1" style="background-color: #e9eef7;height:65vh;">

                    <form class="form-horizontal">

                        <div id="divRightUpperSide" class="card-body">
                            @if (bReceiverEnable == true)
                            {
                                <div class="col-md-12">
                                    <div class="row mb-1">
                                        <label for="1" class="col-sm-1 col-form-label text-center" style="background-color:#eff8ff;border:1px solid #c7d6e9; border-right:0px;padding-right:0px;">@XmlConf.GetTitle("T_RECV_USER")</label>
                                        <div class="col-sm-10 pr-0 pl-0" style="border:1px solid #c7d6e9; border-left:0px;">
                                            <input type="text" class="form-control p-2 border-0" style="border-radius:0px;" id="1" placeholder="@XmlConf.GetTitle("T_SELECT_RECV_USER")">
                                        </div>
                                        <div class="col-sm-1 text-cener pr-0 ">
                                            <button type="button" class="btn btn-md btn-blue-line w-100" @onclick="openReceiverPopUp"><i class="fas fa-plus"></i>@XmlConf.GetTitle("T_COMMON_SELECT")</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="col-md-12">
                                <div class="form-group row mb-1" style="border:1px solid #c7d6e9;">
                                    <label for="1" class="col-sm-1 col-form-label text-center" style="background-color:#eff8ff;">@XmlConf.GetTitle("T_TRANS_TITLE")</label>
                                    <div class="col-sm-11 pr-0 pl-0">
                                        <input type="text" class="form-control p-2 border-0" style="border-radius:0px;" id="1" placeholder="@strCurTitle" @bind="strBindTitle" autocomplete="off">
                                    </div>
                                </div>

                                <div class="form-group row mb-3" style="border:1px solid #c7d6e9;">
                                    <label for="2" class="col-sm-1 col-form-label text-center " style="background-color:#eff8ff;">@XmlConf.GetTitle("T_DETAIL_DESC")</label>
                                    <div class="col-sm-11 pr-0 pl-0">
                                        <textarea class="form-control p-2 border-0 " rows="2" placeholder="@strCurDesc" @bind="strBindDesc"></textarea>
                                    </div>
                                </div>
                            </div>


                            <div class="form-group  clearfix mb-2">
                                <div class="float-left pt-1">
                                    <div class="form-check">
                                        <table>
                                            <tr>
                                                <td>
                                                    <input type="checkbox" class="form-check-input" id="exampleCheck2" checked="@bAfterCheck" @onclick="(e => GetAfterChk())" hidden="@bAfterApprChkHIde" disabled="@bAfterApprDisable">
                                                </td>
                                                <td>
                                                    <label class="form-check-label" for="exampleCheck2">@strAfterApprove</label>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                                <div class="float-right">
                                    <div class="float-right">
                                        <table>
                                            <tr>
                                                @if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                                                {
                                                    <th>@XmlConf.GetTitle("T_RECV_NETWORK")</th>
                                                    <td class="pr-2">
                                                        <select @bind="strDestNetWork" style="width:105px;height:28px; border: 1px solid #ced4da;">
                                                            @foreach (var item in dicDestSysPos)
                                                            {
                                                                @*@if (item.Value.nIdx != 0 && item.Value.strDestSysid.Length > 0 && item.Value.bUseFileTrans && item.Key.Length > 0)*@
                                                                @if ((item.Value.strDestSysid.Length > 0 && item.Value.bUseFileTrans && item.Key.Length > 0) &&
                                                                  ((pageService.m_bIsMultiNetWork && item.Value.nIdx == 1) || (pageService.m_bIsMultiNetWork == false && item.Value.nIdx != 0)))
                                                                {
                                                                    <option>@item.Key</option>
                                                                }
                                                            }
                                                            @if (IsCanTransferAllNet())
                                                            {
                                                                <option>@XmlConf.GetTitle("T_TRANS_NETOVER_ALL")</option>
                                                            }
                                                        </select>
                                                    </td>
                                                }
                                                <td>
                                                    <button type="button" class="btn btn-md btn-green" @onclick="UploadFiles"><i class="fas fa-share"></i>@strFileSend</button>
                                                    <button type="button" class="btn btn-md btn-blue" @onclick="OpenFileDialog"><i class="fas fa-file-upload"></i>@strFileReg</button>
                                                    <button type="button" class="btn btn-md btn-black" @onclick="@(e => RemoveAllFile())"><i class="fas fa-times"></i>@strFileDel</button>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div id="divDropFile" class="card-body p-0" style="height:67%;">
                            <DropFileList @ref="dropFile" OnDropClear="DropClear"></DropFileList>
                        </div>

                        <div id="divRightBottomSide" class="card-footer clearfix">

                            <div class="float-left">
                                @if (GetUseUrlRedirectionByServer())
                                {
                                    if (GetUseUrlRedirectionByUser())
                                    {
                                        <button type="button" class="btn btn-md btn-url"><i class="fas fa-globe-asia icon"></i><span>@strUrlAutoTrans</span></button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-md btn-url"><i class="fas fa-globe-asia icon"></i><span>@XmlConf.GetTitle("T_INFO_NO_USE_URLREDIRECT")</span></button>
                                    }
                                }
                            </div>

                            <div class="float-right">

                                <ul class="pagination pagination-sm m-0 ">
                                    <li>@strRemainFile : </li>
                                    <li style="padding:5px 10px; width:100px;">
                                        <div class="progress progress-xs">
                                            <div class="progress-bar bg-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @strDayFileTransRemainSizePer; vertical-align:middle;">
                                                <span class="sr-only">100% Complete (success)</span>
                                            </div>
                                        </div>
                                    </li>
                                    <li><label class="form-check-label">@strDayFileTransRemainSize</label></li>
                                    <li style="padding:5px 10px; width:100px;">
                                        <div class="progress progress-xs">
                                            <div class="progress-bar bg-info" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @strDayFileTransRemainCountPer; vertical-align:middle;">
                                                <span class="sr-only">100% Complete (success)</span>
                                            </div>
                                        </div>
                                    </li>
                                    <li><label class="form-check-label">@strDayFileTransRemainCount</label></li>
                                    <li><i class="fas fa-caret-square-down ch" @onclick="DayInfoChange"></i></li>
                                </ul>

                            </div>

                        </div>

                    </form>
                </div>
            </div>

        </div>


    </div>
    <a hidden data-toggle="modal" data-target="modal-transprogress"></a>
</section>

<LogIn @ref="LogInPopUp"></LogIn>
@*<LogIn_GPKI @ref="refLogInGPKI" Mode="1"></LogIn_GPKI> *@
<LogIn_SecurityNetwork @ref="refLogIn_SecurityNetwork"></LogIn_SecurityNetwork>
<LogIn_Mail @ref="refLogIn_Mail"></LogIn_Mail>
<LogIn_PCURL @ref="refLogIn_PCURL"></LogIn_PCURL>

<ReceiverSelect_PopUp @ref="refReceiverSelect_PopUp"></ReceiverSelect_PopUp>
<ApproverSelect_PopUp @ref="refApproverSelect_PopUp"></ApproverSelect_PopUp>
<ApproverSelect_TreePopUp @ref="refApproverSelect_TreePopUp"></ApproverSelect_TreePopUp>
<ApproverSelect_StepPopUp @ref="refApproverSelect_StepPopUp"></ApproverSelect_StepPopUp>
<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>
<PWChange @ref="refPWChange"></PWChange>
<PWChangeUser @ref="refPWChangeUser"></PWChangeUser>
<PWChangeDefaultPW @ref="refPWChangeDefaultPW"></PWChangeDefaultPW>

<GoogleOTP @ref="refGoogleOTP"></GoogleOTP>
<SGAlert @ref="refSGAlert" OnConfirm="runConfirmAlert" OnCancel="runCancelAlert"></SGAlert>
<SGCapcha @ref="refSGCapcha"></SGCapcha>
<EnvLoading @ref="refEnvLoading"></EnvLoading>
<CertificateTransfer @ref="refCertificateTransfer"></CertificateTransfer>
<!--<SGReject @ref="refSGReject"></SGReject>-->
<SGPDFTrans @ref="refSGPDFTrans"></SGPDFTrans>
<TransProgress @ref="refTransProgress" OnCancel="TransCancel"></TransProgress>
<OffLine @ref="refOffLine"></OffLine>
<OTP @ref="refOTP"></OTP>
<!--<Update_PopUp @ref="refUpdate_PopUp"></Update_PopUp>-->
<!--<VirusReport @ref="refVirusReport"></VirusReport>-->

<PcurlUsingRegistPopUp @ref="refPcurlUsingRegistPopUp"></PcurlUsingRegistPopUp>
<PcurlAvailableUrlListPopUp @ref="refPcurlAvailableUrlListPopUp"></PcurlAvailableUrlListPopUp>
<input type="hidden" @ref=inputTypeFileElement />
<Update_PopUp @ref="refUpdate_PopUp"></Update_PopUp>

<ZipPreviewPopUp @ref="refZipPreviewPopop"></ZipPreviewPopUp>
@code
{

    [Parameter]
    public int groupIDbyParam { get; set; }

    //드래그앤드랍 시작
    ElementReference inputTypeFileElement;
    IFileReaderRef dropReference1;
    IFileReaderRef dropReference2;
    IFileReaderRef dropReference3;
    IFileReaderRef dropReference4;
    IFileReaderRef dropReference5;
    IFileReaderRef dropReference6;
    IFileReaderRef dropReference7;
    IFileReaderRef dropReference8;
    IFileReaderRef dropReference9;
    IFileReaderRef dropReference10;


    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB

    public string stSelectPath { get; set; }
    DropFileList dropFile;
    LogIn LogInPopUp;
    LogIn_SecurityNetwork refLogIn_SecurityNetwork;
    //LogIn_GPKI refLogInGPKI;
    LogIn_Mail refLogIn_Mail;
    LogIn_PCURL refLogIn_PCURL;
    Transfer_Denied refTransferDenied;

    ReceiverSelect_PopUp refReceiverSelect_PopUp;
    ApproverSelect_PopUp refApproverSelect_PopUp;
    ApproverSelect_TreePopUp refApproverSelect_TreePopUp;
    ApproverSelect_StepPopUp refApproverSelect_StepPopUp;
    PWChange refPWChange;
    PWChangeUser refPWChangeUser;
    PWChangeDefaultPW refPWChangeDefaultPW;
    GoogleOTP refGoogleOTP;
    SGAlert refSGAlert;
    SGCapcha refSGCapcha;
    EnvLoading refEnvLoading;
    CertificateTransfer refCertificateTransfer;
    //SGReject refSGReject;
    SGPDFTrans refSGPDFTrans;
    TransProgress refTransProgress;
    OffLine refOffLine;
    OTP refOTP;
    //Update_PopUp refUpdate_PopUp;
    //VirusReport refVirusReport;
    ISGAppConfigService sgAppConfig;
    PcurlUsingRegistPopUp refPcurlUsingRegistPopUp;
    PcurlAvailableUrlListPopUp refPcurlAvailableUrlListPopUp;
    ZipPreviewPopUp refZipPreviewPopop;

    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    public int dragLabel = 1;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<TransferUI2>();

    public string strFileTrans = "";
    public string strFilePath = "";
    public string strAfterApprove = "";
    public string strLogin = "";
    public string strUrlAutoTrans = "";

    public string strDayFileTransRemainCount = "";
    public string strDayFileTransRemainSize = "";
    public string strDayClipRemainCount = "";
    public string strDayClipRemainSize = "";
    public string strDayFileTransRemainCountPer = "";
    public string strDayFileTransRemainSizePer = "";
    public string strDayClipRemainCountPer = "";
    public string strDayClipRemainSizePer = "";

    public string strRemainFile = "";
    public string strFileSend = "";
    public string strFileDel = "";
    public string strApprLine = "";
    public string strApproverAdd = "";
    public string strFileReg = "";

    public string strCurTeamName = "";

    public string strCurTitle = "";
    public string strCurDesc = "";

    public bool bAfterCheck = false;

    public string strBindTitle = "";
    public string strBindDesc = "";
    public string strFromName = "-";
    public string strToName = "-";
    private bool bReceiverEnable = false;   //수신자 UI 표시옵션

    ISGSideBarUIService SideBarUISvc;

    public bool bApprChooseAdd = false;

    //ApproveLine ApprLine = new ApproveLine();
    ApproveLine ApprLine;

    public bool bAfterApprChkHIde = false;
    public bool bAfterApprDisable = false;

    public bool bURLRedirection = true;

    Update_PopUp refUpdate_PopUp;
    ISGSiteConfigService siteConfig;

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    ISGAppConfigService AppConfigSvc;

    // 3망 - 클립보드 전송 UI
    Dictionary<string, SGNetOverData> dicDestSysPos = null;

    public string strDestNetWork = "";

    int nDrawPageGroupID = -1;          // 전달받은 groupID 별로 화면구성 - 다중접속화면구성


    private async Task openReceiverPopUp()
    {

        @*      
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
            *@

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        await refReceiverSelect_PopUp.openPopUp();
    }

    private async Task openPopUp(ChangeEventArgs e)
    {
        switch (e.Value.ToString())
        {
            case "공인인증서전송":
                await refCertificateTransfer.openPopUp();
                break;
            case "환경정보 확인중":
                await refEnvLoading.openPopUp();
                break;
            case "보안문자":
                await refSGCapcha.openPopUp();
                break;
            case "Google OTP":
                await refGoogleOTP.openPopUp();
                break;
            case "패스워드변경(시스템)":
                await refPWChange.openPopUp();
                break;
            case "패스워드변경(사용자)":
                await refPWChangeUser.openPopUp();
                break;
            case "패스워드변경(기본패스워드)":
                await refPWChangeDefaultPW.openPopUp();
                break;
            case "결재자 추가 1":
                await refApproverSelect_PopUp.openPopUp();
                break;
            case "결재자 추가 2":
                await refApproverSelect_TreePopUp.openPopUp();
                break;
            case "결재자 추가 3":
                await refApproverSelect_StepPopUp.openPopUp();
                break;
            case "전송제한":
                await refTransferDenied.openPopUp();
                break;
            case "MESSAGE":
                //1. 토스트 메시지 사용법
                //type: success, info, waring, error 2020/07/02 YKH
                //object[] param5 = { "error", "시스템", "시스템 토스트 메시지 입니다. 자동닫기가 가능한 토스트 메시지 함수호출로 수행됨." };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param5);

                //2. javascript alert 사용법
                //object[] param = { "JS Alert 메시지 호출입니다." };
                //await JSRuntime.InvokeAsync<object>("alertMessage", param);

                //3. 모달형 메시지, mode:1은 alert mode:2는 confirm
                await refSGAlert.openPopUp("시스템 알림", "이것은 시스템 알림 메시지 입니다.", 2);
                break;
            //case "GPKI":
            //  await refLogInGPKI.openPopUp();
            //  break;
            case "로그인(인터넷망)":
                await LogInPopUp.openPopUp();
                break;
            case "로그인(업무망)":
                await refLogIn_SecurityNetwork.openPopUp();
                break;
            case "로그인(메일연계)":
                await refLogIn_Mail.openPopUp();
                break;
            case "로그인(PCURL)":
                await refLogIn_PCURL.openPopUp();
                break;
            case "반려팝업":
                //await refSGReject.openPopUp();
                break;
            case "PDF변환":
                refSGPDFTrans.ChangeProgress(10);
                await refSGPDFTrans.openPopUp();
                //진행율 변환 예제
                System.Threading.Thread.Sleep(2000);
                refSGPDFTrans.ChangeProgress(90);
                break;
            case "파일전송진행율":
                refTransProgress.ChangeProgress(10);
                await refTransProgress.openPopUp();
                //진행율 변환 예제
                System.Threading.Thread.Sleep(2000);
                refTransProgress.ChangeProgress(90);
                break;
            case "미리보기":
                OpenPreviewWindow();
                //object[] param = { "https://www.naver.com", "오픈윈도우", 200, 200 };
                //await JSRuntime.InvokeAsync<object>("openWindow", param);
                break;
            case "프로그래스알림":
                object[] param = { "POP1234", "업무망 <i class='fas fa-long-arrow-alt-right p-1'></i> 인터넷망", "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 1%" };
                await JSRuntime.InvokeAsync<object>("fireProgressMessage", param);
                System.Threading.Thread.Sleep(3000);
                object[] param2 = { "POP1234", "파일수신 중입니다. <br>수신이 완료될 때까지 기다려 주세요.<br> 진행률 : 90%", "90%" };
                await JSRuntime.InvokeAsync<object>("updateProgressMessage", param2);
                System.Threading.Thread.Sleep(3000);
                object[] param3 = { "POP1234" };
                await JSRuntime.InvokeAsync<object>("closeProgressMessage", param3);
                break;
            case "프로그래스업데이트":
                // object[] param2 = { "POP1234", "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 90%", "90%" };
                //  await JSRuntime.InvokeAsync<object>("updateProgressMessage", param2);
                break;
            case "프로그래스닫기":
                // object[] param3 = { "POP1234" };
                //   await JSRuntime.InvokeAsync<object>("closeProgressMessage", param3);
                break;
            case "오프라인":
                await refOffLine.openPopUp();
                break;

            case "마우스우클릭":
                HSCmdCenter.RMouseFileAddNotiAfterSend(0, 0);
                break;
            case "OTP":
                await refOTP.openPopUp();
                break;
            case "소프트웨어 업데이트":
                //await refUpdate_PopUp.openPopUp();
                break;
            case "바이러스팝업":
                // await refVirusReport.openPopUp();
                break;
            case "PCURL사용신청":
                await refPcurlUsingRegistPopUp.openPopUp();
                break;
            case "PCURL사용가능한URL":
                await refPcurlAvailableUrlListPopUp.openPopUp();
                break;
            case "ZIP파일미리보기":
                await refZipPreviewPopop.openPopUp();
                break;
            case "화면잠금":
                object[] param9 = { "modal-displaylock" };
                await JSRuntime.InvokeAsync<object>("openPopUp", param9);
                break;
        }
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("startClick");
    }

    private async Task UploadFiles()
    {

@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strTitle = strBindTitle;
        string strContents = strBindDesc;
        if (!strBindTitle.Equals(""))
        {
            if (Encoding.UTF8.GetByteCount(strBindTitle) > 250)
            {
                string strMsg = XmlConf.GetWarnMsg("W_0020");           // 제목 및 설명은 최대 한글 80자, 영문 250자까지 입력할 수 있습니다
                ShowMessage("warn", strMsg);
                strBindTitle = "";
                strBindDesc = "";
                StateHasChanged();
                return;
            }
        }

        if (!strBindDesc.Equals(""))
        {
            if (Encoding.UTF8.GetByteCount(strBindDesc) > 250)
            {
                string strMsg = XmlConf.GetWarnMsg("W_0020");           // 제목 및 설명은 최대 한글 80자, 영문 250자까지 입력할 수 있습니다
                ShowMessage("warn", strMsg);
                strBindTitle = "";
                strBindDesc = "";
                StateHasChanged();
                return;
            }
        }

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        //bool bUseApprove = sgLoginData.GetApprove();
        bool bUseApprove = pageService.GetUseApproveNetOver(groupID, sgLoginData);
        bool bApprEdit = sgLoginData.GetApproveAppend();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        int nApprovePos = sgUserData.GetUserApprpos();
        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;
        string strUserSeq = sgUserData.GetUserSequence();
        int ApprLineCount = sgApprLineData.GetApprAndLineSeqCount(strUserSeq);
        if (bUseApprove)
        {
            if ((nApprovePos < 2) && (ApprLineCount <= 0))
            {
                string strMsg = "";
                if (bApprEdit)
                {
                    strMsg = XmlConf.GetWarnMsg("W_0076");                   // 결재자를 추가하십시오.
                }
                else
                {
                    strMsg = XmlConf.GetWarnMsg("W_0206");                   // 결재자가 설정되어 있지 않습니다./r/n관리자에게 문의하십시오.
                    strMsg = strMsg.Replace("/r/n", "<br>");
                }
                ShowMessage("warn", strMsg);
                return;
            }
        }

        if (pageService.GetDayFileTransCountEnable(groupID) != true)
        {
            string strMsg = XmlConf.GetErrMsg("E_0106");    // 일일 전송 최대 횟수는 {0}번 입니다./r/n일일 전송 횟수를 초과하였습니다.
            int FileMaxCount = pageService.GetDayFileMaxCount(groupID);
            strMsg = String.Format(strMsg, FileMaxCount);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            DayFileChangeNotiEvent dayFileChange = null;
            dayFileChange = HSCmdCenter.sgPageEvent.GetDayFileChangeNotiEvent(groupID);
            if (dayFileChange == null)
                return;
            dayFileChange(groupID);
            return;
        }

        int TransDataCount = 0;
        TransDataCount = dropFile.GetFileListAddCount();
        if (TransDataCount <= 0)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0016"); // 전송하고자 하는 파일이 없습니다./r/n전송파일을 등록해주십시오.
            strMsg = strMsg.Replace("/r/n", "<br/>");
            ShowMessage("warn", strMsg);
            return;
        }

        // 3중망일때 목적지 점검
        if (dicDestSysPos != null && dicDestSysPos.Count > 0 && strDestNetWork.Length < 1)
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0234"));
            return;
        }


        FileTrans();

        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        await stopClick();

    }


    private async void FileTrans()
    {

@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        string strUserID = sgLoginData.GetUserID();
        string strMid = sgLoginData.GetTagData("MID");
        string strPolicyFlag = sgLoginData.GetTagData("POLICYFLAG");
        string strTitle = strBindTitle;
        string strContents = strBindDesc;
        //string strTitle = strCurTitle;
        //string strContents = strCurDesc;
        bool bApprSendMail = false;
        bool bAfterApprove = bAfterCheck;
        int nDlp = 0;
        string strRecvPos = "0";
        string strZipPasswd = "";
        bool bPrivachApprove = false;
        string strSecureString = "";
        string strDataType = "0";               // 파일 전송
        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserData.GetUserSequence();
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        // 3중망 상황 상관없이 결재Line 정보는 무조건 보내어, 서버에서 결정하도록 한다.

        List<HsStream> FileList = null;
        FileList = dropFile.GetHsStreamList();
        Int64 TotalFileSize = dropFile.GetRegListTotalSize();


        if (strTitle.Equals(""))
        {
            int count = FileList.Count;
            string strFileName = FileList[0].FileName;
            if (count == 1)
                strTitle = strFileName;
            else
            {
                string tmpTitle = XmlConf.GetInfoMsg("I_0048");        // {0} 외 {1}건
                strTitle = String.Format(tmpTitle, strFileName, count - 1);
            }
        }

        if (strContents.Equals(""))
            strContents = "-";

        FileAddManage fileAddManage = new FileAddManage();
        strTitle = fileAddManage.GetConvertTitleDesc(true, strTitle);
        strContents = fileAddManage.GetConvertTitleDesc(true, strContents);
        strTitle = strTitle.Trim();
        strContents = strContents.Trim();

        string strDestNetOverData = "0";

        if (GetNetOverDataPolicy(ref strDestNetOverData) == false)
        {
            return;
        }

        CLog.Here().Information("NETOVERDATA(Send To Server-###) : {0}", strDestNetOverData);

        // 
        refTransProgress.SetProgressText(true, true);
        refTransProgress.ChangeProgress(0);
        refTransProgress.nGroupID = groupID;
        await refTransProgress.openPopUp();
        System.Threading.Thread.Sleep(1000);

        int ret = HSCmdCenter.SendFileTrans(groupID, strUserID, strMid, strPolicyFlag, strTitle, strContents, bApprSendMail, bAfterApprove, nDlp, strRecvPos, strZipPasswd, bPrivachApprove, strSecureString, strDataType, nApprStep, ApprLineSeq, FileList, strDestNetOverData);
        if (ret == -2)
        {
            string strModulePath = System.IO.Directory.GetCurrentDirectory();
            string strDriveName = strModulePath.Substring(0, 1);
            double MFileSize = (double)(TotalFileSize / 1024 / 1024);
            if (MFileSize <= 0)
                MFileSize = 1;
            MFileSize = MFileSize * 2.5;
            string strCapacity = String.Format("{0} MB", MFileSize);
            string strMsg = "";
            strMsg = XmlConf.GetErrMsg("E_0144");           // 파일전송을 하기 위해 디스크 용량이 {0} 만큼 부족합니다.&#10;디스크({1}) 용량을 확보하여 다시 시도 하십시오.
            strMsg = String.Format(strMsg, strCapacity, strDriveName);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            refTransProgress.CancelClosePopUp();
            return;
        }

    }


    /**
    * @breif 사용자가 선택한 목적망에 대한 3망 전송 정책값을 설정(전체망포함)
    * @return false : 파일 전송 Error 처리
    */
    public bool GetNetOverDataPolicy(ref string strDestNetOverData)
    {

        strDestNetOverData = "0";

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)   // 3망전송상황
        {

            bool bUseTranferAll = false;
            if (IsCanTransferAllNet() && strDestNetWork.Length > 0 && strDestNetWork == XmlConf.GetTitle("T_TRANS_NETOVER_ALL"))
                bUseTranferAll = true;


            if (bUseTranferAll)
            {

                strDestNetOverData = "";

                // 모든에 대한 system_id,정책값,정책값 으로 구성된 값 지정
                // ex2)"E001,31,31,1/E101,31,31,0" - 통신단에서 / 를 구분자로해서 transreq를 2번보냄

                // 1번째 망에 전송 정책 설정 : "E001,31,31,1/"
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 1)
                    {
                        strDestNetOverData += item.Value.strDestSysid;
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }

                    if (item.Value.nIdx == 2)
                    {
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 복사
                strDestNetOverData += ",1/";

                // 2번째 망에 전송 정책 설정 : "E101,31,31,0"
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 2)
                    {
                        strDestNetOverData += item.Value.strDestSysid;
                        break;
                    }
                }

                // 모든망별 정책값 추가
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx != 0)
                    {
                        // 망마다 정책정보 설정
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 정리
                strDestNetOverData += ",0";

            }
            else
            {

                // 목적지를 지정한 system_id 찾음
                foreach (var item in dicDestSysPos)
                {
                    if (item.Key == strDestNetWork) //사용자가 선택한 system_id로 전송
                    {
                        strDestNetOverData = item.Value.strDestSysid;
                        break;
                    }
                }

                if (strDestNetOverData == "0")
                {
                    // 선택한 망에 대한 정보를 얻을 수 없습니다.
                    ShowMessage("error", XmlConf.GetErrMsg("E_0233"));
                    return false;
                }

                // 목적지 system_ID에 대한 정책값 추가
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx != 0)
                    {
                        // 망마다 정책정보 설정
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 정리
                strDestNetOverData += ",0";

            }

        }

        if (dicDestSysPos == null || dicDestSysPos.Count < 1)   // 3망 전송상황아님-Server 정책
            strDestNetOverData = "";

        return true;

    }

    public async void FileTransProgress(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }

        if (e.count == -100)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0092");           // 파일 압축/암호화 도중 오류가 발생하였습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }
        if (e.count == -200)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }

        if (e.count >= 100)
        {
            strMsg = XmlConf.GetInfoMsg("I_0029");   // 파일 전송이 완료되었습니다.

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData.GetUseOverNetwork2() && dicDestSysPos != null && dicDestSysPos.Count > 1)
                strMsg = strDestNetWork + ", " + strMsg; // ", "

            if (refTransProgress.GetOpen() == true)
            {
                ShowMessage("info", strMsg);
                InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileTrans, "", strMsg);
            }
            await refTransProgress.closePopUp();
            dropFile.RemoveAllFile().Wait();
            strBindTitle = "";
            strBindDesc = "";
            SendDayFileInfo();

            //파일정송완료시 화면 초기화
            // MyNavigationManager.NavigateTo("/Transfer2");

            MyNavigationManager.NavigateTo("/Transfer2/" + groupID.ToString());
            return;
        }

        else if ((e.count >= 0) && (e.count <= 50))
        {
            refTransProgress.SetProgressText(true, true);                // 압축 및 암호화  진행 중
            refTransProgress.ChangeProgress(e.count);
        }
        else if ((e.count > 50) && (e.count < 100))
        {
            refTransProgress.SetProgressText(true, false);               // 파일 전송 중
            refTransProgress.ChangeProgress(e.count);
        }
        else
        {
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
    }
    /*
    public void FileRecvProgress(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        int per = e.count;
        int type = 0;
        if (per >= 100)
        {
            type = 2;
            ShowProgress(groupID, type, 100, strFromName, strToName, e.strMsg);
            System.Threading.Thread.Sleep(500);
            type = 3;                                       // close
                                                            // HSCmdCenter.SetFileRecving(groupID, false);
        }
        else if (per == 0)
        {
            bool bRecving = false;
            bRecving = HSCmdCenter.GetFileRecving(groupID);
            if (bRecving == true)
                return;

            type = 1;                                        // open
            HSCmdCenter.SetFileRecving(groupID, true);
        }
        else if ((per > 0) && (per < 100))
        {
            type = 2;                                       // update
            HSCmdCenter.SetFileRecving(groupID, true);
        }
        else
            return;

        ShowProgress(groupID, type, per, strFromName, strToName, e.strMsg);
    }
    */


    protected void OnSettingByGroupID(int groupID)
    {

        HSCmdCenter.sgPageEvent.SetDeptApprLineSearchEventAdd(groupID, ApproveChooseResult);
        HSCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupID, FileTransProgress);
        //HSCmdCenter.sgPageEvent.SetFileRecvProgressEventAdd(groupID, FileRecvProgress);

        action1 = AddDataList;
        action2 = RemoveDataList;
        action3 = ClearDataList;
        actionLoadFileList = LoadListFiles;

        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        HSCmdCenter.sgPageEvent.SetAddFileRMEventAdd(groupID, RMouseFileAdd);
        //HSCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(groupID, AptAndVirusNoti);

        HSCmdCenter.sgPageEvent.SetUseDayFileNotiEventAdd(groupID, UseDayFileResult);
        HSCmdCenter.sgPageEvent.SetUseDayClipNotiEventAdd(groupID, UseDayClipResult);

        HSCmdCenter.sgPageEvent.SetDayFileChangeNotiEventAdd(groupID, DayInfoFileChangeEvent);
        HSCmdCenter.sgPageEvent.SetDayClipChangeNotiEventAdd(groupID, DayInfoClipChangeEvent);

        HSCmdCenter.SetFileRecvPossible(groupID, true);

        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);
        if (bAfterApprChkHIde)
            strAfterApprove = "";

        if (bAfterApprDisable)
            bAfterCheck = false;
        else
            bAfterCheck = AppConfigSvc.GetAfterBasicChk();

        pageService.SetAfterApprTimeEvent(groupID, AfterApproveStatusChange);

        if (groupID > -1)
            pageService.SetCurFileSendInfo(groupID, "/Transfer2/" + groupID.ToString());

        //pageService.SetCurFileSendInfo(groupID, "/Transfer2");

        string strGroupIDMenu = "";
        strGroupIDMenu = String.Format($"{groupID}-Transfer2");
        HSCmdCenter.sgPageEvent.SetUrlRedirectionSetEventAdd(strGroupIDMenu, RefreshUI);

        bool bApprEdit = false;
        bool bUseApprove = false;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {
            bURLRedirection = sgLoginData.GetURLRedirect();
            // bUseApprove = sgLoginData.GetApprove();
            bUseApprove = pageService.GetUseApproveNetOver(groupID, sgLoginData);
            bApprEdit = sgLoginData.GetApproveAppend();
            if (!bUseApprove)
                bApprChooseAdd = true;
            else
            {
                if (!bApprEdit)
                    bApprChooseAdd = true;
            }
        }

        UseDayInfoDisplay();

    }


    protected override void OnInitialized()
    {

        HandleFileInputChangeAction1 = HandleFileInputChange;
        HandleFileInputChangeAction2 = HandleFileInputChange;

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        sgAppConfig = SGAppMgrSvc.AppConfigInfoService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

        InitText();

@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        //int groupID = groupIDbyParam;

        base.OnInitialized();
    }


    public bool GetUseUrlRedirectionByServer()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        CLog.Here().Information($"GetUseUrlRedirectionByServer - groupID : {groupID}");

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        return sgLoginData.GetURLRedirect();
    }

    public bool GetUseUrlRedirectionByUser()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        CLog.Here().Information($"GetUseUrlRedirectionByUser - groupID : {groupID}");

        return AppConfigSvc.GetURLAutoTrans(groupID);

    }


    public void GetAfterChk()
    {
        bAfterCheck = (!bAfterCheck);
        StateHasChanged();
    }


    public void ApproveChooseAdd()
    {
        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strSysID = sgLoginData.GetSysID();
        string strUserID = sgLoginData.GetUserID();
        string strUserName = sgUserData.GetUserName();
        string strTeamName = sgUserData.GetTeamName();
        strCurTeamName = strTeamName;
        refApproverSelect_PopUp.SetInitDeptName(strCurTeamName);
        string strTeamCode = sgUserData.GetTeamCode();
        SGQueryExtend sgQuery = new SGQueryExtend();
        //string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, strUserName, strTeamName, strTeamCode, true);
        string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, "", strTeamName, "", true);
        HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
    }

    public void ApproveChooseResult(int groupid, PageEventArgs e)
    {
        //  if (e.result != 0)
        //  {
        //      ShowMessage("error", e.strMsg);
        //      return;
        //  }
        // refApproverSelect_PopUp.SetInitDeptName(strCurTeamName);
        refApproverSelect_PopUp.InitDeptApprInsert();
        refApproverSelect_PopUp.InitApprLine();
        OpenSelector1().Wait();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }
    /*
    // type : 1 - open , 2 - update ,3 -close
    private async void ShowProgress(int groupID, int type, int per, string strFromName, string strToName, string strTransSeq)
    {
        object[] param = { };
        string identifier = "";
        string strID = groupID.ToString();
        strID = "RECV" + strID + strTransSeq;
        string strProgress = String.Format("{0}%", per);
        string strFileRecvInfo = XmlConf.GetInfoMsg("I_0097");              // 파일수신 중입니다./r/n수신이 완료될 때까지 기다려 주십시오.
        strFileRecvInfo = strFileRecvInfo.Replace("/r/n", "<br>");
        strFileRecvInfo = strFileRecvInfo + "<br>";

        string strProgressInfo = "-";
        if ((per >= 0) && (per <= 50))
            strProgressInfo = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
        else if ((per > 50) && (per <= 100))
            strProgressInfo = XmlConf.GetTitle("T_FILERECVHSZIP_PER");           // 압축해제 및 복호화 진행률
        else
            strProgress = "-";

        strFileRecvInfo = strFileRecvInfo + strProgressInfo + " : " + strProgress;

        switch (type)
        {
            case 1:
                identifier = "fireProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFromName + " <i class='fas fa-long-arrow-alt-right p-1'></i> " + strToName;
                param[2] = strFileRecvInfo;
                pageService.SetFileRecving(true);
                //param = { strID, "업무망 <i class='fas fa-long-arrow-alt-right p-1'></i> 인터넷망", "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 1%" });
                //await JSRuntime.InvokeAsync<object>("fireProgressMessage", param);
                break;
            case 2:
                identifier = "updateProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFileRecvInfo;
                //param[1] = "문구 변경 테스트";
                param[2] = strProgress;
                //param = { strID, "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 90%", "90%" };
                // await JSRuntime.InvokeAsync<object>("updateProgressMessage", param2);
                break;
            case 3:
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFileRecving(false);
                System.Threading.Thread.Sleep(300);
                //param = { strID };
                // await JSRuntime.InvokeAsync<object>("closeProgressMessage", param3);
                break;
            default:
                break;
        }
        await JSRuntime.InvokeAsync<object>(identifier, param);

        if (type == 3)
        {
            HSCmdCenter.SetFileRecving(groupID, false);
            //string strModulePath = System.IO.Directory.GetCurrentDirectory();
            //string strDownPath = strModulePath + "\\DownLoad";
            string strDownPath = sgAppConfig.GetRecvDownPath(groupID);
            bool bOpen = sgAppConfig.GetFileRecvFolderOpen();
            if (bOpen)
                Window.OpenFolder(strDownPath);

            string strMsg = XmlConf.GetInfoMsg("I_0208");                                                         // 파일 수신이 완료되었습니다.
            InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileRecv, "", strMsg);
        }
    }
    */

    //결재자 편집 창 팝업
    private async Task OpenSelector1()
    {
        refApproverSelect_PopUp.SetApprSelectChangeEvent(SetApprLineChange);
        await refApproverSelect_PopUp.openPopUp();
    }

    public void SetApprLineChange()
    {
        ApprLine.ApproveLineChange();
    }

    private void changeSelectPath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
        LoadListFiles(stSelectPath);
        //StateHasChanged();
    }

    public async Task LoadJavaScript()
    {
        await JSRuntime.InvokeVoidAsync("loadJavaScript");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        if (firstRender)
        {
            //INPUT Target Index 초기화
            await JSRuntime.InvokeAsync<string>("initTargetInputNumber");
            await JSRuntime.InvokeAsync<string>("updateFirstTransferUIIndex");
            await JSRuntime.InvokeAsync<string>("updateFirstTransferUIIndex_InputFile");

            dropReference1 = fileReaderService.CreateReference(inputTypeFileElement);
            string targets = new string("fileInput1");
            await dropReference1.initFileReaderService(targets);
            await dropReference1.SetDragTargetElementAsync(targets);
            dropReference2 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput2");
            await dropReference2.initFileReaderService(targets);
            await dropReference2.SetDragTargetElementAsync(targets);
            dropReference3 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput3");
            await dropReference3.initFileReaderService(targets);
            await dropReference3.SetDragTargetElementAsync(targets);
            dropReference4 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput4");
            await dropReference4.initFileReaderService(targets);
            await dropReference4.SetDragTargetElementAsync(targets);
            dropReference5 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput5");
            await dropReference5.initFileReaderService(targets);
            await dropReference5.SetDragTargetElementAsync(targets);
            dropReference6 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput6");
            await dropReference6.initFileReaderService(targets);
            await dropReference6.SetDragTargetElementAsync(targets);
            dropReference7 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput7");
            await dropReference7.initFileReaderService(targets);
            await dropReference7.SetDragTargetElementAsync(targets);
            dropReference8 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput8");
            await dropReference8.initFileReaderService(targets);
            await dropReference8.SetDragTargetElementAsync(targets);
            dropReference9 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput9");
            await dropReference9.initFileReaderService(targets);
            await dropReference9.SetDragTargetElementAsync(targets);
            dropReference10 = fileReaderService.CreateReference(inputTypeFileElement);
            targets = new string("fileInput10");
            await dropReference10.initFileReaderService(targets);
            await dropReference10.SetDragTargetElementAsync(targets);


            await LoadJavaScript();
            await base.OnAfterRenderAsync(firstRender);

            if (pageService.GetLoginComplete(groupID) != true)
            {
                SendDayFileInfo();
            }
            else
                UseDayInfoDisplay();

            //로그인 팝업 샘플 2020/07/01 YKH
            //await OpenLogIn();
            StateHasChanged();

            if (!siteConfig.GetUseDashBoard())
            {
                SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
                if (sgLoginData == null)
                    return;

                if (ClientPatch(sgLoginData))
                {
                    string strSvrVersion = sgLoginData.GetServClientVersion();
                    refUpdate_PopUp.SetVersionText(strSvrVersion);
                    refUpdate_PopUp.SetType(0);
                    //refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                    await refUpdate_PopUp.openPopUp();
                    return;
                }
            }

            LoadListFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));

        }

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;

            groupID = groupIDbyParam;

            OnSettingByGroupID(groupIDbyParam);

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData != null)
            {

                if (sgLoginData.GetUseOverNetwork2())
                {
                    dicDestSysPos = pageService.GetTargetSystemList(groupID);
                    if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                    {

                        if (IsCanTransferAllNet())
                        {
                            strDestNetWork = XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
                        }
                        else
                        {
                            // 기본 선택망 설정
                            foreach (var item in dicDestSysPos)
                            {
                                if (item.Value.nIdx > 0 && item.Key.Length > 0 && item.Value.strPolicy.Length != 0 && item.Value.bUseFileTrans)    // 보낼 수 있는 제일 마지막
                                //if (item.Key.Length > 0 && item.Value.strPolicy.Length != 0 && item.Value.nIdx == 1)    // 첫번째 항목 하나가 기본 선택망이 되도록 함
                                {
                                    // 중간에 다중접속망 일때
                                    if (pageService.m_bIsMultiNetWork)
                                    {
                                        if (item.Value.nIdx == 1)
                                            strDestNetWork = item.Key;

                                        break;
                                    }

                                    // 3중망 양끝단
                                    strDestNetWork = item.Key;

                                }
                            }
                        }

                    }
                }


            }

            StateHasChanged();
        }

        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        await stopClick();
    }

    public void runConfirmAlert(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Confirm Alert");
    }

    public void runCancelAlert(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Cancel Alert");
    }

    private void onSelectFilePath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
        Console.WriteLine("Event Trigered :" + stSelectPath);
    }

    private async Task stopClick()
    {
        object[] param = { "Message" };
        //DropZone 클릭방지코드
        //await JSRuntime.InvokeAsync<object>("stopClick");

        await JSRuntime.InvokeAsync<object>("exitLogIn");

        await JSRuntime.InvokeAsync<object>("adJustWindowsize");
    }

    private static Action<string, string> action1;
    private static Action<string> action2;
    private static Action action3;
    private static Action<string> actionLoadFileList;
    //Drag&Drop 관련 액션
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction1;
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction2;

    private async Task RemoveAllFile()
    {
        ClearDataList();
        await dropFile.RemoveAllFile();
    }

    private void AddDataList(string str, string type)
    {
        DragAndDropService.AddDataList(str, type);
        DragAndDropService.AddDataList(str, type);
    }
    private void RemoveDataList(string str)
    {
        DragAndDropService.removeDataList(str);
    }
    private void ClearDataList()
    {
        DragAndDropService.clearDataList();
        //dropFile.DataClear().Wait();
    }
    [JSInvokable("AddPath")]
    public static void AddPath(string path, string type)
    {
        Console.WriteLine("AddPath Call Excuted." + path + "    Type:" + type);
        action1.Invoke(path, type);
    }
    [JSInvokable("RemovePath")]
    public static void RemovePath(string path)
    {
        Console.WriteLine("AddPath Call Excuted." + path);
        action2.Invoke(path);
    }
    [JSInvokable("ClearPath")]
    public static void ClearPath()
    {
        Console.WriteLine("ClearPath Call Excuted.");
        action3.Invoke();
    }

    public void InitText()
    {
        strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                          // 파일 전송
        strFilePath = XmlConf.GetTitle("T_FILE_FILEPATH");                              // 파일 경로
        strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");                  // 사후결재
        strLogin = XmlConf.GetTitle("T_COMMON_LOGIN");                                  // 로그인
        strUrlAutoTrans = XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO");              // URL 자동전환 사용
                                                                                        //strDayFileTransTotalSize = XmlConf.GetInfoMsg("I_0195");                        // {0} MB
                                                                                        //strDayFileTransTotalSize = String.Format(strDayFileTransTotalSize, 15000);
                                                                                        //strDayFileTransTotalCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                                                                                        //strDayFileTransTotalCount = String.Format(strDayFileTransTotalCount, 10240);
        strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송
        strFileSend = XmlConf.GetTitle("T_FILE_SENDFILE");                              // 파일 보내기
        strFileDel = XmlConf.GetTitle("T_FILE_FILEDEL");                                // 파일 삭제
        strApprLine = XmlConf.GetTitle("T_FILE_APPROVELINE");                           // 결재라인
        strApproverAdd = XmlConf.GetTitle("T_FILE_APPROVER");                           // 결재자추가
        strFileReg = XmlConf.GetTitle("T_FILE_FILEREG");                                // 파일등록

        strCurTitle = XmlConf.GetTitle("T_FILE_EMPTYTITLE");                                // 제목을 입력하십시오. (최대 60자)
        strCurDesc = XmlConf.GetTitle("T_FILE_EMPTYDESC");                                // 설명을 입력하십시오. (최대 80자)
    }

    private void OpenPreviewWindow()
    {
        ProcessStartInfo startInfo = new ProcessStartInfo("PreviewUtil");
        startInfo.WindowStyle = ProcessWindowStyle.Normal;
        startInfo.Arguments = "https://192.168.1.253:1300/viewer/CM001_Docs_Viewer.do?transSeq=202007232200000009&fileNo=1";
        // Run the external process & wait for it to finish
        using (Process proc = Process.Start(startInfo))
        {
            proc.WaitForExit();
        }
    }


    public void RMouseFileAdd(int groupID, PageEventArgs e)
    {

        StateHasChanged();

        FileAddManage fileAddmanage = new FileAddManage(groupID);

        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
        if (!fileAddmanage.RMFileExist(strRMouseFilePath))
            return;

@*        ISGSideBarUI sgSideBar = null;

        // Active Menu 강제 설정
        if ((sgSideBar = SideBarUISvc.FindSubMenu(groupID, 0, 0)) == null)
            return;*@

        if (pageService.GetScrLocking() == true)
            return;

        if (pageService.m_nCurViewPageGroupID != groupID)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = groupID;
        groupIDbyParam = groupID;

@*        KeyboardEventArgs eventArgs = new KeyboardEventArgs();
        eventArgs.Key = "Enter";
        SideBarUISvc.ChgActiveMenu(eventArgs, sgSideBar);*@

        //        OnInitialized();

        //OnAfterRenderAsync(true);        

        //MyNavigationManager.NavigateTo("/Transfer");
        System.Threading.Thread.Sleep(1000);

        List<string> ListFile = fileAddmanage.LoadRMFileAdd(strRMouseFilePath);
        if (dropFile != null)
        {
            dropFile.RMouseFileAddAction(ListFile);
        }

        StateHasChanged();

    }


    public void TransCancel(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Trans Cancel Alert");
        HSCmdCenter.SendFileTransCancel();

        string strMsg = XmlConf.GetInfoMsg("I_0194");   // 파일 전송이 취소되었습니다.
        ShowMessage("info", strMsg);
    }

    public void AfterApproveStatusChange()
    {
@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        DateTime dt = pageService.GetAfterApprTime(groupID);
        pageService.SetSvrTime(groupID, dt);
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;
        bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
        bAfterApprDisable = sgLoginData.GetUseAfterApprove(dt);
        pageService.SetAfterApprChkHIde(groupID, bAfterApprChkHIde);
        pageService.SetAfterApprEnable(groupID, bAfterApprDisable);

        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);
        if (bAfterApprChkHIde)
            strAfterApprove = "";

        if (bAfterApprDisable == true)
            bAfterCheck = false;

        StateHasChanged();
    }
    /*
    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;
        bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);
        await refVirusReport.openPopUp();

    }
    */

    public void UseDayFileResult(int groupID, FileAndClipDayArgs e)
    {
        pageService.SetDayUseFile(groupID, e.Size, e.Count);

        if (pageService.GetDayFileCountUnLimited(groupID) == true)
        {
            strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayFileTransRemainCountPer = "100%";
        }
        else
        {
            strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
            strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
            strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
        }

        if (pageService.GetDayFileSizeUnLimited(groupID) == true)
        {
            strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayFileTransRemainSizePer = "100%";
        }
        else
        {
            strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
            strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
        }

        if (pageService.GetLoginComplete(groupID) != true)
        {
            //System.Threading.Thread.Sleep(1000);
            SendDayClipInfo();
            return;
        }
        else
        {
            bool bFilePreView = pageService.GetDayInfoPrev(groupID);
            if (bFilePreView == false)
            {
                DayInfoChange();
                return;
            }
        }
        UseDayInfoDisplay();
    }

    public void UseDayClipResult(int groupID, FileAndClipDayArgs e)
    {
        pageService.SetDayUseClip(groupID, e.Size, e.Count);

        if (pageService.GetDayClipCountUnLimited(groupID) == true)
        {
            strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayClipRemainCountPer = "100%";
        }
        else
        {
            strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
            strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
            strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
        }

        if (pageService.GetDayClipSizeUnLimited(groupID) == true)
        {
            strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayClipRemainSizePer = "100%";
        }
        else
        {
            strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
            strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
        }

        if (pageService.GetLoginComplete(groupID) != true)
        {
            pageService.SetLoginComplete(groupID, true);
        }
        else
        {
            bool bFilePreView = pageService.GetDayInfoPrev(groupID);
            if (bFilePreView == true)
            {
                DayInfoChange();
                return;
            }
        }
        UseDayInfoDisplay();
    }

    public void UseDayInfoDisplay()
    {
@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView)
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송

            if (pageService.GetDayFileCountUnLimited(groupID) == true)
            {
                strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainCountPer = "100%";
            }
            else
            {
                strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
                strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayFileSizeUnLimited(groupID) == true)
            {
                strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainSizePer = "100%";
            }
            else
            {
                strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
                strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
            }
        }
        else
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_CLIP");                     // 남은 일일 클립보드

            if (pageService.GetDayClipCountUnLimited(groupID) == true)
            {
                strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainCountPer = "100%";
            }
            else
            {
                strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
                strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayClipSizeUnLimited(groupID) == true)
            {
                strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainSizePer = "100%";
            }
            else
            {
                strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
                strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
            }

            strDayFileTransRemainCount = strDayClipRemainCount;
            strDayFileTransRemainSize = strDayClipRemainSize;
            strDayFileTransRemainCountPer = strDayClipRemainCountPer;
            strDayFileTransRemainSizePer = strDayClipRemainSizePer;
            SendDayClipInfoFooterEvent(groupID);
        }
        StateHasChanged();
    }

    public void SendDayFileInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        int groupID = 0;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayFileTransInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HSCmdCenter.SendUseDayFileTransInfo(groupID, strUserID, strQuery);
    }

    public void SendDayClipInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();


        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HSCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }


    public void DayInfoChange()
    {
        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;


        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        pageService.SetDayInfoPrev(groupID, !bFilePreView);
        bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView)
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송

            if (pageService.GetDayFileCountUnLimited(groupID) == true)
            {
                strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainCountPer = "100%";
            }
            else
            {
                strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
                strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayFileSizeUnLimited(groupID) == true)
            {
                strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainSizePer = "100%";
            }
            else
            {
                strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
                strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
            }
        }
        else
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_CLIP");                     // 남은 일일 클립보드

            if (pageService.GetDayClipCountUnLimited(groupID) == true)
            {
                strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainCountPer = "100%";
            }
            else
            {
                strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
                strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayClipSizeUnLimited(groupID) == true)
            {
                strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainSizePer = "100%";
            }
            else
            {
                strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
                strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
            }

            strDayFileTransRemainCount = strDayClipRemainCount;
            strDayFileTransRemainSize = strDayClipRemainSize;
            strDayFileTransRemainCountPer = strDayClipRemainCountPer;
            strDayFileTransRemainSizePer = strDayClipRemainSizePer;
            SendDayClipInfoFooterEvent(groupID);
        }
        StateHasChanged();
    }

    public void SendDayClipInfoFooterEvent(int groupID)
    {
        DayInfoFooterNotiEvent dayInfoFooterEvent = null;
        dayInfoFooterEvent = HSCmdCenter.sgPageEvent.GetDayInfoFooterNotiEvent(groupID);
        if (dayInfoFooterEvent != null)
            dayInfoFooterEvent(groupID);
    }

    public void DayInfoFileChangeEvent(int groupID)
    {
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView != true)
            DayInfoChange();
    }
    public void DayInfoClipChangeEvent(int groupID)
    {
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView == true)
            DayInfoChange();
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();

        try
        {
            if (Directory.GetParent(stPath) != null)
            {
                string strUpperPath = Directory.GetParent(stPath).FullName;
                if (strUpperPath != null && strUpperPath.Length > 0)
                {
                    SGFileInfo fileEntry = new SGFileInfo();
                    fileEntry.Name = "..";
                    fileEntry.Size = 0;
                    fileEntry.Path = strUpperPath;
                    fileEntry.Ext = "";
                    fileEntry.Type = 3;         //상위디렉토리 버튼
                    sgFile.Add(fileEntry);
                }
            }
        }
        catch (Exception ex0)
        {
            CLog.Here().Error("GetParentError:" + ex0.Message);
        }

        IEnumerable<string> fList = null;
        try
        {
            //EnumerationOptions opt = new EnumerationOptions { IgnoreInaccessible = true };

            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error("Exception:" + ex3.Message);
        }

        string listHtml = makeSubFileList();
        //object[] param = { "olFileList", listHtml };
        object[] param = { "divFileList", listHtml };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
        StateHasChanged();
    }

    private string makeSubFileList()
    {
        StringBuilder stRtn = new StringBuilder();
        if (sgFile != null && sgFile.Count > 0)
        {
            if (dragLabel > 0) { dragLabel = 1; }
            foreach (SGFileInfo item in sgFile)
            {
                if (item.Type == 3)
                {
                    stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "' onclick='refreshList(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                    stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    stRtn.Append(item.getNameStr());
                    stRtn.Append(@"</div>");
                }
                else
                {
                    if (item.Type == 1)
                    {
                        stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "'>");
                        stRtn.Append(@"<i class='fas fa-file' style='color:#8a8a8a;'></i>&nbsp;");
                    }
                    else
                    {
                        stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "' ondblclick='refreshList(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    }
                    stRtn.Append(item.getNameStr() + " " + item.getSizeStr());
                    stRtn.Append(@"</div>");
                }
                if (dragLabel > 0) { dragLabel++; }
            }
        }
        return stRtn.ToString();
    }
    private void doClick(int DirType, string Path)
    {
        LoadListFiles(Path);
    }
    [JSInvokable("JSLoadListFiles")]
    public static void JSLoadListFiles(string path)
    {
        actionLoadFileList.Invoke(path);
    }
    public class SGFileInfo
    {
        public string Name { get; set; }
        public string Path { get; set; }
        public long Size { get; set; }
        public string Ext { get; set; }
        public int Type { get; set; }       //1:파일 2:디렉토리
        public long dispIndex { get; set; }

        public string getSizeStr()
        {
            string rtn = "";
            if (Size == 0)
            {
                rtn = "";
            }
            if (Size > 1024 * 1024 * 1024)
            {
                float nSize = (float)Size / (1024 * 1024 * 1024);
                rtn = "(" + nSize.ToString("####0.0") + "GB" + ")";
            }
            else if (Size > 1024 * 1024)
            {
                float nSize = (float)Size / (1024 * 1024);
                rtn = "(" + nSize.ToString("####0.0") + "MB" + ")";
            }
            else if (Size > 1024)
            {
                float nSize = (float)Size / (1024);
                rtn = "(" + nSize.ToString("####0.0") + "KB" + ")";
            }
            else if (Size > 0)
                rtn = "(" + Size + " Byte)";
            return rtn;
        }
        public string getNameStr()
        {
            if (Name.Length < 20)
                return Name;
            else
                return Name.Substring(0, 19);
        }

        public SGFileInfo() { }
        public SGFileInfo(string path, string name, int age, long size)
        {
            Name = name;
            Path = path;
            Size = size;
        }
    }

    //드래그앤드랍 전용코드
    private async Task DropClear()
    {
        int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumberNoIncrease");

        for (int i = 1; i < nTargetNumber + 1; i++)
        {
            string targets = new string("fileInput" + i);
            object[] param = { targets };
            await JSRuntime.InvokeAsync<object>("removeAllFileList", param);

            if (i == 1)
            {
                await dropReference1.initFileReaderService(targets);
                await dropReference1.SetDragTargetElementAsync(targets);
                await dropReference1.ClearValue();
            }
            else if (i == 2)
            {
                await dropReference2.initFileReaderService(targets);
                await dropReference2.SetDragTargetElementAsync(targets);
                await dropReference2.ClearValue();
            }
            else if (i == 3)
            {
                await dropReference3.initFileReaderService(targets);
                await dropReference3.SetDragTargetElementAsync(targets);
                await dropReference3.ClearValue();
            }
            else if (i == 4)
            {
                await dropReference4.initFileReaderService(targets);
                await dropReference4.SetDragTargetElementAsync(targets);
                await dropReference4.ClearValue();
            }
            else if (i == 5)
            {
                await dropReference5.initFileReaderService(targets);
                await dropReference5.SetDragTargetElementAsync(targets);
                await dropReference5.ClearValue();
            }
            else if (i == 6)
            {
                await dropReference6.initFileReaderService(targets);
                await dropReference6.SetDragTargetElementAsync(targets);
                await dropReference6.ClearValue();
            }
            else if (i == 7)
            {
                await dropReference7.initFileReaderService(targets);
                await dropReference7.SetDragTargetElementAsync(targets);
                await dropReference7.ClearValue();
            }
            else if (i == 8)
            {
                await dropReference8.initFileReaderService(targets);
                await dropReference8.SetDragTargetElementAsync(targets);
                await dropReference8.ClearValue();
            }
            else if (i == 9)
            {
                await dropReference9.initFileReaderService(targets);
                await dropReference9.SetDragTargetElementAsync(targets);
                await dropReference9.ClearValue();
            }
            else if (i == 10)
            {
                await dropReference10.initFileReaderService(targets);
                await dropReference10.SetDragTargetElementAsync(targets);
                await dropReference10.ClearValue();
            }

        }
        if (nTargetNumber >= 10)
        {

            int groupID = 0;
            groupID = groupIDbyParam;
            MyNavigationManager.NavigateTo("/Transfer2/" + groupID.ToString());

@*            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            {
                groupID = sgSideBar.GroupId;
                MyNavigationManager.NavigateTo("/Transfer2/" + groupID.ToString());
            }
            else
                MyNavigationManager.NavigateTo("/Transfer2");*@
        }

        CLog.Information("[CLEAR] 삭제");
    }

    [JSInvokable("NotifyChange")]
    public static void NotifyChange(FileListEntryImpl[] files)
    {
        HandleFileInputChangeAction1.Invoke(files, true);
    }
    [JSInvokable("LogWrite")]
    public static void LogWrite(string str)
    {
        Debug.WriteLine(str);
        CLog.Information(str);
    }
    [JSInvokable("NotifyChange2")]
    public static void NotifyChange2(FileListEntryImpl[] files)
    {
        HandleFileInputChangeAction2.Invoke(files, false);
    }

    private async void HandleFileInputChange(IFileListEntry[] files, bool bChange)
    {
        if (bChange == true)
            dropFile.bHandleFileFlag = true;

        //if (files == null || files.Length == 0)
        //    return;

        //파일첨부 10회 제한
        int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumberNoIncrease");
        if (nTargetNumber >= 10)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0190");
            ShowMessage("warning", strMsg);
            return;
        }

        CLog.Information("[HandleFileInputChange]파일드랍 이벤트 수신, 갯수:" + files.Length);
        foreach (var file in files)
        {
            CLog.Information("[HandleFileInputChange]파일명:" + file.Name);
        }

        dropFile.fileSizeError = false;
        dropFile.fileTypeError = false;
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    dropFile.fileSizeError = true;
                }
                //중복제거
                bool bFind = false;
                foreach (var item in dropFile.HsStreamList)
                {
                    if (item.FileName == file.Name)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                    continue;

                //keep the good files
                if (!error) { }
            }
        }
        await SubFileAddAsync();
    }

    private async Task SubFileAddAsync()
    {
        int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumber");

        string targets = new string("fileInput" + nTargetNumber);
        IEnumerable<IFileReference> files = null;
        IFileReaderRef dropRef = null;
        if (nTargetNumber == 1)
        {

            await dropReference1.initFileReaderService(targets);
            await dropReference1.SetDragTargetElementAsync(targets);
            await dropReference1.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference1.AppendDragTargetElement(targets);
            await dropReference1.ReadRightCheck(targets);
            files = await dropReference1.EnumerateFilesAsync();
        }
        else if (nTargetNumber == 2)
        {
            await dropReference2.initFileReaderService(targets);
            await dropReference2.SetDragTargetElementAsync(targets);
            await dropReference2.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference2.AppendDragTargetElement(targets);
            files = await dropReference2.EnumerateFilesAsync();
            await dropReference2.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 3)
        {
            await dropReference3.initFileReaderService(targets);
            await dropReference3.SetDragTargetElementAsync(targets);
            await dropReference3.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference3.AppendDragTargetElement(targets);
            files = await dropReference3.EnumerateFilesAsync();
            await dropReference3.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 4)
        {
            await dropReference4.initFileReaderService(targets);
            await dropReference4.SetDragTargetElementAsync(targets);
            await dropReference4.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference4.AppendDragTargetElement(targets);
            files = await dropReference4.EnumerateFilesAsync();
            await dropReference4.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 5)
        {
            await dropReference5.initFileReaderService(targets);
            await dropReference5.SetDragTargetElementAsync(targets);
            await dropReference5.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference5.AppendDragTargetElement(targets);
            files = await dropReference5.EnumerateFilesAsync();
            await dropReference5.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 6)
        {
            await dropReference6.initFileReaderService(targets);
            await dropReference6.SetDragTargetElementAsync(targets);
            await dropReference6.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference6.AppendDragTargetElement(targets);
            files = await dropReference6.EnumerateFilesAsync();
            await dropReference6.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 7)
        {
            await dropReference7.initFileReaderService(targets);
            await dropReference7.SetDragTargetElementAsync(targets);
            await dropReference7.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference7.AppendDragTargetElement(targets);
            files = await dropReference7.EnumerateFilesAsync();
            await dropReference7.ReadRightCheck(targets);
            dropRef = dropReference7;
        }
        else if (nTargetNumber == 8)
        {
            await dropReference8.initFileReaderService(targets);
            await dropReference8.SetDragTargetElementAsync(targets);
            await dropReference8.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference8.AppendDragTargetElement(targets);
            files = await dropReference8.EnumerateFilesAsync();
            await dropReference8.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 9)
        {
            await dropReference9.initFileReaderService(targets);
            await dropReference9.SetDragTargetElementAsync(targets);
            await dropReference9.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference9.AppendDragTargetElement(targets);
            files = await dropReference9.EnumerateFilesAsync();
            await dropReference9.ReadRightCheck(targets);
        }
        else if (nTargetNumber == 10)
        {
            await dropReference10.initFileReaderService(targets);
            await dropReference10.SetDragTargetElementAsync(targets);
            await dropReference10.IsDragTargetElement(targets);
            System.Threading.Thread.Sleep(1000);
            await dropReference10.AppendDragTargetElement(targets);
            files = await dropReference10.EnumerateFilesAsync();
            await dropReference10.ReadRightCheck(targets);
        }

        if (files == null || files.Count() == 0)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0255");
            ShowMessage("warning", strMsg);
            return;
        }

        await dropFile.SubFileAddAsync(files);
        object[] param = { "fileInput" + nTargetNumber };
        await JSRuntime.InvokeAsync<string>("hideElement", param);

        nTargetNumber++;
        if (nTargetNumber > 10)
            nTargetNumber = 1;
        object[] param2 = { "fileInput" + nTargetNumber };
        await JSRuntime.InvokeAsync<string>("showElement", param2);
    }
    public bool ClientPatch(SGLoginData sgLoginData)
    {

        if (sgLoginData == null)
            return false;
        bool bUpdate = sgLoginData.GetClientUpgrade();
        if (!bUpdate)
            return false;

        string strSvrCliVersion = sgLoginData.GetServClientVersion();
        if (strSvrCliVersion.Equals(""))
            return false;
        strSvrCliVersion = strSvrCliVersion.ToUpper();
        CLog.Here().Information("TransferUI Server Client Version {0}", strSvrCliVersion);
        string strCliVersion = HSCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
            return false;
        strCliVersion = strCliVersion.ToUpper();

        //return true;

        if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
        {
            return true;
        }
        else
            return false;

    }

    public void InsertMessage(NOTI_TYPE type, int groupID, LSIDEBAR menuCategory, eMsgType eMType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertMessageTitle(eMType);
        string strNotiContent = body;
        SQLiteDB.InsertNotiInfo(type, groupID, strUserSeq, "0", menuCategory, path, "", strHead, strNotiContent);

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HSCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HSCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HSCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HSCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }


    private void HomeMove()
    {

        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }

    /**
    *@biref 3망일때, 전체전송기능 사용해도 되는 상황인지 판단
    */
    public bool IsCanTransferAllNet()
    {

        // Agent 설정에 모든망 전송 기능이 있는지 확인
        if (AppConfigSvc.GetUseNetOverAllsend() == false)
            return false;

        // 3망 설정상황이 아니면
        if (dicDestSysPos == null || dicDestSysPos.Count < 3)
            return false;


        // 다접속 상황이면
        if (pageService.m_bIsMultiNetWork)
            return false;

@*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        // 파일전송 사용 권한이 없으면
        if (sgLoginData.GetFileTrans() == false)
            return false;

        // 하나라도 파일전송 권한이 없거나 정보가 이상하면
        foreach (var item in dicDestSysPos)
        {

            if (item.Value.nIdx > 0 &&
              (item.Value.strDestSysid.Length == 0 || item.Value.bUseFileTrans == false || item.Key.Length < 1))
            {
                return false;
            }
        }

        return true;
    }


    /**
    *@biref 공통환경설정 변경에 따른 UI 변경사항 반영 적용
    */
    public void RefreshUI(int groupid)
    {
        StateHasChanged();
    }

}