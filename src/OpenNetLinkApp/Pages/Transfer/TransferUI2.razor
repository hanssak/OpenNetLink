@page "/Transfer"
@page "/Transfer/{groupIDbyParam:int}"

@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGTransfer
@using OpenNetLinkApp.Pages.Transfer
@using HsNetWorkSG
@using HsNetWorkSGData
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@using AgLogManager
@using OpenNetLinkApp.Pages.PCURL
@using BlazorInputFile
@using OpenNetLinkApp.Common
@using OfficeExtractor

@inject XmlConfService XmlConf
@inject DragAndDropService DragAndDropService
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject WebWindow Window
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService
@inject IFileReaderService fileReaderService

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strFileTrans</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <!--<li>팝업:</li>
                    <li>
                        <select class="form-control" style="width:150px;" id="popupSelect" @onchange="openPopUp">
                            <option id="0" selected="selected">없음</option>
                            <option id="1">공인인증서전송</option>
                            <option id="2">환경정보 확인중</option>
                            <option id="29">화면잠금</option>
                            <option id="30">한싹OTP</option>
                        </select>
                    </li>-->
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strFileTrans</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-md-12">
                <div class="card card-boder mb-3" style="box-shadow:none;">
                    <div class="card-body clearfix">
                        <label class="line-label border-right pr-1" style="margin-right: 5px;border-color: #b3c8e4 !important;">@strApprLine</label>
                        <ApproveLine @ref="ApprLine"></ApproveLine>
                        <label style="float:right;">
                            @if (bHideApprChooseAddBtn == false)
                            {
                                <button type="button" class="btn btn-md btn-navy" @onclick="@ApproveChooseAdd" hidden="@bHideApprChooseAddBtn">
                                    <i class="fas fa-user-plus"></i> @strApproverAdd
                                </button>
                            }
                        </label>
                    </div>
                    @if (SGAppMgrSvc.SiteConfigInfoService.GetUseFileForward())
                    {
                        <div class="card-body clearfix">
                            <label class="line-label border-right pr-1" style="margin-right: 5px;border-color: #b3c8e4 !important;">@XmlConf.GetTitle("T_FILE_RECEIVER")</label>
                            &nbsp;<ForwardLine @ref="refForwardLine"></ForwardLine>
                            <label style="float:right;">
                                <button type="button" class="btn btn-md btn-navy" @onclick="@ReceiverChooseAdd">
                                    <i class="fas fa-user-plus"></i> @XmlConf.GetTitle("T_FILE_RECEIVER_ADD")
                                </button>
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
        <!-- /.row -->
        <!-- list -->

        <div class="row">

            <div class="col-md-3 pr-0">
                <div class="card card-navy card-outline card-boder" style="height:65vh;">

                    <FileTree @ref="refFileTree" OnSelectPathFromFileTree="changeSelectPath"></FileTree>
                    <!-- 파일리스트 -->
                    <div id="divFileList" style="width:100%;height:50%;padding:1px 1px 1px 0px;overflow:auto">
                    </div>
                    <!-- 파일리스트 -->
                </div>
            </div>


            <div class="col-md-9">
                <div id="divRightContent" class="card card-navy card-outline card-boder1" style="background-color: #e9eef7;height:65vh;">

                    <form class="form-horizontal">

                        <div id="divRightUpperSide" class="card-body">
                            <div class="col-md-12">
                                <div class="form-group row mb-1" style="border:1px solid #c7d6e9;">
                                    <label for="1" class="col-sm-1 col-form-label text-center" style="background-color:#eff8ff;">@XmlConf.GetTitle("T_TRANS_TITLE")</label>
                                    <div class="col-sm-11 pr-0 pl-0">
                                        <input type="text" class="form-control p-2 border-0" style="border-radius:0px;" id="1" placeholder="@strCurTitle" @bind="strBindTitle" autocomplete="off">
                                    </div>
                                </div>

                                <div class="form-group row mb-3" style="border:1px solid #c7d6e9;">
                                    <label for="2" class="col-sm-1 col-form-label text-center " style="background-color:#eff8ff;">@XmlConf.GetTitle("T_DETAIL_DESC")</label>
                                    <div class="col-sm-11 pr-0 pl-0">
                                        <textarea class="form-control p-2 border-0 " rows="2" placeholder="@strCurDesc" @bind="strBindDesc"></textarea>
                                    </div>
                                </div>
                            </div>


                            <div class="form-group  clearfix mb-2">
                                <div class="float-left pt-1">
                                    <div class="form-check">
                                        <table>
                                            <tr>
                                                <td>
                                                    <input type="checkbox" class="form-check-input" id="exampleCheck2" checked="@bAfterCheck" @onclick="(e => GetAfterChk())" hidden="@bAfterApprChkHIde" disabled="@bAfterApprDisable">
                                                </td>
                                                <td>
                                                    <label class="form-check-label" for="exampleCheck2">@strAfterApprove</label>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                                <div class="float-right">
                                    <div class="float-right">
                                        <table>
                                            <tr>
                                                @if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                                                {
                                                    <th>@XmlConf.GetTitle("T_RECV_NETWORK")</th>
                                                    <td class="pr-2">
                                                        <button type="button" @onclick="openBasicSelect" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDestNetWork<i class="fas fa-angle-down pl-2"></i></button>
                                                    </td>
                                                }
                                                <td>
                                                    <button type="button" class="btn btn-md btn-green" @onclick="CheckApprLine"><i class="fas fa-share"></i>@strFileSend</button>
                                                    <button type="button" class="btn btn-md btn-blue" @onclick="OpenFileDialog"><i class="fas fa-file-upload"></i>@strFileReg</button>
                                                    <button type="button" class="btn btn-md btn-black" @onclick="@(e => RemoveAllFile())"><i class="fas fa-times"></i>@strFileDel</button>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div id="divDropFile" class="card-body p-0" style="height:67%;">
                            <DropFileList @ref="dropFile" OnDropClear="DropClear" OnFileSelectOpen="OpenFileDialog"></DropFileList>
                        </div>

                        <div id="divRightBottomSide" class="card-footer clearfix">

                            <div class="float-left">
                                @if (UseUrlRedirectionByServer)
                                {
                                    if (GetUseUrlRedirectionByUser())
                                    {
                                        <button type="button" class="btn btn-md btn-url"><i class="fas fa-globe-asia icon"></i><span>@strUrlAutoTrans</span></button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-md btn-url"><i class="fas fa-globe-asia icon"></i><span>@XmlConf.GetTitle("T_INFO_NO_USE_URLREDIRECT")</span></button>
                                    }
                                }
                            </div>

                            <div class="float-right">

                                <ul class="pagination pagination-sm m-0 ">
                                    <li>@strRemainFile : </li>
                                    <li style="padding:5px 10px; width:70px;">
                                        <div class="progress progress-xs">
                                            <div class="progress-bar bg-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @strDayFileTransRemainSizePer; vertical-align:middle;">
                                                <span class="sr-only">100% Complete (success)</span>
                                            </div>
                                        </div>
                                    </li>
                                    <li><label class="form-check-label">@strDayFileTransRemainSize</label></li>
                                    <li style="padding:5px 10px; width:70px;">
                                        <div class="progress progress-xs">
                                            <div class="progress-bar bg-info" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @strDayFileTransRemainCountPer; vertical-align:middle;">
                                                <span class="sr-only">100% Complete (success)</span>
                                            </div>
                                        </div>
                                    </li>
                                    <li><label class="form-check-label">@strDayFileTransRemainCount</label></li>
                                    <li><i class="fas fa-caret-square-down ch" @onclick="DayInfoChange"></i></li>
                                </ul>

                            </div>

                        </div>

                    </form>
                </div>
            </div>

        </div>


    </div>
    <a hidden data-toggle="modal" data-target="modal-transprogress"></a>
</section>

<FileSelectPopUp @ref="refFileSelectPopUp" OnSelectOK="PopUpFileSelectOK"></FileSelectPopUp>
<SGBasicSelect @ref="refSGBasicSelect" ChangeTargetSelect="sendTargetSelectChange"></SGBasicSelect>
<ReceiverSelect_PopUp @ref="refReceiverSelect_PopUp" OnSelectOK="ReceiverSelectOK"></ReceiverSelect_PopUp>
@*<ReceiverSelect_TreePopUp @ref="refReceiverSelect_TreePopUp" OnSelectOK="ReceiverSelectOK"></ReceiverSelect_TreePopUp>*@
<ApproverSelect_PopUp @ref="refApproverSelect_PopUp"></ApproverSelect_PopUp>
<ApproveExtApproverSelect_PopUp @ref="refApproveExtApproverSelect_PopUp"></ApproveExtApproverSelect_PopUp>

@*<ApproverSelect_TreePopUp @ref="refApproverSelect_TreePopUp"></ApproverSelect_TreePopUp>*@
<ApproverSelect_StepPopUp @ref="refApproverSelect_StepPopUp"></ApproverSelect_StepPopUp>
@*<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>*@
<TransProgress @ref="refTransProgress" OnCancel="TransCancel"></TransProgress>
<Update_PopUp @ref="refUpdate_PopUp"></Update_PopUp>
<SGAlert @ref="refSGAlertApproveAfter" OnConfirm="ApproveAfterTransFile" Guid="ApporveAfterAlert"></SGAlert>
<SGAlert @ref="refSGAlertContinueFileTrans" OnConfirm="ContinueFileUpload" OnCancel="ContinueFileUploadCancel" Guid="ContinueFileTrans"></SGAlert>
<input type="hidden" @ref=inputTypeFileElement />

@code
{
    [Parameter]
    public int groupIDbyParam { get; set; }

    //드래그앤드랍 시작
    ElementReference inputTypeFileElement;
    List<IFileReaderRef> dropReferenceList = new List<IFileReaderRef>();
    IFileReaderRef _dropReference = null;
    int maxDropReference = 10;

    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB

    public string stSelectPath { get; set; }
    DropFileList dropFile;
    //Transfer_Denied refTransferDenied;
    ReceiverSelect_PopUp refReceiverSelect_PopUp;
    //ReceiverSelect_TreePopUp refReceiverSelect_TreePopUp;
    ApproverSelect_PopUp refApproverSelect_PopUp;
    //ApproverSelect_TreePopUp refApproverSelect_TreePopUp;
    ApproverSelect_StepPopUp refApproverSelect_StepPopUp;

    ApproveExtApproverSelect_PopUp refApproveExtApproverSelect_PopUp;

    SGAlert refSGAlertApproveAfter;
    SGAlert refSGAlertContinueFileTrans;
    TransProgress refTransProgress;

    ISGVersionConfigService versionConfigSvc;
    Update_PopUp refUpdate_PopUp;
    ForwardLine refForwardLine;
    SGBasicSelect refSGBasicSelect;
    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    public int dragLabel = 1;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<TransferUI2>();
    FileSelectPopUp refFileSelectPopUp;

    public string strFileTrans = "";
    public string strFilePath = "";
    public string strAfterApprove = "";
    public string strLogin = "";
    public string strUrlAutoTrans = "";

    public string strDayFileTransRemainCount = "";
    public string strDayFileTransRemainSize = "";
    public string strDayClipRemainCount = "";
    public string strDayClipRemainSize = "";
    public string strDayFileTransRemainCountPer = "";
    public string strDayFileTransRemainSizePer = "";
    public string strDayClipRemainCountPer = "";
    public string strDayClipRemainSizePer = "";

    public string strRemainFile = "";
    public string strFileSend = "";
    public string strFileDel = "";
    public string strApprLine = "";
    public string strApproverAdd = "";
    public string strFileReg = "";

    public string strCurTeamName = "";

    public string strCurTitle = "";
    public string strCurDesc = "";

    public bool bAfterCheck = false;

    public string strBindTitle = "";
    public string strBindDesc = "";
    public string strFromName = "-";
    public string strToName = "-";
    ISGSideBarUIService SideBarUISvc;
    ISGSiteConfigService siteConfig;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService OpConfigSvc;

    /// <summary>
    /// VIP 이거나, 전결자 이거나, 결제 사용하지 못하거나, 결제자 편집 권한이 없으면 숨김처리(true)
    /// VIP 이거나,
    /// </summary>
    public bool bHideApprChooseAddBtn = false;
    ApproveLine ApprLine;

    FileTree refFileTree;

    /// <summary>
    /// 사후결재 CheckBox Hide 유무(By:서버정책, true : 숨김, false : 보여줌)
    /// </summary>
    public bool bAfterApprChkHIde = false;

    /// <summary>
    /// 사후결재 checkBox Disable 설정유무(By:서버정책, true : 사용못함, false : 사용함)
    /// </summary>
    public bool bAfterApprDisable = false;

    public bool bURLRedirection = true;
    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    // 3망 - 클립보드 전송 UI
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    public string strDestNetWork = "";
    int nDrawPageGroupID = -1;          // 전달받은 groupID 별로 화면구성 - 다중접속화면구성
    int m_apvStep = 0;                  //결재유형(0:and, 1:or, 2:and+or)
    bool UseUrlRedirectionByServer = false;

    private static Action<List<string>> ActionFileSelectOK;
    private static Action<string, string> action1;
    private static Action<string> action2;
    private static Action action3;
    private static Action<string> actionLoadFileList;
    //Drag&Drop 관련 액션
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction1;
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction2;


    //결재라인
    List<Dictionary<int, string>> detailData = null;
    int cntSendQuery = 0;   //쿼리 전송 횟수
    int cntRecvQuery = 0;   //쿼리 조회 결과 수신 횟수


    // 파일목록 임시 받는 용도
    List<HsStream> FileList = null;


    private void PopUpFileSelectOK(List<string> files)
    {
        refFileSelectPopUp.closePopUp();
        dropFile.OnDrop(files);
    }
    [JSInvokable("JSaddFileToDropZone")]
    public static void JSaddFileToDropZone(string path)
    {

        List<string> lst = new List<string>();
        lst.Add(path);
        ActionFileSelectOK.Invoke(lst);
    }
    private void sendTargetSelectChange(string value)
    {
        strDestNetWork = value;
        StateHasChanged();
    }
    private async Task openBasicSelect()
    {
        await refSGBasicSelect.openPopUp(dicDestSysPos, strDestNetWork);
    }

    private async Task openPopUp(ChangeEventArgs e)
    {
        switch (e.Value.ToString())
        {
            case "한싹OTP":
                //await refHanssakOTP.openPopUp();
                break;
            case "공인인증서전송":
                //await refCertificateTransfer.openPopUp();
                break;
            case "환경정보 확인중":
                // await refEnvLoading.openPopUp();
                break;
            case "보안문자":
                //await refSGCapcha.openPopUp();
                break;
            case "Google OTP":
                //await refGoogleOTP.openPopUp();
                break;
            case "패스워드변경(시스템)":
                //await refPWChange.openPopUp();
                break;
            case "패스워드변경(사용자)":
                //await refPWChangeUser.openPopUp();
                break;
            case "패스워드변경(기본패스워드)":
                //await refPWChangeDefaultPW.openPopUp();
                break;
            case "결재자 추가 1":
                await refApproverSelect_PopUp.openPopUp();
                break;
                @*case "결재자 추가 2":
                    await refApproverSelect_TreePopUp.openPopUp();*@
                break;
            case "결재자 추가 3":
                await refApproverSelect_StepPopUp.openPopUp();
                break;
            //case "전송제한":
            //    await refTransferDenied.openPopUp();
            //    break;
            case "MESSAGE":
                //1. 토스트 메시지 사용법
                //type: success, info, waring, error 2020/07/02 YKH
                //object[] param5 = { "error", "시스템", "시스템 토스트 메시지 입니다. 자동닫기가 가능한 토스트 메시지 함수호출로 수행됨." };
                //await JSRuntime.InvokeAsync<object>("fireToastMessage", param5);

                //2. javascript alert 사용법
                //object[] param = { "JS Alert 메시지 호출입니다." };
                //await JSRuntime.InvokeAsync<object>("alertMessage", param);

                //3. 모달형 메시지, mode:1은 alert mode:2는 confirm
                //await refSGAlert.openPopUp("시스템 알림", "이것은 시스템 알림 메시지 입니다.", 2);
                break;
            //case "GPKI":
            //  await refLogInGPKI.openPopUp();
            //  break;
            case "로그인(인터넷망)":
                //await LogInPopUp.openPopUp();
                break;
            case "로그인(업무망)":
                //await refLogIn_SecurityNetwork.openPopUp();
                break;
            case "로그인(메일연계)":
                //await refLogIn_Mail.openPopUp();
                break;
            case "로그인(PCURL)":
                //await refLogIn_PCURL.openPopUp();
                break;
            case "반려팝업":
                //await refSGReject.openPopUp();
                break;
            case "PDF변환":
                //refSGPDFTrans.ChangeProgress(10);
                //await refSGPDFTrans.openPopUp();
                //진행율 변환 예제
                //System.Threading.Thread.Sleep(2000);
                //refSGPDFTrans.ChangeProgress(90);
                break;
            case "파일전송진행율":
                refTransProgress.ChangeProgress(10);
                await refTransProgress.openPopUp();
                //진행율 변환 예제
                await Task.Delay(2000);
                refTransProgress.ChangeProgress(90);
                break;
            case "미리보기":
                OpenPreviewWindow();
                //object[] param = { "https://www.naver.com", "오픈윈도우", 200, 200 };
                //await JSRuntime.InvokeAsync<object>("openWindow", param);
                break;
            case "프로그래스알림":
                object[] param = { "POP1234", "업무망 <i class='fas fa-long-arrow-alt-right p-1'></i> 인터넷망", "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 1%" };
                await JSRuntime.InvokeAsync<object>("fireProgressMessage", param);
                await Task.Delay(3000);
                object[] param2 = { "POP1234", "파일수신 중입니다. <br>수신이 완료될 때까지 기다려 주세요.<br> 진행률 : 90%", "90%" };
                await JSRuntime.InvokeAsync<object>("updateProgressMessage", param2);
                await Task.Delay(3000);
                object[] param3 = { "POP1234" };
                await JSRuntime.InvokeAsync<object>("closeProgressMessage", param3);
                break;
            case "프로그래스업데이트":
                // object[] param2 = { "POP1234", "파일전송 중입니다. <br>전송이 완료될 때까지 기다려 주세요.<br> 진행률 : 90%", "90%" };
                //  await JSRuntime.InvokeAsync<object>("updateProgressMessage", param2);
                break;
            case "프로그래스닫기":
                // object[] param3 = { "POP1234" };
                //   await JSRuntime.InvokeAsync<object>("closeProgressMessage", param3);
                break;
            case "오프라인":
                //await refOffLine.openPopUp();
                break;

            case "마우스우클릭":
                HSCmdCenter.RMouseFileAddNotiAfterSend(0, 0);
                break;
            case "OTP":
                //await refOTP.openPopUp();
                break;
            case "소프트웨어 업데이트":
                //await refUpdate_PopUp.openPopUp();
                break;
            case "바이러스팝업":
                // await refVirusReport.openPopUp();
                break;
            case "PCURL사용신청":
                //await refPcurlUsingRegistPopUp.openPopUp();
                break;
            case "PCURL사용가능한URL":
                //await refPcurlAvailableUrlListPopUp.openPopUp();
                break;
            case "ZIP파일미리보기":
                //await refZipPreviewPopop.openPopUp();
                break;
            case "화면잠금":
                //object[] param9 = { "modal-displaylock" };
                //await JSRuntime.InvokeAsync<object>("openPopUp", param9);
                break;
        }
    }

    private async Task OpenFileDialog()
    {
        refFileSelectPopUp.ngroupID = groupIDbyParam;
        await refFileSelectPopUp.openPopUp();
    }

    private async Task UploadFiles()
    {
        cntSendQuery = 0;
        cntRecvQuery = 0;
        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strTitle = strBindTitle;
        string strContents = strBindDesc;
        if (!strBindTitle.Equals(""))
        {
            if (Encoding.UTF8.GetByteCount(strBindTitle) > 250)
            {
                string strMsg = XmlConf.GetWarnMsg("W_0020");           // 제목 및 설명은 최대 한글 80자, 영문 250자까지 입력할 수 있습니다
                ShowMessage("warn", strMsg);
                strBindTitle = "";
                strBindDesc = "";
                StateHasChanged();
                return;
            }
        }

        if (!strBindDesc.Equals(""))
        {
            if (Encoding.UTF8.GetByteCount(strBindDesc) > 250)
            {
                string strMsg = XmlConf.GetWarnMsg("W_0020");           // 제목 및 설명은 최대 한글 80자, 영문 250자까지 입력할 수 있습니다
                ShowMessage("warn", strMsg);
                strBindTitle = "";
                strBindDesc = "";
                StateHasChanged();
                return;
            }
        }

        if (pageService.GetDayFileTransCountEnable(groupID) != true)
        {
            string strMsg = XmlConf.GetErrMsg("E_0106");    // 일일 전송 최대 횟수는 {0}번 입니다./r/n일일 전송 횟수를 초과하였습니다.
            int FileMaxCount = pageService.GetDayFileMaxCount(groupID);
            strMsg = String.Format(strMsg, FileMaxCount);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            DayFileChangeNotiEvent dayFileChange = null;
            dayFileChange = HSCmdCenter.sgPageEvent.GetDayFileChangeNotiEvent(groupID);
            if (dayFileChange == null)
                return;
            dayFileChange(groupID);
            return;
        }

        int TransDataCount = 0;
        TransDataCount = dropFile.GetFileListAddCount();
        if (TransDataCount <= 0)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0016"); // 전송하고자 하는 파일이 없습니다./r/n전송파일을 등록해주십시오.
            strMsg = strMsg.Replace("/r/n", "<br/>");
            ShowMessage("warn", strMsg);
            return;
        }

        // 3중망일때 목적지 점검
        if (dicDestSysPos != null && dicDestSysPos.Count > 0 && strDestNetWork.Length < 1)
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0234"));
            return;
        }

        //사후결재 제한 체크 여부

        if (siteConfig.GetApproveAfterLimit(groupID))
            await CheckApproveAfterLimit();
        else
        {

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData == null)
                return;

            if (SGAppMgrSvc.SiteConfigInfoService.GetUseApproveExt(groupID) && isFilesNeedApprove())
            {

                refApproveExtApproverSelect_PopUp.FileList = dropFile.GetHsStreamList();

                // 파일목록이 있는 화면을 갱신해줘야 UI상에 나타남
                refApproveExtApproverSelect_PopUp.Refresh();

                // 파일송신 버튼, 실행
                refApproveExtApproverSelect_PopUp.SetFileTransWithApproveEvent(FileTransWithApprover);

                await refApproveExtApproverSelect_PopUp.openPopUp();
            }
            else
            {
                FileTrans();
                //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
                await stopClick();
            }

        }

    }



    private async Task CheckApprLine()
    {
        cntSendQuery = 0;
        cntRecvQuery = 0;

        int groupID = groupIDbyParam;
        HSCmdCenter.sgPageEvent.SetQueryDetailEvent(groupID, DetailResult); //결과 이벤트 메핑

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        //bool bUseApprove = sgLoginData.GetApprove();
        bool bUseApprove = pageService.GetUseApproveNetOver(groupID, sgLoginData);
        bool bApprEdit = sgLoginData.GetApproveAppend();

        if (!pageService.GetSFMChecking())
        {
            SFMRefreshEvent sfmRefreshEvent = HSCmdCenter.sgPageEvent.GetSFMRefreshEvent();
            if (sfmRefreshEvent != null)
            {
                int check = await sfmRefreshEvent(groupID);
            }
        }

        ISGUserInfo userInfoService = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        int nApprovePos = userInfoService.GetUserApprPos(); //sgUserData.GetUserApprpos();
        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        string strUserSeq = userInfoService.UserSeq;
        int ApprLineCount = sgApprLineData.GetApprAndLineSeqCount(strUserSeq);
        bool bIsVipUser = sgLoginData.IsVipUser();
        if (bIsVipUser == false && bUseApprove && nApprovePos < 2)
        {
            string strMsg = "";
            if ((nApprovePos < 2) && (ApprLineCount <= 0))
            {
                if (bApprEdit)
                {
                    strMsg = XmlConf.GetWarnMsg("W_0076");                   // 결재자를 추가하십시오.
                    ShowMessage("warn", strMsg);
                    return;

                }
                else if (SGAppMgrSvc.SiteConfigInfoService.GetUseApprLineChkBlock(groupID)) // OpConfigInfoService
                {
                    strMsg = XmlConf.GetWarnMsg("W_0206");                   // 결재자가 설정되어 있지 않습니다./r/n관리자에게 문의하십시오.
                    strMsg = strMsg.Replace("/r/n", "<br>");
                    ShowMessage("warn", strMsg);
                    return;
                }

            }

            else if (ApprLineCount > 0)      //
            {
                string strApprLineUserSeq = "";
                string strApprLineDeptSeq = "";
                string strApprLineName = "";
                string strUserID = sgLoginData.GetUserID();
                LinkedList<ApproverInfo> apprLinkedList = sgApprLineData.GetApprAndLineData();

                foreach (var item in apprLinkedList)
                {
                    strApprLineUserSeq = item.UserSeq;
                    strApprLineDeptSeq = item.DeptSeq;
                    strApprLineName = item.Name;

                       //사용자 유효성 검사 시, 로그인한 본인은 제외하고 확인한다.
                    if (strApprLineUserSeq == strUserSeq)
                        continue;

                    //웹매니저에서 등록된 기본결재라인 부서Seq는 "-"로 설정됨
                    //웹매니저에 등록된 최초 결재라인은 유효성 검증에서 제외
                    //if (!strApprLineDeptSeq.Equals("-"))
                    //if (strApprLineDeptSeq.Length == 18)    // Dept - seq 일때에만 검색함.

                    @*if (CsSeqFunc.isDeptSeq(strApprLineDeptSeq))
                    {
                        SendQuery(groupID, strUserID, strApprLineUserSeq, strApprLineDeptSeq);
                        cntSendQuery++;
                    }*@

                    // 부서 Seq 알수 없는 고정결재 일때에는 UserSeq만 확인
                    SendQuery(groupID, strUserID, strApprLineUserSeq, CsSeqFunc.isDeptSeq(strApprLineDeptSeq) ? strApprLineDeptSeq : "");
                    cntSendQuery++;
                }
            }

        }

        if (cntSendQuery == 0)
        {
            await UploadFiles();
        }
    }

    /// <summary>
    /// 쿼리문 조회
    /// </summary>
    /// <param name="groupID">그룹ID</param>
    /// <param name="strUserID">로그인 ID</param>
    /// <param name="userSeq">결재자 Seq</param>
    /// <param name="deptSeq">결재자 부서Seq</param>
    private void SendQuery(int groupID, string strUserID, string userSeq, string deptSeq)
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetUserConfirm(userSeq, deptSeq, false);
        HSCmdCenter.SendDetailQuery(groupID, strUserID, strQuery);
    }

    public void DetailResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        string reason = e.GetTagData("REASON");
        detailData = e.GetSvrRecordData2("RECORD");
        cntRecvQuery++;

        if (count == 0)
        {
            cntSendQuery = 0;
            cntRecvQuery = 0;

            bool bApprEdit = false;
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
            if (sgLoginData != null)
                bApprEdit = sgLoginData.GetApproveAppend();                             //결제자 편집 사용 여부

            string strMsg = XmlConf.GetInfoMsg(bApprEdit?"I_0220":"I_0233");
            //HsLog.info($"결재자 부서정보가 변경되었습니다. (결재자명={strApprLineName})");
            ShowMessage("warn", strMsg);
            return;
        }

        //쿼리 전송 횟수와 쿼리조회 수신 횟수가 같아야 검증이 완료됐다는 의미로 그 때 업로드 시작
        if (cntSendQuery == cntRecvQuery)
            Task.Run(async () => { await UploadFiles(); });
    }

    private async Task FileTrans()
    {
        int groupID = groupIDbyParam;
        HSCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupID, FileTransProgress);

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        string strUserID = sgLoginData.GetUserID();
        string strMid = sgLoginData.GetTagData("MID");
        string strPolicyFlag = sgLoginData.GetTagData("POLICYFLAG");
        string strTitle = strBindTitle;
        string strContents = strBindDesc;
        //string strTitle = strCurTitle;
        //string strContents = strCurDesc;
        bool bApprSendMail = false;
        bool bAfterApprove = bAfterCheck;
        int nDlp = 0;
        string strRecvPos = "0";
        string strZipPasswd = "";
        bool bPrivachApprove = false;
        string strSecureString = "";
        string strDataType = "0";               // 파일 전송
        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserData.UserSeq;
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        string stApprLineSeq = sgApprLineData.GetApprAndLineSeqString(strUserSeq, strApprStep);
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1)
            stApprLineSeq = "";
        else if (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false)
        {
            if (SGAppMgrSvc.SiteConfigInfoService.GetUseApproveExt(groupID) &&
                pageService.GetApproveExtFileTransWithApprove(groupID))
            {
                CLog.Here().Information($"FileTrans - NoApprove Policy - ApproveExt - Use Approve FileTrans !!!");
            }
            else
            {
                CLog.Here().Information($"FileTrans - NoApprove Policy - FileTrans !!!");
                stApprLineSeq = "";
            }
        }

        // Vip / 전결재자 / 결재미사용 / 사후결재사용시간아님 일때, 사전결재전송 강제
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || pageService.GetAfterApprChkHide(groupID))
            bAfterApprove = false;

        // 3중망 상황 상관없이 결재Line 정보는 무조건 보내어, 서버에서 결정하도록 한다.

        FileList = dropFile.GetHsStreamList();

        int nTransType = 0;
        if (SGAppMgrSvc.SiteConfigInfoService.GetUseApproveExt(groupID) &&
        isFilesNeedApprove())
        {

            if (pageService.GetApproveExtFileTransWithApprove(groupID) == false)
            {
                // 결재 없는 파일들만 송신 하기로 결정
                List<HsStream> tmpFileList = null;
                tmpFileList = dropFile.GetHsStreamList();

                FileList = null;
                FileList = new List<HsStream>();

                foreach (HsStream hs in tmpFileList)
                {
                    if (hs.isNeedApprove == false)
                    {
                        FileList.Add(hs);
                    }
                }

                if (FileList.Count < 1)
                {
                    // 결재없이 송신할 수 있는 파일이 없습니다.
                    ShowMessage("warning", XmlConf.GetWarnMsg("W_0284"));
                    return;
                }

            }


            string strApproveExtPolicy = "";
            if (sgLoginData != null)
            {
                strApproveExtPolicy = sgLoginData.GetTagDataBySystemEnvName("CS_EXCEPTION_EXT_REASON_TYPE");
                string[] strArray = null;

                if (strApproveExtPolicy.Length > 2)
                    strArray = strApproveExtPolicy.Split("/");

                if (strArray != null && strArray.Length > 1 && strArray[0].Length > 0)
                {
                    nTransType = Convert.ToInt32(strArray[0]);

                    if (nTransType == 1)
                        strTitle = refApproveExtApproverSelect_PopUp.strBindTitle;
                    else if (nTransType == 2)
                        strContents = refApproveExtApproverSelect_PopUp.strBindTitle;
                    else if (nTransType == 3)
                    {
                        strTitle = refApproveExtApproverSelect_PopUp.strBindTitle;
                        strContents = strTitle;
                    }
                }
            }

        }



        if (strTitle.Equals(""))
        {
            int count = FileList.Count;
            string strFileName = FileList[0].FileName;
            if (count == 1)
                strTitle = strFileName;
            else
            {
                string tmpTitle = XmlConf.GetInfoMsg("I_0048");        // {0} 외 {1}건
                strTitle = String.Format(tmpTitle, strFileName, count - 1);
            }
        }

        if (strContents.Equals(""))
            strContents = "-";

        FileAddManage fileAddManage = new FileAddManage();
        strTitle = fileAddManage.GetConvertTitleDesc(true, strTitle);
        strContents = fileAddManage.GetConvertTitleDesc(true, strContents);
        strTitle = strTitle.Trim();
        strContents = strContents.Trim();

        string strDestNetOverData = "0";

        if (GetNetOverDataPolicy(ref strDestNetOverData) == false)
        {
            return;
        }

        CLog.Here().Information("NETOVERDATA(Send To Server-###) : {0}", strDestNetOverData);

        //
        refTransProgress.SetProgressText(true, true);
        refTransProgress.ChangeProgress(0);
        refTransProgress.nGroupID = groupID;
        await refTransProgress.openPopUp();
        await Task.Delay(1000);

        //수신자 목록체크(철자틀림)
        string stReceiver = "";
        if (refForwardLine != null && refForwardLine.GetReceiver().Count > 0)
        {
            char Sep = (char)'\u0002';
            foreach (ApproverInfo info in refForwardLine.GetReceiver())
            {
                if (refForwardLine.GetReceiver().Last.Value.UserSeq == info.UserSeq)
                    stReceiver += info.UserSeq;
                else
                    stReceiver += info.UserSeq + Sep;
            }
        }


        int ret = HSCmdCenter.SendFileTrans(groupID, strUserID, strMid, strPolicyFlag, strTitle, strContents, bApprSendMail, bAfterApprove, nDlp, strRecvPos, strZipPasswd, bPrivachApprove, strSecureString, strDataType, nApprStep, stApprLineSeq, FileList, strDestNetOverData, stReceiver);

        //
        if (SGAppMgrSvc.SiteConfigInfoService.GetUseApproveExt(groupID))
        {
            pageService.SetApproveExtFileTransWithApprove(groupID, false);
        }

        if (ret == -2)
        {

            long totalSize = 0;
            foreach (HsStream hs in FileList)
            {
                totalSize += hs.Size;
            }

            string strModulePath = System.IO.Directory.GetCurrentDirectory();
            string strDriveName = strModulePath.Substring(0, 1);
            double MFileSize = (double)(totalSize / 1024 / 1024);
            if (MFileSize <= 0)
                MFileSize = 1;
            MFileSize = MFileSize + MFileSize * 0.5;
            string strCapacity = String.Format("{0} MB", MFileSize);
            string strMsg = "";
            strMsg = XmlConf.GetErrMsg("E_0144");           // 파일전송을 하기 위해 디스크 용량이 {0} 만큼 부족합니다.&#10;디스크({1}) 용량을 확보하여 다시 시도 하십시오.
            strMsg = String.Format(strMsg, strCapacity, strDriveName);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            refTransProgress.CancelClosePopUp();
            return;
        }


    }


    /// <summary>
    /// 첨부된 파일들 중에 결재가 필요한 파일이 하나라도 있는지 유무
    /// </summary>
    /// <returns></returns>
    public bool isFilesNeedApprove()
    {

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return false;


        // 결재 사용중이지 않을때
        if (sgLoginData.GetApprove())
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User Policy Use APPROVE!");
            return false;
        }

        // 일반.결재자만
        if (sgUserData.GetUserApprPos() > 1)
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User's ApprPOS is OVER Approver!");
            return false;
        }

        // Vip가 아닐때에만
        if (sgLoginData.IsVipUser())
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User is VIP!");
            return false;
        }


        List<HsStream> FileList = null;
        FileList = dropFile.GetHsStreamList();


        foreach (HsStream hs in FileList)
        {
            if (hs.isNeedApprove)
            {
                CLog.Here().Information($"isFilesNeedApprove (TRUE) - File : {hs.FileName}, FileSize : {hs.Size}, File-ModifyTime : {hs.MTime}");
                return true;
            }
        }

        return false;
    }


    /// <summary>
    /// 사후결재 체크후 파일 전송 진행
    /// </summary>
    /// <returns></returns>
    private async Task CheckApproveAfterLimit()
    {
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        bool bAfterApprove = bAfterCheck;
        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserData.UserSeq;
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        string stApprLineSeq = sgApprLineData.GetApprCommaSeqString(strUserSeq);
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false))
            stApprLineSeq = "";

        // Vip / 전결재자 / 결재미사용 / 사후결재사용시간아님 일때, 사전결재전송 강제
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || pageService.GetAfterApprChkHide(groupID))
            bAfterApprove = false;

        if (!String.IsNullOrEmpty(stApprLineSeq) && bAfterApprove)
        {
            //사후 결재일때 결재자 사후 결재 카운트 체크
            SGQueryExtend sGQueryExtend = new SGQueryExtend();
            string sql = sGQueryExtend.GetApproveAfterCount(stApprLineSeq, Common.Enums.EnumApproveTime.After);

            HSCmdCenter.sgPageEvent.SetQueryReciveEvent(groupID, eCmdList.eAPPROVEAFTERCOUNT, ResultApproveAfter);
            HSCmdCenter.CommonSendQuery(eCmdList.eAPPROVEAFTERCOUNT, groupID, sgLoginData.GetUserID(), sql);
        }
        else
        {

            if (SGAppMgrSvc.SiteConfigInfoService.GetUseApproveExt(groupID) &&
                isFilesNeedApprove())
            {

                refApproveExtApproverSelect_PopUp.FileList = dropFile.GetHsStreamList();

                // 파일목록이 있는 화면을 갱신해줘야 UI상에 나타남
                refApproveExtApproverSelect_PopUp.Refresh();

                // 파일송신 버튼, 실행
                refApproveExtApproverSelect_PopUp.SetFileTransWithApproveEvent(FileTransWithApprover);

                await refApproveExtApproverSelect_PopUp.openPopUp();
            }
            else
            {
                FileTrans();
                //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
                await stopClick();
            }
        }
    }

    public async void ResultApproveAfter(int groupId, object[] e)
    {
        SGData sgData = e[0] as SGData;

        List<Dictionary<int, string>> result = sgData.GetSvrRecordData("RECORD");

        if (result.Count > 0)
        {
            bool checkWarring = false;
            bool checkLimit = false;

            string message = String.Empty;
            message = String.Format(XmlConf.GetWarnMsg("W_0275"), result[0][7]);

            foreach (Dictionary<int, string> dic in result)
            {
                message += String.Format(XmlConf.GetWarnMsg("W_0276"), $"{dic[2]} {dic[3]}", dic[4]);

                if (dic[6] != "0")
                {
                    checkWarring = true;
                    message += String.Format(XmlConf.GetWarnMsg("W_0277"), dic[6]);
                }
                if (dic[5] != "0")
                {
                    checkLimit = true;
                    message += String.Format(XmlConf.GetWarnMsg("W_0278"), dic[5]);
                }
            }

            if (checkLimit)
            {
                await refSGAlertApproveAfter.openPopUp(XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK"), message, 1, groupId, "2");
                return;
            }

            if (checkWarring)
            {
                await refSGAlertApproveAfter.openPopUp(XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK"), message, 1, groupId, "1");
                return;
            }
        }

        FileTrans();
        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        await stopClick();

    }


    public async Task ApproveAfterTransFile(string arg)
    {
        if (arg == "1")
        {
            FileTrans();
            //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
            await stopClick();
        }
    }

    /**
    * @breif 사용자가 선택한 목적망에 대한 3망 전송 정책값을 설정(전체망포함)
    * @return false : 파일 전송 Error 처리
*/
    public bool GetNetOverDataPolicy(ref string strDestNetOverData)
    {

        strDestNetOverData = "0";

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)   // 3망전송상황
        {

            bool bUseTranferAll = false;
            if (IsCanTransferAllNet() && strDestNetWork.Length > 0 && strDestNetWork == XmlConf.GetTitle("T_TRANS_NETOVER_ALL"))
                bUseTranferAll = true;


            if (bUseTranferAll)
            {

                strDestNetOverData = "";

                // 모든에 대한 system_id,정책값,정책값 으로 구성된 값 지정
                // ex2)"E001,31,31,1/E101,31,31,0" - 통신단에서 / 를 구분자로해서 transreq를 2번보냄

                // 1번째 망에 전송 정책 설정 : "E001,31,31,1/"
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 1)
                    {
                        strDestNetOverData += item.Value.strDestSysid;
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }

                    if (item.Value.nIdx == 2)
                    {
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 복사
                strDestNetOverData += ",1/";

                // 2번째 망에 전송 정책 설정 : "E101,31,31,0"
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 2)
                    {
                        strDestNetOverData += item.Value.strDestSysid;
                        break;
                    }
                }

                // 모든망별 정책값 추가
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx != 0)
                    {
                        // 망마다 정책정보 설정
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 정리
                strDestNetOverData += ",0";

            }
            else
            {

                // 목적지를 지정한 system_id 찾음
                foreach (var item in dicDestSysPos)
                {
                    if (item.Key == strDestNetWork) //사용자가 선택한 system_id로 전송
                    {
                        strDestNetOverData = item.Value.strDestSysid;
                        break;
                    }
                }

                if (strDestNetOverData == "0")
                {
                    // 선택한 망에 대한 정보를 얻을 수 없습니다.
                    ShowMessage("error", XmlConf.GetErrMsg("E_0233"));
                    return false;
                }

                // 목적지 system_ID에 대한 정책값 추가
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx != 0)
                    {
                        // 망마다 정책정보 설정
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 정리
                strDestNetOverData += ",0";

            }

        }

        if (dicDestSysPos == null || dicDestSysPos.Count < 1)   // 3망 전송상황아님-Server 정책
            strDestNetOverData = "";

        return true;

    }

    public async void FileTransProgress(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }

        if (e.count == -100)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0092");           // 파일 압축/암호화 도중 오류가 발생하였습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }
        if (e.count == -200)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }
        if (e.count == -300)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 파일 정보를 읽어 올 수 없습니다.
            ShowMessage("error", strMsg);
            await refTransProgress.closePopUp();
            return;
        }

        if (e.count >= 100)
        {
            strMsg = XmlConf.GetInfoMsg("I_0029");   // 파일 전송이 완료되었습니다.

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData.GetUseOverNetwork2() && dicDestSysPos != null && dicDestSysPos.Count > 1)
                strMsg = strDestNetWork + ", " + strMsg; // ", "

            if (refTransProgress.GetOpen() == true)
            {
                ShowMessage("info", strMsg);
                InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileTrans, "", strMsg);
            }

            try
            {
                await dropFile.DataClear();
                FileList?.Clear();  // approveExt 결재없는 전송때, List중 결재없는 목록만 별도 생성한것도 정리
                CLog.Information($"dropFile.DataClear - !");
            }
            catch (Exception err)
            {
                // error
                CLog.Error($"dropFile.DataClear - error:{err.Source} - Msg : {err.Message}");
            }

            strBindTitle = "";
            strBindDesc = "";
            SendDayFileInfo();

            await refTransProgress.closePopUp();

            return;
        }

        else if ((e.count >= 0) && (e.count <= 50))
        {
            refTransProgress.SetProgressText(true, true);                // 압축 및 암호화  진행 중
            refTransProgress.ChangeProgress(e.count);
        }
        else if ((e.count > 50) && (e.count < 100))
        {
            refTransProgress.SetProgressText(true, false);               // 파일 전송 중
            refTransProgress.ChangeProgress(e.count);
        }
        else
        {
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
    }

    protected void OnSettingByGroupID(int groupID)
    {

        ActionFileSelectOK = PopUpFileSelectOK;
        action1 = AddDataList;
        action2 = RemoveDataList;
        action3 = ClearDataList;
        actionLoadFileList = LoadListFiles;

        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        HSCmdCenter.sgPageEvent.SetAddFileRMEventAdd(groupID, RMouseFileAdd);
        //HSCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(groupID, AptAndVirusNoti);

        HSCmdCenter.sgPageEvent.SetUseDayFileNotiEventAdd(groupID, UseDayFileResult);
        HSCmdCenter.sgPageEvent.SetUseDayClipNotiEventAdd(groupID, UseDayClipResult);

        HSCmdCenter.sgPageEvent.SetDayFileChangeNotiEventAdd(groupID, DayInfoFileChangeEvent);
        HSCmdCenter.sgPageEvent.SetDayClipChangeNotiEventAdd(groupID, DayInfoClipChangeEvent);

        HSCmdCenter.SetFileRecvPossible(groupID, true);

        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);

        if (bAfterApprChkHIde)
            strAfterApprove = "";

        if (bAfterApprDisable)
            bAfterCheck = false;
        else
            bAfterCheck = OpConfigSvc.GetAfterBasicChk();

        pageService.SetAfterApproveCheck(groupID, bAfterCheck);
        pageService.SetAfterApprTimeEvent(groupID, AfterApproveStatusChange);   //매시 정각에 1번씨 동작
        pageService.SetAfterApprControlCheckEvent(groupID, AfterApproveCheckedChange);   //'공통환경설정'의 사후결재 체크 속성(Checked) 상태가 변경될 시 동작

        if (groupID > -1)
            pageService.SetCurFileSendInfo(groupID, "/Transfer2/" + groupID.ToString());

        //pageService.SetCurFileSendInfo(groupID, "/Transfer2");

        string strGroupIDMenu = "";
        strGroupIDMenu = String.Format($"{groupID}-Transfer2");
        HSCmdCenter.sgPageEvent.SetUrlRedirectionSetEventAdd(strGroupIDMenu, RefreshUI);

        bool bApprEdit = false;
        bool bUseApprove = false;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {

            bURLRedirection = sgLoginData.GetURLRedirect();
            // bUseApprove = sgLoginData.GetApprove();
            bUseApprove = pageService.GetUseApproveNetOver(groupID, sgLoginData);   //결제 사용 여부 체크
            bApprEdit = sgLoginData.GetApproveAppend();                             //결제자 편집 사용 여부

            ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserData == null)
                return;

            if (!bUseApprove)
                bHideApprChooseAddBtn = true;
            else
            {
                if (!bApprEdit)
                    bHideApprChooseAddBtn = true;

                if (sgUserData != null)
                {
                    if (sgUserData.GetUserApprPos() > 1)
                        bHideApprChooseAddBtn = true;
                }

            }

            if (sgLoginData.IsVipUser() || bUseApprove == false)
                bHideApprChooseAddBtn = true;

            if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || bAfterApprChkHIde)
            {
                bAfterApprChkHIde = true;
                bAfterApprDisable = true;
                bAfterCheck = false;
                pageService.SetAfterApproveCheck(groupID, bAfterCheck);
                strAfterApprove = "";
            }
        }

        UseDayInfoDisplay();
    }


    protected override void OnInitialized()
    {
        HandleFileInputChangeAction1 = HandleFileInputChange;
        HandleFileInputChangeAction2 = HandleFileInputChange;

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        versionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
        InitText();
        OnSettingByGroupID(groupIDbyParam);
        UseUrlRedirectionByServer = GetUseUrlRedirectionByServer();

        base.OnInitialized();
    }


    public bool GetUseUrlRedirectionByServer()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        CLog.Here().Information($"GetUseUrlRedirectionByServer - groupID : {groupID}");

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        return sgLoginData.GetURLRedirect();
    }

    public bool GetUseUrlRedirectionByUser()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        CLog.Here().Information($"GetUseUrlRedirectionByUser - groupID : {groupID}");

        return OpConfigSvc.GetURLAutoTrans(groupID);

    }


    public void GetAfterChk()
    {
        bAfterCheck = (!bAfterCheck);

        int groupID = groupIDbyParam;
        if (groupID > -1)
            pageService.SetAfterApproveCheck(groupID, bAfterCheck);

        StateHasChanged();
    }

    //ApproveChooseAdd => ApproveChooseResult
    public void ApproveChooseAdd()
    {

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;
        m_apvStep = sgLoginData.GetApproveStep();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strSysID = sgLoginData.GetSysID();
        string strUserID = sgLoginData.GetUserID();
        string strUserName = sgUserData.GetUserName();
        string strTeamName = sgUserData.GetTeamName();
        strCurTeamName = strTeamName;
        string strTeamCode = sgUserData.GetTeamCode();
        int strApproveProxyRight = sgLoginData.GetTagValueInteger("APPROVEPROXYRIGHT");


        refApproverSelect_PopUp.SetInitDeptName(strCurTeamName);

        SGQueryExtend sgQuery = new SGQueryExtend();
        //string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, strUserName, strTeamName, strTeamCode, true);

        bool bApproverOnly = (strApproveProxyRight == 1) ? true : false;
        //true : 결재자 (DB 함수 값 : 1) / false :모든 사용자 (DB 함수값 : :0)
        string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, "", strTeamName, "", bApproverOnly);

        HSCmdCenter.sgPageEvent.SetDeptApprLineSearchEventAdd(groupID, ApproveChooseResult);
        HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
    }

    public async void ApproveChooseResult(int groupid, PageEventArgs e)
    {

        string approvePopupType = siteConfig.GetApproverSearchType(groupid);

        if (m_apvStep == 0 || m_apvStep == 1)   //and 와 or 결재
        {
            refApproverSelect_PopUp.InitDeptApprInsert();
            refApproverSelect_PopUp.InitApprLine();
            refApproverSelect_PopUp.BindEvent();
            OpenSelector1().Wait();
        }
        else   //and + or 결재
        {
            refApproverSelect_StepPopUp.InitDeptApprInsert();
            refApproverSelect_StepPopUp.InitApprLine();
            refApproverSelect_StepPopUp.BindEvent();
            refApproverSelect_StepPopUp.SetApprSelectChangeEvent(SetApprLineChange);
            await refApproverSelect_StepPopUp.openPopUp();
        }

        @* switch (approvePopupType)
            {
            case "SEARCH":
            if (m_apvStep == 0 || m_apvStep == 1)   //and 와 or 결재
            {
            refApproverSelect_PopUp.InitDeptApprInsert();
            refApproverSelect_PopUp.InitApprLine();
            OpenSelector1().Wait();
            }
            else   //and + or 결재
            {
            refApproverSelect_StepPopUp.InitDeptApprInsert();
            refApproverSelect_StepPopUp.InitApprLine();
            refApproverSelect_StepPopUp.BindEvent();
            refApproverSelect_StepPopUp.SetApprSelectChangeEvent(SetApprLineChange);
            await refApproverSelect_StepPopUp.openPopUp();
            }
            break;
            case "TREE":
            refApproverSelect_TreePopUp.InitDeptApprInsert();
            refApproverSelect_TreePopUp.SetApprSelectChangeEvent(SetApprLineChange);
            await refApproverSelect_TreePopUp.openPopUp();
            break;
            }*@
    }

    public async Task ReceiverChooseAdd()
    {

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strCurTeamName = sgUserData.GetTeamName();
        refReceiverSelect_PopUp.SetInitDeptName(strCurTeamName);
        refReceiverSelect_PopUp.BindEvent();
        await refReceiverSelect_PopUp.openPopUp();

        @*string receiverPopupType = OpConfigSvc.GetReceiverSearchType();
            switch (receiverPopupType)
            {
            case "SEARCH":
            string strCurTeamName = sgUserData.GetTeamName();
            refReceiverSelect_PopUp.SetInitDeptName(strCurTeamName);
            await refReceiverSelect_PopUp.openPopUp();
            break;

            case "TREE":
            await refReceiverSelect_TreePopUp.openPopUp();
            break;
            }*@
    }
    /// <summary>
    /// 매일 자정 데이터 새로고침
    /// </summary>
    private void DayInfoRefreshResult()
    {
        if (pageService.GetFileSending()) //송신 창이 열려있는 경우 Skip
            return;

        if (pageService.GetFileRecving())    //수신 창이 열려 있는 경우 skip
            return;

        //File~Clipboard 까지 새로고침 가능하도록 처리
        pageService.SetLoginComplete(groupIDbyParam, false);
        SendDayFileInfo();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    //결재자 편집 창 팝업
    private async Task OpenSelector1()
    {
        refApproverSelect_PopUp.SetApprSelectChangeEvent(SetApprLineChange);
        await refApproverSelect_PopUp.openPopUp();
    }

    public void SetApprLineChange()
    {
        ApprLine.ApproveLineChange();
    }

    /// <summary>
    /// 필수결재 확장자들로 인해 선택한 결재자로 파일 전송을 할때, 사용
    /// </summary>
    public void FileTransWithApprover()
    {
        FileTrans();

        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        stopClick();
    }

    private void ReceiverSelectOK(LinkedList<ApproverInfo> list)
    {
        refForwardLine.AssignReceiver(list);
    }

    private void changeSelectPath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
        LoadListFiles(stSelectPath);
        //StateHasChanged();
    }

    public async Task LoadJavaScript()
    {
        await JSRuntime.InvokeVoidAsync("loadJavaScript");
    }
    public void LoadJavaScriptSync()
    {
        JSRuntime.InvokeVoidAsync("loadJavaScript");
    }

    public void LogoutClearFileList()
    {
        try
        {
            if (dropFile.HsStreamList != null && dropFile.HsStreamList.Count > 0)
            {
                dropFile.bAsyncData = false; // DropClear() 직접호출하기 위해
                DropClear();
                dropFile.RemoveAllFile();
                CLog.Here().Information($"dropFile.DataClear - !");
            }
        }
        catch (Exception err)
        {
            // error
            CLog.Here().Error($"dropFile.DataClear - error:{err.Source} - Msg : {err.Message}");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        int groupID = groupIDbyParam;
        if (firstRender)
        {

            LoadListFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
            //INPUT Target Index 초기화
            JSRuntime.InvokeAsync<string>("initTransferUIPosition");
            JSRuntime.InvokeAsync<string>("initTargetInputNumber");
            JSRuntime.InvokeAsync<string>("updateFirstTransferUIIndex");
            JSRuntime.InvokeAsync<string>("updateFirstTransferUIIndex_InputFile");

            for (int i = 0; i < maxDropReference; i++)
            {
                //IFileReaderRef dropReference = fileReaderService.CreateReference(inputTypeFileElement);
                //string target = $"fileInput{i + 1}";
                //dropReference.initFileReaderService(target);
                //dropReference.SetDragTargetElementAsync(target);
                //dropReferenceList.Add(dropReference);
            }

            _dropReference = fileReaderService.CreateReference(inputTypeFileElement);
            _dropReference.initFileReaderService("fileInputTrans");
            _dropReference.SetDragTargetElementAsync("fileInputTrans");

            LoadJavaScriptSync();
            base.OnAfterRenderAsync(firstRender);

            if (pageService.GetLoginComplete(groupID) != true)
            {
                SendDayFileInfo();
            }
            else
                UseDayInfoDisplay();

            //로그인 팝업 샘플 2020/07/01 YKH
            //await OpenLogIn();
            StateHasChanged();

            //if (!SGAppMgrSvc.OpConfigInfoService.GetUseDashBoard())
            if (SGAppMgrSvc.OpConfigInfoService.GetMainPageType() == PAGE_TYPE.TRANSFER)
            {
                SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
                if (sgLoginData == null)
                    return;


                if (ClientPatch(sgLoginData))
                {
                    string strSvrVersion = sgLoginData.GetServClientVersion();
                    refUpdate_PopUp.SetVersionText(strSvrVersion);
                    refUpdate_PopUp.SetType(0);
                    //refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseForceUpdate())
                    {
                        ClientUpgradeExeEvent clientUpdateExe = null;
                        clientUpdateExe = HSCmdCenter.sgPageEvent.GetClientUpgradeExeNotiEvent();
                        if (clientUpdateExe != null)
                            clientUpdateExe();
                    }
                    else
                    {
                        refUpdate_PopUp.openPopUpSync();
                    }

                    return;
                }
            }
        }



        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;
            groupID = groupIDbyParam;

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData != null)
            {
                if (sgLoginData.GetUseOverNetwork2())
                {
                    dicDestSysPos = pageService.GetTargetSystemList(groupID);
                    if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                    {
                        if (IsCanTransferAllNet())
                        {
                            strDestNetWork = XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
                        }
                        else
                        {
                            // 기본 선택망 설정
                            foreach (var item in dicDestSysPos)
                            {
                                if (item.Value.nIdx > 0 && item.Key.Length > 0 && item.Value.strPolicy.Length != 0 && item.Value.bUseFileTrans)    // 보낼 수 있는 제일 마지막
                                {
                                    if (pageService.m_bIsMultiNetWork) // 중간에 다중접속망 일때
                                    {
                                        if (item.Value.nIdx == 1)
                                            strDestNetWork = item.Key;
                                        break;
                                    }
                                    strDestNetWork = item.Key;  // 3중망 양끝단
                                }
                            }
                        }
                    }
                }
            }

            pageService.SetLogOutFileListClearEvent(groupID, LogoutClearFileList);

            StateHasChanged();
        }

        pageService.SetDayInfoRefreshEvent(groupID, DayInfoRefreshResult);

        string approvePopupType = siteConfig.GetApproverSearchType(groupID);
        string receiverPopupType = siteConfig.GetReceiverSearchType(groupID);

        @*      if (approvePopupType == "TREE" || receiverPopupType == "TREE")
            {
            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

            //TreePopUp 구성에 사용할 DEPTINFO 요청
            HSCmdCenter.sgPageEvent.SetDeptInfoEventAdd(groupID, DeptInfoResult);                //부서 트리 정보
            HSCmdCenter.SendDeptInfo(groupID, sgLoginData.GetUserID());
            }*@

        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        stopClickSync();

        if (firstRender)
        {
            CheckContinueFileUpload();

            if (siteConfig.GetUseAccessAllDrive(groupIDbyParam))
                refFileTree.bIsOnlyDocAll = false;
        }

    }

    @*public void DeptInfoResult(int groupId)
        {
        //DEPTINFO 결과값을 Tree PopUp 별로 세팅
        string approvePopupType = OpConfigSvc.GetApproverSearchType();
        if (approvePopupType == "TREE")
        refApproverSelect_TreePopUp.SetDeptTree(groupId);

        string receiverPopupType = OpConfigSvc.GetReceiverSearchType();
        if (receiverPopupType == "TREE")
        refReceiverSelect_TreePopUp.SetDeptTree(groupId);

        }*@
    public void runConfirmAlert(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Confirm Alert");
    }

    public void runCancelAlert(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Cancel Alert");
    }

    private void onSelectFilePath(TreeEventArgs args)
    {
        stSelectPath = args.Value as string;
        Console.WriteLine("Event Trigered :" + stSelectPath);
    }

    private async Task stopClick()
    {
        object[] param = { "Message" };
        //DropZone 클릭방지코드
        //await JSRuntime.InvokeAsync<object>("stopClick");

        await JSRuntime.InvokeAsync<object>("exitLogIn");

        await JSRuntime.InvokeAsync<object>("adJustWindowsize");
    }
    private void stopClickSync()
    {
        object[] param = { "Message" };
        //DropZone 클릭방지코드
        //await JSRuntime.InvokeAsync<object>("stopClick");

        JSRuntime.InvokeAsync<object>("exitLogIn");

        JSRuntime.InvokeAsync<object>("adJustWindowsize");
    }

    private async Task RemoveAllFile()
    {
        //ClearDataList();
        await dropFile.RemoveAllFile();
    }

    private void AddDataList(string str, string type)
    {
        DragAndDropService.AddDataList(str, type);
        //DragAndDropService.AddDataList(str, type);
    }
    private void RemoveDataList(string str)
    {
        DragAndDropService.removeDataList(str);
    }
    private void ClearDataList()
    {
        DragAndDropService.clearDataList();
        //dropFile.DataClear().Wait();
    }
    [JSInvokable("AddPath")]
    public static void AddPath(string path, string type)
    {
        Console.WriteLine("AddPath Call Excuted." + path + "    Type:" + type);
        action1.Invoke(path, type);
    }
    [JSInvokable("RemovePath")]
    public static void RemovePath(string path)
    {
        Console.WriteLine("AddPath Call Excuted." + path);
        action2.Invoke(path);
    }
    [JSInvokable("ClearPath")]
    public static void ClearPath()
    {
        Console.WriteLine("ClearPath Call Excuted.");
        action3.Invoke();
    }

    public void InitText()
    {
        strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                          // 파일 전송
        strFilePath = XmlConf.GetTitle("T_FILE_FILEPATH");                              // 파일 경로
        strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");                  // 사후결재
        strLogin = XmlConf.GetTitle("T_COMMON_LOGIN");                                  // 로그인
        strUrlAutoTrans = XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO");              // URL 자동전환 사용
                                                                                        //strDayFileTransTotalSize = XmlConf.GetInfoMsg("I_0195");                        // {0} MB
                                                                                        //strDayFileTransTotalSize = String.Format(strDayFileTransTotalSize, 15000);
                                                                                        //strDayFileTransTotalCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                                                                                        //strDayFileTransTotalCount = String.Format(strDayFileTransTotalCount, 10240);
        strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송
        strFileSend = XmlConf.GetTitle("T_FILE_SENDFILE");                              // 파일 보내기
        strFileDel = XmlConf.GetTitle("T_FILE_FILEDEL");                                // 파일 삭제
        strApprLine = XmlConf.GetTitle("T_FILE_APPROVELINE");                           // 결재라인
        strApproverAdd = XmlConf.GetTitle("T_FILE_APPROVER");                           // 결재자추가
        strFileReg = XmlConf.GetTitle("T_FILE_FILEREG");                                // 파일등록

        strCurTitle = XmlConf.GetTitle("T_FILE_EMPTYTITLE");                                // 제목을 입력하십시오. (최대 60자)
        strCurDesc = XmlConf.GetTitle("T_FILE_EMPTYDESC");                                // 설명을 입력하십시오. (최대 80자)


        int groupID = groupIDbyParam;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null && !String.IsNullOrEmpty(sgLoginData.GetTransferTitle(sgLoginData.GetSystemPosition())))    // tbl_system_env에 넣어놓은 Title / Desc 가져와서 사용
            strCurTitle =sgLoginData.GetTransferTitle(sgLoginData.GetSystemPosition());
        else
        strCurTitle = XmlConf.GetTitle("T_FILE_EMPTYTITLE");                                // 제목을 입력하십시오. (최대 60자)

        if (sgLoginData != null && !String.IsNullOrEmpty(sgLoginData.GetTransferDescription(sgLoginData.GetSystemPosition())))
            strCurDesc =sgLoginData.GetTransferDescription(sgLoginData.GetSystemPosition());
        else
        strCurDesc = XmlConf.GetTitle("T_FILE_EMPTYDESC");                                // 설명을 입력하십시오. (최대 80자)

    }

    private void OpenPreviewWindow()
    {
        ProcessStartInfo startInfo = new ProcessStartInfo("PreviewUtil");
        startInfo.WindowStyle = ProcessWindowStyle.Normal;
        startInfo.Arguments = "https://192.168.1.253:1300/viewer/CM001_Docs_Viewer.do?transSeq=202007232200000009&fileNo=1";
        // Run the external process & wait for it to finish
        using (Process proc = Process.Start(startInfo))
        {
            proc.WaitForExit();
        }
    }


    public void RMouseFileAdd(int groupID, PageEventArgs e)
    {
        Task.Delay(1000);
        StateHasChanged();

        FileAddManage fileAddmanage = new FileAddManage(groupID);

        CLog.Here().Information("TransferUI, RMouseFileAdd - groupid : {0}", groupID);

        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
        if (!fileAddmanage.RMFileExist(strRMouseFilePath))
            return;

        @*        ISGSideBarUI sgSideBar = null;

            // Active Menu 강제 설정
            if ((sgSideBar = SideBarUISvc.FindSubMenu(groupID, 0, 0)) == null)
            return;*@

        if (pageService.GetScrLocking() == true)
            return;

        if (pageService.m_nCurViewPageGroupID != groupID)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = groupID;
        groupIDbyParam = groupID;

        @*        KeyboardEventArgs eventArgs = new KeyboardEventArgs();
            eventArgs.Key = "Enter";
            SideBarUISvc.ChgActiveMenu(eventArgs, sgSideBar);*@

        //        OnInitialized();

        //OnAfterRenderAsync(true);

        //MyNavigationManager.NavigateTo("/Transfer");
        Task.Delay(1000);

        List<string> ListFile = fileAddmanage.LoadRMFileAdd(strRMouseFilePath);
        if (dropFile != null)
        {
            dropFile.RMouseFileAddAction(ListFile);
        }

        StateHasChanged();

    }

    public void TransCancel(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Trans Cancel Alert");
        HSCmdCenter.SendFileTransCancel();

        string strMsg = XmlConf.GetInfoMsg("I_0194");   // 파일 전송이 취소되었습니다.
        ShowMessage("info", strMsg);
    }

    /// <summary>
    /// 사후결제 체크
    /// </summary>
    public void AfterApproveStatusChange()
    {
        @*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        DateTime dt = (SGAppMgrSvc.SiteConfigInfoService.GetUseOneAClockChangeAgentTimer()) ? DateTime.Now : pageService.GetAfterApprTime(groupID);
        pageService.SetSvrTime(groupID, dt, sgLoginData);

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        bAfterApprChkHIde = sgLoginData.GetAfterChkHide();

        bool bAfterAppr = sgLoginData.GetUseAfterApprove(dt);
        pageService.SetAfterApprChkHIde(groupID, bAfterApprChkHIde);
        pageService.SetAfterApprEnable(groupID, bAfterAppr);

        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);
        if (bAfterApprChkHIde)
            strAfterApprove = "";
        else
            strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");

        if (bAfterApprDisable)
            bAfterCheck = false;
        else
            bAfterCheck = OpConfigSvc.GetAfterBasicChk();


        // 사후결재
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos() > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || bAfterApprChkHIde)
        {
            bAfterApprChkHIde = true;
            bAfterApprDisable = true;
            bAfterCheck = false;
            strAfterApprove = "";
        }
        pageService.SetAfterApproveCheck(groupID, bAfterCheck);
        StateHasChanged();
    }

    /// <summary>
    /// 사후결제 체크상태 변경 (From 공통환경설정)
    /// </summary>
    public void AfterApproveCheckedChange()
    {
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        if (bAfterApprChkHIde)       //현재 '사후결재 체크'가 표시되지 않으면 별도 컨트롤 하지 않는다.
            return;

        bAfterCheck = OpConfigSvc.GetAfterBasicChk();
        pageService.SetAfterApproveCheck(groupID, bAfterCheck);
        StateHasChanged();
    }
    /*
    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;
        bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);
        await refVirusReport.openPopUp();

    }
    */

    public void UseDayFileResult(int groupID, FileAndClipDayArgs e)
    {
        pageService.SetDayUseFile(groupID, e.Size, e.Count);

        CLog.Here().Information($"FileTrans - ### - USED size({e.Size}), count({e.Count}) info recv (groupID : {groupID})! ");

        if (pageService.GetDayFileCountUnLimited(groupID) == true)
        {
            strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayFileTransRemainCountPer = "100%";
        }
        else
        {
            strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
            strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
            strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
        }

        if (pageService.GetDayFileSizeUnLimited(groupID) == true)
        {
            strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayFileTransRemainSizePer = "100%";
        }
        else
        {
            strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
            strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
        }

        if (pageService.GetLoginComplete(groupID) != true)
        {
            SendDayClipInfo();
            return;
        }
        else
        {
            bool bFilePreView = pageService.GetDayInfoPrev(groupID);
            if (bFilePreView == false)
            {
                DayInfoChange();
                return;
            }
        }
        UseDayInfoDisplay();
        StateHasChanged();
    }

    public void UseDayClipResult(int groupID, FileAndClipDayArgs e)
    {
        pageService.SetDayUseClip(groupID, e.Size, e.Count);

        if (pageService.GetDayClipCountUnLimited(groupID) == true)
        {
            strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayClipRemainCountPer = "100%";
        }
        else
        {
            strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
            strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
            strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
        }

        if (pageService.GetDayClipSizeUnLimited(groupID) == true)
        {
            strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayClipRemainSizePer = "100%";
        }
        else
        {
            strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
            strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
        }

        if (pageService.GetLoginComplete(groupID) != true)
        {
            pageService.SetLoginComplete(groupID, true);
        }
        else
        {
            bool bFilePreView = pageService.GetDayInfoPrev(groupID);
            if (bFilePreView == true)
            {
                DayInfoChange();
                return;
            }
        }
        UseDayInfoDisplay();
        StateHasChanged();
    }

    public void UseDayInfoDisplay()
    {
        @*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView)
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송

            if (pageService.GetDayFileCountUnLimited(groupID) == true)
            {
                strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainCountPer = "100%";
            }
            else
            {
                strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
                strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayFileSizeUnLimited(groupID) == true)
            {
                strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainSizePer = "100%";
            }
            else
            {
                strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
                strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
            }
        }
        else
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_CLIP");                     // 남은 일일 클립보드

            if (pageService.GetDayClipCountUnLimited(groupID) == true)
            {
                strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainCountPer = "100%";
            }
            else
            {
                strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
                strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayClipSizeUnLimited(groupID) == true)
            {
                strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainSizePer = "100%";
            }
            else
            {
                strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
                strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
            }

            strDayFileTransRemainCount = strDayClipRemainCount;
            strDayFileTransRemainSize = strDayClipRemainSize;
            strDayFileTransRemainCountPer = strDayClipRemainCountPer;
            strDayFileTransRemainSizePer = strDayClipRemainSizePer;
            SendDayClipInfoFooterEvent(groupID);
        }
    }

    public void SendDayFileInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayFileTransInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HSCmdCenter.SendUseDayFileTransInfo(groupID, strUserID, strQuery);
    }

    public void SendDayClipInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();


        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HSCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }


    public void DayInfoChange()
    {
        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;


        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        pageService.SetDayInfoPrev(groupID, !bFilePreView);
        bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView)
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송

            if (pageService.GetDayFileCountUnLimited(groupID) == true)
            {
                strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainCountPer = "100%";
            }
            else
            {
                strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
                strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayFileSizeUnLimited(groupID) == true)
            {
                strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainSizePer = "100%";
            }
            else
            {
                strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
                strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
            }
        }
        else
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_CLIP");                     // 남은 일일 클립보드

            if (pageService.GetDayClipCountUnLimited(groupID) == true)
            {
                strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainCountPer = "100%";
            }
            else
            {
                strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
                strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
            }

            if (pageService.GetDayClipSizeUnLimited(groupID) == true)
            {
                strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainSizePer = "100%";
            }
            else
            {
                strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
                strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
            }

            strDayFileTransRemainCount = strDayClipRemainCount;
            strDayFileTransRemainSize = strDayClipRemainSize;
            strDayFileTransRemainCountPer = strDayClipRemainCountPer;
            strDayFileTransRemainSizePer = strDayClipRemainSizePer;
            SendDayClipInfoFooterEvent(groupID);
        }
        StateHasChanged();
    }

    public void SendDayClipInfoFooterEvent(int groupID)
    {
        DayInfoFooterNotiEvent dayInfoFooterEvent = null;
        dayInfoFooterEvent = HSCmdCenter.sgPageEvent.GetDayInfoFooterNotiEvent(groupID);
        if (dayInfoFooterEvent != null)
            dayInfoFooterEvent(groupID);
    }

    public void DayInfoFileChangeEvent(int groupID)
    {
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView != true)
            DayInfoChange();
    }
    public void DayInfoClipChangeEvent(int groupID)
    {
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView == true)
            DayInfoChange();
    }

    public void LoadListFiles(string stPath)
    {
        sgFile.Clear();
        try
        {
            if (Directory.GetParent(stPath) != null)
            {
                string strUpperPath = Directory.GetParent(stPath).FullName;
                if (strUpperPath != null && strUpperPath.Length > 0)
                {
                    SGFileInfo fileEntry = new SGFileInfo();
                    fileEntry.Name = "..";
                    fileEntry.Size = 0;
                    fileEntry.Path = strUpperPath;
                    fileEntry.Ext = "";
                    fileEntry.Type = 3;         //상위디렉토리 버튼
                    sgFile.Add(fileEntry);
                }
            }
        }
        catch (Exception ex0)
        {
            CLog.Here().Error("GetParentError:" + ex0.Message);
        }

        IEnumerable<string> fList = null;
        try
        {
            //EnumerationOptions opt = new EnumerationOptions { IgnoreInaccessible = true };

            fList = Directory.EnumerateFileSystemEntries(stPath)
            .Where(f => (new System.IO.FileInfo(f).Attributes & (FileAttributes.Hidden)) == 0);
        }
        catch (UnauthorizedAccessException e)
        {
            CLog.Here().Error("UnauthorizedAccessException:" + e.Message);
            Console.WriteLine(e.Message);
        }
        catch (Exception e2)
        {
            CLog.Here().Error("Exception:" + e2.Message);
            Console.WriteLine(e2.Message);
        }

        try
        {
            if (fList != null)
            {
                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = 0;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = "";
                        fileEntry.Type = 2;
                        sgFile.Add(fileEntry);
                    }

                }

                foreach (string fname in fList)
                {
                    System.IO.FileInfo fInfo = new System.IO.FileInfo(fname);
                    FileAttributes attr = fInfo.Attributes;
                    if ((attr & FileAttributes.Directory) != FileAttributes.Directory)
                    {
                        SGFileInfo fileEntry = new SGFileInfo();
                        fileEntry.Name = fInfo.Name;
                        fileEntry.Size = fInfo.Length;
                        fileEntry.Path = fInfo.FullName;
                        fileEntry.Ext = fInfo.Extension;
                        fileEntry.Type = 1;
                        sgFile.Add(fileEntry);
                    }
                }
            }
        }
        catch (Exception ex3)
        {
            CLog.Here().Error("Exception:" + ex3.Message);
        }

        string listHtml = makeSubFileList();
        object[] param = { "divFileList", listHtml };
        JSRuntime.InvokeAsync<object>("appendHtml", param);
        StateHasChanged();
    }

    private string makeSubFileList()
    {
        StringBuilder stRtn = new StringBuilder();
        if (sgFile != null && sgFile.Count > 0)
        {
            if (dragLabel > 0) { dragLabel = 1; }
            foreach (SGFileInfo item in sgFile)
            {
                if (item.Type == 3)
                {
                    stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "' onclick='refreshList(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                    stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    stRtn.Append(item.getNameStr(false));
                    stRtn.Append(@"</div>");
                }
                else
                {
                    if (item.Type == 1)
                    {
                        stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "'>");
                        stRtn.Append(@"<i class='fas fa-file' style='color:#8a8a8a;'></i>&nbsp;");
                    }
                    else
                    {
                        stRtn.Append(@"<div data-draggable='item' class='draggable' draggable='true' aria-grabbed='false' title='" + item.Name + "' value='" + item.Path + "' label='" + dragLabel + "' ondblclick='refreshList(\"" + item.Path.Replace(@"\", @"\\") + "\");'>");
                        stRtn.Append(@"<i class='fas fa-folder' style='color:#f0cb00;'></i>&nbsp;");
                    }
                    stRtn.Append(item.getNameStr(false) + " " + item.getSizeStr());
                    stRtn.Append(@"</div>");
                }
                if (dragLabel > 0) { dragLabel++; }
            }
        }
        return stRtn.ToString();
    }

    private void CheckContinueFileUpload()
    {
        int groupId = groupIDbyParam;
        ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupId);

        SGReSendData sGReSendData = SQLiteDB.SelectReSendInfo(groupId, sgUserInfo.UserSeq);
        if (sGReSendData != null)
        {
            if (!File.Exists(sGReSendData.HSZNAME))
            {
                SQLiteDB.DeleteReSendInfo(sGReSendData.RESENDID);
                return;
            }


            if (refSGAlertContinueFileTrans != null)
                refSGAlertContinueFileTrans.openPopUp(XmlConf.GetTitle("T_DATA_CONTINUE_TRANS"), XmlConf.GetTitle("T_DATA_CONTINUE_FILE_TRANS"), 2, groupId, sGReSendData.RESENDID.ToString());
        }
    }

    private void ContinueFileUpload(string obj)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupId = 0;
        if (sgSideBar != null)
            groupId = sgSideBar.GroupId;

        ISGUserInfo userInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupId);


        HsNetWork hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);

        if (hsNetWork == null)
            return;
        if (!hsNetWork.IsUserBind)
            return;

        long hsNetPartSize = hsNetWork.stCliMem.FilePartSize;

        SGReSendData reSendData = SQLiteDB.SelectReSendInfo(Convert.ToInt32(obj));

        if (reSendData == null)
        {
            SQLiteDB.DeleteReSendInfo(Convert.ToInt32(obj));
            return;
        }

        if (!File.Exists(reSendData.HSZNAME))
        {
            SQLiteDB.DeleteReSendInfo(Convert.ToInt32(obj));
            return;
        }

        Dictionary<string, string> values = CsFunction.ByteArrayToObject(reSendData.TRANSINFO as byte[]) as Dictionary<string, string>;

        long fileSize = Convert.ToInt64(values["FILESIZE"]);
        int nTotalPart = (int)(fileSize / hsNetPartSize) + 1;


        HSCmdCenter.sgPageEvent.SetQueryReciveEvent(groupId, eCmdList.eFILEUPLOADINFO, ContinueFileUploadRev);

        HSCmdCenter.SendFileUploadInfo(groupId, userInfo.UserId, values["MID"], nTotalPart.ToString(), fileSize.ToString());

    }

    private void ContinueFileUploadCancel(string obj)
    {

        SGReSendData reSendData = SQLiteDB.SelectReSendInfo(Convert.ToInt32(obj));
        if (reSendData != null)
        {
            if (File.Exists(reSendData.HSZNAME))
                File.Delete(reSendData.HSZNAME);
        }

        SQLiteDB.DeleteReSendInfo(Convert.ToInt32(obj));

        return;
    }

    private void ContinueFileUploadRev(int groupId, object[] e)
    {
        if (pageService.GetConnectStatus(groupIDbyParam) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        // 3중망일때 목적지 점검
        if (dicDestSysPos != null && dicDestSysPos.Count > 0 && strDestNetWork.Length < 1)
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0234"));
            return;
        }

        string strDestNetOverData = "0";

        if (GetNetOverDataPolicy(ref strDestNetOverData) == false)
        {
            return;
        }

        CLog.Here().Information("NETOVERDATA(Send To Server-###) : {0}", strDestNetOverData);

        HSCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupIDbyParam, FileTransProgress);
        refTransProgress.SetProgressText(true, true);
        refTransProgress.ChangeProgress(0);
        refTransProgress.nGroupID = groupIDbyParam;
        Task.Run(async () => { await refTransProgress.openPopUp(); });
        Task.Run(async () => { await Task.Delay(1000); });

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupIDbyParam);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupIDbyParam);
        if (sgUserData == null)
            return;

        SGReSendData sgReSendData = SQLiteDB.SelectReSendInfo(groupIDbyParam, sgUserData.UserSeq);
        if (sgReSendData == null)
            return;

        SGData sgData = e[0] as SGData;
        string reason = sgData.GetBasicTagData("REASON");
        string str = sgData.GetEncTagData("RESULT");
        int recvFileSize = 0;
        if (!String.IsNullOrEmpty(sgData.GetBasicTagData("RECVFILESIZE")))
            recvFileSize = Convert.ToInt32(sgData.GetBasicTagData("RECVFILESIZE"));


        Dictionary<string, string> sendValues = CsFunction.ByteArrayToObject(sgReSendData.TRANSINFO as byte[]) as Dictionary<string, string>;

        sendValues["CLIENTID"] = sgUserData.UserId;

        HSCmdCenter.ContinueSendFileTrans(groupId, sendValues, strDestNetOverData, sgReSendData.HSZNAME, recvFileSize);
    }

    private void doClick(int DirType, string Path)
    {
        LoadListFiles(Path);
    }
    [JSInvokable("JSLoadListFiles")]
    public static void JSLoadListFiles(string path)
    {
        actionLoadFileList.Invoke(path);
    }

    //드래그앤드랍 전용코드
    private async Task DropClear()
    {
        int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumberNoIncrease");

        //int i = 1;
        //foreach (IFileReaderRef dropReference in dropReferenceList)
        //{
        //    string target = $"fileInput{i}";
        //    object[] param = { target };
        //    await JSRuntime.InvokeAsync<object>("removeAllFileList", param);

        //    await dropReference.initFileReaderService(target);
        //    await dropReference.SetDragTargetElementAsync(target);
        //    await dropReference.ClearValue();
        //    i++;
        //}
        string target = $"fileInputTrans";
        object[] param = { target };
        await JSRuntime.InvokeAsync<object>("removeAllFileList", param);

        if (_dropReference != null)
        {
            await _dropReference.initFileReaderService(target);
            await _dropReference.SetDragTargetElementAsync(target);
            await _dropReference.ClearValue();
        }

        //if (nTargetNumber >= 10)
        //{

        //    int groupID = 0;
        //    groupID = groupIDbyParam;
        //    MyNavigationManager.NavigateTo("/Transfer2/" + groupID.ToString());
        //}

        CLog.Information("[CLEAR] 삭제");
    }

    [JSInvokable("NotifyChange")]
    public static void NotifyChange(FileListEntryImpl[] files)
    {
        HandleFileInputChangeAction1.Invoke(files, true);
    }
    [JSInvokable("LogWrite")]
    public static void LogWrite(string str)
    {
        Debug.WriteLine(str);
        CLog.Information(str);
    }
    [JSInvokable("NotifyChange2")]
    public static void NotifyChange2(FileListEntryImpl[] files)
    {
        HandleFileInputChangeAction2.Invoke(files, false);
    }

    private async void HandleFileInputChange(IFileListEntry[] files, bool bChange)
    {
        if (bChange == true)
            dropFile.bHandleFileFlag = true;

        //if (files == null || files.Length == 0)
        //    return;

        //파일첨부 10회 제한
        //int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumberNoIncrease");
        //if (nTargetNumber >= 10)
        //{
        //    string strMsg = XmlConf.GetWarnMsg("W_0190");
        //    ShowMessage("warning", strMsg);
        //    return;
        //}

        CLog.Information("[HandleFileInputChange]파일드랍 이벤트 수신, 갯수:" + files.Length);
        foreach (var file in files)
        {
            CLog.Information("[HandleFileInputChange]파일명:" + file.Name);
        }

        dropFile.fileSizeError = false;
        dropFile.fileTypeError = false;
        if (files != null)
        {
            foreach (var file in files)
            {

                bool error = false;
                if (dropFile.bViewDropFileAddError)
                {
                    if (file.Size > MaxFileSize)
                    {
                        error = true;
                        dropFile.fileSizeError = true;
                    }
                }

                //중복제거
                bool bFind = false;
                foreach (var item in dropFile.HsStreamList)
                {
                    if (item.FileName == file.Name)
                    {
                        bFind = true;
                        break;
                    }
                }
                if (bFind == true)
                    continue;

                //keep the good files
                if (!error) { }
            }
        }

        await SubFileAddAsync();
    }

    private async Task SubFileAddAsync()
    {
        //int nTargetNumber = await JSRuntime.InvokeAsync<int>("getTargetInputNumber");

        string targets = new string("fileInputTrans");
        IEnumerable<IFileReference> files = null;
        IEnumerable<IFileReference> dirs = null;
        //IFileReaderRef dropRef = null;

        //await Task.Delay(100);

        IFileReaderRef dropReference = _dropReference;
        await dropReference.initFileReaderService(targets);
        await dropReference.SetDragTargetElementAsync(targets);
        await dropReference.IsDragTargetElement(targets);
        //System.Threading.Thread.Sleep(1000);
        await Task.Delay(500);
        await dropReference.AppendDragTargetElement(targets);
        await dropReference.ReadRightCheck(targets);
        files = await dropReference.EnumerateFilesAsync();
        dirs = await dropReference.EnumerateDirsAsync();


        if (files == null || files.Count() == 0)
        {
            string strMsg = XmlConf.GetWarnMsg("W_0255");
            ShowMessage("warning", strMsg);
            return;
        }

        //파일 등록처리 조건 : 등록 시도 된 파일이 모두 정상적인 경우 OR 부분등록 옵션이 설정된 경우 - 2022.10.05 BY KYH
        bool usePartialFileAdd = SGAppMgrSvc.OpConfigInfoService.GetUsePartialFileAddInTransfer();

        var fileExamResult = await dropFile.SubFileAddAsync(files);
        bool existErrInExamResult = fileExamResult.Item2;
        if (!existErrInExamResult || usePartialFileAdd)
        {
            List<HsStream> folderList = await dropFile.SubDirAddAsync(dirs);
            List<HsStream> fileList = fileExamResult.Item1;
            List<HsStream> finalList = dropFile.ReSortFile(folderList, fileList);
            await dropFile.UpLoadFile(finalList);
        }

        //object[] param = { "fileInput" + nTargetNumber };
        //await JSRuntime.InvokeAsync<string>("hideElement", param);

        //nTargetNumber++;
        //if (nTargetNumber > 10)
        //    nTargetNumber = 1;
        //object[] param2 = { "fileInput" + nTargetNumber };
        //await JSRuntime.InvokeAsync<string>("showElement", param2);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="sgLoginData"></param>
    /// <returns></returns>
    public bool ClientPatch(SGLoginData sgLoginData)
    {

        if (sgLoginData == null)
            return false;
        bool bUpdate = sgLoginData.GetClientUpgrade();
        if (!bUpdate)
            return false;

        string strSvrCliVersion = sgLoginData.GetServClientVersion();
        if (strSvrCliVersion.Equals(""))
            return false;
        strSvrCliVersion = strSvrCliVersion.ToUpper();
        CLog.Here().Information("TransferUI Server Client Version {0}", strSvrCliVersion);
        string strCliVersion = HSCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
            return false;
        strCliVersion = strCliVersion.ToUpper();

        return versionConfigSvc.isUpperVersion(strSvrCliVersion, strCliVersion);

        //return true;

        //if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
        //{
        //    return true;
        //}
        //else
        //    return false;

    }

    public void InsertMessage(NOTI_TYPE type, int groupID, LSIDEBAR menuCategory, eMsgType eMType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertMessageTitle(eMType);
        string strNotiContent = body;
        SQLiteDB.InsertNotiInfo(type, groupID, strUserSeq, "0", menuCategory, path, "", strHead, strNotiContent);

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HSCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HSCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HSCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HSCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }
    /// <summary>
    /// 홈으로 이동
    /// </summary>
    private void HomeMove()
    {

        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }

    /// <summary>
    /// 3망일때, 전체전송기능 사용해도 되는 상황인지 판단
    /// </summary>
    /// <returns></returns>
    public bool IsCanTransferAllNet()
    {

        // Agent 설정에 모든망 전송 기능이 있는지 확인
        if (SGAppMgrSvc.OpConfigInfoService.GetUseNetOverAllsend() == false)
            return false;

        // 3망 설정상황이 아니면
        if (dicDestSysPos == null || dicDestSysPos.Count < 3)
            return false;


        // 다접속 상황이면
        if (pageService.m_bIsMultiNetWork)
            return false;

        @*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        // 파일전송 사용 권한이 없으면
        if (sgLoginData.GetFileTrans() == false)
            return false;

        // 하나라도 파일전송 권한이 없거나 정보가 이상하면
        foreach (var item in dicDestSysPos)
        {

            if (item.Value.nIdx > 0 &&
              (item.Value.strDestSysid.Length == 0 || item.Value.bUseFileTrans == false || item.Key.Length < 1))
            {
                return false;
            }
        }
        return true;
    }
    /// <summary>
    /// 공통환경설정 변경에 따른 UI 변경사항 반영 적용
    /// </summary>
    /// <param name="groupid"></param>
    public void RefreshUI(int groupid)
    {
        StateHasChanged();
    }

}