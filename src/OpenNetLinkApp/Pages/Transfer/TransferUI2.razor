@page "/Transfer"
@page "/Transfer/{groupIDbyParam:int}"

@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGTransfer
@using OpenNetLinkApp.Components.SGTransfer.SGTemplate
@using OpenNetLinkApp.Pages.Transfer
@using HsNetWorkSG
@using HsNetWorkSGData
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@using AgLogManager
@using OpenNetLinkApp.Pages.PCURL
@using BlazorInputFile
@using OpenNetLinkApp.Common
@using OfficeExtractor
@using Data.SGDicData.SGAlz;

@inject XmlConfService XmlConf
@inject DragAndDropService DragAndDropService
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject WebWindow Window
@inject NavigationManager MyNavigationManager
@inject PageStatusService pageService
@inject IFileReaderService fileReaderService
@inject ISGAppUpdaterService AppUpdaterSvc;

<div class="content-header">
    <div class="container-fluid">

        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strFileTrans</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <!--<li>팝업:</li>
                    <li>
                        <select class="form-control" style="width:150px;" id="popupSelect" @onchange="openPopUp">
                            <option id="0" selected="selected">없음</option>
                            <option id="1">공인인증서전송</option>
                            <option id="2">환경정보 확인중</option>
                            <option id="29">화면잠금</option>
                            <option id="30">한싹OTP</option>
                        </select>
                    </li>-->
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e => HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strFileTrans</li>
                </ol>
            </div><!-- /.col -->
        </div>


        @if (bUseFileTransForTime)
        {
            <div class="row">
                <div class="col-sm-12 text-dark" style="margin-left: 1.5rem">
                    <i class="far fa-clock mr-1"></i><span style="margin-left: 0.5rem">@strFileTransForTimeDisPlay</span>
                </div>
            </div>
        }
    </div><!-- /.container-fluid -->
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row" hidden="@bHideApprLine">
            <div class="col-md-12">
                <div class="card card-boder mb-3" style="box-shadow:none;">
                    <div class="card-body clearfix">
                        <label class="line-label border-right pr-1" style="margin-right: 5px;border-color: #b3c8e4 !important;">@strApprLine</label>
                        <ApproveLine @ref="ApprLine"></ApproveLine>
                        <label style="float:right;">
                            @if (bHideApprChooseAddBtn == false)
                            {
                                <button type="button" class="btn btn-md btn-navy" @onclick="@ApproveChooseAdd" hidden="@bHideApprChooseAddBtn">
                                    <i class="fas fa-user-plus"></i> @strApproverAdd
                                </button>
                            }
                        </label>
                    </div>
                    @if (SGAppMgrSvc.OpConfigInfoService.GetUseFileForward(groupIDbyParam))
                    {
                        <div class="card-body clearfix">
                            <label class="line-label border-right pr-1" style="margin-right: 5px;border-color: #b3c8e4 !important;">@XmlConf.GetTitle("T_FILE_RECEIVER")</label>
                            &nbsp;<ForwardLine @ref="refForwardLine"></ForwardLine>
                            <label style="float:right;">
                                <button type="button" class="btn btn-md btn-navy" @onclick="@ReceiverChooseAdd">
                                    <i class="fas fa-user-plus"></i> @XmlConf.GetTitle("T_FILE_RECEIVER_ADD")
                                </button>
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
        <!-- /.row -->
        <!-- list -->
        <div id="divTransferTemplate" style="height:60vh">
            @if (SGAppMgrSvc.OpConfigInfoService.GetTransferTemplate(groupIDbyParam) == 0)
            {
                <TransferTemplateDefault @ref="refTransferTemplateDefault" groupIDbyParam="@groupIDbyParam"
                                         bAfterCheck="@bAfterCheck" bAfterApprChkHIde="@bAfterApprChkHIde" bAfterApprDisable="@bAfterApprDisable"
                                         strDestNetWork="@strDestNetWork" dicDestSysPos="@dicDestSysPos"
                                         OnChangeAfterCheck="@GetAfterChk"
                                         OnBasicSelectOpenPopup="@openBasicSelect"
                                         OnOpenFileDialogOpenPopup="@OpenFileDialog"
                                         OnCheckApprLine="@CheckApprLine" />
            }
            else
            {
                <TransferTemplate01 @ref="refTemplate01" groupIDbyParam="@groupIDbyParam"
                                    bAfterCheck="@bAfterCheck" bAfterApprChkHIde="@bAfterApprChkHIde" bAfterApprDisable="@bAfterApprDisable"
                                    strDestNetWork="@strDestNetWork" dicDestSysPos="@dicDestSysPos"
                                    OnChangeAfterCheck="@GetAfterChk"
                                    OnBasicSelectOpenPopup="@openBasicSelect"
                                    OnOpenFileDialogOpenPopup="@OpenFileDialog"
                                    OnCheckApprLine="@CheckApprLine" />
            }
        </div>
        <div id="divRightBottomSide" class="card-footer clearfix" style="padding:.5rem 1.25rem !important; font-size:.8rem !important;">
            <div class="float-left">
                @if (UseUrlRedirectionByServer)
                {
                    if (GetUseUrlRedirectionByUser())
                    {
                        <button type="button" class="btn btn-md btn-url"><i class="fas fa-globe-asia icon"></i><span>@strUrlAutoTrans</span></button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-md btn-url"><i class="fas fa-globe-asia icon"></i><span>@XmlConf.GetTitle("T_INFO_NO_USE_URLREDIRECT")</span></button>
                    }
                }
            </div>

            <div class="float-right">

                <ul class="pagination pagination-sm m-0 ">
                    <li>@strRemainFile : </li>
                    <li style="padding:5px 10px; width:70px;">
                        <div class="progress progress-xs">
                            <div class="progress-bar bg-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @strDayFileTransRemainSizePer; vertical-align:middle;">
                                <span class="sr-only">100% Complete (success)</span>
                            </div>
                        </div>
                    </li>
                    <li><label class="form-check-label">@strDayFileTransRemainSize</label></li>
                    <li style="padding:5px 10px; width:70px;">
                        <div class="progress progress-xs">
                            <div class="progress-bar bg-info" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @strDayFileTransRemainCountPer; vertical-align:middle;">
                                <span class="sr-only">100% Complete (success)</span>
                            </div>
                        </div>
                    </li>
                    <li><label class="form-check-label">@strDayFileTransRemainCount</label></li>
                    <li><i class="fas fa-caret-square-down ch" @onclick="DayInfoChange"></i></li>
                </ul>

            </div>

        </div>
    </div>
    <a hidden data-toggle="modal" data-target="modal-transprogress"></a>
</section>

<FileSelectPopUp @ref="refFileSelectPopUp" OnSelectOK="PopUpFileSelectOK"></FileSelectPopUp>
<SGBasicSelect @ref="refSGBasicSelect" ChangeTargetSelect="sendTargetSelectChange"></SGBasicSelect>
<ReceiverSelect_PopUp @ref="refReceiverSelect_PopUp" OnSelectOK="ReceiverSelectOK"></ReceiverSelect_PopUp>
@*<ReceiverSelect_TreePopUp @ref="refReceiverSelect_TreePopUp" OnSelectOK="ReceiverSelectOK"></ReceiverSelect_TreePopUp>*@
<ApproverSelect_PopUp @ref="refApproverSelect_PopUp"></ApproverSelect_PopUp>
<ApproveExtApproverSelect_PopUp @ref="refApproveExtApproverSelect_PopUp"></ApproveExtApproverSelect_PopUp>

@*<ApproverSelect_TreePopUp @ref="refApproverSelect_TreePopUp"></ApproverSelect_TreePopUp>*@
<ApproverSelect_StepPopUp @ref="refApproverSelect_StepPopUp"></ApproverSelect_StepPopUp>
@*<Transfer_Denied @ref="refTransferDenied"></Transfer_Denied>*@
<TransProgress @ref="refTransProgress" OnCancel="TransCancel"></TransProgress>
<Update_PopUp @ref="refUpdate_PopUp"></Update_PopUp>
<SGAlert @ref="refSGAlertApproveAfter" OnConfirm="ApproveAfterTransFile" Guid="ApporveAfterAlert"></SGAlert>
<SGAlert @ref="refSGAlertContinueFileTrans" OnConfirm="ContinueFileUpload" OnCancel="ContinueFileUploadCancel" Guid="ContinueFileTrans"></SGAlert>
<SGAlert @ref="refSGAlertFileTransDelete" OnConfirm="FileTransDeleteUploadFile" Guid="FileTransFileDeleteAlert"></SGAlert>
<input type="hidden" @ref=inputTypeFileElement />

@code
{
    [Parameter]
    public int groupIDbyParam { get; set; }

    //드래그앤드랍 시작
    ElementReference inputTypeFileElement;
    List<IFileReaderRef> dropReferenceList = new List<IFileReaderRef>();
    IFileReaderRef _dropReference = null;
    int maxDropReference = 10;

    const long MaxFileSizeMB = 5000;
    const long MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB

    TransferTemplateDefault refTransferTemplateDefault;
    TransferTemplate01 refTemplate01;
    DropFileList dropFile;  //템플릿 내부의 DropFileList 태그

    //Transfer_Denied refTransferDenied;
    ReceiverSelect_PopUp refReceiverSelect_PopUp;
    //ReceiverSelect_TreePopUp refReceiverSelect_TreePopUp;
    ApproverSelect_PopUp refApproverSelect_PopUp;
    //ApproverSelect_TreePopUp refApproverSelect_TreePopUp;
    ApproverSelect_StepPopUp refApproverSelect_StepPopUp;

    ApproveExtApproverSelect_PopUp refApproveExtApproverSelect_PopUp;

    SGAlert refSGAlertApproveAfter;
    SGAlert refSGAlertContinueFileTrans;
    SGAlert refSGAlertFileTransDelete;
    TransProgress refTransProgress;

    ISGVersionConfigService versionConfigSvc;
    Update_PopUp refUpdate_PopUp;
    ForwardLine refForwardLine;
    SGBasicSelect refSGBasicSelect;

    List<SGFileInfo> sgFile = new List<SGFileInfo>();
    public int dragLabel = 1;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<TransferUI2>();
    FileSelectPopUp refFileSelectPopUp;

    public string strFileTrans = "";
    public string strFilePath = "";
    public string strAfterApprove = "";
    public string strLogin = "";
    public string strUrlAutoTrans = "";

    public string strDayFileTransRemainCount = "";
    public string strDayFileTransRemainSize = "";
    public string strDayClipRemainCount = "";
    public string strDayClipRemainSize = "";
    public string strDayFileTransRemainCountPer = "";
    public string strDayFileTransRemainSizePer = "";
    public string strDayClipRemainCountPer = "";
    public string strDayClipRemainSizePer = "";

    public string strRemainFile = "";
    public string strFileSend = "";
    public string strFileDel = "";
    public string strSelectFileDel = "";
    public string strSelectFileDelComment = "";
    public string strApprLine = "";
    public string strApproverAdd = "";
    public string strFileReg = "";

    public string strCurTeamName = "";

    public bool bAfterCheck = false;

    public string strBindTitle = "";
    public string strBindDesc = "";
    public string strCurrentTitle = ""; //각 템플릿 내에서 입력된 제목
    public string strCurrentDesc = "";  //각 템플릿 내에서 입력된 설명

    public string strFromName = "-";
    public string strToName = "-";
    ISGSideBarUIService SideBarUISvc;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService OpConfigSvc;

    /// <summary>
    /// VIP 이거나, 전결자 이거나, 결제 사용하지 못하거나, 결제자 편집 권한이 없으면 숨김처리(true)
    /// VIP 이거나,
    /// </summary>
    public bool bHideApprChooseAddBtn = false;
    ApproveLine ApprLine;

    /// <summary>
    /// 사후결재 CheckBox Hide 유무(By:서버정책, true : 숨김, false : 보여줌)
    /// </summary>
    public bool bAfterApprChkHIde = false;

    /// <summary>
    /// 사후결재 checkBox Disable 설정유무(By:서버정책, true : 사용못함, false : 사용함)
    /// </summary>
    public bool bAfterApprDisable = false;

    public bool bURLRedirection = true;

    public int nTransferTemplate = 0;

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    // 3망 - 클립보드 전송 UI
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    public string strDestNetWork = "";
    int nDrawPageGroupID = -1;          // 전달받은 groupID 별로 화면구성 - 다중접속화면구성
    int m_apvStep = 0;                  //결재유형(0:and, 1:or, 2:and+or)
    bool UseUrlRedirectionByServer = false;

    /// <summary>JS에서 받아서 템플릿에게 전달할 하위 탐색기 Load 액션</summary>
    private static Action<string> actionLoadFileList;

    private static Action<List<string>> ActionFileSelectOK;
    private static Action<string, string> actionAddDataList;
    private static Action<string> actionRemoveDataList;
    private static Action actionClearDataList;

    //Drag&Drop 관련 액션
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction1;
    private static Action<FileListEntryImpl[], bool> HandleFileInputChangeAction2;

    //결재라인
    List<Dictionary<int, string>> detailData = null;
    int cntSendQuery = 0;   //쿼리 전송 횟수
    int cntRecvQuery = 0;   //쿼리 조회 결과 수신 횟수

    // 파일목록 임시 받는 용도
    List<HsStream> FileList = null;

    bool bUseFileTransForTime = false;
    string strFileTransForTimeDisPlay = "";

    [JSInvokable("JSLoadListFiles")]    //좌측 하위 리스트에서, 폴더 더블클릭 시 호출
    public static void JSLoadListFiles(string path)
    {
        actionLoadFileList?.Invoke(path);
    }

    bool bHideApprLine = false;

    private void PopUpFileSelectOK(List<string> files)
    {
        refFileSelectPopUp.closePopUp();
        dropFile.OnDrop(files);
    }
    [JSInvokable("JSaddFileToDropZone")]
    public static void JSaddFileToDropZone(string path)
    {
        List<string> lst = new List<string>();
        lst.Add(path);

        ActionFileSelectOK.Invoke(lst); //PopUpFileSelectOK
    }
    private void sendTargetSelectChange(string value)
    {
        strDestNetWork = value;
        StateHasChanged();
    }
    private async Task openBasicSelect()
    {
        await refSGBasicSelect.openPopUp(dicDestSysPos, strDestNetWork);
    }

    private async Task OpenFileDialog()
    {
        await refFileSelectPopUp.openPopUp();
    }

    private async Task UploadFiles()
    {
        cntSendQuery = 0;
        cntRecvQuery = 0;
        int groupID = groupIDbyParam;

        try
        {
            if (pageService.GetConnectStatus(groupID) == false)
            {
                string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
                strMsg = strMsg.Replace("/r/n", "<br>");
                ShowMessage("error", strMsg);
                return;
            }

            string strTitle = strBindTitle;
            string strContents = strBindDesc;

            // 최대길이 Check 동작
            if ((strBindTitle?.Length ?? 0) > 0)
            {
                if (Encoding.UTF8.GetByteCount(strBindTitle) > 128)
                {
                    string strMsg = XmlConf.GetWarnMsg("W_0020");           //제목은 최대 한글 42자, 영문 128자 / 설명은 최대 한글 83자, 영문 250자까지 입력할 수 있습니다.
                    ShowMessage("warn", strMsg);
                    //strBindTitle = strCurrentTitle = "";
                    //strBindDesc = strCurrentDesc = "";
                    StateHasChanged();
                    return;
                }
            }

            if ((strBindDesc?.Length ?? 0) > 0)
            {
                if (Encoding.UTF8.GetByteCount(strBindDesc) > 250)
                {
                    string strMsg = XmlConf.GetWarnMsg("W_0020");           //제목은 최대 한글 42자, 영문 128자 / 설명은 최대 한글 83자, 영문 250자까지 입력할 수 있습니다.
                    ShowMessage("warn", strMsg);
                    //strBindTitle = strCurrentTitle = "";
                    //strBindDesc = strCurrentDesc = "";
                    StateHasChanged();
                    return;
                }
            }

            // 최소길이 체크 동작
            if (SGAppMgrSvc.OpConfigInfoService.GetUseMinLengthTitleDesc(groupID))
            {
                SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
                if (sgLoginData == null)
                    return;

                string strLength = sgLoginData.GetTitleMinLength();
                int nLength = 0;
                if ((strLength?.Length ?? 0) > 0)
                    nLength = Convert.ToInt32(strLength);

                if ((strBindTitle?.Length ?? 0) < nLength)
                {
                    CLog.Here().Error($"UploadFiles, Stoped(#), Title-Req-Length : {nLength}, Title-Cur-Length : {strBindTitle.Length},");
                    ShowMessage("warning", string.Format(XmlConf.GetWarnMsg("W_0290"), nLength));
                    StateHasChanged();
                    return;
                }

                strLength = sgLoginData.GetDescMinLength();
                nLength = 0;
                if ((strLength?.Length ?? 0) > 0)
                    nLength = Convert.ToInt32(strLength);

                if ((strBindDesc?.Length ?? 0) < nLength)
                {
                    CLog.Here().Error($"UploadFiles, Stoped(#), Desc-Req-Length : {nLength}, Desc-Cur-Length : {strBindDesc.Length},");
                    ShowMessage("warning", string.Format(XmlConf.GetWarnMsg("W_0291"), nLength));
                    StateHasChanged();
                    return;
                }
            }

            // 최대길이 체크 동작
            if (SGAppMgrSvc.OpConfigInfoService.GetUseMaxLengthTitleDesc(groupID))
            {
                SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
                if (sgLoginData == null)
                    return;

                string strLength = sgLoginData.GetTitleMaxLength();
                int nLength = 0;
                if ((strLength?.Length ?? 0) > 0)
                    nLength = Convert.ToInt32(strLength);

                if ((strBindTitle?.Length ?? 0) > nLength)
                {
                    CLog.Here().Error($"UploadFiles, Stoped(#), Title-Req-Length : {nLength}, Title-Cur-Length : {strBindTitle.Length},");
                    ShowMessage("warning", string.Format(XmlConf.GetWarnMsg("W_0303"), nLength));
                    StateHasChanged();
                    return;
                }

                strLength = sgLoginData.GetDescMaxLength();
                nLength = 0;
                if ((strLength?.Length ?? 0) > 0)
                    nLength = Convert.ToInt32(strLength);

                if ((strBindDesc?.Length ?? 0) > nLength)
                {
                    CLog.Here().Error($"UploadFiles, Stoped(#), Desc-Req-Length : {nLength}, Desc-Cur-Length : {strBindDesc.Length},");
                    ShowMessage("warning", string.Format(XmlConf.GetWarnMsg("W_0304"), nLength));
                    StateHasChanged();
                    return;
                }
            }

            if (pageService.GetDayFileTransCountEnable(groupID) != true)
            {
                string strMsg = XmlConf.GetErrMsg("E_0106");    // 일일 전송 최대 횟수는 {0}번 입니다./r/n일일 전송 횟수를 초과하였습니다.
                int FileMaxCount = pageService.GetDayFileMaxCount(groupID);
                strMsg = String.Format(strMsg, FileMaxCount);
                strMsg = strMsg.Replace("/r/n", "<br>");
                ShowMessage("error", strMsg);
                DayFileChangeNotiEvent dayFileChange = null;
                dayFileChange = HSCmdCenter.sgPageEvent.GetDayFileChangeNotiEvent(groupID);
                if (dayFileChange == null)
                    return;
                dayFileChange(groupID);
                return;
            }

            int TransDataCount = 0;
            TransDataCount = dropFile.GetFileListAddCount();
            if (TransDataCount <= 0)
            {
                string strMsg = XmlConf.GetWarnMsg("W_0016"); // 전송하고자 하는 파일이 없습니다./r/n전송파일을 등록해주십시오.
                strMsg = strMsg.Replace("/r/n", "<br/>");
                ShowMessage("warn", strMsg);
                return;
            }

            //전송 파일 삭제 시 경고 팝업창 생성


            // 3중망일때 목적지 점검
            if (dicDestSysPos != null && dicDestSysPos.Count > 0 && strDestNetWork.Length < 1)
            {
                ShowMessage("error", XmlConf.GetErrMsg("E_0234"));
                return;
            }

            //전송 파일 삭제 시 경고 팝업창 생성
            if (SGAppMgrSvc.OpConfigInfoService.GetDeleteUploadFile(groupID))
            {
                //결재를 사용하지만 필수결재가 아니면 결재를 사용하지 않을 경우
                if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExtRegardlessApprove(groupID))
                {
                    List<HsStream> tempList = dropFile.GetHsStreamList();
                    bool tempResult = false;

                    foreach (HsStream hs in tempList)
                    {
                        if (hs.isNeedApprove)
                        {
                            tempResult = true;
                            break;
                        }
                    }

                    if (tempResult)
                    {
                        if (refSGAlertFileTransDelete != null)
                            refSGAlertFileTransDelete.openPopUp(XmlConf.GetTitle("T_DATA_DELETE_APPROVE_TRANS_FILE"), XmlConf.GetTitle("T_DATA_DELETE_APPROVE_TRANS_FILE_COMMENT"), 2, groupID, "");
                    }
                    else
                    {
                        if (refSGAlertFileTransDelete != null)
                            refSGAlertFileTransDelete.openPopUp(XmlConf.GetTitle("T_DATA_DELETE_TRANS_FILE"), XmlConf.GetTitle("T_DATA_DELETE_TRANS_FILE_COMMENT"), 2, groupID, "");
                    }
                }
                else
                {
                    if (refSGAlertFileTransDelete != null)
                        refSGAlertFileTransDelete.openPopUp(XmlConf.GetTitle("T_DATA_DELETE_TRANS_FILE"), XmlConf.GetTitle("T_DATA_DELETE_TRANS_FILE_COMMENT"), 2, groupID, "");
                }
            }
            //사후결재 제한 체크 여부
            else if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveAfterLimit(groupID))
                await CheckApproveAfterLimit();
            else
            {

                SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
                if (sgLoginData == null)
                    return;

                //결재가 없지만 반드시 결재를 해야할 파일이 존재할 경우 결재자 등록 팝업 생성
                if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) && isFilesNeedApprove())
                {

                    refApproveExtApproverSelect_PopUp.FileList = dropFile.GetHsStreamList();

                    // 파일목록이 있는 화면을 갱신해줘야 UI상에 나타남
                    refApproveExtApproverSelect_PopUp.Refresh();

                    // 파일송신 버튼, 실행
                    refApproveExtApproverSelect_PopUp.SetFileTransWithApproveEvent(FileTransWithApprover);

                    //(0:미사용 1:제목 2:설명 3:제목,설명모두 / 최소입력자리수)
                    string strApproveExtPolicy = sgLoginData.GetTagDataBySystemEnvName("CS_EXCEPTION_EXT_REASON_TYPE");
                    bool useReason = false;
                    string initReason = "";
                    string[] policy = strApproveExtPolicy.Split("/");
                    if (policy.Length > 1)
                    {
                        if (string.IsNullOrEmpty(policy[0]) || policy[0] == "0")
                        {
                            //Default
                            initReason = strBindDesc;
                            useReason = true;
                        }
                        else if (policy[0] == "1")
                        {
                            initReason = strBindTitle;
                            useReason = true;
                        }
                        else
                        {
                            initReason = strBindDesc;
                            useReason = true;
                        }
                    }
                    else
                    {
                        initReason = strBindDesc;
                        useReason = true;
                    }

                    refApproveExtApproverSelect_PopUp.SetInitReason(useReason, initReason);
                    await refApproveExtApproverSelect_PopUp.openPopUp();
                }
                else
                {
                    FileTrans();
                    //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
                    await stopClick();
                }

            }

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"UploadFiles, Exception(MSG) : {ex.Message}");
        }

    }



    private async Task CheckApprLine()
    {
        if (SGAppMgrSvc.OpConfigInfoService.GetTransferTemplate(groupIDbyParam) == 0)
        {
            strBindTitle = refTransferTemplateDefault.strInitTitle;
            strBindDesc = refTransferTemplateDefault.strInitDesc;
        }
        else
        {
            strBindTitle = "";
            strBindDesc = "";
        }

        //strBindTitle = strCurrentTitle;
        //strBindDesc = strCurrentDesc;

        cntSendQuery = 0;
        cntRecvQuery = 0;

        int groupID = groupIDbyParam;
        HSCmdCenter.sgPageEvent.SetQueryDetailEvent(groupID, DetailResult); //결과 이벤트 메핑

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        //bool bUseApprove = sgLoginData.GetApprove();
        bool bUseApprove = pageService.GetUseApproveNetOver(groupID, sgLoginData);
        bool bApprEdit = sgLoginData.GetApproveAppend();

        if (!pageService.GetSFMChecking())
        {
            SFMRefreshEvent sfmRefreshEvent = HSCmdCenter.sgPageEvent.GetSFMRefreshEvent();
            if (sfmRefreshEvent != null)
            {
                int check = await sfmRefreshEvent(groupID);
            }
        }

        ISGUserInfo userInfoService = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        int nApprovePos = userInfoService.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID)); //sgUserData.GetUserApprpos();
        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        string strUserSeq = userInfoService.UserSeq;
        int ApprLineCount = sgApprLineData.GetApprAndLineSeqCount(strUserSeq);
        bool bIsVipUser = sgLoginData.IsVipUser();
        if (bIsVipUser == false && bUseApprove && nApprovePos < 2)
        {
            string strMsg = "";
            if ((nApprovePos < 2) && (ApprLineCount <= 0))
            {
                if (bApprEdit)
                {
                    strMsg = XmlConf.GetWarnMsg("W_0076");                   // 결재자를 추가하십시오.
                    ShowMessage("warn", strMsg);
                    return;

                }
                else if (SGAppMgrSvc.OpConfigInfoService.GetUseApprLineChkBlock(groupID))
                {
                    strMsg = XmlConf.GetWarnMsg("W_0206");                   // 결재자가 설정되어 있지 않습니다./r/n관리자에게 문의하십시오.
                    strMsg = strMsg.Replace("/r/n", "<br>");
                    ShowMessage("warn", strMsg);
                    return;
                }

            }

            else if (ApprLineCount > 0)      //
            {
                string strApprLineUserSeq = "";
                string strApprLineDeptSeq = "";
                string strApprLineName = "";
                string strUserID = sgLoginData.GetUserID();
                LinkedList<ApproverInfo> apprLinkedList = sgApprLineData.GetApprAndLineData();

                foreach (var item in apprLinkedList)
                {
                    strApprLineUserSeq = item.UserSeq;
                    strApprLineDeptSeq = item.DeptSeq;
                    strApprLineName = item.Name;

                    //사용자 유효성 검사 시, 로그인한 본인은 제외하고 확인한다.
                    if (strApprLineUserSeq == strUserSeq)
                        continue;

                    //웹매니저에서 등록된 기본결재라인 부서Seq는 "-"로 설정됨
                    //웹매니저에 등록된 최초 결재라인은 유효성 검증에서 제외
                    //if (!strApprLineDeptSeq.Equals("-"))
                    //if (strApprLineDeptSeq.Length == 18)    // Dept - seq 일때에만 검색함.


                    @*if (CsSeqFunc.isDeptSeq(strApprLineDeptSeq))
                        {
                        SendQuery(groupID, strUserID, strApprLineUserSeq, strApprLineDeptSeq);
                        cntSendQuery++;
                        }*@

                    // 부서 Seq 알수 없는 고정결재 일때에는 UserSeq만 확인
                    SendQuery(groupID, strUserID, strApprLineUserSeq, CsSeqFunc.isDeptSeq(strApprLineDeptSeq) ? strApprLineDeptSeq : "", sgLoginData.GetApproveProxyRight());
                    cntSendQuery++;
                }
            }

        }

        if (cntSendQuery == 0)
        {
            await UploadFiles();
        }
    }

    /// <summary>
    /// 쿼리문 조회
    /// </summary>
    /// <param name="groupID">그룹ID</param>
    /// <param name="strUserID">로그인 ID</param>
    /// <param name="userSeq">결재자 Seq</param>
    /// <param name="deptSeq">결재자 부서Seq</param>
    private void SendQuery(int groupID, string strUserID, string userSeq, string deptSeq, bool approveProxyRight)
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetUserConfirm(userSeq, deptSeq, approveProxyRight);
        HSCmdCenter.SendDetailQuery(groupID, strUserID, strQuery);
    }

    public void DetailResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        string reason = e.GetTagData("REASON");
        detailData = e.GetSvrRecordData2("RECORD");
        cntRecvQuery++;

        if (count == 0)
        {
            cntSendQuery = 0;
            cntRecvQuery = 0;

            bool bApprEdit = false;
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
            if (sgLoginData != null)
                bApprEdit = sgLoginData.GetApproveAppend();                             //결제자 편집 사용 여부

            string strMsg = XmlConf.GetInfoMsg(bApprEdit ? "I_0220" : "I_0233");
            //HsLog.info($"결재자 부서정보가 변경되었습니다. (결재자명={strApprLineName})");
            ShowMessage("warn", strMsg);
            return;
        }

        //쿼리 전송 횟수와 쿼리조회 수신 횟수가 같아야 검증이 완료됐다는 의미로 그 때 업로드 시작
        if (cntSendQuery == cntRecvQuery)
            Task.Run(async () => { await UploadFiles(); });
    }

    private async Task FileTrans()
    {
        int groupID = groupIDbyParam;
        HSCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupID, FileTransProgress);

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        // 시간에 의한 파일전송 기능 사용 확인
        //bool bUseFileTrans = true; //sgLoginData.GetFileTrans();

        //if (sgLoginData.GetUseFileTransForTimeMode())     // KKW-Test
        {
            if (sgLoginData.GetUseFileTransForTime() == false)
            {
                // 자료전송이 허락된 시간이 아닙니다.
                CLog.Here().Information($"FileTrans,  This is not the permitted time to transmit data!!!");
                ShowMessage("warning", XmlConf.GetWarnMsg("W_0300"));
                return;
            }
        }


        string strUserID = sgLoginData.GetUserID();
        string strMid = sgLoginData.GetTagData("MID");
        string strPolicyFlag = sgLoginData.GetTagData("POLICYFLAG");
        string strTitle = strBindTitle;
        string strContents = strBindDesc;
        //string strTitle = strCurTitle;
        //string strContents = strCurDesc;
        bool bApprSendMail = false;
        bool bAfterApprove = bAfterCheck;
        int nDlp = 0;
        string strRecvPos = "0";
        string strZipPasswd = "";
        bool bPrivachApprove = false;
        string strSecureString = "";
        string strDataType = "0";               // 파일 전송
        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserData.UserSeq;
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        string stApprLineSeq = sgApprLineData.GetApprAndLineSeqString(strUserSeq, strApprStep);
        int nUserApprPos = sgUserData.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID));

        if (sgLoginData.IsVipUser() || nUserApprPos > 1)
            stApprLineSeq = "";
        else if (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false)
        {
            if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) &&
                pageService.GetApproveExtFileTransWithApprove(groupID))
            {
                CLog.Here().Information($"FileTrans - NoApprove Policy - ApproveExt - Use Approve FileTrans !!!");
            }
            else
            {
                CLog.Here().Information($"FileTrans - NoApprove Policy - FileTrans !!!");
                stApprLineSeq = "";
            }
        }
        else
        {
            //결재를 사용하지만 필수결재가 아니면 결재를 사용하지 않을 경우
            if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExtRegardlessApprove(groupID))
            {
                List<HsStream> tempList = dropFile.GetHsStreamList();
                bool tempResult = false;

                foreach (HsStream hs in tempList)
                {
                    if (hs.isNeedApprove)
                    {
                        tempResult = true;
                        break;
                    }
                }
                if (SGAppMgrSvc.OpConfigInfoService.GetMethodApproveExtRegardlessApprove(groupID) == (int)Enums.EnumMethodApproveExtRegardlessApprove.Method01)
                {
                    if (!tempResult)
                    {
                        stApprLineSeq = "";
                    }
                }
                else if (SGAppMgrSvc.OpConfigInfoService.GetMethodApproveExtRegardlessApprove(groupID) == (int)Enums.EnumMethodApproveExtRegardlessApprove.Method02)
                {
                    if (tempResult)
                        bPrivachApprove = true;
                }
            }
        }

        // Vip / 전결재자 / 결재미사용 / 사후결재사용시간아님 일때, 사전결재전송 강제
        if (sgLoginData.IsVipUser() || nUserApprPos > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || pageService.GetAfterApprChkHide(groupID))
            bAfterApprove = false;

        // 3중망 상황 상관없이 결재Line 정보는 무조건 보내어, 서버에서 결정하도록 한다.

        FileList = dropFile.GetHsStreamList();

        if (SGAppMgrSvc.OpConfigInfoService.GetUseDlpCheck(groupID))
        {
            nDlp = 2;
            foreach (HsStream hsStream in FileList)
            {
                if (!hsStream.IsDir)
                {
                    if (hsStream.DlpCheck == 1)
                    {
                        nDlp = 1;
                        break;
                    }
                    else if (hsStream.DlpCheck == 3)
                    {
                        nDlp = 3;
                    }
                }
            }
        }


        int nTransType = 0;
        if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) &&
        isFilesNeedApprove())
        {
            if (pageService.GetApproveExtFileTransWithApprove(groupID) == false)
            {
                // 결재 없는 파일들만 송신 하기로 결정
                List<HsStream> tmpFileList = null;
                tmpFileList = dropFile.GetHsStreamList();

                FileList = null;
                FileList = new List<HsStream>();

                foreach (HsStream hs in tmpFileList)
                {
                    if (hs.isNeedApprove == false)
                    {
                        FileList.Add(hs);
                    }
                }

                if (FileList.Count < 1)
                {
                    // 결재없이 송신할 수 있는 파일이 없습니다.
                    ShowMessage("warning", XmlConf.GetWarnMsg("W_0284"));
                    return;
                }
            }

            string strApproveExtPolicy = "";
            if (sgLoginData != null)
            {
                //(0:미사용 1:제목 2:설명 3:제목,설명모두 / 최소입력자리수)
                strApproveExtPolicy = sgLoginData.GetTagDataBySystemEnvName("CS_EXCEPTION_EXT_REASON_TYPE");
                string[] strArray = null;

                if (strApproveExtPolicy.Length > 2)
                    strArray = strApproveExtPolicy.Split("/");

                if (strArray != null && strArray.Length > 1 && strArray[0].Length > 0)
                {
                    nTransType = Convert.ToInt32(strArray[0]);

                    if (nTransType == 1)
                        strTitle = refApproveExtApproverSelect_PopUp.strBindTitle;
                    else if (nTransType == 2)
                        strContents = refApproveExtApproverSelect_PopUp.strBindTitle;
                    else if (nTransType == 3)
                    {
                        strTitle = refApproveExtApproverSelect_PopUp.strBindTitle;
                        strContents = strTitle;
                    }
                }
                else
                {
                    strContents = refApproveExtApproverSelect_PopUp.strBindTitle;
                }

            }
        }



        if (strTitle.Equals(""))
        {
            int count = FileList.Count;
            string strFileName = FileList[0].FileName;
            if (count == 1)
                strTitle = strFileName;
            else
            {
                string tmpTitle = XmlConf.GetInfoMsg("I_0048");        // {0} 외 {1}건
                strTitle = String.Format(tmpTitle, strFileName, count - 1);
            }
        }

        if (strContents.Equals(""))
            strContents = "-";

        FileAddManage fileAddManage = new FileAddManage();
        strTitle = fileAddManage.GetConvertTitleDesc(true, strTitle);
        strContents = fileAddManage.GetConvertTitleDesc(true, strContents);
        strTitle = strTitle.Trim();
        strContents = strContents.Trim();

        string strDestNetOverData = "0";

        if (GetNetOverDataPolicy(ref strDestNetOverData) == false)
        {
            return;
        }

        CLog.Here().Information("NETOVERDATA(Send To Server-###) : {0}", strDestNetOverData);

        //
        refTransProgress.SetProgressText(true, true);
        refTransProgress.ChangeProgress(0);
        refTransProgress.nGroupID = groupID;
        await refTransProgress.openPopUp();
        await Task.Delay(1000);

        #region HashCheck
        foreach (HsStream hsStream in FileList)
        {
            if (!hsStream.IsDir)
            {
                try
                {
                    string fileHash = SgExtFunc.GetFileSHA384HexString(hsStream.FilePullPath);
                    if (hsStream.FileHash != fileHash)
                    {
                        string strMsg = "";
                        strMsg = XmlConf.GetErrMsg("E_0262");
                        ShowMessage("error", strMsg);
                        refTransProgress.CancelClosePopUp();
                        return;
                    }


                    FileStream stream = File.OpenRead(hsStream.FilePullPath);
                    if (hsStream.stream != null)
                    {
                        hsStream.stream.Dispose();
                    }
                    hsStream.stream = stream;
                }
                catch (Exception ex)
                {
                    string strMsg = "";
                    strMsg = XmlConf.GetErrMsg("E_0263");
                    ShowMessage("error", strMsg);
                    CLog.Here().Error($"HashCheck Error : {ex.Message}");
                    refTransProgress.CancelClosePopUp();
                    return;
                }
            }
        }
        #endregion

        #region ZipFileUnCompress
        if (SGAppMgrSvc.OpConfigInfoService.GetUseUnZipForTransfer(groupID))
        {
            try
            {
                DirectoryInfo directory = new DirectoryInfo("Temp");
                if (directory.Exists)
                {
                    foreach (var file in directory.GetFiles())
                    {
                        file.Delete();
                    }

                    foreach (DirectoryInfo dir in directory.GetDirectories())
                    {
                        dir.Delete(true);
                    }
                }
                else
                {
                    directory.Create();
                }

                Dictionary<string, List<HsStream>> listAppend = new Dictionary<string, List<HsStream>>();
                int i = 0;
                foreach (HsStream hsStream in FileList)
                {
                    if (!hsStream.IsDir)
                    {
                        string extType = Path.GetExtension(hsStream.FileName).Substring(1).ToUpper();
                        if (fileAddManage.ListCheckableCompressExtension.Contains(extType))
                        {
                            i++;
                            string tempPath = $"Temp\\Temp{i}";
                            string zipTemp = Path.Combine(tempPath, $"UnZip_{hsStream.FileName}");

                            //File.Copy(hsStream.FilePullPath, zipTemp);

                            string destPath = zipTemp.Substring(0, zipTemp.Length - extType.Length - 1);
                            DirectoryInfo destDir = new DirectoryInfo(destPath);
                            if (destDir.Exists == false) destDir.Create();

                            bool result = fileAddManage.UnZipFileForTransfer(hsStream.FilePullPath, destPath, false);
                            if (result)
                            {
                                string path = Path.GetDirectoryName(hsStream.RelativePath);
                                string startPath = hsStream.StartPath;
                                listAppend.Add(hsStream.FilePullPath, fileAddManage.GetHsListInnerFolder(destPath, path));
                            }
                        }
                    }
                }

                foreach (string filePullPath in listAppend.Keys)
                {
                    HsStream temp = FileList.Find(x => x.FilePullPath == filePullPath);
                    FileList.Remove(temp);
                    foreach (HsStream hsStream in listAppend[filePullPath])
                    {
                        FileList.Add(hsStream);
                    }
                }
            }
            catch (Exception ex)
            {
                string strMsg = "";
                strMsg = XmlConf.GetErrMsg("E_0268");
                ShowMessage("error", strMsg);
                CLog.Here().Error($"UnZip for transfer : {ex.Message}");
                refTransProgress.CancelClosePopUp();
                return;
            }
        }

        #endregion

        //수신자 목록체크(철자틀림)
        string stReceiver = "";
        if (refForwardLine != null && refForwardLine.GetReceiver().Count > 0)
        {
            char Sep = (char)'\u0002';
            foreach (ApproverInfo info in refForwardLine.GetReceiver())
            {
                if (refForwardLine.GetReceiver().Last.Value.UserSeq == info.UserSeq)
                    stReceiver += info.UserSeq;
                else
                    stReceiver += info.UserSeq + Sep;
            }
        }

        string strInterLockFlagConfirmId = "";
        if (bAfterApprove && ((stApprLineSeq?.Length ?? 0) > 0) && SGAppMgrSvc.OpConfigInfoService.GetUseDlpAfterApproveToNormal(groupID))
        {
            // interlockflag | 0(사전전환) or 1(사후전환) | 결재자정보
            strInterLockFlagConfirmId = "8|0|" + stApprLineSeq;
        }

        dropFile.SetLogDB(groupID, strUserSeq, string.Format(XmlConf.GetTitle("T_LOG_DB_FILETRANSFER"), FileList.Count)); //$"파일 전송 ({FileList.Count} 건)");
        int ret = HSCmdCenter.SendFileTrans(groupID, strUserID, strMid, strPolicyFlag, strTitle, strContents, bApprSendMail, bAfterApprove, nDlp, strRecvPos, strZipPasswd, bPrivachApprove, strSecureString, strDataType, nApprStep, stApprLineSeq, FileList, strDestNetOverData, stReceiver, strInterLockFlagConfirmId);

        if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID))
        {
            pageService.SetApproveExtFileTransWithApprove(groupID, false);
        }

        if (ret == -2)
        {

            long totalSize = 0;
            foreach (HsStream hs in FileList)
            {
                totalSize += hs.Size;
            }

            string strModulePath = System.IO.Directory.GetCurrentDirectory();
            string strDriveName = strModulePath.Substring(0, 1);
            double MFileSize = (double)(totalSize / 1024 / 1024);
            if (MFileSize <= 0)
                MFileSize = 1;
            MFileSize = MFileSize + MFileSize * 0.5;
            string strCapacity = String.Format("{0} MB", MFileSize);
            string strMsg = "";
            strMsg = XmlConf.GetErrMsg("E_0144");           // 파일전송을 하기 위해 디스크 용량이 {0} 만큼 부족합니다.&#10;디스크({1}) 용량을 확보하여 다시 시도 하십시오.
            strMsg = String.Format(strMsg, strCapacity, strDriveName);
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            refTransProgress.CancelClosePopUp();
            return;
        }


    }


    /// <summary>
    /// 첨부된 파일들 중에 결재가 필요한 파일이 하나라도 있는지 유무
    /// </summary>
    /// <returns></returns>
    public bool isFilesNeedApprove()
    {

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return false;


        // 결재 사용중이지 않을때
        if (sgLoginData.GetApprove())
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User Policy Use APPROVE!");
            return false;
        }

        // 일반.결재자만
        if (sgUserData.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID)) > 1)
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User's ApprPOS is OVER Approver!");
            return false;
        }

        // Vip가 아닐때에만
        if (sgLoginData.IsVipUser())
        {
            CLog.Here().Information($"isFilesNeedApprove (FALSE) : User is VIP!");
            return false;
        }


        List<HsStream> FileList = null;
        FileList = dropFile.GetHsStreamList();


        foreach (HsStream hs in FileList)
        {
            if (hs.isNeedApprove)
            {
                CLog.Here().Information($"isFilesNeedApprove (TRUE) - File : {hs.FileName}, FileSize : {hs.Size}, File-ModifyTime : {hs.MTime}");
                return true;
            }
        }

        return false;
    }


    /// <summary>
    /// 사후결재 체크후 파일 전송 진행
    /// </summary>
    /// <returns></returns>
    private async Task CheckApproveAfterLimit()
    {
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserInfo == null)
            return;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        bool bAfterApprove = bAfterCheck;
        string strApprStep = sgLoginData.GetTagData("APPROVESTEP");
        int nApprStep = 0;
        if (strApprStep.Equals("") != true)
            nApprStep = Convert.ToInt32(strApprStep);

        List<string> ApprLineSeq = null;
        string strUserSeq = sgUserInfo.UserSeq;
        ApprLineSeq = sgApprLineData.GetApprAndLineSeq(strUserSeq);

        string stApprLineSeq = sgApprLineData.GetApprCommaSeqString(strUserSeq);
        int nUserApprPos = sgUserInfo.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID));

        if (sgLoginData.IsVipUser() || nUserApprPos > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false))
            stApprLineSeq = "";

        // Vip / 전결재자 / 결재미사용 / 사후결재사용시간아님 일때, 사전결재전송 강제
        if (sgLoginData.IsVipUser() || nUserApprPos > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || pageService.GetAfterApprChkHide(groupID))
            bAfterApprove = false;

        if (!String.IsNullOrEmpty(stApprLineSeq) && bAfterApprove)
        {
            //사후 결재일때 결재자 사후 결재 카운트 체크
            SGQueryExtend sGQueryExtend = new SGQueryExtend();
            string sql = sGQueryExtend.GetApproveAfterCount(stApprLineSeq, Common.Enums.EnumApproveTime.After);

            HSCmdCenter.sgPageEvent.SetQueryReciveEvent(groupID, eCmdList.eAPPROVEAFTERCOUNT, ResultApproveAfter);
            HSCmdCenter.CommonSendQuery(eCmdList.eAPPROVEAFTERCOUNT, groupID, sgLoginData.GetUserID(), sql);
        }
        else
        {

            if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupID) &&
                isFilesNeedApprove())
            {

                refApproveExtApproverSelect_PopUp.FileList = dropFile.GetHsStreamList();

                // 파일목록이 있는 화면을 갱신해줘야 UI상에 나타남
                refApproveExtApproverSelect_PopUp.Refresh();

                // 파일송신 버튼, 실행
                refApproveExtApproverSelect_PopUp.SetFileTransWithApproveEvent(FileTransWithApprover);
                //(0:미사용 1:제목 2:설명 3:제목,설명모두 / 최소입력자리수)
                string strApproveExtPolicy = sgLoginData.GetTagDataBySystemEnvName("CS_EXCEPTION_EXT_REASON_TYPE");
                bool useReason = false;
                string initReason = "";
                string[] policy = strApproveExtPolicy.Split("/");
                if (policy.Length > 1)
                {
                    if (string.IsNullOrEmpty(policy[0]) || policy[0] == "0")
                    {
                        //Default
                        initReason = strBindDesc;
                        useReason = true;
                    }
                    else if (policy[0] == "1")
                    {
                        initReason = strBindTitle;
                        useReason = true;
                    }
                    else
                    {
                        initReason = strBindDesc;
                        useReason = true;
                    }
                }
                else
                {
                    initReason = strBindDesc;
                    useReason = true;
                }
                refApproveExtApproverSelect_PopUp.SetInitReason(useReason, initReason);
                await refApproveExtApproverSelect_PopUp.openPopUp();
            }
            else
            {
                FileTrans();
                //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
                await stopClick();
            }
        }
    }



    public async void ResultApproveAfter(int groupId, object[] e)
    {
        SGData sgData = e[0] as SGData;

        List<Dictionary<int, string>> result = sgData.GetSvrRecordData("RECORD");

        if ((result?.Count ?? 0) > 0)
        {
            bool checkWarring = false;
            bool checkLimit = false;

            string message = String.Empty;
            message = String.Format(XmlConf.GetWarnMsg("W_0275"), result[0][7]);

            foreach (Dictionary<int, string> dic in result)
            {
                message += String.Format(XmlConf.GetWarnMsg("W_0276"), $"{dic[2]} {dic[3]}", dic[4]);

                if (dic[6] != "0")
                {
                    checkWarring = true;
                    message += String.Format(XmlConf.GetWarnMsg("W_0277"), dic[6]);
                }
                if (dic[5] != "0")
                {
                    checkLimit = true;
                    message += String.Format(XmlConf.GetWarnMsg("W_0278"), dic[5]);
                }
            }

            if (checkLimit)
            {
                await refSGAlertApproveAfter.openPopUp(XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK"), message, 1, groupId, "2");
                return;
            }

            if (checkWarring)
            {
                await refSGAlertApproveAfter.openPopUp(XmlConf.GetTitle("T_APPCONFIG_AFTERAPPRAUTOCHECK"), message, 1, groupId, "1");
                return;
            }
        }

        FileTrans();
        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        await stopClick();

    }


    public async Task ApproveAfterTransFile(string arg)
    {
        if (arg == "1")
        {
            FileTrans();
            //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
            await stopClick();
        }
    }

    /**
    * @breif 사용자가 선택한 목적망에 대한 3망 전송 정책값을 설정(전체망포함)
    * @return false : 파일 전송 Error 처리
*/
    public bool GetNetOverDataPolicy(ref string strDestNetOverData)
    {

        strDestNetOverData = "0";

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)   // 3망전송상황
        {

            bool bUseTranferAll = false;
            if (IsCanTransferAllNet() && strDestNetWork.Length > 0 && strDestNetWork == XmlConf.GetTitle("T_TRANS_NETOVER_ALL"))
                bUseTranferAll = true;


            if (bUseTranferAll)
            {

                strDestNetOverData = "";

                // 모든에 대한 system_id,정책값,정책값 으로 구성된 값 지정
                // ex2)"E001,31,31,1/E101,31,31,0" - 통신단에서 / 를 구분자로해서 transreq를 2번보냄

                // 1번째 망에 전송 정책 설정 : "E001,31,31,1/"
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 1)
                    {
                        strDestNetOverData += item.Value.strDestSysid;
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }

                    if (item.Value.nIdx == 2)
                    {
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 복사
                strDestNetOverData += ",1/";

                // 2번째 망에 전송 정책 설정 : "E101,31,31,0"
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx == 2)
                    {
                        strDestNetOverData += item.Value.strDestSysid;
                        break;
                    }
                }

                // 모든망별 정책값 추가
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx != 0)
                    {
                        // 망마다 정책정보 설정
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 정리
                strDestNetOverData += ",0";

            }
            else
            {

                // 목적지를 지정한 system_id 찾음
                foreach (var item in dicDestSysPos)
                {
                    if (item.Key == strDestNetWork) //사용자가 선택한 system_id로 전송
                    {
                        strDestNetOverData = item.Value.strDestSysid;
                        break;
                    }
                }

                if (strDestNetOverData == "0")
                {
                    // 선택한 망에 대한 정보를 얻을 수 없습니다.
                    ShowMessage("error", XmlConf.GetErrMsg("E_0233"));
                    return false;
                }

                // 목적지 system_ID에 대한 정책값 추가
                foreach (var item in dicDestSysPos)
                {
                    if (item.Value.nIdx != 0)
                    {
                        // 망마다 정책정보 설정
                        strDestNetOverData += ",";
                        strDestNetOverData += item.Value.strPolicy;
                    }
                }

                // 정리
                strDestNetOverData += ",0";

            }

        }

        if (dicDestSysPos == null || dicDestSysPos.Count < 1)   // 3망 전송상황아님-Server 정책
            strDestNetOverData = "";

        return true;

    }

    public async void FileTransProgress(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserInfo != null)
                dropFile.SetLogDB(groupID, sgUserInfo.UserSeq, string.Format(XmlConf.GetTitle("T_LOG_DB_FILETRANSFER_FAIL"), e.result));

            DeleteTempFolder();

            await refTransProgress.closePopUp();
            return;
        }

        if (e.count == -100)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0092");           // 파일 압축/암호화 도중 오류가 발생하였습니다.
            ShowMessage("error", strMsg);
            ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserInfo != null)
                dropFile.SetLogDB(groupID, sgUserInfo.UserSeq, string.Format(XmlConf.GetTitle("T_LOG_DB_FILETRANSFER_FAIL"), e.count));

            DeleteTempFolder();

            await refTransProgress.closePopUp();
            return;
        }
        if (e.count == -200)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserInfo != null)
                dropFile.SetLogDB(groupID, sgUserInfo.UserSeq, string.Format(XmlConf.GetTitle("T_LOG_DB_FILETRANSFER_FAIL"), e.count));

            DeleteTempFolder();

            await refTransProgress.closePopUp();
            return;
        }
        if (e.count == -300)
        {
            HSCmdCenter.SendFileTransCancel();
            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 파일 정보를 읽어 올 수 없습니다.
            ShowMessage("error", strMsg);
            ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserInfo != null)
                dropFile.SetLogDB(groupID, sgUserInfo.UserSeq, string.Format(XmlConf.GetTitle("T_LOG_DB_FILETRANSFER_FAIL"), e.count));

            DeleteTempFolder();

            await refTransProgress.closePopUp();
            return;
        }

        if (e.count >= 100)
        {
            try
            {
                if (FileList != null)
                {
                    foreach (HsStream stream in FileList)
                    {
                        if (!stream.IsDir)
                        {
                            if (File.Exists(stream.FilePullPath))
                            {
                                if (stream.stream != null)
                                {
                                    stream.stream.Close();
                                    stream.stream.Dispose();
                                }
                            }
                        }
                    }
                }

                //파일 전송 완료 후 삭제
                if (SGAppMgrSvc.OpConfigInfoService.GetDeleteUploadFile(groupID))
                {
                    if (FileList != null)
                    {
                        foreach (HsStream stream in FileList)
                        {
                            if (stream.IsDir)
                            {
                                if (Directory.Exists(Path.Combine(stream.StartPath, stream.RelativePath)))
                                {
                                    Directory.Delete(Path.Combine(stream.StartPath, stream.RelativePath), true);
                                }
                            }
                            else
                            {
                                if (File.Exists(stream.FilePullPath))
                                {
                                    File.Delete(stream.FilePullPath);
                                }
                            }
                        }
                    }
                }
                await dropFile.DataClear();
                FileList?.Clear();  // approveExt 결재없는 전송때, List중 결재없는 목록만 별도 생성한것도 정리

                CLog.Here().Information($"dropFile.DataClear - !");
            }
            catch (Exception err)
            {
                // error
                CLog.Here().Error($"dropFile.DataClear - error:{err.Source} - Msg : {err.Message}");
            }

            strMsg = XmlConf.GetInfoMsg("I_0029");   // 파일 전송이 완료되었습니다.

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData.GetUseOverNetwork2() && dicDestSysPos != null && dicDestSysPos.Count > 1)
                strMsg = strDestNetWork + ", " + strMsg; // ", "

            if (refTransProgress.GetOpen() == true)
            {
                ShowMessage("info", strMsg);
                InsertMessage(NOTI_TYPE.USER, groupID, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileTrans, "", strMsg);
            }

            ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserInfo != null)
                dropFile.SetLogDB(groupID, sgUserInfo.UserSeq, XmlConf.GetTitle("T_LOG_DB_FILETRANSFER_SUCCESS"));

            //strBindTitle = strCurrentTitle = "";
            //strBindDesc = strCurrentDesc = "";
            if (SGAppMgrSvc.OpConfigInfoService.GetTransferTemplate(groupIDbyParam) == 0)
            {
                refTransferTemplateDefault.strInitTitle = "";
                refTransferTemplateDefault.strInitDesc = "";
            }

            SendDayFileInfo();

            DeleteTempFolder();

            await refTransProgress.closePopUp();

            return;
        }

        else if ((e.count >= 0) && (e.count <= 50))
        {
            refTransProgress.SetProgressText(true, true);                // 압축 및 암호화  진행 중
            refTransProgress.ChangeProgress(e.count);
        }
        else if ((e.count > 50) && (e.count < 100))
        {
            refTransProgress.SetProgressText(true, false);               // 파일 전송 중
            refTransProgress.ChangeProgress(e.count);
        }
        else
        {
            DeleteTempFolder();

            strMsg = XmlConf.GetErrMsg("E_0213");           // 파일 전송 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
    }

    private void DeleteTempFolder()
    {
        DirectoryInfo directory = new DirectoryInfo("Temp");
        if (directory.Exists)
        {
            foreach (var file in directory.GetFiles())
            {
                try
                {
                    file.Delete();
                }
                catch (Exception ex)
                {
                    CLog.Here().Error($"DeleteTempFolder, File Delete Failed : {ex.Message}");
                }
            }

            foreach (DirectoryInfo dir in directory.GetDirectories())
            {
                try
                {
                    dir.Delete(true);
                }
                catch (Exception ex)
                {
                    CLog.Here().Error($"DeleteTempFolder, DirectoryInfo Delete Failed : {ex.Message}");
                }
            }
        }
    }

    /// <summary>
    /// 자료전송 가능 시간 Display할 UI 만들어내는 함수
    /// </summary>
    /// <param name="groupID"></param>
    protected bool GetFileTransWeekTimeDisplayData(int groupID)
    {

        bool bRet = false;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {

            bRet = sgLoginData.GetFileTransWeekTimeDisplay(XmlConf.GetTitle("T_FILETRANS_USE_DAY_ALL"),
                XmlConf.GetTitle("T_FILETRANS_USE_DAY_NONE"),
                XmlConf.GetTitle("T_FILETRANS_USE_TIME_TRANSFER"),
                XmlConf.GetTitle("T_FILETRANS_TIME_CONVERT"),
                out strFileTransForTimeDisPlay);

            if (bRet)
            {
                bUseFileTransForTime = true;
            }

        } // if (sgLoginData != null)

        return bRet;
    }

    protected void OnSettingByGroupID(int groupID)
    {
        ActionFileSelectOK = PopUpFileSelectOK;
        actionAddDataList = AddDataList;
        actionRemoveDataList = RemoveDataList;
        actionClearDataList = ClearDataList;


        XmlConf.GetNetworkTitle(groupID, out strFromName, out strToName);
        HSCmdCenter.sgPageEvent.SetAddFileRMEventAdd(groupID, RMouseFileAdd);
        //HSCmdCenter.sgPageEvent.SetAPTAndVirusNotiEventAdd(groupID, AptAndVirusNoti);

        HSCmdCenter.sgPageEvent.SetUseDayFileNotiEventAdd(groupID, UseDayFileResult);
        HSCmdCenter.sgPageEvent.SetUseDayClipNotiEventAdd(groupID, UseDayClipResult);

        HSCmdCenter.sgPageEvent.SetDayFileChangeNotiEventAdd(groupID, DayInfoFileChangeEvent);
        HSCmdCenter.sgPageEvent.SetDayClipChangeNotiEventAdd(groupID, DayInfoClipChangeEvent);

        HSCmdCenter.SetFileRecvPossible(groupID, true);

        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);
        bHideApprLine = OpConfigSvc.GetUseHideApprLine(groupID); // groupIDbyParam


        if (bAfterApprChkHIde)
            strAfterApprove = "";

        if (bAfterApprDisable)
            bAfterCheck = false;
        else
            bAfterCheck = SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();

        pageService.SetAfterApproveCheck(groupID, bAfterCheck);
        pageService.SetAfterApprTimeEvent(groupID, AfterApproveStatusChange);   //매시 정각에 1번씨 동작
        pageService.SetAfterApprControlCheckEvent(groupID, AfterApproveCheckedChange);   //'공통환경설정'의 사후결재 체크 속성(Checked) 상태가 변경될 시 동작

        if (groupID > -1)
            pageService.SetCurFileSendInfo(groupID, "/Transfer2/" + groupID.ToString());

        //pageService.SetCurFileSendInfo(groupID, "/Transfer2");

        string strGroupIDMenu = "";
        strGroupIDMenu = String.Format($"{groupID}-Transfer2");
        HSCmdCenter.sgPageEvent.SetUrlRedirectionSetEventAdd(strGroupIDMenu, RefreshUI);

        bool bApprEdit = false;
        bool bUseApprove = false;
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
        {

            bURLRedirection = sgLoginData.GetURLRedirect();
            // bUseApprove = sgLoginData.GetApprove();
            bUseApprove = pageService.GetUseApproveNetOver(groupID, sgLoginData);   //결제 사용 여부 체크
            bApprEdit = sgLoginData.GetApproveAppend();                             //결제자 편집 사용 여부

            ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
            if (sgUserInfo == null)
                return;

            int nUserApprPos = sgUserInfo.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID));

            if (!bUseApprove)
                bHideApprChooseAddBtn = true;
            else
            {
                if (bApprEdit)
                    bHideApprChooseAddBtn = false;
                else
                    bHideApprChooseAddBtn = true;

                if (sgUserInfo != null)
                {
                    if (nUserApprPos > 1)
                        bHideApprChooseAddBtn = true;
                }

            }

            if (sgLoginData.IsVipUser() || bUseApprove == false)
                bHideApprChooseAddBtn = true;

            if (sgLoginData.IsVipUser() || nUserApprPos > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || bAfterApprChkHIde)
            {
                bAfterApprChkHIde = true;
                bAfterApprDisable = true;
                bAfterCheck = false;
                pageService.SetAfterApproveCheck(groupID, bAfterCheck);
                strAfterApprove = "";
            }

            //if (sgLoginData.GetUseFileTransForTimeMode())
            GetFileTransWeekTimeDisplayData(groupID);

        }

        UseDayInfoDisplay();
    }


    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        OpConfigSvc = SGAppMgrSvc.OpConfigInfoService;
        versionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
        InitText();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        int groupID = groupIDbyParam;
        nTransferTemplate = SGAppMgrSvc.OpConfigInfoService.GetTransferTemplate(groupID);
        await JSRuntime.InvokeAsync<object>("exitLogIn", new object[] { nTransferTemplate });
        await JSRuntime.InvokeAsync<object>("adJustWindowsize", new object[] { nTransferTemplate });


        CLog.Here().Information($"Transfer - OnAfterRenderAsync - Called (groupID : {groupIDbyParam})! ");

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;

            OnSettingByGroupID(groupID);
            UseUrlRedirectionByServer = GetUseUrlRedirectionByServer();

            ApprLine.groupIDbyParam = groupIDbyParam;
            ApprLine.Refresh();

            if (refForwardLine != null)
            {
                refForwardLine.groupIDbyParam = groupIDbyParam;
                refForwardLine.Refresh();
            }

            //dropFile._groupId = groupIDbyParam;
            dropFile.Refresh();
            StateHasChanged();
        }

        if (firstRender)
        {
            ApprLine.Refresh();
            //dropFile._groupId = groupIDbyParam;
            dropFile.Refresh();
            //await TransSearchCount();
        }

        base.OnAfterRender(firstRender);
    }


    public bool GetUseUrlRedirectionByServer()
    {
        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
                groupID = sgSideBar.GroupId;*@

        if (nDrawPageGroupID < 0)
            return false;

        int groupID = nDrawPageGroupID;

        CLog.Here().Information($"GetUseUrlRedirectionByServer - groupID : {groupID}");

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        return sgLoginData.GetURLRedirect();
    }

    public bool GetUseUrlRedirectionByUser()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        CLog.Here().Information($"GetUseUrlRedirectionByUser - groupID : {groupID}");

        return SGAppMgrSvc.AppConfigInfoService.GetURLAutoTrans(groupID);

    }


    public void GetAfterChk()
    {
        bAfterCheck = (!bAfterCheck);

        int groupID = groupIDbyParam;
        if (groupID > -1)
            pageService.SetAfterApproveCheck(groupID, bAfterCheck);

        StateHasChanged();
    }

    //ApproveChooseAdd => ApproveChooseResult
    public void ApproveChooseAdd()
    {

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;


        m_apvStep = sgLoginData.GetApproveStep();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        //string strSysID = sgLoginData.GetSysID();
        //string strUserID = sgLoginData.GetUserID();
        //string strUserName = sgUserData.GetUserName();
        //string strTeamName = sgUserData.GetTeamName();
        //strCurTeamName = strTeamName;
        //string strTeamCode = sgUserData.GetTeamCode();


        //각 결재자 POPUP 으로 이동
        //int strApproveProxyRight = sgLoginData.GetTagValueInteger("APPROVEPROXYRIGHT");
        //
        ////refApproverSelect_PopUp.SetInitDeptName(strCurTeamName);
        //
        //SGQueryExtend sgQuery = new SGQueryExtend();
        ////string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, strUserName, strTeamName, strTeamCode, true);
        //
        //bool bApproverOnly = (strApproveProxyRight == 1) ? true : false;
        ////true : 결재자 (DB 함수 값 : 1) / false :모든 사용자 (DB 함수값 : :0)
        //string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, "", strTeamName, "", bApproverOnly);
        //
        //HSCmdCenter.sgPageEvent.SetDeptApprLineSearchEventAdd(groupID, ApproveChooseResult);
        //HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);


        if (m_apvStep == 0 || m_apvStep == 1)   //and 와 or 결재
        {
            //Init 같은 함수는 BindEvent 항목으로 이동 (조회 이벤트는 TransferUI2 에서 받는게 아니라, 팝업에서 직접 받아 처리)
            //refApproverSelect_PopUp.InitDeptApprInsert();
            //refApproverSelect_PopUp.InitApprLine();
            refApproverSelect_PopUp.BindEvent();
            refApproverSelect_PopUp.SetApprSelectChangeEvent(SetApprLineChange);
            refApproverSelect_PopUp.openPopUp();
        }
        else   //and + or 결재
        {
            //Init 같은 함수는 BindEvent 항목으로 이동 (조회 이벤트는 TransferUI2 에서 받는게 아니라, 팝업에서 직접 받아 처리)
            //refApproverSelect_StepPopUp.InitDeptApprInsert();
            //refApproverSelect_StepPopUp.InitApprLine();
            refApproverSelect_StepPopUp.BindEvent();
            refApproverSelect_StepPopUp.SetApprSelectChangeEvent(SetApprLineChange);
            refApproverSelect_StepPopUp.openPopUp();
        }
    }

    //각 결재자 POPUP 으로 이동
    //public async void ApproveChooseResult(int groupid, PageEventArgs e)
    //{
    //
    //    string approvePopupType = OpConfigSvc.GetApproverSearchType();
    //
    //    if (m_apvStep == 0 || m_apvStep == 1)   //and 와 or 결재
    //    {
    //        //refApproverSelect_PopUp.InitDeptApprInsert();
    //        //refApproverSelect_PopUp.InitApprLine();
    //        refApproverSelect_PopUp.BindEvent();
    //        refApproverSelect_PopUp.SetApprSelectChangeEvent(SetApprLineChange);
    //    await refApproverSelect_PopUp.openPopUp();
    //    }
    //    else   //and + or 결재
    //    {
    //        refApproverSelect_StepPopUp.InitDeptApprInsert();
    //        refApproverSelect_StepPopUp.InitApprLine();
    //        refApproverSelect_StepPopUp.BindEvent();
    //        refApproverSelect_StepPopUp.SetApprSelectChangeEvent(SetApprLineChange);
    //        await refApproverSelect_StepPopUp.openPopUp();
    //    }
    //}

    public async Task ReceiverChooseAdd()
    {

        int groupID = groupIDbyParam;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strCurTeamName = sgUserData.GetTeamName();
        //팝업 첫 화면은 해당 DEPT CODE 로 조회하여 해당 부서만 조회되도록 처리
        //refReceiverSelect_PopUp.SetInitDeptName(strCurTeamName);
        refReceiverSelect_PopUp.BindEvent();
        await refReceiverSelect_PopUp.openPopUp();

        @*string receiverPopupType = OpConfigSvc.GetReceiverSearchType();
            switch (receiverPopupType)
            {
            case "SEARCH":
            string strCurTeamName = sgUserData.GetTeamName();
            refReceiverSelect_PopUp.SetInitDeptName(strCurTeamName);
            await refReceiverSelect_PopUp.openPopUp();
            break;

            case "TREE":
            await refReceiverSelect_TreePopUp.openPopUp();
            break;
            }*@
    }
    /// <summary>
    /// 매일 자정 데이터 새로고침
    /// </summary>
    private void DayInfoRefreshResult()
    {
        if (pageService.GetFileSending()) //송신 창이 열려있는 경우 Skip
            return;

        if (pageService.GetFileRecving())    //수신 창이 열려 있는 경우 skip
            return;

        //File~Clipboard 까지 새로고침 가능하도록 처리
        pageService.SetLoginComplete(groupIDbyParam, false);
        SendDayFileInfo();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void SetApprLineChange()
    {
        ApprLine.ApproveLineChange();
    }

    /// <summary>
    /// 필수결재 확장자들로 인해 선택한 결재자로 파일 전송을 할때, 사용
    /// </summary>
    public void FileTransWithApprover()
    {
        FileTrans();

        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        stopClick();
    }

    public async Task FileTransDeleteUploadFile(string arg)
    {
        if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveAfterLimit(groupIDbyParam))
            await CheckApproveAfterLimit();
        else
        {

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupIDbyParam);
            if (sgLoginData == null)
                return;

            //결재가 없지만 반드시 결재를 해야할 파일이 존재할 경우 결재자 등록 팝업 생성
            if (SGAppMgrSvc.OpConfigInfoService.GetUseApproveExt(groupIDbyParam) && isFilesNeedApprove())
            {

                refApproveExtApproverSelect_PopUp.FileList = dropFile.GetHsStreamList();

                // 파일목록이 있는 화면을 갱신해줘야 UI상에 나타남
                refApproveExtApproverSelect_PopUp.Refresh();

                // 파일송신 버튼, 실행
                refApproveExtApproverSelect_PopUp.SetFileTransWithApproveEvent(FileTransWithApprover);

                //(0:미사용 1:제목 2:설명 3:제목,설명모두 / 최소입력자리수)
                string strApproveExtPolicy = sgLoginData.GetTagDataBySystemEnvName("CS_EXCEPTION_EXT_REASON_TYPE");
                bool useReason = false;
                string initReason = "";
                string[] policy = strApproveExtPolicy.Split("/");
                if (policy.Length > 1)
                {
                    if (string.IsNullOrEmpty(policy[0]) || policy[0] == "0")
                    {
                        //Default
                        initReason = strBindDesc;
                        useReason = true;
                    }
                    else if (policy[0] == "1")
                    {
                        initReason = strBindTitle;
                        useReason = true;
                    }
                    else
                    {
                        initReason = strBindDesc;
                        useReason = true;
                    }
                }
                else
                {
                    initReason = strBindDesc;
                    useReason = true;
                }

                refApproveExtApproverSelect_PopUp.SetInitReason(useReason, initReason);
                await refApproveExtApproverSelect_PopUp.openPopUp();
            }
            else
            {
                FileTrans();
                //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
                await stopClick();
            }

        }
    }

    private void ReceiverSelectOK(LinkedList<ApproverInfo> list)
    {
        refForwardLine.AssignReceiver(list);
    }

    public async Task LoadJavaScript()
    {
        await JSRuntime.InvokeVoidAsync("loadJavaScript");
    }
    public void LoadJavaScriptSync()
    {
        JSRuntime.InvokeVoidAsync("loadJavaScript");
    }

    public void LogoutClearFileList()
    {
        try
        {
            if (dropFile.HsStreamList != null && dropFile.HsStreamList.Count > 0)
            {
                dropFile.bAsyncData = false; // DropClear() 직접호출하기 위해
                dropFile.DropClear();
                dropFile.RemoveAllFile();
                CLog.Here().Information($"dropFile.DataClear - !");
            }
        }
        catch (Exception err)
        {
            // error
            CLog.Here().Error($"dropFile.DataClear - error:{err.Source} - Msg : {err.Message}");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        CLog.Here().Information($"Transfer - OnAfterRender - Called (groupID : {groupIDbyParam})! ");

        int groupID = groupIDbyParam;
        nTransferTemplate = SGAppMgrSvc.OpConfigInfoService.GetTransferTemplate(groupID);
        JSRuntime.InvokeAsync<string>("exitLogIn", new object[] { nTransferTemplate });
        JSRuntime.InvokeAsync<string>("adJustWindowsize", new object[] { nTransferTemplate });


        if (firstRender)
        {
        }

        //strBindTitle = strCurrentTitle;
        //strBindDesc = strCurrentDesc;

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;
            groupID = groupIDbyParam;

            OnSettingByGroupID(groupID);
            UseUrlRedirectionByServer = GetUseUrlRedirectionByServer();

            JSRuntime.InvokeAsync<string>("initTransferUIPosition");
            JSRuntime.InvokeAsync<string>("initTargetInputNumber");
            JSRuntime.InvokeAsync<string>("updateFirstTransferUIIndex");
            JSRuntime.InvokeAsync<string>("updateFirstTransferUIIndex_InputFile");

            //for (int i = 0; i < maxDropReference; i++)
            //{
            //IFileReaderRef dropReference = fileReaderService.CreateReference(inputTypeFileElement);
            //string target = $"fileInput{i + 1}";
            //dropReference.initFileReaderService(target);
            //dropReference.SetDragTargetElementAsync(target);
            //dropReferenceList.Add(dropReference);
            //}

            //_dropReference = fileReaderService.CreateReference(inputTypeFileElement);
            //_dropReference.initFileReaderService("fileInputTrans");
            //_dropReference.SetDragTargetElementAsync("fileInputTrans");

            LoadJavaScriptSync();

            if (pageService.GetLoginComplete(groupID) != true)
            {
                SendDayFileInfo();
            }
            else
                UseDayInfoDisplay();


            nTransferTemplate = SGAppMgrSvc.OpConfigInfoService.GetTransferTemplate(groupID);
            //지정된 템플릿의 DropFileList
            if (nTransferTemplate == 0)
            {
                dropFile = refTransferTemplateDefault.GetDropFileList();
                actionLoadFileList = refTransferTemplateDefault.LoadListFiles;
            }
            else
            {
                dropFile = refTemplate01.GetDropFileList();
                actionLoadFileList = refTemplate01.LoadListFiles;
            }

            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData != null)
            {
                if (sgLoginData.GetUseOverNetwork2())
                {
                    dicDestSysPos = pageService.GetTargetSystemList(groupID);
                    if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                    {
                        if (IsCanTransferAllNet())
                        {
                            strDestNetWork = XmlConf.GetTitle("T_TRANS_NETOVER_ALL");
                        }
                        else
                        {
                            // 기본 선택망 설정
                            foreach (var item in dicDestSysPos)
                            {
                                if (item.Value.nIdx > 0 && item.Key.Length > 0 && item.Value.strPolicy.Length != 0 && item.Value.bUseFileTrans)    // 보낼 수 있는 제일 마지막
                                {
                                    if (pageService.m_bIsMultiNetWork) // 중간에 다중접속망 일때
                                    {
                                        if (item.Value.nIdx == 1)
                                            strDestNetWork = item.Key;
                                        break;
                                    }
                                    strDestNetWork = item.Key;  // 3중망 양끝단
                                }
                            }
                        }
                    }
                }
            }

            pageService.SetLogOutFileListClearEvent(groupID, LogoutClearFileList);

            ApprLine.groupIDbyParam = groupIDbyParam;
            ApprLine.Refresh();

            if (refForwardLine != null)
            {
                refForwardLine.groupIDbyParam = groupIDbyParam;
                refForwardLine.Refresh();
            }

            //dropFile._groupId = groupIDbyParam;
            dropFile.Refresh();
            StateHasChanged();
        }

        pageService.SetDayInfoRefreshEvent(groupID, DayInfoRefreshResult);

        string approvePopupType = OpConfigSvc.GetApproverSearchType(groupID);
        string receiverPopupType = OpConfigSvc.GetReceiverSearchType(groupID);

        @*      if (approvePopupType == "TREE" || receiverPopupType == "TREE")
            {
            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

            //TreePopUp 구성에 사용할 DEPTINFO 요청
            HSCmdCenter.sgPageEvent.SetDeptInfoEventAdd(groupID, DeptInfoResult);                //부서 트리 정보
            HSCmdCenter.SendDeptInfo(groupID, sgLoginData.GetUserID());
            }*@


        //자바스크립트로 클릭방지 코드 및 마우스 이벤트리스너 실행
        stopClickSync();

        if (firstRender)
        {
            CheckContinueFileUpload();
            base.OnAfterRender(firstRender);
        }
    }


    @*public void DeptInfoResult(int groupId)
        {
        //DEPTINFO 결과값을 Tree PopUp 별로 세팅
        string approvePopupType = OpConfigSvc.GetApproverSearchType();
        if (approvePopupType == "TREE")
        refApproverSelect_TreePopUp.SetDeptTree(groupId);

        string receiverPopupType = OpConfigSvc.GetReceiverSearchType();
        if (receiverPopupType == "TREE")
        refReceiverSelect_TreePopUp.SetDeptTree(groupId);

        }*@

    private async Task stopClick()
    {
        object[] param = { "Message" };
        //DropZone 클릭방지코드
        //await JSRuntime.InvokeAsync<object>("stopClick");
        await JSRuntime.InvokeAsync<object>("exitLogIn", new object[] { nTransferTemplate });
        await JSRuntime.InvokeAsync<object>("adJustWindowsize", new object[] { nTransferTemplate });
    }
    private void stopClickSync()
    {
        object[] param = { "Message" };
        //DropZone 클릭방지코드
        //await JSRuntime.InvokeAsync<object>("stopClick");
        JSRuntime.InvokeAsync<object>("exitLogIn", new object[] { nTransferTemplate });
        JSRuntime.InvokeAsync<object>("adJustWindowsize", new object[] { nTransferTemplate });
    }

    private void AddDataList(string str, string type)
    {
        DragAndDropService.AddDataList(str, type);
        //DragAndDropService.AddDataList(str, type);
    }
    private void RemoveDataList(string str)
    {
        DragAndDropService.removeDataList(str);
    }
    private void ClearDataList()
    {
        DragAndDropService.clearDataList();
        //dropFile.DataClear().Wait();
    }
    [JSInvokable("AddPath")]
    public static void AddPath(string path, string type)
    {
        Console.WriteLine("AddPath Call Excuted." + path + "    Type:" + type);
        actionAddDataList.Invoke(path, type);
    }
    [JSInvokable("RemovePath")]
    public static void RemovePath(string path)
    {
        Console.WriteLine("AddPath Call Excuted." + path);
        actionRemoveDataList.Invoke(path);
    }
    [JSInvokable("ClearPath")]
    public static void ClearPath()
    {
        Console.WriteLine("ClearPath Call Excuted.");
        actionClearDataList.Invoke();
    }

    public void InitText()
    {
        strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                          // 파일 전송
        strFilePath = XmlConf.GetTitle("T_FILE_FILEPATH");                              // 파일 경로
        strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");                  // 사후결재
        strLogin = XmlConf.GetTitle("T_COMMON_LOGIN");                                  // 로그인
        strUrlAutoTrans = XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO");              // URL 자동전환 사용
                                                                                        //strDayFileTransTotalSize = XmlConf.GetInfoMsg("I_0195");                        // {0} MB
                                                                                        //strDayFileTransTotalSize = String.Format(strDayFileTransTotalSize, 15000);
                                                                                        //strDayFileTransTotalCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                                                                                        //strDayFileTransTotalCount = String.Format(strDayFileTransTotalCount, 10240);
        strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송
        strFileSend = XmlConf.GetTitle("T_FILE_SENDFILE");                              // 파일 보내기
        strFileDel = XmlConf.GetTitle("T_FILE_FILEDEL");                                // 파일 삭제
        strSelectFileDel = XmlConf.GetTitle("T_FILE_SELECT_DELETE");                    // 선택 삭제
        strSelectFileDelComment = XmlConf.GetTitle("T_FILE_SELECT_DELETE_COMMENT");     // ※체크박스 선택 후 선택삭제를 클릭해 주세요.
        strApprLine = XmlConf.GetTitle("T_FILE_APPROVELINE");                           // 결재라인
        strApproverAdd = XmlConf.GetTitle("T_FILE_APPROVER");                           // 결재자추가
        strFileReg = XmlConf.GetTitle("T_FILE_FILEREG");                                // 파일등록
    }



    public void RMouseFileAdd(int groupID, PageEventArgs e)
    {
        Task.Delay(1000);
        StateHasChanged();

        FileAddManage fileAddmanage = new FileAddManage(groupID);

        CLog.Here().Information("TransferUI, RMouseFileAdd - groupid : {0}", groupID);

        string strRMouseFilePath = PageStatusData.GetRMFIlePath();
        if (!fileAddmanage.RMFileExist(strRMouseFilePath))
            return;

        @*        ISGSideBarUI sgSideBar = null;

            // Active Menu 강제 설정
            if ((sgSideBar = SideBarUISvc.FindSubMenu(groupID, 0, 0)) == null)
            return;*@

        if (pageService.GetScrLocking() == true)
            return;

        if (pageService.m_nCurViewPageGroupID != groupID)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = groupID;
        groupIDbyParam = groupID;

        @*        KeyboardEventArgs eventArgs = new KeyboardEventArgs();
            eventArgs.Key = "Enter";
            SideBarUISvc.ChgActiveMenu(eventArgs, sgSideBar);*@
        //        OnInitialized();

        //OnAfterRenderAsync(true);

        //MyNavigationManager.NavigateTo("/Transfer");
        Task.Delay(1000);

        List<string> ListFile = fileAddmanage.LoadRMFileAdd(strRMouseFilePath);
        if (dropFile != null)
        {
            dropFile.RMouseFileAddAction(ListFile);
        }

        StateHasChanged();

    }

    public void TransCancel(string arg)
    {
        System.Diagnostics.Debug.WriteLine("Callback Trans Cancel Alert");
        HSCmdCenter.SendFileTransCancel();

        string strMsg = XmlConf.GetInfoMsg("I_0194");   // 파일 전송이 취소되었습니다.
        ShowMessage("info", strMsg);
    }

    /// <summary>
    /// 사후결제 체크
    /// </summary>
    public void AfterApproveStatusChange()
    {
        @*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        DateTime dt = (SGAppMgrSvc.OpConfigInfoService.GetUseOneAClockChangeAgentTimer(groupID)) ? DateTime.Now : pageService.GetAfterApprTime(groupID);
        pageService.SetSvrTime(groupID, dt, sgLoginData);

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        bAfterApprChkHIde = sgLoginData.GetAfterChkHide();

        bool bAfterAppr = sgLoginData.GetUseAfterApprove(dt);
        pageService.SetAfterApprChkHIde(groupID, bAfterApprChkHIde);
        pageService.SetAfterApprEnable(groupID, bAfterAppr);

        bAfterApprChkHIde = pageService.GetAfterApprChkHide(groupID);
        bAfterApprDisable = !pageService.GetAfterApprEnable(groupID);
        if (bAfterApprChkHIde)
            strAfterApprove = "";
        else
            strAfterApprove = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");

        if (bAfterApprDisable)
            bAfterCheck = false;
        else
            bAfterCheck = SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();


        // 사후결재
        if (sgLoginData.IsVipUser() || sgUserData.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupID)) > 1 || (pageService.GetUseApproveNetOver(groupID, sgLoginData) == false) || bAfterApprChkHIde)
        {
            bAfterApprChkHIde = true;
            bAfterApprDisable = true;
            bAfterCheck = false;
            strAfterApprove = "";
        }
        pageService.SetAfterApproveCheck(groupID, bAfterCheck);
        StateHasChanged();
    }

    /// <summary>
    /// 사후결제 체크상태 변경 (From 공통환경설정)
    /// </summary>
    public void AfterApproveCheckedChange()
    {
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupID);
        if (sgUserData == null)
            return;

        if (bAfterApprChkHIde)       //현재 '사후결재 체크'가 표시되지 않으면 별도 컨트롤 하지 않는다.
            return;

        bAfterCheck = SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();
        pageService.SetAfterApproveCheck(groupID, bAfterCheck);
        StateHasChanged();
    }
    /*
    public async void AptAndVirusNoti(int groupID, eCmdList cmd, AptAndVirusEventArgs e)
    {
        string strTitle = XmlConf.GetNetworkTitle(groupID);
        //string strMsg = NotiMsgMake(cmd, e);
        string strFileTransTitle = e.strTitle;
        string strVirusContent = e.strMsg;
        string strTransSeq = e.strTransSeq;
        bool bVirus = false;
        if (cmd == eCmdList.eVIRUSSCAN)
            bVirus = true;
        refVirusReport.SetInit(groupID, strTransSeq, strFileTransTitle, strVirusContent, bVirus);
        await refVirusReport.openPopUp();

    }
    */

    public void UseDayFileResult(int groupID, FileAndClipDayArgs e)
    {
        pageService.SetDayUseFile(groupID, e.Size, e.Count);

        CLog.Here().Information($"FileTrans - ### - USED size({e.Size}), count({e.Count}) info recv (groupID : {groupID})! ");

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        if (!sgLoginData.GetFileTrans())
        {
            strDayFileTransRemainCount = String.Format(XmlConf.GetInfoMsg("I_0128"), "0");                   //파일전송을 사용하지 않을 때
            strDayFileTransRemainCountPer = "0%";
        }
        else if (pageService.GetDayFileCountUnLimited(groupID) == true)
        {
            strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayFileTransRemainCountPer = "100%";
        }
        else
        {
            strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
            strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
            strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
        }

        if (!sgLoginData.GetFileTrans())
        {
            strDayFileTransRemainSize = "0";                   //파일전송을 사용하지 않을 때
            strDayFileTransRemainSizePer = "0%";
        }
        else if (pageService.GetDayFileSizeUnLimited(groupID) == true)
        {
            strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayFileTransRemainSizePer = "100%";
        }
        else
        {
            strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
            strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
        }

        if (pageService.GetLoginComplete(groupID) != true)
        {
            SendDayClipInfo();
            return;
        }
        else
        {
            bool bFilePreView = pageService.GetDayInfoPrev(groupID);
            if (bFilePreView == false)
            {
                DayInfoChange();
                return;
            }
        }
        UseDayInfoDisplay();
        StateHasChanged();
    }

    public void UseDayClipResult(int groupID, FileAndClipDayArgs e)
    {
        pageService.SetDayUseClip(groupID, e.Size, e.Count);

        if (pageService.GetDayClipCountUnLimited(groupID) == true)
        {
            strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayClipRemainCountPer = "100%";
        }
        else
        {
            strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
            strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
            strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
        }

        if (pageService.GetDayClipSizeUnLimited(groupID) == true)
        {
            strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
            strDayClipRemainSizePer = "100%";
        }
        else
        {
            strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
            strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
        }

        if (pageService.GetLoginComplete(groupID) != true)
        {
            pageService.SetLoginComplete(groupID, true);
        }
        else
        {
            bool bFilePreView = pageService.GetDayInfoPrev(groupID);
            if (bFilePreView == true)
            {
                DayInfoChange();
                return;
            }
        }
        UseDayInfoDisplay();
        StateHasChanged();
    }

    public void UseDayInfoDisplay()
    {
        @*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView)
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송

            if (!sgLoginData.GetFileTrans())
            {
                strDayFileTransRemainCount = String.Format(XmlConf.GetInfoMsg("I_0128"), "0");                   //파일전송을 사용하지 않을 때
                strDayFileTransRemainCountPer = "0%";
            }
            else if (pageService.GetDayFileCountUnLimited(groupID) == true)
            {
                strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainCountPer = "100%";
            }
            else
            {
                strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
                strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
            }

            if (!sgLoginData.GetFileTrans())
            {
                strDayFileTransRemainSize = "0";                   //파일전송을 사용하지 않을 때
                strDayFileTransRemainSizePer = "0%";
            }
            else if (pageService.GetDayFileSizeUnLimited(groupID) == true)
            {
                strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainSizePer = "100%";
            }
            else
            {
                strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
                strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
            }
        }
        else
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_CLIP");                     // 남은 일일 클립보드

            if (!sgLoginData.GetClipboard())
            {
                strDayClipRemainCount = String.Format(XmlConf.GetInfoMsg("I_0128"), "0");     //클립보드를 사용하지 않을 때
                strDayClipRemainCountPer = "0%";
            }
            else if (pageService.GetDayClipCountUnLimited(groupID) == true)
            {
                strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainCountPer = "100%";
            }
            else
            {
                strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
                strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
            }

            if (!sgLoginData.GetClipboard())
            {
                strDayClipRemainSize = "0";                   //클립보드을 사용하지 않을 때
                strDayClipRemainSizePer = "0%";
            }
            else if (pageService.GetDayClipSizeUnLimited(groupID) == true)
            {
                strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainSizePer = "100%";
            }
            else
            {
                strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
                strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
            }

            strDayFileTransRemainCount = strDayClipRemainCount;
            strDayFileTransRemainSize = strDayClipRemainSize;
            strDayFileTransRemainCountPer = strDayClipRemainCountPer;
            strDayFileTransRemainSizePer = strDayClipRemainSizePer;
            SendDayClipInfoFooterEvent(groupID);
        }
    }

    public void SendDayFileInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();
        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayFileTransInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HSCmdCenter.SendUseDayFileTransInfo(groupID, strUserID, strQuery);
    }

    public void SendDayClipInfo()
    {
        SGQueryExtend sgQuery = new SGQueryExtend();


        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        bool bSystem = sgLoginData.GetSystemPosition();
        string strConNetWork = sgLoginData.GetConnNetworkString();

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();
        string strDate = DateTime.Now.ToString("yyyyMMdd");

        string strUserID = sgLoginData.GetUserID();
        string strQuery = sgQuery.GetDayClipboardInfo(bSystem, strUserSeq, strDate, strConNetWork);
        HSCmdCenter.SendUseDayClipboardInfo(groupID, strUserID, strQuery);
    }

    public void DayInfoChange()
    {
        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        pageService.SetDayInfoPrev(groupID, !bFilePreView);
        bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView)
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송

            if (!sgLoginData.GetFileTrans())
            {
                strDayFileTransRemainCount = String.Format(XmlConf.GetInfoMsg("I_0128"), "0");                   //파일전송을 사용하지 않을 때
                strDayFileTransRemainCountPer = "0%";
            }
            else if (pageService.GetDayFileCountUnLimited(groupID) == true)
            {
                strDayFileTransRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainCountPer = "100%";
            }
            else
            {
                strDayFileTransRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayFileTransRemainCount = String.Format(strDayFileTransRemainCount, pageService.GetDayRemainFileCountString(groupID));
                strDayFileTransRemainCountPer = pageService.GetDayRemainFileCountPercent(groupID).ToString() + "%";
            }

            if (!sgLoginData.GetFileTrans())
            {
                strDayFileTransRemainSize = "0";                   //파일전송을 사용하지 않을 때
                strDayFileTransRemainSizePer = "0%";
            }
            else if (pageService.GetDayFileSizeUnLimited(groupID) == true)
            {
                strDayFileTransRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayFileTransRemainSizePer = "100%";
            }
            else
            {
                strDayFileTransRemainSize = pageService.GetDayRemainFileSizeString(groupID);
                strDayFileTransRemainSizePer = pageService.GetDayRemainFileSizePercent(groupID).ToString() + "%";
            }
        }
        else
        {
            strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_CLIP");                     // 남은 일일 클립보드

            if (!sgLoginData.GetClipboard())
            {
                strDayClipRemainCount = String.Format(XmlConf.GetInfoMsg("I_0128"), "0");     //클립보드를 사용하지 않을 때
                strDayClipRemainCountPer = "0%";
            }
            else if (pageService.GetDayClipCountUnLimited(groupID) == true)
            {
                strDayClipRemainCount = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainCountPer = "100%";
            }
            else
            {
                strDayClipRemainCount = XmlConf.GetInfoMsg("I_0128");                                          // {0} 건
                strDayClipRemainCount = String.Format(strDayClipRemainCount, pageService.GetDayRemainClipCountString(groupID));
                strDayClipRemainCountPer = pageService.GetDayRemainClipCountPercent(groupID).ToString() + "%";
            }

            if (!sgLoginData.GetClipboard())
            {
                strDayClipRemainSize = "0";                   //클립보드을 사용하지 않을 때
                strDayClipRemainSizePer = "0%";
            }
            else if (pageService.GetDayClipSizeUnLimited(groupID) == true)
            {
                strDayClipRemainSize = XmlConf.GetTitle("T_ETC_UNLIMITED");                    // 무제한
                strDayClipRemainSizePer = "100%";
            }
            else
            {
                strDayClipRemainSize = pageService.GetDayRemainClipSizeString(groupID);
                strDayClipRemainSizePer = pageService.GetDayRemainClipSizePercent(groupID).ToString() + "%";
            }

            strDayFileTransRemainCount = strDayClipRemainCount;
            strDayFileTransRemainSize = strDayClipRemainSize;
            strDayFileTransRemainCountPer = strDayClipRemainCountPer;
            strDayFileTransRemainSizePer = strDayClipRemainSizePer;
            SendDayClipInfoFooterEvent(groupID);
        }
        StateHasChanged();
    }

    public void SendDayClipInfoFooterEvent(int groupID)
    {
        DayInfoFooterNotiEvent dayInfoFooterEvent = null;
        dayInfoFooterEvent = HSCmdCenter.sgPageEvent.GetDayInfoFooterNotiEvent(groupID);
        if (dayInfoFooterEvent != null)
            dayInfoFooterEvent(groupID);
    }

    public void DayInfoFileChangeEvent(int groupID)
    {
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView != true)
            DayInfoChange();
    }

    public void DayInfoClipChangeEvent(int groupID)
    {
        bool bFilePreView = pageService.GetDayInfoPrev(groupID);
        if (bFilePreView == true)
            DayInfoChange();
    }

    private void CheckContinueFileUpload()
    {
        int groupId = groupIDbyParam;
        ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupId);

        SGReSendData sGReSendData = SQLiteDB.SelectReSendInfo(groupId, sgUserInfo.UserSeq);
        if (sGReSendData != null)
        {
            if (!File.Exists(sGReSendData.HSZNAME))
            {
                SQLiteDB.DeleteReSendInfo(sGReSendData.RESENDID);
                return;
            }


            if (refSGAlertContinueFileTrans != null)
                refSGAlertContinueFileTrans.openPopUp(XmlConf.GetTitle("T_DATA_CONTINUE_TRANS"), XmlConf.GetTitle("T_DATA_CONTINUE_FILE_TRANS"), 2, groupId, sGReSendData.RESENDID.ToString());
        }
    }

    private void ContinueFileUpload(string obj)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupId = 0;
        if (sgSideBar != null)
            groupId = sgSideBar.GroupId;

        ISGUserInfo userInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupId);


        HsNetWork hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);

        if (hsNetWork == null)
            return;
        if (!hsNetWork.IsUserBind)
            return;

        long hsNetPartSize = hsNetWork.stCliMem.FilePartSize;

        SGReSendData reSendData = SQLiteDB.SelectReSendInfo(Convert.ToInt32(obj));

        if (reSendData == null)
        {
            SQLiteDB.DeleteReSendInfo(Convert.ToInt32(obj));
            return;
        }

        if (!File.Exists(reSendData.HSZNAME))
        {
            SQLiteDB.DeleteReSendInfo(Convert.ToInt32(obj));
            return;
        }

        Dictionary<string, string> values = CsFunction.ByteArrayToObject(reSendData.TRANSINFO as byte[]) as Dictionary<string, string>;

        long fileSize = Convert.ToInt64(values["FILESIZE"]);
        int nTotalPart = (int)(fileSize / hsNetPartSize) + 1;


        HSCmdCenter.sgPageEvent.SetQueryReciveEvent(groupId, eCmdList.eFILEUPLOADINFO, ContinueFileUploadRev);

        HSCmdCenter.SendFileUploadInfo(groupId, userInfo.UserId, values["MID"], nTotalPart.ToString(), fileSize.ToString());

    }

    private void ContinueFileUploadCancel(string obj)
    {

        SGReSendData reSendData = SQLiteDB.SelectReSendInfo(Convert.ToInt32(obj));
        if (reSendData != null)
        {
            if (File.Exists(reSendData.HSZNAME))
                File.Delete(reSendData.HSZNAME);
        }

        SQLiteDB.DeleteReSendInfo(Convert.ToInt32(obj));

        return;
    }

    private void ContinueFileUploadRev(int groupId, object[] e)
    {
        if (pageService.GetConnectStatus(groupIDbyParam) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        // 3중망일때 목적지 점검
        if (dicDestSysPos != null && dicDestSysPos.Count > 0 && strDestNetWork.Length < 1)
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0234"));
            return;
        }

        string strDestNetOverData = "0";

        if (GetNetOverDataPolicy(ref strDestNetOverData) == false)
        {
            return;
        }

        CLog.Here().Information("NETOVERDATA(Send To Server-###) : {0}", strDestNetOverData);

        HSCmdCenter.sgPageEvent.SetFileSendProgressEventAdd(groupIDbyParam, FileTransProgress);
        refTransProgress.SetProgressText(true, true);
        refTransProgress.ChangeProgress(0);
        refTransProgress.nGroupID = groupIDbyParam;
        Task.Run(async () => { await refTransProgress.openPopUp(); });
        Task.Run(async () => { await Task.Delay(1000); });

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupIDbyParam);
        if (sgLoginData == null)
            return;

        ISGUserInfo sgUserData = SGAppMgrSvc.UserInfoService.GetUserInfo(groupIDbyParam);
        if (sgUserData == null)
            return;

        SGReSendData sgReSendData = SQLiteDB.SelectReSendInfo(groupIDbyParam, sgUserData.UserSeq);
        if (sgReSendData == null)
            return;

        SGData sgData = e[0] as SGData;
        string reason = sgData.GetBasicTagData("REASON");
        string str = sgData.GetEncTagData("RESULT");
        int recvFileSize = 0;
        if (!String.IsNullOrEmpty(sgData.GetBasicTagData("RECVFILESIZE")))
            recvFileSize = Convert.ToInt32(sgData.GetBasicTagData("RECVFILESIZE"));


        Dictionary<string, string> sendValues = CsFunction.ByteArrayToObject(sgReSendData.TRANSINFO as byte[]) as Dictionary<string, string>;

        sendValues["CLIENTID"] = sgUserData.UserId;

        HSCmdCenter.ContinueSendFileTrans(groupId, sendValues, strDestNetOverData, sgReSendData.HSZNAME, recvFileSize);
    }


    [JSInvokable("NotifyChange")]
    public static void NotifyChange(FileListEntryImpl[] files)
    {
        HandleFileInputChangeAction1.Invoke(files, true);
    }
    [JSInvokable("LogWrite")]
    public static void LogWrite(string str)
    {
        Debug.WriteLine(str);
        CLog.Here().Information(str);
    }
    [JSInvokable("NotifyChange2")]
    public static void NotifyChange2(FileListEntryImpl[] files)
    {
        HandleFileInputChangeAction2.Invoke(files, false);
    }

    public void InsertMessage(NOTI_TYPE type, int groupID, LSIDEBAR menuCategory, eMsgType eMType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertMessageTitle(eMType);
        string strNotiContent = body;
        SQLiteDB.InsertNotiInfo(type, groupID, strUserSeq, "0", menuCategory, path, "", strHead, strNotiContent);

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HSCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HSCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HSCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HSCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }
    /// <summary>
    /// 홈으로 이동
    /// </summary>
    private void HomeMove()
    {

        @*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        strNavigateWithGroupID += groupID.ToString();

        ChangeActiveMenuEvent changeActiveMenuEvent = HSCmdCenter.sgPageEvent.GetChangeActiveMenu();
        if (changeActiveMenuEvent != null)
            changeActiveMenuEvent(groupID, strNavigateWithGroupID);

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        //foreach (var MenuItem in SideBarUISvc.MenuList)
        //{
        //    if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
        //    {
        //        SideBarUISvc.ActiveMenu = MenuItem;
        //        break;
        //    }
        //}
    }
    /// <summary>
    /// 3망일때, 전체전송기능 사용해도 되는 상황인지 판단
    /// </summary>
    /// <returns></returns>
    public bool IsCanTransferAllNet()
    {

        // Agent 설정에 모든망 전송 기능이 있는지 확인
        if (SGAppMgrSvc.OpConfigInfoService.GetUseNetOverAllsend(groupIDbyParam) == false)
            return false;

        // 3망 설정상황이 아니면
        if (dicDestSysPos == null || dicDestSysPos.Count < 3)
            return false;


        // 다접속 상황이면
        if (pageService.m_bIsMultiNetWork)
            return false;

        @*        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            int groupID = 0;
            if (sgSideBar != null)
            groupID = sgSideBar.GroupId;*@

        int groupID = groupIDbyParam;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return false;

        // 파일전송 사용 권한이 없으면
        if (sgLoginData.GetFileTrans() == false)
            return false;

        // 하나라도 파일전송 권한이 없거나 정보가 이상하면
        foreach (var item in dicDestSysPos)
        {

            if (item.Value.nIdx > 0 &&
              (item.Value.strDestSysid.Length == 0 || item.Value.bUseFileTrans == false || item.Key.Length < 1))
            {
                return false;
            }
        }
        return true;
    }
    /// <summary>
    /// 공통환경설정 변경에 따른 UI 변경사항 반영 적용
    /// </summary>
    /// <param name="groupid"></param>
    public void RefreshUI(int groupid)
    {
        StateHasChanged();
    }

}