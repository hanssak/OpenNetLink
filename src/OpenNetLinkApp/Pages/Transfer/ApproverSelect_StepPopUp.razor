@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Components.SGTreeSearch
@using HsNetWorkSG
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService

<div class="modal fade" id="ApproverSelect_StepPopUp">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                <h5 class="modal-title pt-1 text-bold ">@strApproverSearch</h5>                                 <!--결재자 조회-->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- content -->
                <!-- s------------------------------------------------------------------------------------------------------  -->

                <div class="card-body p-0">


                    <!--s table -->
                    <div class="box1" style=" width:46%;  float:left;">
                        @if (approverSearchType == "SEARCH")
                        {
                            <div class="d-inline-flex  mb-2 " style="height:28px;">
                                <label class="p-1">@strDept</label>                                                       <!--부서-->
                            <input type="text" class="form-control col-md-4" placeholder=@strDeptPlaceHolder @bind-value="strCurDept" @onkeyup="HandleKeyEvent">
                                <label class="p-1 pl-2">@strName</label>                                                  <!--이름-->
                            <input type="text" class="form-control col-md-3" placeholder=@strNamePlaceHolder @bind-value="strCurName" @onkeyup="HandleKeyEvent">
                                <button type="button" class="btn bg-gradient-secondary ml-1" @onclick="DeptApprLine"><i class="fas fa-search pr-1 pl-1"></i>@strSearch</button>         <!--조회-->
                        </div>

                            <div class="card-body table-responsive p-0 " style="height:392px; border:1px solid #ddd; background-color:#fff;">
                                <table class="table table-head-fixed">
                                    <thead>
                                        <tr>
                                            <th style="text-align:center">@strOrder </th>                <!--순번-->
                                        <th style="text-align:center">@strDept </th>                <!--부서-->
                                        <th style="text-align:center">@strRank </th>                <!--직급-->
                                        <th style="text-align:center">@strName </th>                <!--이름-->
                                    </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (ApproverInfo item in ApproverSearch)
                                        {
                                            <tr name="trItem3" draggable="false" data-draggable="tritem" aria-grabbed="false" value="@item.UserSeq">
                                                <td style="text-align:center">@item.Index</td>
                                                <td>@item.DeptName</td>
                                                <td>@item.Grade</td>
                                                <td>@item.Name</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else //TREE
                        {
                            @*<SGDeptTreeList Height="368" UserSearchList="@ApproverSearch" @bind-SelectedUserSeq="@stSelectApprover" />*@
                            <SGDeptTreeList @ref="refSGDeptTreeList" UseInputSearch="@useInputInTree" Height="420" TreeHeight="160" UserSearchList="@ApproverSearch" OnItemClick="(item) => AssignApprover(item.UserSeq)" OnItemDoubleClick="(item) => SGDeptTreeList_OnItemDoubleClick(item)" />
                        }
                    </div>
                    <!--e table -->
                    <!--s btn -->
                    <div class="box2" style=" width:8%; height:300px; float:left;">
                        <div class="col-md-12 text-center" style="top:50% !important;">
                            <button @onclick="AddSelectApprover" type="button" class="btn bg-gradient-primary mb-3"><i class="fas fa-angle-right fa-2x"></i></button>
                            <button @onclick="RemoveAssignApprover" type="button" class="btn bg-gradient-primary"><i class="fas fa-angle-left fa-2x"></i></button>
                        </div>
                    </div>
                    <!--e btn -->
                    <!--s table -->
                    <div class="box1" style=" width:46%;  float:left;">
                        <div class="row mb-2  ">
                            <div class="col-md-5 text-right">
                                <!--
                                <button type="button" class="btn bg-gradient-secondary mr-0"><i class="fas fa-chevron-circle-up  pr-1 pl-1"></i></button>
                                <button type="button" class="btn bg-gradient-secondary"><i class="fas fa-chevron-circle-down  pr-1 pl-1"></i></button>
                                -->
                            </div>
                            <div class="col-md-7 text-right">
                                <button type="button" class="btn bg-gradient-secondary" @onclick="AddTargetGroup"><i class="fas fa-search pr-1 pl-1"></i>@strGroupAdd</button>   <!--그룹추가-->
                            </div>

                        </div>

                        <div class="card-body table-responsive p-0" style="height:392px; border:1px solid #ddd; background-color:#fff;">

                            <!--  s step 01 -------------------------------------------------------------------------------------------------------------------------------------- -->
                            @foreach (ApproverGroup item in ApvGroup)
                            {
                                <div aria-grabbed="@(item.seqGrp == Int32.Parse(CurrentDivSeq) ? "true" : "false")" name="TargetGropDiv-@(item.seqGrp)" data-draggable="divGroup" value="@item.seqGrp" class="card @item.groupTheme() shadow">
                                    <div class="card-header pt-1 pb-1">
                                        <h6 class="step-title">Step @item.seqGrp</h6>
                                        <div class="card-tools  pr-2">
                                            <button type="button" class="btn btn-tool fa-xs" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                                            <button type="button" class="btn btn-tool fa-xs" data-card-widget="remove"><i class="fas fa-times"></i></button>
                                        </div>
                                    </div>
                                    <div class="card-body p-2">
                                        <div class="col-md-12 p-0 mb-2">
                                            <label class=" pt-1 pl-2">@item.groupTitle()</label>
                                            <div class="btn-group float-right">
                                                <button @onclick="moveToTop" type="button" class="btn btn-default step_btn"><i class="fas fa-angle-double-up pr-2"></i></button>
                                                <button @onclick="moveToUpper" type="button" class="btn btn-default step_btn"><i class="fas fa-arrow-up pr-1"></i></button>
                                                <button @onclick="moveToLower" type="button" class="btn btn-default step_btn"><i class="fas fa-arrow-down pr-1"></i></button>
                                                <button @onclick="moveToBottom" type="button" class="btn btn-default step_btn"><i class="fas fa-angle-double-down pr-2"></i></button>
                                            </div>

                                        </div>

                                        <div class="col-md-12 card-body p-0" style="height:auto;border:1px solid #ddd; background-color:#fff;">
                                            <table class="table gray">
                                                <thead>
                                                    <tr>
                                                        <th style="text-align:center">@strDept </th>     <!--부서-->
                                                    <th style="text-align:center">@strRank </th>     <!--직급-->
                                                    <th style="text-align:center">@strName </th>     <!--이름-->
                                                </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (ApproverInfo subitem in item.ApproverSelect)
                                                    {
                                                        <tr aria-grabbed="@(item.seqGrp == Int32.Parse(CurrentDivSeq) && subitem.UserSeq == CurrentTagetSeq  ? "true" : "false")" name="trSelect3" draggable="false" data-draggable="tritem" value="@subitem.UserSeq">
                                                            <td>@subitem.DeptName</td>
                                                            <td>@subitem.Grade</td>
                                                            <td>@subitem.Name</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>

                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                    <!--e table -->
                </div>

                <!--/. content -->
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="SelectOK"><i class="fas fa-check"></i>@strOK</button>
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@strClose</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
@code {
    private LinkedList<ApproverInfo> ApproverSearch = new LinkedList<ApproverInfo>();   //좌측 검색결과
    private List<ApproverGroup> ApvGroup = new List<ApproverGroup>();                   //우측 지정자
    private static Action<string> actionApproverDivSelect;      //결재자 GROUP 선택
    private static Action<string> actionTargetSelect;           //결재자 SEQ
    private static Action<string> actionAssign;                 //조회대상 SEQ

    private SGDeptTreeList refSGDeptTreeList;

    public delegate void ApprSelectChangeEvent();               //부모함수 대리함수
    public event ApprSelectChangeEvent ApprSelectChange;

    public string CurrentDivSeq { get; set; }
    public string CurrentTagetSeq { get; set; }
    public string stSelectApprover { get; set; }

    public string strApproverSearch = "";
    public string strDept = "";
    public string strName = "";
    public string strSearch = "";
    public string strOrder = "";
    public string strRank = "";
    public string strMostTop = "";
    public string strMostBottom = "";
    public string strTop = "";
    public string strDown = "";
    public string strOK = "";
    public string strClose = "";
    public string strGroupAdd = "";

    public string strCurDept = "";
    public string strCurName = "";


    private string strDeptPlaceHolder = "";
    private string strNamePlaceHolder = "";

    ISGSideBarUIService SideBarUISvc;
    SGSettingsDBProc sgSettingProc;
    ISGSiteConfigService siteConfig;

    private string approverSearchType = "";
    private bool useInputInTree;


    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            DeptApprLine();
        }
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void DeptApprLine()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strSysID = sgLoginData.GetSysID();
        string strUserID = sgLoginData.GetUserID();
        string strUserName = strCurName;
        string strTeamName = strCurDept;
        strCurDept = strTeamName;
        string strTeamCode = "";
        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, strUserName, strTeamName, strTeamCode, true);
        HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
    }
    public void DeptApprLineResultStep(int groupid, PageEventArgs e)
    {
        if (e.result != 0)
        {
            ShowMessage("error", e.strMsg);
            return;
        }

        InitDeptApprInsert();
    }

    public void InitApprLine()
    {
        ApvGroup.Clear();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;


        LinkedList<ApproverInfo> apprLinkedList = null;
        apprLinkedList = sgApprLineData.GetApprAndLineData();
        if ((apprLinkedList == null) || (apprLinkedList.Count <= 0))
        {
            //InitBaseApprLine(); 기본 결재자 설정
            StateHasChanged();
            pageService.SetLoadApprBaseLine(groupID, true);
            return;
        }

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;
        int step = sgLoginData.GetApproveStep();    //결재유형 취득(무조건 AND+OR:2)

        int apvGrpOrder = -500;
        int apvGrpSeq = 1;
        int i = 0;
        foreach (ApproverInfo info in apprLinkedList)
        {
            if (info.nApvOrder == -99)
                continue;
            if (apvGrpOrder != info.nApvOrder)
            {
                ApproverGroup tmpGrp = new ApproverGroup();
                tmpGrp.seqGrp = apvGrpSeq;
                apvGrpSeq++;
                apvGrpOrder = info.nApvOrder;
                LinkedList<ApproverInfo> tmpList = new LinkedList<ApproverInfo>();
                tmpList.AddLast(new ApproverInfo(i, info));
                tmpGrp.ApproverSelect = tmpList;
                ApvGroup.Add(tmpGrp);
            }
            else  //기존목록 뒤에 붙여야 한다
            {
                LinkedList<ApproverInfo> tmpList = null;
                for (int j = 0; j < ApvGroup.Count; j++)
                {
                    tmpList = ApvGroup[j].ApproverSelect;
                    if (tmpList.First.Value.nApvOrder == info.nApvOrder)
                    {
                        tmpList.AddLast(new ApproverInfo(i, info));
                        break;
                    }
                }
            }
            i++;
        }

        StateHasChanged();
    }

    //왼쪽결재자 검색 리스트 구성
    public void InitDeptApprInsert()
    {
        ApproverSearch.Clear();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGDeptApprLineSearchData sgDeptApprLine = null;
        sgDeptApprLine = (SGDeptApprLineSearchData)HSCmdCenter.GetDeptApprLineSearchData(groupID);
        if (sgDeptApprLine == null)
            return;

        LinkedList<ApproverInfo> apprLinkedList = null;
        apprLinkedList = sgDeptApprLine.GetDeptApproverInfoData();      //유저 조회
        if ((apprLinkedList == null) || (apprLinkedList.Count <= 0))
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();

        int count = 1;
        foreach (var item in apprLinkedList)
        {
            if (strUserSeq.Equals(item.UserSeq))
                continue;
            item.Index = String.Format("{0,2}", count.ToString());
            ApproverSearch.AddLast(item);
            count++;
        }
        StateHasChanged();
    }
    private void moveToTop()
    {
        if (CurrentDivSeq.Length < 1)
            return;

        ApproverGroup apvGroup = ApvGroup.FirstOrDefault(x => x.seqGrp == Int32.Parse(CurrentDivSeq));
        ApproverInfo apvAsign = apvGroup.ApproverSelect.FirstOrDefault(x => x.UserSeq == CurrentTagetSeq);
        if (apvAsign != null)
        {
            JSRuntime.InvokeAsync<object>("adjustTargetSelection");
            apvGroup.ApproverSelect.Remove(apvAsign);
            apvGroup.ApproverSelect.AddFirst(apvAsign);
        }
        StateHasChanged();
    }

    private void moveToUpper()
    {
        if (CurrentDivSeq.Length < 1)
            return;

        ApproverGroup apvGroup = ApvGroup.FirstOrDefault(x => x.seqGrp == Int32.Parse(CurrentDivSeq));
        ApproverInfo apvAsign = apvGroup.ApproverSelect.FirstOrDefault(x => x.UserSeq == CurrentTagetSeq);

        if (apvAsign != null)
        {
            //현재값으 앞에값을 구하기
            LinkedListNode<ApproverInfo> current;
            LinkedListNode<ApproverInfo> next;
            current = apvGroup.ApproverSelect.First;
            if (current.Value.UserSeq == CurrentTagetSeq)
            {
                return;
            }

            for (int i = 0; i < apvGroup.ApproverSelect.Count; i++)
            {
                next = current.Next;
                if (next.Value.UserSeq == CurrentTagetSeq)
                {
                    apvGroup.ApproverSelect.Remove(apvAsign);
                    apvGroup.ApproverSelect.AddBefore(current, apvAsign);
                    break;
                }
                else
                {
                    current = current.Next;
                }
            }
        }
        StateHasChanged();
    }
    private void moveToLower()
    {
        if (CurrentDivSeq.Length < 1)
            return;
        ApproverGroup apvGroup = ApvGroup.FirstOrDefault(x => x.seqGrp == Int32.Parse(CurrentDivSeq));
        ApproverInfo apvAsign = apvGroup.ApproverSelect.FirstOrDefault(x => x.UserSeq == CurrentTagetSeq);

        if (apvAsign != null)
        {
            //현재값으 앞에값을 구하기
            LinkedListNode<ApproverInfo> current;
            LinkedListNode<ApproverInfo> next;
            LinkedListNode<ApproverInfo> last;
            current = apvGroup.ApproverSelect.First;
            last = apvGroup.ApproverSelect.Last;
            if (last.Value.UserSeq == CurrentTagetSeq)
            {
                return;
            }

            for (int i = 0; i < apvGroup.ApproverSelect.Count; i++)
            {
                next = current.Next;
                if (current.Value.UserSeq == CurrentTagetSeq)
                {
                    apvGroup.ApproverSelect.Remove(apvAsign);
                    apvGroup.ApproverSelect.AddAfter(next, apvAsign);
                    break;
                }
                else
                {
                    current = current.Next;
                }
            }
        }
        StateHasChanged();
    }
    private void moveToBottom()
    {
        if (CurrentDivSeq.Length < 1)
            return;
        ApproverGroup apvGroup = ApvGroup.FirstOrDefault(x => x.seqGrp == Int32.Parse(CurrentDivSeq));
        ApproverInfo apvTarget = apvGroup.ApproverSelect.FirstOrDefault(x => x.UserSeq == CurrentTagetSeq);
        if (apvTarget != null)
        {
            apvGroup.ApproverSelect.Remove(apvTarget);
            apvGroup.ApproverSelect.AddLast(apvTarget);
        }
        StateHasChanged();
    }

    private void SGDeptTreeList_OnItemDoubleClick(ApproverInfo doubleClickInfo)
    {
        stSelectApprover = doubleClickInfo.UserSeq;
        AddSelectApprover();
    }

    private void AddSelectApprover()
    {
        if (stSelectApprover.Length < 1 || CurrentDivSeq.Length < 1)
            return;

        ApproverInfo apv = ApproverSearch.FirstOrDefault(x => x.UserSeq == stSelectApprover);
        if (apv != null)
        {
            ApproverGroup apvGroup = ApvGroup.FirstOrDefault(x => x.seqGrp == Int32.Parse(CurrentDivSeq));
            if (apvGroup == null)
            {
                ShowMessage("warning", XmlConf.GetInfoMsg("I_0218"));
                return;
            }
            bool bFind = false;
            foreach (ApproverInfo item in apvGroup.ApproverSelect)
            {
                if (item.UserSeq == apv.UserSeq)
                    bFind = true;
            }

            if (apvGroup != null && bFind == false)
            {
                apvGroup.ApproverSelect.AddLast(apv);
            }
            else
            {
                ShowMessage("warning", XmlConf.GetInfoMsg("I_0219"));
                return;
            }
        }
    }

    private void RemoveAssignApprover()
    {
        ApproverGroup apvGroup = ApvGroup.FirstOrDefault(x => x.seqGrp == Int32.Parse(CurrentDivSeq));
        ApproverInfo apvAsign = apvGroup.ApproverSelect.FirstOrDefault(x => x.UserSeq == CurrentTagetSeq);
        if (apvAsign != null)
        {
            apvGroup.ApproverSelect.Remove(apvAsign);
        }
    }

    [JSInvokable("ApproverSearchSelect3")]
    public static void ApproverSearchSelect3(string value)
    {
        actionAssign.Invoke(value);
    }

    private void AssignApprover(string value)
    {
        stSelectApprover = value;
    }

    [JSInvokable("ApproverTargetSelect3")]
    public static void ApproverTargetSelect3(string value)
    {
        actionTargetSelect.Invoke(value);
    }
    private void SelectTarget(string value)
    {
        CurrentTagetSeq = value;
        StateHasChanged();
    }



    [JSInvokable("ApproverDivSelect")]
    public static void ApproverDivSelect(string value)
    {
        actionApproverDivSelect.Invoke(value);
    }

    public void TargetDivSelect(string seq)
    {
        CurrentDivSeq = seq;
    }

    public class ApproverGroup
    {
        public int seqGrp { get; set; }
        public LinkedList<ApproverInfo> ApproverSelect { get; set; }
        public string groupTheme()
        {
            if (seqGrp == 1) return "card-primary";
            else if (seqGrp == 2) return "card-secondary";
            else if (seqGrp == 3) return "card-success";
            else if (seqGrp == 4) return "card-info";
            else if (seqGrp == 5) return "card-warning";
            else if (seqGrp == 6) return "card-danger";
            else if (seqGrp == 7) return "card-light";
            else if (seqGrp == 7) return "card-dark";
            else return "card-primary";
        }
        public string groupTitle()
        {
            if (ApproverSelect.Count == 0)
                return "미지정";
            else if (ApproverSelect.Count == 1)
            {
                return ApproverSelect.First.Value.Name;
            }
            else
            {
                return ApproverSelect.First.Value.Name + " 외" + Convert.ToString(ApproverSelect.Count - 1) + "명";
            }
        }
    }
    private void AddTargetGroup()
    {
        ApproverGroup grp1 = new ApproverGroup();
        grp1.seqGrp = ApvGroup.Count + 1;
        LinkedList<ApproverInfo> grp1Apv = new LinkedList<ApproverInfo>();
        grp1.ApproverSelect = grp1Apv;
        ApvGroup.Add(grp1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
        }
        base.OnAfterRender(firstRender);
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        sgSettingProc = SGSettingsDBProc.Instance;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;

        CurrentDivSeq = "0";
        CurrentTagetSeq = "0";

        actionAssign = AssignApprover;
        actionApproverDivSelect = TargetDivSelect;
        actionTargetSelect = SelectTarget;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        approverSearchType = SGAppMgrSvc.SiteConfigInfoService.GetApproverSearchType(groupID);
        useInputInTree = SGAppMgrSvc.SiteConfigInfoService.GetUseInputSearchInApproverTree(groupID);
        InitText();
    }

    public void BindEvent()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        //*****************************************************************
        //EventBinding : EventBinding DeptApprLine -> DeptApprLineResult
        //*****************************************************************
        HSCmdCenter.sgPageEvent.SetDeptApprLineReflashEventAdd(groupID, DeptApprLineResultStep);
        HSCmdCenter.sgPageEvent.SetDeptApprLineSearchEventAdd(groupID, ApproveChooseResultStep);

        if (approverSearchType == "TREE" && refSGDeptTreeList != null)
            refSGDeptTreeList.BindEvent();
    }

    public void ApproveChooseResultStep(int groupid, PageEventArgs e)
    {
        ApproverSearch.Clear();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGDeptApprLineSearchData sgDeptApprLine = null;
        sgDeptApprLine = (SGDeptApprLineSearchData)HSCmdCenter.GetDeptApprLineSearchData(groupID);
        if (sgDeptApprLine == null)
            return;

        LinkedList<ApproverInfo> apprLinkedList = null;
        apprLinkedList = sgDeptApprLine.GetDeptApproverInfoData();
        if ((apprLinkedList == null) || (apprLinkedList.Count <= 0))
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();

        int count = 1;
        foreach (var item in apprLinkedList)
        {
            if (strUserSeq.Equals(item.UserSeq))
                continue;
            item.Index = String.Format("{0,2}", count.ToString());
            ApproverSearch.AddLast(item);
            count++;
        }
        StateHasChanged();

    }
    public async Task openPopUp()
    {
        object[] param = { "ApproverSelect_StepPopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void SelectOK()
    {
        //저장포멧이 달려졌으로 저장데이타 형으로 변환
        LinkedList<ApproverInfo> ApproverSelect = new LinkedList<ApproverInfo>();
        LinkedList<ApproverInfo> tmpList = null;
        for (int j = 0; j < ApvGroup.Count; j++)
        {
            tmpList = ApvGroup[j].ApproverSelect;
            foreach (ApproverInfo item in tmpList)
            {
                item.nApvOrder = j + 1;
                ApproverSelect.AddLast(item);
            }
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.SetApprLineList(groupID, ApproverSelect);

        bool bApprLineLocalSave = SGAppMgrSvc.OpConfigInfoService.GetUseApprLineLocalSave(groupID); // siteConfig. json으로 이동
        if (bApprLineLocalSave)
        {
            SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupID);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);

            string strEncSaveApprLine = "";
            string strApprLine = "";
            SGRSACrypto sgRSACrypto = new SGRSACrypto();
            if (sgSettingData != null)
            {
                strEncSaveApprLine = sgSettingProc.GetSettingApprLine(groupID);
                sgRSACrypto.ValueDecrypt(strEncSaveApprLine, out strApprLine);
            }
            SGUserData sgUserData = null;
            sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
            if (sgUserData == null)
                return;

            string strUserSeq = sgUserData.GetUserSequence();
            int step = 0;
            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData != null)
                step = sgLoginData.GetApproveStep();

            strApprLine = SGApprLineData.LocalSaveANDApprLineData(ApproverSelect, strUserSeq, strApprLine, step);
            string strEncApprLine = "";
            sgRSACrypto.ValueEncrypt(strApprLine, out strEncApprLine);
            sgSettingProc.SetSettingApprLine(groupID, strEncApprLine);
        }

        ApprSelectChange();

        closePopUp();
    }
    //팝업에서 부모함수 호출위한 이벤트 설정(이벤트=함수) 인것으로 동작
    public void SetApprSelectChangeEvent(ApprSelectChangeEvent apprSelChange)
    {
        ApprSelectChange = apprSelChange;
    }

    public void closePopUp()
    {
        object[] param = { "ApproverSelect_StepPopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public void InitText()
    {
        strApproverSearch = XmlConf.GetTitle("T_COMMON_APPROVESEARCH");             // 결재자 조회
        strDept = XmlConf.GetTitle("T_COMMON_DEPT");                                // 부서
        strName = XmlConf.GetTitle("T_COMMON_NAME");                                // 이름
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            // 조회
        strOrder = XmlConf.GetTitle("T_COMMON_ORDER");                              // 순번
        strRank = XmlConf.GetTitle("T_COMMON_RANK");                                // 직급
        strMostTop = XmlConf.GetTitle("T_ETC_TOP");                                 // 맨위
        strMostBottom = XmlConf.GetTitle("T_ETC_BOTTOM");                           // 맨아래
        strTop = XmlConf.GetTitle("T_ETC_UP");                                      // 위
        strDown = XmlConf.GetTitle("T_ETC_DOWN");                                   // 아래
        strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
        strClose = XmlConf.GetTitle("T_FILE_FOLD");                                 // 닫기
        strGroupAdd = XmlConf.GetTitle("T_APPROVE_GROUPADD");                       // 그룹추가


        strDeptPlaceHolder = XmlConf.GetTitle("T_INPUT_DEPT");                       //부서입력
        strNamePlaceHolder = XmlConf.GetTitle("T_INPUT_DEPT");                       //이름입력
    }
}