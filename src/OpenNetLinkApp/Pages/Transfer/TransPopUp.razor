@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using System.Diagnostics
@using OpenNetLinkApp.PageEvent
@using HsNetWorkSGData
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService

<div class="modal fade" id="TransPopUp" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-top" style="vertical-align:top;">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold">@strTransDetailTitle</h5>                              <!--전송 상세보기-->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- content -->

                <div class="card-body pt-0">
                    <div class="modal-sub-title mb-2"> @strArrpHistory </div>                                  <!--결재내역-->
                    <table class="table table-bordered blue">
                        <tbody>
                            <tr>
                                <th>@strTransKind </th>                                                      <!--전송구분-->
                                <td style="text-align:center;">@strDataTransKind</td>
                                <th>@strTransStatus </th>                                                       <!--전송상태-->
                                <td style="text-align:center;">@strDataTransStatus</td>
                                <th>@strFilePos </th>                                                       <!--파일위치-->
                                <td style="text-align:center;">@strDataFilePos</td>
                                <th>@XmlConf.GetTitle("T_COMMON_PRIVACY") </th>                                              <!--만료일-->
                                <td style="text-align:center;">@strDLP</td>
                            </tr>

                            <tr>
                                <th>@strApprKind</th>                                                       <!--승인구분-->
                                <td style="text-align:center;">@strDataApprKind</td>
                                <th>@strApprStatus</th>                                                       <!--승인상태-->
                                <td style="text-align:center;">@strDataApprStatus</td>
                                <th>@strApprReqDay</th>                                                      <!--승인요청일-->
                                <td style="text-align:center;" colspan="3">@strDataApprReqDay</td>
                                <!--<th>@strReciver</th>  -->                                                          <!--수신자-->
                            </tr>

                            <tr>
                                <th>@strTitle</th>                                                     <!--제목-->
                                <td colspan="7">@strDataTitle</td>
                            </tr>

                            <tr>
                                <th>@strDesc</th>                                                     <!--설명-->
                                <td colspan="7">
                                    @strDataDesc
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="card-body pt-0 pb-0">
                    <div class="col-md-12  clearfix p-0">
                        <div class="float-left modal-sub-title mt-2">
                            <!--파일정보-->
                            @strFileInfo
                        </div>
                        @if (m_bNetDownloadable)
                        {
                            <div class="float-right mb-2">
                                <button type="button" class="btn btn-info btn-sm" @onclick="requestManualDownload"><i class="fas fa-angle-double-down fa-lg"></i>@XmlConf.GetTitle("T_TRANS_MANUAL_DOWNLOAD")</button>
                            </div>
                        }
                    </div>
                    <table class="table table-head-fixed table-bordered table-hover white" style="table-layout: fixed;">
                        <thead>
                            <tr>
                                <th style="text-align:center;width:40%;">@strFileName </th>         <!--파일명-->
                                <th style="text-align:center;">@strFileType </th>                   <!--유형-->
                                <th style="text-align:center;">@strFileSize </th>                   <!--크기-->
                                <th style="text-align:center;width:15%;">@strVirusHistory </th>     <!--바이러스내역-->
                                <th style="text-align:center;width:15%;">@XmlConf.GetTitle("T_COMMON_PRIVACY")</th>     <!--개인정보 내역-->
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (FileInfoData item in mFileData)
                            {
                                <tr>
                                    <td style="text-align:left;width:50%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;">@item.strFileName</td>
                                    <td style="text-align:center;">@item.strFileType</td>
                                    <td style="text-align:center;">@item.strFileSize</td>
                                    <td style="text-align:center;">@item.strVirusHistory</td>
                                    <td style="text-align:center;">@item.stDLPDesc</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>

                <div class="card-body pb-0">
                    <div class="modal-sub-title mb-2"> @strApproverInfo </div>         <!--결재자정보-->
                    <table class="table table-bordered blue">
                        <tbody>
                            <tr>
                                <th>@strApprover</th>                                    <!--승인자-->
                                <td>@strDataLastApprName</td>
                                <th>@strApproveStatus</th>                                   <!--승인상태-->
                                <td>@strDataLastApprStatus</td>
                                <th>@strApproveDay</th>                                        <!--승인일-->
                                <td>@strDataLastApprDay</td>
                                <td>
                                    <div class="col-md-12 float-left">

                                        <div class="navbar-nav ml-auto txte-right">
                                            <!-- Messages Dropdown Menu -->
                                            <div class="nav-item dropdown show">
                                                <a class="nav-link p-0" data-toggle="dropdown" href="#" aria-expanded="true" hidden="@bApprHistHidden">
                                                    <i class="fas fa-list-alt fa-lg"></i>
                                                    <span class="pl-1 pr-1">승인이력</span>
                                                </a>

                                                <div class="dropdown-menu dropdown-menu-xl dropdown-menu-right" style=" right:0px; height:135px; overflow-y:scroll;transform:matrix3d(-338px,19px,0px);">
                                                    <div class="dropdown-title">
                                                        <div class="media">
                                                            <div class="media-body">
                                                                <div class="col-md-3 float-left dropdown-item-title1">승인자</div>
                                                                <div class="col-md-2 float-left dropdown-item-title1">상태</div>
                                                                <div class="col-md-4 float-left dropdown-item-title1">승인일</div>
                                                                <div class="col-md-3 float-left dropdown-item-title1">반려사유</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    @foreach (ApprHist appritem in apprHList)
                                                    {
                                                        <div class="dropdown-divider"></div>
                                                        <a class="dropdown-item">
                                                            <div class="media">
                                                                <div class="media-body">
                                                                    <div class="col-md-3 float-left dropdown-item-title1">@appritem.strName</div>
                                                                    <div class="col-md-2 float-left dropdown-item-title1">@appritem.strApprStatus</div>
                                                                    <div class="col-md-4 float-left dropdown-item-title1">@appritem.strApprDay</div>
                                                                    <div class="col-md-3 float-left dropdown-item-title1">@appritem.strReason</div>
                                                                </div>
                                                            </div>
                                                        </a>
                                                    }

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <th>@strRejectReason</th>                                   <!--반려사유-->
                                <td colspan="6">
                                    @strDataLastApprRejectReason
                                </td>
                            </tr>
                        </tbody>
                    </table>


                </div>


                <!--/. content -->
            </div>
            <div class="modal-footer">
                @if (strDataApprStatusCode == "1")
                {
                    <button type="button" class="btn btn-md btn-red mr-0" disabled="@m_bTransCancel" @onclick="DetailTransCancel"><i class="fas fa-times-circle"></i>@strTransCancle</button>
                }
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@strClose</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    public class ApprHist
    {
        public string strName = "";                // 이름
        public string strApprStatus = "";          // 결재상태
        public string strApprDay = "";             // 승인일
        public string strReason = "";              // 반려사유

        public ApprHist()
        {
            strName = strApprStatus = strApprDay = strReason = "";
        }

        public ApprHist(string Name, string ApprStatus, string ApprDay, string Reason)
        {
            strName = Name;
            strApprStatus = ApprStatus;
            strApprDay = ApprDay;
            strReason = Reason;
        }
    }
    public string strTransDetailTitle = "";
    public string strArrpHistory = "";
    public string strTransKind = "";
    public string strTransStatus = "";
    public string strFilePos = "";
    public string strExpiredDay = "";
    public string strApprKind = "";
    public string strApprStatus = "";
    public string strApprReqDay = "";
    public string strReciver = "";
    public string strTitle = "";
    public string strDesc = "";
    public string strFileInfo = "";
    public string strFileName = "";
    public string strFileType = "";
    public string strFileSize = "";
    public string strFileFolder = "";
    public string strVirusHistory = "";
    public string strVirusExamDay = "";
    public string strApproverInfo = "";
    public string strApprover = "";
    public string strApproveStatus = "";
    public string strApproveDay = "";
    public string strRejectReason = "";
    public string strTransCancle = "";
    public string strClose = "";

    public string strDataTransKind = "";                // 전송구분
    public string strDataTransStatus = "";              // 전송상태
    public string strDataFilePos = "";                      // 파일위치
    public string strDataApprKind = "";             // 승인구분
    public string strDataApprStatus = "";                       // 승인상태
    public string strDataApprStatusCode = "";                   //승인상태 코드
    public string strDataApprReqDay = "";               // 승인요청일
    public string strDataTitle = "";                // 제목
    public string strDataDesc = "";             // 설명

    public string strDataLastApprName = "";             // 승인자
    public string strDataLastApprStatus = "";             // 승인상태
    public string strDataLastApprDay = "";                  // 승인일
    public string strDataLastApprRejectReason = "";         // 반려사유
    public string strDLP = String.Empty;                    //개인정보 검출여부

    public bool m_bTransCancel;                             // 전송취소 가능 상태 여부
    public long m_transSeq = 0;
    ISGSideBarUIService SideBarUISvc;

    public List<FileInfoData> mFileData = new List<FileInfoData>();

    List<ApprHist> apprHList = new List<ApprHist>();
    public bool bApprHistHidden = false;

    private bool m_bNetDownloadable = false; //망에 따라 다운가능한지 여부 판단(내부망은 반입, 외부망은 반출)
    public int m_downloadCount = 0;
    private bool m_bFileDownloading = false;

    private void requestManualDownload()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGDetailData sgDetailData = null;
        sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupID);
        if (sgDetailData == null)
            return;
        string curTransSeq = sgDetailData.GetTransSeq();

        ShowProgress(groupID, 1, 0, "DOWNLOAD");
        HSCmdCenter.RequestManualDownload(groupID, curUserID, curTransSeq);
        return;
    }

    public void FileDownloadProgressNoti(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        string sFileName = e.strMsg;
        int per = e.count;
        int type = 0;
        if (per >= 100)
        {
            type = 2;
            ShowProgress(groupID, type, 100, sFileName);
            System.Threading.Thread.Sleep(500);
            type = 3;                                       // close
            pageService.SetFileRecving(false);
        }
        else if ((per > 0) && (per < 100))
        {
            type = 2;                                       // update
            pageService.SetFileRecving(true);
        }
        else
            return;

        ShowProgress(groupID, type, per, sFileName);
    }
    // type : 1 - open , 2 - update ,3 -close
    private async void ShowProgress(int groupID, int type, int per, string sFileName)
    {
        object[] param = { };
        string identifier = "";
        string strID = groupID.ToString();
        //strID = strFileName;
        strID = "FILEDOWNLOAD";
        string strProgress = String.Format("{0}%", per);
        string strFileRecvInfo = "";
        if (per == 0)
        {
            string strInfoStart = XmlConf.GetInfoMsg("I_0203");                 // 다른 서버에서 파일을 탐색하는 중입니다./r/n잠시만 기다려 주십시요.
            strInfoStart = strInfoStart.Replace("/r/n", "<br>");
            strFileRecvInfo = strFileRecvInfo + strInfoStart;
        }
        else
        {
            strFileRecvInfo = XmlConf.GetWarnMsg("W_0087");                     // 파일 수신중 입니다./r/n잠시만 기다려 주십시오.
            strFileRecvInfo = strFileRecvInfo.Replace("/r/n", "<br>");
        }
        strFileRecvInfo = strFileRecvInfo + "<br>";

        string strProgressInfo = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
        string strProgressInfoStart =

        strFileRecvInfo = strFileRecvInfo + strProgressInfo + " : " + strProgress;

        switch (type)
        {
            case 1:
                string strTitleName = XmlConf.GetTitle("T_TRANS_MANUAL_DOWNLOAD");
                identifier = "fireProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strTitleName;
                param[2] = strFileRecvInfo;
                pageService.SetFileRecving(true);
                break;
            case 2:
                identifier = "updateProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFileRecvInfo;
                param[2] = strProgress;
                break;
            case 3:
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFilePrevRecving(false);
                System.Threading.Thread.Sleep(300);
                break;
            default:
                break;
        }
        await JSRuntime.InvokeAsync<object>(identifier, param);

        if (type == 3)
        {
            if (sFileName.Equals(""))
                return;

            if (m_bFileDownloading)
                return;
            else
                m_bFileDownloading = true;

            string strRecvDownPath = "";
            strRecvDownPath = HSCmdCenter.GetDownLoadPath(groupID);
            if (strRecvDownPath.Equals(""))
                return;
            System.Threading.Thread.Sleep(2000);

            ProcessStartInfo pi = new ProcessStartInfo(strRecvDownPath);
            pi.Arguments = Path.GetFileName(strRecvDownPath);
            pi.UseShellExecute = true;
            pi.WorkingDirectory = Path.GetDirectoryName(strRecvDownPath);
            pi.FileName = strRecvDownPath;
            pi.Verb = "OPEN";
            Process.Start(pi);
            m_bFileDownloading = false;

            //다운로드 완료후 다운로드 카운트 재요청 
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData == null)
                return;
            string strUserID = sgLoginData.GetUserID();

            HSCmdCenter.SendDownloadCount(groupID, strUserID, m_transSeq.ToString());
        }
    }
    public async Task openPopUp(long seq)
    {
        m_transSeq = seq;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;
        string strUserID = sgLoginData.GetUserID();

        HSCmdCenter.sgPageEvent.SetDownloadCountEventAdd(groupID, ReceiveDownloadCount);
        HSCmdCenter.sgPageEvent.SetFileRecvProgressEventAdd(FileDownloadProgressNoti);

        HSCmdCenter.SendDownloadCount(groupID, strUserID, seq.ToString());

        object[] param = { "TransPopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void ReceiveDownloadCount(int groupID, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = 0;
        if (e.GetSvrRecordTagData("DOWNCOUNT") == "" || e.GetSvrRecordTagData("DOWNCOUNT") == null)
            count = 0;
        else
            count = Int32.Parse(e.GetSvrRecordTagData("DOWNCOUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");

        if (result != "0")
        {
            ShowMessage("error", reason);
            return;
        }
        m_downloadCount = count;
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null) return;

        if (m_downloadCount < sgLoginData.GetMaxDownCount())
            m_bNetDownloadable = true;
        else
        {
            m_bNetDownloadable = false;
            StateHasChanged();
        }
    }

    public void closePopUp()
    {
        object[] param = { "TransPopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        InitText();
    }

    public void SetBindingData()
    {
        m_bNetDownloadable = false;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGDetailData sgDetailData = null;
        sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupID);
        if (sgDetailData == null)
            return;

        strDataTransKind = sgDetailData.GetTransKind();                                     // 전송구분
        strDataTransStatus = sgDetailData.GetTransStatus();                                 // 전송상태

        //*************************************************************************************************************************
        //수동다운로드 가능여부 판단 2021/05/24 YKH 시작
        //수동다운로드를 위해 전송완료되서 다운로드 할 위치 접근한것인지 확인
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        int netKind = 0;
        if (sgLoginData != null)
            netKind = sgLoginData.GetConnNetwork();                         //망 구분자 0:외부  1:내부
        if (netKind == 0 && strDataTransKind == XmlConf.GetTitle("T_COMMON_EXPORT"))
            m_bNetDownloadable = true;
        else if (netKind == 1 && strDataTransKind == XmlConf.GetTitle("T_COMMON_IMPORT"))
            m_bNetDownloadable = true;

        if (m_bNetDownloadable)
        {
            if (strDataTransStatus == XmlConf.GetTitle("T_TRANS_COMPLETE"))     //수동다운로드 이므로 PC수신완료 건만 다운가능
                m_bNetDownloadable = true;
            else
                m_bNetDownloadable = false;
        }

        int expireDate = Int32.Parse(sgDetailData.GetExpiredDay());
        int nowDate = Int32.Parse(DateTime.Now.ToString("yyyyMMdd"));
        if (m_bNetDownloadable)
        {
            if (expireDate > nowDate)
                m_bNetDownloadable = true;
            else
                m_bNetDownloadable = false;
        }

        if (m_bNetDownloadable)
        {
            if (m_downloadCount < sgLoginData.GetMaxDownCount())
                m_bNetDownloadable = true;
            else
                m_bNetDownloadable = false;
        }
        //수동다운로드 가능여부 판단 2021/05/24 YKH 종료
        //*************************************************************************************************************************


        Dictionary<string, SGNetOverData> dicDestSysPos = null;
        dicDestSysPos = pageService.GetTargetSystemList(groupID);
        if (dicDestSysPos != null && dicDestSysPos.Count > 1)  // && strFromServerNetOver.Length > 0 && strDestServerNetOver.Length > 0)
            strDataFilePos = sgDetailData.GetFilePosNetOver(dicDestSysPos); // 파일위치(3망연계상황)
        else
            strDataFilePos = sgDetailData.GetFilePos();                                     // 파일위치

        strDataApprKind = sgDetailData.GetApprKind();                                       // 승인구분
        strDataApprStatus = sgDetailData.GetApprStatus();                                   // 승인상태
        strDataApprStatusCode = sgDetailData.GetApprStatusCode();
        strDataApprReqDay = sgDetailData.GetApprReqDay();                                   // 승인요청일
        strDataTitle = sgDetailData.GetTitle();                                             // 제목
        FileAddManage fileAddManage = new FileAddManage();
        strDataTitle = fileAddManage.GetConvertTitleDesc(false, strDataTitle);
        strDataDesc = sgDetailData.GetDesc();                                              // 설명
        strDataDesc = fileAddManage.GetConvertTitleDesc(false, strDataDesc);
        strDLP = sgDetailData.GetDLP(); //개인정보

        sgDetailData.GetFileInfo(out mFileData);
        if (mFileData == null)
            return;

        List<ApproverHist> apprListHist = null;
        apprListHist = sgDetailData.GetApproverInfoHist();
        if ((apprListHist == null) || (apprListHist.Count <= 1))
        {
            bApprHistHidden = true;
        }
        if ((apprListHist == null) || (apprListHist.Count <= 0))
        {
            strDataLastApprName = strDataLastApprStatus = strDataLastApprDay = strDataLastApprRejectReason = "-";
        }
        else
        {
            ApproverHist apprHist = null;
            apprHist = sgDetailData.GetTransLastApproverHistData(apprHist);
            if (apprHist == null)
                strDataLastApprName = strDataLastApprStatus = strDataLastApprDay = strDataLastApprRejectReason = "-";
            else
            {
                strDataLastApprName = apprHist.m_strApproverName;
                strDataLastApprStatus = apprHist.m_strApprStatus;
                strDataLastApprDay = apprHist.m_strApprDay;
                if ((!strDataLastApprDay.Equals("")) && (!strDataLastApprDay.Equals("-")))
                    strDataLastApprDay = sgDetailData.GetConvertDay(strDataLastApprDay);
                strDataLastApprRejectReason = apprHist.m_strRejectReason;
            }
        }

        //OR 결재 승인상태 교정 시작 2021/06/28 YKH
        //같은 결재 단계에 여러명이 존재하고 그중 한명이 승인상태라면 승인상태 제외한 나머지는 요청취소로 승인상태문구를 변경해준다.
        //최종 스탭 결정
        if(apprListHist != null && apprListHist.Count > 0)
        {
            int nMaxStep = 1;
            foreach (ApproverHist data in apprListHist)
            {
                if (nMaxStep > data.m_nApprStep)
                    nMaxStep = data.m_nApprStep;
            }
            //각 스텝별 승인여부 확인
            for (int i = 1; i <= nMaxStep; i++)
            {
                bool bApproveFlag = false;
                for (int j = 0; j < apprListHist.Count; j++)
                {
                    ApproverHist appr = apprListHist[j];
                    if (appr.m_nApprStep != i)
                        continue;
                    if (appr.m_strApprStatus == XmlConf.GetTitle("T_COMMON_APPROVE"))
                        bApproveFlag = true;
                }
                if (bApproveFlag == true)
                {
                    for (int j = 0; j < apprListHist.Count; j++)
                    {
                        ApproverHist appr = apprListHist[j];
                        if (appr.m_nApprStep != i)
                            continue;
                        if (appr.m_strApprStatus != XmlConf.GetTitle("T_COMMON_APPROVE"))
                            appr.m_strApprStatus = XmlConf.GetTitle("T_COMMON_WORKCOMPLETE");
                    }
                }
            }
        }
        //OR 결재 승인 상태 교정 종료

        if (apprListHist != null)
        {
            apprHList.Clear();
            foreach (ApproverHist data in apprListHist)
            {
                string sName = data.m_strApproverName;
                string sApprStatus = data.m_strApprStatus;
                string sApprDay = data.m_strApprDay;
                string sRejectReason = data.m_strRejectReason;
                apprHList.Add(new ApprHist(sName, sApprStatus, sApprDay, sRejectReason));
            }
        }

        m_bTransCancel = (!sgDetailData.GetTransCancelEnable());

        StateHasChanged();
    }


    public void InitText()
    {
        strTransDetailTitle = XmlConf.GetTitle("T_TRANS_DETAIL");                          // 전송상세보기
        strArrpHistory = XmlConf.GetTitle("T_DETAIL_APPROVE_CATEGORY");                     // 결재내역
        strTransKind = XmlConf.GetTitle("T_COMMON_TRANSKIND");                             // 전송구분
        strTransStatus = XmlConf.GetTitle("T_TRANS_STATUS");                                // 전송상태
        strFilePos = XmlConf.GetTitle("T_DETAIL_FILEPOS");                                  // 파일위치
        strExpiredDay = XmlConf.GetTitle("T_GPKI_LIST_EXPIREDATE");                         // 만료일
        strApprKind = XmlConf.GetTitle("T_COMMON_APPROVEKIND");                             // 승인구분
        strApprStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                         // 승인상태
        strApprReqDay = XmlConf.GetTitle("T_DETAIL_REQDAY");                                // 승인요청일
        strReciver = XmlConf.GetTitle("T_ETC_RECIVER");                                     // 수신자
        strTitle = XmlConf.GetTitle("T_DETAIL_TITLE");                                      // 제목
        strDesc = XmlConf.GetTitle("T_DETAIL_DESC");                                        // 설명
        strFileInfo = XmlConf.GetTitle("T_DETAIL_FILEINFO");                                // 파일정보
        strFileName = XmlConf.GetTitle("T_COMMON_FILENAME");                                // 파일명
        strFileType = XmlConf.GetTitle("T_COMMON_KIND");                                    // 유형
        strFileSize = XmlConf.GetTitle("T_COMMON_SIZE");                                    // 크기
        strFileFolder = XmlConf.GetTitle("T_COMMON_FOLDER");                                // 폴더
        strVirusHistory = XmlConf.GetTitle("T_DETAIL_VIRUSHIST");                           // 바이러스 내역
        strVirusExamDay = XmlConf.GetTitle("T_DETAIL_VIRUSCHECKDATE");                      // 바이러스 검사일
        strApproverInfo = XmlConf.GetTitle("T_DETAIL_APPROVEINFO");                         // 결재자 정보
        strApprover = XmlConf.GetTitle("T_DETAIL_APPROVEUSER");                             // 승인자
        strApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                      // 승인상태
        strApproveDay = XmlConf.GetTitle("T_COMMON_APPROVEDATE");                           // 승인일
        strRejectReason = XmlConf.GetTitle("T_APPROVE_APRROVEREASON");                      // 반려사유
        strTransCancle = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");                          // 전송취소
        strClose = XmlConf.GetTitle("T_FILE_FOLD");                                          // 닫기
    }

    public void DetailTransCancel()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        SGDetailData sgDetailData = null;
        sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupID);
        if (sgDetailData == null)
            return;
        string curTransSeq = sgDetailData.GetTransSeq();
        string curAction = "2";
        string curReason = "사유";

        HSCmdCenter.SendTransCancel(groupID, curUserID, curTransSeq, curAction, curReason);

        closePopUp();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

}
