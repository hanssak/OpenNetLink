@inject IJSRuntime JSRuntime
@using System.Collections.Generic
@using System.IO
@using System.Threading.Tasks
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using Radzen
@using Radzen.Blazor
@using OpenNetLinkApp.Services
@inject XmlConfService XmlConf
@inject HSCmdCenter HsCmdCenter
@inject ISGAppManagerService SGAppMgrSvc

<div class="modal fade" id="ApproverSelect_TreePopUp">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                <h5 class="modal-title pt-1 text-bold ">@strApproverSearch</h5>                                 <!--결재자 조회-->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- content -->
                <!-- s------------------------------------------------------------------------------------------------------  -->

                <div class="card-body p-0">


                    <!--s table -->
                    <div class="box1" style=" width:46%;  float:left;">
                        @*<div class="card-body  p-0" style="height:368px; border:1px solid #ddd; background-color:#fff;">*@
                        <div class="card-body  p-0" style="height:368px;">

                            <div class="table-responsive p-1 mb-2" style="height:185px;border:1px solid #ddd; background-color:#fff;">
                                <RadzenTree Change="@OnSelectDept" Data="@deptTreeInfoValues" Style="width: 98%;height:95%;overflow:auto">
                                    @*<RadzenTreeLevel TextProperty="DeptName" ChildrenProperty="ChildrenInfo" Expanded="@(data => (data as DeptTreeInfo).IsExpanded)" Selected="@(data => (data as DeptTreeInfo).DeptSeq == MyDeptSeq)" Template="DeptTemplate" />*@
                                    <RadzenTreeLevel TextProperty="DeptName" ChildrenProperty="ChildrenInfo" HasChildren="@((data) => false)" Expanded="@(data => (data as DeptTreeInfo).IsExpanded)" Selected="@(data => (data as DeptTreeInfo).DeptSeq == strSeletedDeptCode)" Template="DeptTemplate" />
                                </RadzenTree>
                            </div>
                            <div class="card-body table-responsive p-0" style="height:181px; border:1px solid #ddd; background-color:#fff;">
                                <table class="table table-head-fixed">
                                    <colgroup>
                                        <col width="">
                                        <col width="">
                                        <col width="">
                                        <col width="">
                                    </colgroup>
                                    <thead>
                                        <tr>
                                            <th>@strOrder </th>            <!--순번-->
                                            <th>@strDept </th>            <!--부서-->
                                            <th>@strRank </th>            <!--직급-->
                                            <th>@strName </th>            <!--이름-->
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (ApproverInfo item in ApproverSearch)
                                        {
                                            <tr name="trItem2" draggable="false" data-draggable="tritem" aria-grabbed="false" value="@item.UserSeq" @ondblclick="() => DoubleClick(item)">
                                                <td>@item.Index</td>
                                                <td>@item.DeptName</td>
                                                <td>@item.Grade</td>
                                                <td>@item.Name</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <!--e table -->
                    <!--s btn -->
                    <div class="box2" style=" width:8%; height:300px; float:left;">
                        <div class="col-md-12 text-center" style="top:45% !important;">
                            <button type="button" class="btn bg-gradient-primary mb-3" @onclick="AddSelectApprover"><i class="fas fa-angle-right fa-2x"></i></button>
                            <button type="button" class="btn bg-gradient-primary" @onclick="RemoveAssignApprover"><i class="fas fa-angle-left fa-2x"></i></button>
                        </div>
                    </div>
                    <!--e btn -->
                    <!--s table -->
                    <div class="box1" style="width:46%;  float:left;">
                        <div class="btn-group w-100 mb-2 ">
                            @if (m_step == 0)
                            {
                                <button type="button" class="btn bg-gradient-secondary mr-1" @onclick="moveToTop"><i class="fas fa-angle-double-up pr-2"></i>@strMostTop</button>            <!--맨위-->
                                <button type="button" class="btn bg-gradient-secondary mr-1" @onclick="moveToUpper"><i class="fas fa-arrow-up pr-1"></i>@strTop</button>                   <!--위-->
                                <button type="button" class="btn bg-gradient-secondary mr-1" @onclick="moveToLower"><i class="fas fa-arrow-down pr-1"></i>@strDown</button>               <!--아래-->
                                <button type="button" class="btn bg-gradient-secondary" @onclick="moveToBottom"><i class="fas fa-angle-double-down pr-2"></i>@strMostBottom</button>           <!--맨아래-->
                            }
                            else
                            {
                                <div style="height:28px;">&nbsp;</div>
                            }
                        </div>

                        <div class="card-body table-responsive p-0" style="height:331px; border:1px solid #ddd; background-color:#fff;">
                            <table class="table table-head-fixed">
                                <colgroup>
                                    <col width="">
                                    <col width="">
                                    <col width="">
                                    <col width="">
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th>@strOrder </th>                <!--순번-->
                                        <th>@strDept </th>                <!--부서-->
                                        <th>@strRank </th>                <!--직급-->
                                        <th>@strName </th>                <!--이름-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (ApproverInfo item in ApproverSelect)
                                    {
                                        <tr name="trSelect2" draggable="false" data-draggable="tritem" aria-grabbed="@(item.Index == stTargetSelect ? "true" : "false")" value="@item.Index">
                                            <td>@item.Index</td>
                                            <td>@item.DeptName</td>
                                            <td>@item.Grade</td>
                                            <td>@item.Name</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>



                    </div>
                    <!--e table -->
                </div>
                <!--/. content -->
            </div>

            <!-- e------------------------------------------------------------------------------------------------------  -->

            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="closePopUp"><i class="fas fa-check"></i>@strOK</button>
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@strClose</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
@code {
    List<DeptTreeInfo> deptTreeInfoValues = null;
    private LinkedList<ApproverInfo> ApproverSearch = new LinkedList<ApproverInfo>();
    private LinkedList<ApproverInfo> ApproverSelect = new LinkedList<ApproverInfo>();
    private string stSelectApprover = "";
    private string stTargetSelect = "";
    private static Action<string> actionAssign;
    private static Action<string> actionTargetSelect;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    /// <summary>
    /// 현재 Active된 GRoupid 에 로그인된 정보
    /// </summary>
    SGLoginData activedSGLogin
    {
        get
        {
            int groupid = activedGroupID;
            SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupid);
            return sgLoginData;
        }
    }
    /// <summary>
    /// 현재 Active 되어 있는 Groupid
    /// </summary>
    int activedGroupID
    {
        get
        {
            ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
            return (sgSideBar == null) ? 0 : sgSideBar.GroupId;
        }
    }

    public string strApproverSearch = "";
    public string strDept = "";
    public string strName = "";
    public string strSearch = "";
    public string strOrder = "";
    public string strRank = "";
    public string strMostTop = "";
    public string strMostBottom = "";
    public string strTop = "";
    public string strDown = "";
    public string strOK = "";
    public string strClose = "";
    string strSeletedDeptCode = "";

    int m_step = 0;   //
    @*private string strSeletedDept = "";*@

    ISGSideBarUIService SideBarUISvc;

    void DoubleClick(ApproverInfo clickInfo)
    {
        stSelectApprover = clickInfo.UserSeq;
        AddSelectApprover();
    }

    public async Task openPopUp()
    {
        object[] param = { "ApproverSelect_TreePopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        object[] param = { "ApproverSelect_TreePopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    private void AddSelectApprover()
    {
        Console.WriteLine($"stSelectApprover : {stSelectApprover}");
        if (stSelectApprover.Length < 1)
            return;
        ApproverInfo apv = ApproverSearch.FirstOrDefault(x => x.UserSeq == stSelectApprover);
        if (apv != null)
        {
            ApproverInfo apvAsign = ApproverSelect.FirstOrDefault(x => x.UserSeq == stSelectApprover);
            if (apvAsign == null)
                ApproverSelect.AddLast(apv);
        }
    }
    private void RemoveAssignApprover()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
            ApproverSelect.Remove(apvTarget);
    }
    private void moveToTop()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
        {
            ApproverSelect.Remove(apvTarget);
            ApproverSelect.AddFirst(apvTarget);
        }
        StateHasChanged();
    }
    private void moveToUpper()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);

        if (apvTarget != null)
        {
            //현재값으 앞에값을 구하기
            LinkedListNode<ApproverInfo> current;
            LinkedListNode<ApproverInfo> next;
            current = ApproverSelect.First;
            if (current.Value.UserSeq == stTargetSelect)
            {
                return;
            }

            for (int i = 0; i < ApproverSelect.Count; i++)
            {
                next = current.Next;
                if (next.Value.UserSeq == stTargetSelect)
                {
                    ApproverSelect.Remove(apvTarget);
                    ApproverSelect.AddBefore(current, apvTarget);
                    break;
                }
                else
                {
                    current = current.Next;
                }
            }
        }
        StateHasChanged();
    }
    private void moveToLower()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);

        if (apvTarget != null)
        {
            //현재값으 앞에값을 구하기
            LinkedListNode<ApproverInfo> current;
            LinkedListNode<ApproverInfo> next;
            LinkedListNode<ApproverInfo> last;
            current = ApproverSelect.First;
            last = ApproverSelect.Last;
            if (last.Value.UserSeq == stTargetSelect)
            {
                return;
            }

            for (int i = 0; i < ApproverSelect.Count; i++)
            {
                next = current.Next;
                if (current.Value.UserSeq == stTargetSelect)
                {
                    ApproverSelect.Remove(apvTarget);
                    ApproverSelect.AddAfter(next, apvTarget);
                    break;
                }
                else
                {
                    current = current.Next;
                }
            }
        }
        StateHasChanged();
    }
    private void moveToBottom()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
        {
            ApproverSelect.Remove(apvTarget);
            ApproverSelect.AddLast(apvTarget);
        }
        StateHasChanged();
    }

    void LoadChildrenDepts(TreeExpandEventArgs args)
    {
        try
        {
            DeptTreeInfo Select = ((DeptTreeInfo)args.Value);

            args.Children.Data = Select.ChildrenInfo;
            args.Children.TextProperty = "DeptName";
            args.Children.HasChildren = ((obj) => Select.ChildrenInfo?.Count > 0);
            @*args.Children.Expanded = ((obj) => Select.IsExpanded);*@

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    void LoadDepts(TreeExpandEventArgs args)
    {
        try
        {
            DeptTreeInfo Seq = args.Value as DeptTreeInfo;

            @*args.Children.Data = childDept;*@

            @*args.Children.Text = GetTextForNode;*@
            //args.Children.HasChildren = (path) => Directory.Exists((string)path);
            args.Children.HasChildren = (path) => true;
            args.Children.Template = DeptTemplate;


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    @*  string GetTextForNode(object data)
        {
        ApvDeptInfo dept = (ApvDeptInfo)data;
        return dept.deptName;
        }*@

    [JSInvokable("ApproverTargetSelect2")]
    public static void ApproverTargetSelect2(string value)
    {
        actionTargetSelect.Invoke(value);
    }
    private void SelectTarget(string value)
    {
        stTargetSelect = value;
        StateHasChanged();
    }

    [JSInvokable("ApproverSearchSelect2")]
    public static void ApproverSearchSelect2(string value)
    {
        actionAssign.Invoke(value);
    }

    private void AssignApprover(string value)
    {
        stSelectApprover = value;
        StateHasChanged();
    }
    RenderFragment<RadzenTreeItem> DeptTemplate = (context) => builder =>
    {
        DeptTreeInfo dept = context.Value as DeptTreeInfo;

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", "assignment");



        if (dept.ChildrenInfo == null || dept.ChildrenInfo.Count <= 0)
            builder.AddAttribute(2, "Style", "margin-left: 15px");

        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    void OnSelectDept(TreeEventArgs args)
    {
        Log("Change", $"Item Text: {args.Text}");
        //curDir = args.Text;
        //LoadApproverList(args.Value as string);
        //OnSelectPathFromFileTree.InvokeAsync(args); //부모컴포넌트에 이벤트 전달
        DeptTreeInfo selectedDept = args.Value as DeptTreeInfo;

        if (selectedDept == null)
            return;

        updateDeptAppr(selectedDept.DeptSeq);

        

    }
    void Log(string eventName, string value)
    {
        events.Add(DateTime.Now, $"{eventName}: {value}");
    }

    List<DeptTreeInfo> init = new List<DeptTreeInfo>();
    protected override void OnInitialized()
    {
        actionAssign = AssignApprover;
        actionTargetSelect = SelectTarget;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        @*
            ApproverSearch.AddLast(new ApproverInfo2("001", "개발3팀", "사원", "1번님"));
            ApproverSearch.AddLast(new ApproverInfo2("002", "개발3팀", "사원", "2번님"));
            ApproverSearch.AddLast(new ApproverInfo2("003", "개발3팀", "사원", "3번님"));
            ApproverSearch.AddLast(new ApproverInfo2("004", "개발3팀", "사원", "4번님"));
            ApproverSearch.AddLast(new ApproverInfo2("005", "개발3팀", "사원", "5번님"));
            ApproverSearch.AddLast(new ApproverInfo2("006", "개발3팀", "사원", "6번님"));
            ApproverSearch.AddLast(new ApproverInfo2("007", "개발3팀", "사원", "7번님"));
            ApproverSearch.AddLast(new ApproverInfo2("008", "개발3팀", "사원", "8번님"));
            ApproverSearch.AddLast(new ApproverInfo2("009", "개발3팀", "사원", "9번님"));
            ApproverSearch.AddLast(new ApproverInfo2("010", "개발3팀", "사원", "10번님"));
            ApproverSearch.AddLast(new ApproverInfo2("011", "개발3팀", "사원", "11번님"));
            ApproverSearch.AddLast(new ApproverInfo2("012", "개발3팀", "사원", "12번님"));
            ApproverSearch.AddLast(new ApproverInfo2("013", "개발3팀", "사원", "13번님"));
            ApproverSearch.AddLast(new ApproverInfo2("014", "개발3팀", "사원", "14번님"));
            ApproverSearch.AddLast(new ApproverInfo2("015", "개발3팀", "사원", "15번님"));
            ApproverSearch.AddLast(new ApproverInfo2("016", "개발3팀", "사원", "16번님"));
            ApproverSearch.AddLast(new ApproverInfo2("018", "개발3팀", "사원", "17번님"));
            ApproverSearch.AddLast(new ApproverInfo2("019", "개발3팀", "사원", "17번님"));

            ApproverSelect.AddLast(new ApproverInfo2("000", "개발3팀", "사원", "0번님"));
        *@
        InitText();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            @*   ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
                int groupID = 0;
                if (sgSideBar != null)
                groupID = sgSideBar.GroupId;*@
            int groupID = activedGroupID;

            @* SGLoginData sgLoginData = null;
                sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);*@
            SGLoginData sgLoginData = activedSGLogin;
            if (sgLoginData == null)
                return;

            SGUserData sgUserData = null;
            sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
            if (sgUserData == null)
                return;
            strSeletedDeptCode = sgUserData.GetTeamCode();
            m_step = sgLoginData.GetApproveStep();


            string approvePopupType = SGAppMgrSvc.OpConfigInfoService.GetApproveSelectPopUpType();
            if (approvePopupType != "TREE")
                return;

            //DEPTINFO 요청
            HsCmdCenter.sgPageEvent.SetDeptInfoEventAdd(groupID, DeptInfoResult);                //부서 트리 정보
            HsCmdCenter.SendDeptInfo(groupID, sgLoginData.GetUserID());
        }
    }

    /// <summary>
    /// 부서 트리 세팅하기
    /// </summary>
    /// <param name="groupId"></param>
    void DeptInfoResult(int groupId)
    {
        SGDeptInfo info = (SGDeptInfo)HsCmdCenter.GetDeptInfoData(groupId);

        //부서 Tree 세팅
        deptTreeInfoValues = info?.GetDeptInfoTree(strSeletedDeptCode);
        @*
            deptTreeInfoValues = new List<DeptTreeInfo>();
            DeptTreeInfo a = new DeptTreeInfo() { DeptSeq = "1", DeptName = "A(NULL)", ChildrenInfo = null };
            DeptTreeInfo b = new DeptTreeInfo() { DeptSeq = "2", DeptName = "B(빈값)", ChildrenInfo = new List<DeptTreeInfo>() };


            DeptTreeInfo cc = new DeptTreeInfo() { DeptSeq = "30", DeptName = "CC(NULL)", ChildrenInfo = null };
            DeptTreeInfo c = new DeptTreeInfo() { DeptSeq = "3", DeptName = "C(자식있음)", ChildrenInfo = new List<DeptTreeInfo>() { cc } };
            c.IsExpanded = true;

            deptTreeInfoValues.Add(a);
            deptTreeInfoValues.Add(b);
            deptTreeInfoValues.Add(c);*@

    }


    /// <summary>
    /// 초기 본인의 부서에 조회된 사용자 표시하기
    /// </summary>
    public void InitDeptApprInsert()
    {
        ApproverSearch.Clear();

        int groupID = activedGroupID;

        //부서의 사용자 조회한 결과값 세팅하기
        SGDeptApprLineSearchData sgDeptApprLine = (SGDeptApprLineSearchData)HsCmdCenter.GetDeptApprLineSearchData(groupID);
        if (sgDeptApprLine == null)
            return;

        LinkedList<ApproverInfo> listSearchUsers = sgDeptApprLine.GetDeptApproverInfoData();
        if ((listSearchUsers == null) || (listSearchUsers.Count <= 0))
            return;

        SGUserData sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string userSeq = sgUserData.GetUserSequence();
        int idx = 1;
        foreach (ApproverInfo searchUser in listSearchUsers)
        {
            if (searchUser.UserSeq == userSeq)          //조회 결과에서 본인은 제외
                continue;
            searchUser.Index = string.Format("{0,2}", idx.ToString());
            ApproverSearch.AddLast(searchUser);
            idx++;
        }
        StateHasChanged();
    }

    void updateDeptAppr(string getSelectedDeptSeq)
    {
        if (activedSGLogin == null)
            return;
        int groupID = activedGroupID;

        strSeletedDeptCode = getSelectedDeptSeq;

        string strSysID = activedSGLogin.GetSysID();
        string strUserID = activedSGLogin.GetUserID();
        int strApproveProxyRight = activedSGLogin.GetTagValueInteger("APPROVEPROXYRIGHT");
        string strTeamCode = getSelectedDeptSeq;

        bool bApproverOnly = (strApproveProxyRight == 1) ? true : false;

        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, "", "", strTeamCode, bApproverOnly);

        HsCmdCenter.sgPageEvent.SetDeptApprLineSearchEventAdd(groupID, DeptApprSearchResult);
        HsCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
    }

    public void DeptApprSearchResult(int groupid, PageEventArgs e)
    {
        ApproverSearch.Clear();
        int groupID = activedGroupID;

        //선택된 부서의 사용자 조회한 결과값 세팅하기
        SGDeptApprLineSearchData sgDeptApprLine = (SGDeptApprLineSearchData)HsCmdCenter.GetDeptApprLineSearchData(groupID);
        if (sgDeptApprLine == null)
            return;

        LinkedList<ApproverInfo> listSearchUsers = sgDeptApprLine.GetDeptApproverInfoData();
        if ((listSearchUsers == null) || (listSearchUsers.Count <= 0))
        {
            StateHasChanged();
            return;
        }

        SGUserData sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string userSeq = sgUserData.GetUserSequence();
        int idx = 1;
        foreach (ApproverInfo searchUser in listSearchUsers)
        {
            if (searchUser.UserSeq == userSeq)          //조회 결과에서 본인은 제외
                continue;
            searchUser.Index = string.Format("{0,2}", idx.ToString());
            ApproverSearch.AddLast(searchUser);
            idx++;
        }
        StateHasChanged();
    }

    @*
        public class ApvDeptInfo
        {
        public ApvDeptInfo(string deptseq, string deptname)
        {
        deptSeq = deptseq;
        deptName = deptname;
        }
        public string deptSeq { get; set; }
        public string deptName { get; set; }
        }


        public class ApproverInfo2
        {
        public ApproverInfo2(string index, string deptname, string grade, string name)
        {
        Index = index;
        DeptName = deptname;
        Grade = grade;
        Name = name;
        }

        public string Index { get; set; }
        public string DeptName { get; set; }
        public string Grade { get; set; }
        public string Name { get; set; }
        }
    *@
    public void InitText()
    {
        strApproverSearch = XmlConf.GetTitle("T_COMMON_APPROVESEARCH");             // 결재자 조회
        strDept = XmlConf.GetTitle("T_COMMON_DEPT");                                // 부서
        strName = XmlConf.GetTitle("T_COMMON_NAME");                                // 이름
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            // 조회
        strOrder = XmlConf.GetTitle("T_COMMON_ORDER");                              // 순번
        strRank = XmlConf.GetTitle("T_COMMON_RANK");                                // 직급
        strMostTop = XmlConf.GetTitle("T_ETC_TOP");                                 // 맨위
        strMostBottom = XmlConf.GetTitle("T_ETC_BOTTOM");                           // 맨아래
        strTop = XmlConf.GetTitle("T_ETC_UP");                                      // 위
        strDown = XmlConf.GetTitle("T_ETC_DOWN");                                   // 아래
        strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
        strClose = XmlConf.GetTitle("T_FILE_FOLD");                                 // 닫기
    }
}