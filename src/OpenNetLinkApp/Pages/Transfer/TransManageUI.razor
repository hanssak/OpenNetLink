@page "/transManage"
@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.Models.SGSideBar
@using HsNetWorkSGData
@using HsNetWorkSG 
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery 
@using System.Text 
@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strTransManTitleGap</h1>                        <!--전송 관리-->
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">@strTransManageTitle</li>            <!--전송관리-->
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>
                            <colgroup>
                                <col width="*">
                                <col width="300px">
                                <col width="*">
                                <col width="120px">
                                <col width="*">
                                <col width="120px">
                                <col width="*">
                                <col width="120px">
                                <col width="*">
                                <col width="150px">
                            </colgroup>
                            <tr>
                                <th class="p-2">@strPeriod</th>                         <!--기간-->
                                <td>
                                    <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker" readonly value="@strFromDay">
                                    <span class="float-left col-md-1">-</span>
                                    <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker2" readonly value="@strToDay">
                                </td>
                                <th class="p-2"> @strTransKind </th>                     <!--전송구분-->
                                <td>
                                    <select class="form-control" @bind="strTransKindValue" style="width:100px;">
                                        <option> @strTotal</option>                        <!--전체-->
                                        <option> @strCarryOut</option>                        <!--반출-->
                                        <option> @strCarryIn</option>                        <!--반입-->
                                    </select>
                                </td>
                                <th class="p-2"> @strTransStatus </th>                         <!--전송상태-->
                                <td>
                                    <select class="form-control" @bind="strTransStatusValue" style="width:100px;">
                                        <option> @strTotal</option>                            <!--전체-->
                                        <option> @strTransWait</option>                         <!--전송대기-->
                                        <option> @strTransCancle</option>                          <!--전송취소-->
                                        <option> @strTransComplete</option>                        <!--전송완료-->
                                        <option> @strTransFail</option>                          <!--전송실패-->
                                        <option> @strTransInspect</option>                          <!--검사중-->
                                    </select>
                                </td>
                                <th class="p-2"> @strApprStatus </th>                             <!--승인상태-->
                                <td>
                                    <select class="form-control" @bind="strApprStatusValue" style="width:100px;">
                                        <option> @strTotal</option>                                <!--전체-->
                                        <option> @strApprWait</option>                              <!--승인대기-->
                                        <option> @strApprove</option>                                <!--승인-->
                                        <option> @strReject</option>                                <!--반려-->
                                        <option> @strApprCancle</option>                              <!--요청취소-->
                                    </select>
                                </td>
                            </tr>

                            <tr>
                                <th class="p-2 pt-2"> @strTitle </th>                                  <!--제목-->
                                <td class="pt-2" colspan="7"><input type="text" class="form-control" placeholder=@strTitleInputInfo @bind="strTitleValue"></td>     <!--제목을 입력하여 주십시요.-->
                            </tr>
                        </table>

                    </div>



                </div>
            </div>
        </div>

        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-3">
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox">
                        <label class="form-check-label">@strReflesh</label>                        <!--새로고침-->
                    </div>
                </div>
            </div>

            <div class="col-sm-9 text-right">
                <button type="button" class="btn btn-md bg-gradient-secondary" @onclick="@TransSearchCount"><i class="fas fa-search pr-2"></i>@strSearch</button>                <!--조회-->
                <!--<button type="button" class="btn btn-md bg-gradient-primary"><i class="fas fa-file pr-2"></i>@strDownload</button>     -->              <!--다운로드-->
                <button type="button" id="btnCancel" class="btn btn-md bg-gradient-danger" @onclick="@TransCancel"><i class="fas fa-times-circle pr-2"></i>@strTransCancle</button>        <!--전송취소-->
            </div>
        </div>
        <!-- list -->

        <div class="row">



            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">


                    <form class="form-horizontal">

                        <div class="card-body  p-0">
                            <table id="table1" class="table table-head-fixed table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th style="text-align:center">
                                            <!--  <input class="input" type="checkbox">  -->
                                        </th>
                                        <th style="text-align:center">@strApproveKind</th>                         <!--결재종류-->
                                        <th style="text-align:center">@strTransKind</th>                         <!--전송구분-->
                                        <th style="text-align:center">@strTransStatus</th>                         <!--전송상태-->
                                        <th style="text-align:center">@strApprStatus</th>                         <!--승인상태-->
                                        <!-- <th style="text-align:center">@strFileForward</th>   -->                      <!--파일전달-->
                                        <th style="text-align:center">@strTitle</th>                               <!--제목-->
                                        <th style="text-align:center">@strFileSendDay</th>                        <!--전송요청일-->
                                        <th style="text-align:center">@strDetail</th>                         <!--상세보기-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (transData item in mData)
                                    {
                                    <tr class="TransSearch">
                                        <td style="text-align:center">
                                            <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                        </td>
                                        <td style="text-align:center">@item.ApvType</td>
                                        <td style="text-align:center">@item.TransferType</td>
                                        <td style="text-align:center">@item.TransferStatus</td>
                                        <td style="text-align:center">@item.ApvStatus</td>
                                        <!-- <td style="text-align:center">@item.IsFile</td> -->
                                        <td>@item.Title</td>
                                        <td style="text-align:center">@item.RequestTime</td>
                                        <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>DetailSearch(item.TransSeq))"><i class="fas fa-search"></i></button></td>
                                    </tr>
                                    }
                                </tbody>
                            </table>
                        </div>


                        <div class="card-body pt-0">

                            <!--S page -->


                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>  <!--총페이지-->
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>


                            <!--/.S page -->


                        </div>






                        <!--footer test-->
                        <Footer></Footer>
                        <!--./footer test-->
                        <!-- /.card-footer -->


                    </form>

                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<TransPopUp @ref="refTransPopUp"></TransPopUp>

@code {
    TransPopUp refTransPopUp;
    public int TotalCount { get; set; }
    public List<transData> mData = new List<transData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    public string strTransManTitleGap = "";
    public string strTransManageTitle = "";
    public string strPeriod = "";
    public string strTransKind = "";
    public string strTotal = "";
    public string strCarryIn = "";
    public string strCarryOut = "";
    public string strTransStatus = "";
    public string strTransComplete = "";
    public string strTransWait = "";
    public string strTransCancle = "";
    public string strApprStatus = "";
    public string strApprove = "";
    public string strApprWait = "";
    public string strReject = "";
    public string strApprCancle = "";
    public string strTitle = "";
    public string strReflesh = "";
    public string strSearch = "";
    public string strDownload = "";
    public string strApproveKind = "";
    public string strFileForward = "";
    public string strFileSendDay = "";
    public string strDetail = "";
    public string strTotalPage = "";
    public string strTransFail = "";
    public string strTransInspect = "";
    public string strTitleInputInfo = "";

    public string strFromDay = "";
    public string strToDay = "";

    ISGSideBarUIService SideBarUISvc;

    public string strTransKindValue = "";
    public string strTransStatusValue = "";
    public string strApprStatusValue = "";
    public string strTitleValue = "";

    public string strSystemName = "";

    public string curUserID = "";
    public string curFromDay = "";
    public string curToDay = "";
    public string curTransKind = "";
    public string curTransStatus = "";
    public string curApprStatus = "";
    public string curTitle = "";


    private void UpdateList(int pageNumber)
    {
        //nViewPageNo = pageNumber + 1;
        if (nViewPageNo != (pageNumber+1))
        {
            nViewPageNo = pageNumber+1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip((pageNumber - 1) * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }

    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }
    private void UpdateData()
    {
        TransSearchData(nViewPageNo);
    }

    //원데이타라고 가정함
    public List<transData> ListData = new List<transData>();

    public async Task OpenDetailPopup(string strTransSeq)
    {
        Console.WriteLine("Open Detail Start" + strTransSeq);
        long ltransSeq = Convert.ToInt64(strTransSeq);
        await refTransPopUp.openPopUp(ltransSeq);
    }
    public void DetailSearch(string transSeq)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetDetailSearchEventAdd(groupID, DetailSearchResult);           // 상세보기 조회 결과

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendTransDetail(groupID, strUserID, transSeq);
    }
    public void DetailSearchResult(int groupId, PageEventArgs e)
    {
        int nRet = e.result;
        string strMsg = e.strMsg;
        if (nRet != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        SGDetailData sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupId);
        if (sgDetailData == null)
            return;

        transData tData = null;
        tData = GetTransListData(strMsg);
        if (tData != null)
        {
            string sTransSeq = tData.TransSeq;
            string sApprSeq = "";
            int nDataForwarded = GetForwarded(tData.IsFile);
            bool bTransCancel = !tData.bCheckDisable;
            bool bApprove = false;
            bool bReject = false;

            sgDetailData.SetInit(false,sTransSeq, sApprSeq, nDataForwarded, bTransCancel, bApprove, bReject);

            HSCmdCenter.SetDetailDataChange(groupId, sgDetailData);

            refTransPopUp.SetBindingData();
            OpenDetailPopup(sTransSeq).Wait();
        }
    }
    public int GetForwarded(string strIsFile)
    {
        if (strIsFile.Equals("-"))
            return 0;
        else if (strIsFile.Equals("발송"))
            return 1;
        else if (strIsFile.Equals("수신"))
            return 2;
        else
            return 0;
    }
    protected override async Task OnInitializedAsync()
    {
        InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, SearchResult);                  // 조회 데이터 결과.
        HSCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, SearchCount);              // 조회 데이터 수 결과.
        HSCmdCenter.sgPageEvent.SetTransCancelEventAdd(groupID, TransCancelResult);             // 전송 취소 결과.

        GetInitDateTime();

        base.OnInitialized();

        await TransSearchCount();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initApproveUI");
        }
        base.OnAfterRender(firstRender);
    }

    public void InitText()
    {
        strTransManTitleGap = XmlConf.GetTitle("T_COMMON_TRANSMANAGE_GAP");                 // 전송 관리
        strTransManageTitle = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                     // 전송관리
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                                    // 기간
        strTransKind = XmlConf.GetTitle("T_COMMON_TRANSKIND");                              // 전송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                        // 전체
        strCarryIn = XmlConf.GetTitle("T_COMMON_IMPORT");                                   // 반입
        strCarryOut = XmlConf.GetTitle("T_COMMON_EXPORT");                                  // 반출
        strTransStatus = XmlConf.GetTitle("T_TRANS_STATUS");                                // 전송상태
        strTransComplete = XmlConf.GetTitle("T_DETAIL_TRANS_SUCCESS");                      // 전송완료
        strTransWait = XmlConf.GetTitle("T_COMMON_TRANSWAIT");                              // 전송대기
        strTransCancle = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");                          // 전송취소
        strApprStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                         // 승인상태
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                                  // 승인
        strApprWait = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                            // 승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                                 // 반려
        strApprCancle = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");                         // 요청취소
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                                       // 제목
        strReflesh = XmlConf.GetTitle("T_COMMON_REFRESH");                                  // 새로고침
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                                    // 조회
        strDownload = XmlConf.GetTitle("T_TRANS_MANUAL_DOWNLOAD");                          // 다운로드
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                         // 결재종류
        strFileForward = XmlConf.GetTitle("T_ETC_FILEFORWARD");                             // 파일전달
        strFileSendDay = XmlConf.GetTitle("T_TRANS_DATE");                                  // 전송요청일
        strDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                                // 상세보기
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                               // 총페이지
        strTransFail = XmlConf.GetTitle("T_COMMON_TRANSFAIL");                              // 전송실패
        strTransInspect = XmlConf.GetTitle("T_COMMON_TRANSCHECKING");                       // 검사중
        strTitleInputInfo = XmlConf.GetWarnMsg("W_0021");                                   // 제목을 입력하여 주십시오.

        strTransKindValue = strTotal;
        strTransStatusValue = strTotal;
        strApprStatusValue = strTotal;
        strTitleValue = "";
    }
    public void TransCancel()
    {
        string strTransSeq = GetCheckTransSeq();
        string strMsg = "";
        if (strTransSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if(sgLoginData!=null)
            curUserID= sgLoginData.GetUserID();
        string curTransSeq = "";
        if (!strTransSeq.Equals(""))
            curTransSeq = strTransSeq;
        string curAction = "2";
        string curReason = "사유";

        HSCmdCenter.SendTransCancel(groupID, curUserID, curTransSeq, curAction, curReason);
    }
    public async Task TransSearchCount()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        //int groupID = 0;

        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        if(sgLoginData!=null)
            curUserID=sgLoginData.GetUserID();
        await GetDateTime();
        curTransKind = GetTransKind();
        curTransStatus = GetTransStatus();
        curApprStatus = GetApprStatus();
        curTitle = strTitleValue;
        byte[] temp = Encoding.Default.GetBytes(curTitle);
        curTitle = Encoding.UTF8.GetString(temp);

        nViewPageNo = 1;
        TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curTitle, curFromDay, curToDay, curUserID, nPageListCount, nViewPageNo);
        TransferDao dao = new TransferDao();
        string strQueryCount = dao.TotalCount(param);   // 쿼리 데이터 카운트
        string str = dao.List(param);                  // 확인용 
        HSCmdCenter.SendTransListCountQuery(groupID, curUserID, strQueryCount);
    }
    public void TransSearchData(int pageNum)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curTitle, curFromDay, curToDay, curUserID, nPageListCount, pageNum);
        TransferDao dao = new TransferDao();
        string strQuery = dao.List(param);   // 쿼리 데이터 카운트
        HSCmdCenter.SendTransListQuery(groupID, curUserID, strQuery);
    }
    public void GetInitDateTime()
    {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
    }

    private async Task RetriveDateFromJS()
    {
        object[] param = { "datepicker" };
        string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
        if (vStr != null && vStr.Length > 0)
            strFromDay = vStr;
        object[] param2 = { "datepicker2" };
        string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
        if (vStr2 != null && vStr2.Length > 0)
            strToDay = vStr2;
    }

    public async Task GetDateTime()
    {
        await RetriveDateFromJS();

        char sep = '-';
        string[] splitFrom = strFromDay.Split(sep);
        curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
        string[] splitTo = strToDay.Split(sep);
        curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
    }


    public string GetTransKind()
    {
        string strValue = "";

        if (strTransKindValue.Equals(strTotal))                         // 전체
            strValue = "";
        else if (strTransKindValue.Equals(strCarryOut))                 // 반출
            strValue = "1";
        else if (strTransKindValue.Equals(strCarryIn))                  // 반입
            strValue = "2";
        else
            strValue = "";

        return strValue;
    }


    public string GetTransStatus()
    {
        string strValue = "";

        if (strTransStatusValue.Equals(strTotal))                                 // 전체
            strValue = "";
        else if (strTransStatusValue.Equals(strTransComplete))                      // 전송완료
            strValue = "P";
        else if (strTransStatusValue.Equals(strTransWait))                          // 전송대기
            strValue = "W";
        else if (strTransStatusValue.Equals(strTransCancle))                        // 전송취소
            strValue = "C";
        else if (strTransStatusValue.Equals(strTransFail))                        // 전송실패
            strValue = "F";
        else if (strTransStatusValue.Equals(strTransInspect))                      // 검사중
            strValue = "V";
        else
            strValue = "";

        return strValue;
    }
    public string GetApprStatus()
    {
        string strValue = "";

        if (strApprStatusValue.Equals(strTotal))                                // 전체
            strValue = "";
        else if (strApprStatusValue.Equals(strApprWait))                        // 승인대기
            strValue = "1";
        else if (strApprStatusValue.Equals(strApprove))                         // 승인
            strValue = "2";
        else if (strApprStatusValue.Equals(strReject))                          // 반려
            strValue = "3";
        else if (strApprStatusValue.Equals(strApprCancle))                      // 요청취소
            strValue = "4";

        return strValue;
    }

    public void TransCancelResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        string strMsg = e.strMsg;
        if (ret != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        ShowMessage("info", strMsg);
        UpdateData();
    }
    public void SearchCount(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        if(e.count<=0)
        {
            ShowMessage("warn", strMsg);            // 검색결과가 존재하지 않습니다.
            ListData.Clear();
            UpdateList(0);
            SetPageinfo(e.count);
            StateHasChanged();
            return;
        }

        SetPageinfo(e.count);    // 페이징 계산
        UpdateData();

    }
    public void SearchResult(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error",strMsg);
            return;
        }

        ListData.Clear();

        SGTransManageData sgData = null;
        sgData=(SGTransManageData)HSCmdCenter.GetTransManageData(groupId);
        if (sgData == null)
            return;

        List<Dictionary<int, string>> TransSearchList = null;
        //string strSelTransStatus = GetTransStatus();
        //string strSelApprStatus = GetApprStatus();
        //TransSearchList = sgData.GetSearchData(strSelTransStatus, strSelApprStatus);
        TransSearchList = sgData.GetQuerySearchData();
        int nCount = TransSearchList.Count;

        for(int i=0;i<nCount;i++)
        {
            Dictionary<int, string> dic = TransSearchList[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if(tmpStr.Equals(""))
                    continue;
            }

            transData tData = new transData();
            tData.bCheck = false;
            tData.bCheckDisable = !(sgData.GetTransCancelEnableChk(dic));
            tData.TransSeq = sgData.GetTransSeq(dic);                   // TransSeq;
            tData.ApvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
            tData.TransferType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
            tData.TransferStatus = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
            tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)
            tData.IsFile = sgData.GetFileForwardKind(dic);              // 파일전달.
            tData.Title = sgData.GetTitle(dic);                         // 제목
            tData.RequestTime = sgData.GetQueryTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
            tData.TransStatusCode = sgData.GetTransStatusCode(dic);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
            tData.ApprStatusCode = sgData.GetApprStausCode(dic);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )

            ListData.Add(tData);
        }

        UpdateInitList(nViewPageNo);
        StateHasChanged();

    }
    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;
        //nStartPage = nViewPageNo - (int)viewPageCount / 2;
        //if (nStartPage < 1)
        if (nTotalPages <= 0)
            nTotalPages = 1;
        nViewPageNo=nStartPage = 1;
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }
    public transData GetSelectedItem(transData item)
    {
        return null;
    }

    public void CheckStateUpdate(transData item)
    {
        int nCount = ListData.Count;
        for(int i=0;i<nCount;i++)
        {
            transData temp = ListData[i];
            if(temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
            }
            else
                temp.bCheck = false;

            ListData[i] = temp;
        }
        StateHasChanged();

    }
    public string GetCheckTransSeq()
    {
        string strTransSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.bCheck)
            {
                strTransSeq = temp.TransSeq;
            }
        }
        return strTransSeq;
    }

    public transData GetTransListData(string strTransSeq)
    {
        transData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
            return tdata;

        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.TransSeq.Equals(strTransSeq))
            {
                tdata = temp;
                break;
            }
        }
        return tdata;
    }
    public class transData
    {
        public bool bCheckDisable { get; set; }           //체크 가능 불가능
        public bool bCheck { get; set; }                  //체크 상태
        public string TransSeq { get; set; }                //TransSeq 
        public string ApvType { get; set; }                 //결재종류
        public string TransferType { get; set; }            //전송구분
        public string TransferStatus { get; set; }          //전송상태
        public string ApvStatus { get; set; }               //승인상태
        public string IsFile { get; set; }                  //파일전달
        public string Title { get; set; }                   //제목
        public string RequestTime { get; set; }             //전송요청일
        public string TransStatusCode { get; set; }         //전송상태 원본 ( W : 전송대기 , C : 전송취소 , S : 수신완료 , F : 전송실패 )
        public string ApprStatusCode { get; set; }          //승인상태 원본 ( 1 : 승인대기 , 2 : 승인 , 3 : 반려 )

        public transData()
        {
            bCheckDisable = bCheck = false;
            TransSeq = ApvType = TransferType = TransferStatus = ApvStatus = IsFile = Title = RequestTime = "";
        }
        public transData(bool bCheckDisable, bool bCheck,string seq, string apvtype, string transfertype, string transferstatus, string apvstatus, string isfile, string title, string reqtime,string strTransStatusCode, string strApprStatusCode)
        {
            TransSeq = seq;
            ApvType = apvtype;
            TransferType = transfertype;
            TransferStatus = transferstatus;
            ApvStatus = apvstatus;
            IsFile = isfile;
            Title = title;
            RequestTime = reqtime;
            TransStatusCode = strTransStatusCode;
            ApprStatusCode = strApprStatusCode;
        }
    }
}
