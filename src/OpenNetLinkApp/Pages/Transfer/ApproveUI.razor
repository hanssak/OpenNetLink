@page "/transferApprove"
@using OpenNetLinkApp.Services
@using HsNetWorkSGData;
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGQuery
@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strApprTitle</h1>                             <!--결재관리-->
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/Welcome">Home</a></li>
                    <li class="breadcrumb-item active">@strApprTitle</li>                <!--결재관리-->
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>
                            <colgroup>
                                <col width="*">
                                <col width="300px">
                                <col width="*">
                                <col width="120px">
                                <col width="*">
                                <col width="120px">
                                <col width="*">
                                <col width="120px">
                                <col width="*">
                                <col width="150px">
                            </colgroup>
                            <tr>
                                <th class="p-2">@strPeriod</th>                     <!--기간-->
                                <td>
                                    <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker" readonly value=@strFromDay>
                                    <span class="float-left col-md-1">-</span>
                                    <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker2" readonly value=@strToDay>
                                </td>
                                <th class="p-2"> @strApproveKind </th>               <!--결재종류-->
                                <td>
                                    <select class="form-control" @bind="strApprKindValue" style="width:100px;">
                                        <option> @strTotal</option>                <!--전체-->
                                        <option> @strPreAppr</option>                <!--선결-->
                                        <option> @strAfterAppr</option>                <!--후결-->
                                    </select>
                                </td>
                                <th class="p-2"> @strTransKind </th>               <!--전송구분-->
                                <td>
                                    <select class="form-control" @bind="strTransKindValue" style="width:100px;">
                                        <option> @strTotal</option>                <!--전체-->
                                        <option> @strCarryOut</option>                <!--반출-->
                                        <option> @strCarryIn</option>                <!--반입-->
                                    </select>
                                </td>
                                <th class="p-2"> @strApproveStatus </th>               <!--승인상태-->
                                <td>
                                    <select class="form-control" @bind="strApprStatusValue" style="width:100px;">
                                        <option> @strTotal</option>                <!--전체-->
                                        <option> @strApproveWait</option>            <!--승인대기-->
                                        <option> @strApprove</option>                <!--승인-->
                                        <option> @strReject</option>                <!--반려-->
                                        <option> @strApproveCancle</option>            <!--요청취소-->
                                    </select>
                                </td>
                                
                            </tr>

                            <tr>
                                <th class="p-2 pt-2"> @strTitle </th>              <!--제목-->
                                <td class="pt-2" colspan="5"><input type="text" class="form-control" placeholder=@strTitleInputInfo @bind="strTitleValue"></td>    <!--제목을 입력하여 주십시요.-->
                                <th class="p-2"> @strReqApprover </th>             <!--승인요청자-->
                                <td>
                                    <input type="text" class="form-control" placeholder=@strReqApprover @bind="strReqUserValue">  <!--승인요청자-->
                                </td>
                            </tr>
                        </table>

                    </div>



                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                <div class="col-sm-12 text-right">
                    <button type="button" class="btn btn-md btn-navy" @onclick="OpenProxyApprover"><i class="fas fa-user-plus"></i>@XmlConf.GetTitle("T_PROXY_PROXYREG_MANAGE")</button>
                    <button type="button" class="btn btn-md btn-black" @onclick="@ApproveSearchCount"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                    <button type="button" class="btn btn-md btn-blue" @onclick="ApproveAction"><i class="fas fa-check-circle"></i>@strBtnApprove</button>
                    <button type="button" class="btn btn-md btn-red" @onclick="ApproveReject"><i class="fas fa-times-circle"></i>@strBtnReject</button>
                </div>
            </div>
        </div>

        <!-- list -->

        <div class="row">



            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">


                    <form class="form-horizontal">

                        <div class="card-body p-0">
                            <table class="table table-head-fixed table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th style="text-align:center">
                                            <input class="input" type="checkbox" checked="@bAllCheck" @onclick="(e=>AllCheckStateUpdate())">
                                        </th>
                                        <th style="text-align:center">@strApproveKind</th>                             <!--결재종류-->
                                        <th style="text-align:center">@strTransKind</th>                             <!--전송구분-->
                                        <th style="text-align:center">@strReqApprover</th>                            <!--승인요청자-->
                                        <th style="text-align:center">@strApproveStatus</th>                             <!--승인상태-->
                                        <th style="text-align:center">@strFileForward</th>                             <!--파일전달-->
                                        <th style="text-align:center">@strTitle</th>                                   <!--제목-->
                                        <th style="text-align:center">@strApproveReqDay</th>                            <!--승인요청일-->
                                        <th style="text-align:center">@strApproveDay</th>                                  <!--승인일-->
                                        <th style="text-align:center">@strApproveDetail</th>                             <!--상세보기-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (approveData item in mData)
                                    {
                                        <tr>
                                            <td style="text-align:center">
                                                <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                            </td>
                                            <td style="text-align:center">@item.ApvType</td>
                                            <td style="text-align:center">@item.TransferType</td>
                                            <td style="text-align:center">@item.RequesterName</td>
                                            <td style="text-align:center">@item.ApvStatus</td>
                                            <td style="text-align:center">@item.IsFile</td>
                                            <td>@item.Title</td>
                                            <td style="text-align:center">@item.RequestTime</td>
                                            <td style="text-align:center">@item.ApvTime</td>
                                            <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>ApprDetailSearch(item.TransSeq))"><i class="fas fa-search"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>


                        <div class="card-body pt-0">

                            <!--S page -->


                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>      <!--총페이지-->
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>


                            <!--/.S page -->


                        </div>






                        <!--footer test-->
                        <Footer></Footer>
                        <!--./footer test-->
                        <!-- /.card-footer -->


                    </form>

                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<ApprovePopUp @ref="refApprovePopUp"></ApprovePopUp>
<ProxyApprover_PopUp @ref="refProxyApprover_PopUp"></ProxyApprover_PopUp>

<SGReject @ref="refSGReject"></SGReject>

@code {
    [Parameter]
    public string menuMode { get; set; }

    ApprovePopUp refApprovePopUp;
    ProxyApprover_PopUp refProxyApprover_PopUp;

    public int TotalCount { get; set; }
    public List<approveData> mData = new List<approveData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    public string strApprTitle = "";
    public string strApproveKind = "";
    public string strPeriod = "";
    public string strPreAppr = "";
    public string strAfterAppr = "";
    public string strTransKind = "";
    public string strTotal = "";
    public string strCarryIn = "";
    public string strCarryOut = "";
    public string strApproveStatus = "";
    public string strApprove = "";
    public string strApproveWait = "";
    public string strReject = "";
    public string strApproveCancle = "";
    public string strReqApprover = "";
    public string strSearch = "";
    public string strBtnApprove = "";
    public string strBtnReject = "";
    public string strFileForward = "";
    public string strTitle = "";
    public string strApproveReqDay = "";
    public string strApproveDay = "";
    public string strApproveDetail = "";
    public string strURLAuto = "";
    public string strRemainFile = "";
    public string strTitleInputInfo = "";
    public string strTotalPage = "";

    public string strFromDay = "";
    public string strToDay = "";

    public string strTransKindValue = "";
    public string strApprKindValue = "";
    public string strApprStatusValue = "";
    public string strTitleValue = "";
    public string strReqUserValue = "";


    public string curUserID = "";
    public string curFromDay = "";
    public string curToDay = "";
    public string curApprKind = "";
    public string curTransKind = "";
    public string curApprStatus = "";
    public string curReqUserName = "";
    public string curTitle = "";

    ISGSideBarUIService SideBarUISvc;

    public bool bAllCheck = false;

    SGReject refSGReject;

    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    private async Task OpenProxyApprover()
    {
        await refProxyApprover_PopUp.openPopUp();
    }

    private void UpdateList(int pageNumber)
    {
        //nViewPageNo = pageNumber + 1;
        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip(pageNumber * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }
    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }
    private void UpdateData()
    {
        ApproveSearchData(nViewPageNo);
    }

    //원데이타라고 가정함
    public List<approveData> ListData = new List<approveData>();

    public async Task OpenDetail(string transSeq)
    {
        Console.WriteLine("Open Detail Start" + transSeq);
        long ltransSeq = Convert.ToInt64(transSeq);
        await refApprovePopUp.openPopUp(ltransSeq);

        //await refApprovePopUp.openPopUp(transSeq);
    }
    public void ApprDetailSearch(string transSeq)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        HSCmdCenter.sgPageEvent.SetDetailSearchEventAdd(groupID, ApprDetailSearchResult);           // 상세보기 조회 결과

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendTransDetail(groupID, strUserID, transSeq);
    }

    public void ApprDetailSearchResult(int groupId, PageEventArgs e)
    {
        int nRet = e.result;
        string strMsg = e.strMsg;
        if (nRet != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        SGDetailData sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupId);
        if (sgDetailData == null)
            return;

        approveData tData = null;
        tData = GetApprListData(strMsg);
        if (tData != null)
        {
            string sTransSeq = tData.TransSeq;
            string sApprSeq = tData.ApprSeq;
            int nDataForwarded = GetForwarded(tData.IsFile);
            bool bTransCancel = false;
            bool bApprove = !(tData.bCheckDisable);
            bool bReject = false;
            string strTemp = XmlConf.GetTitle("T_DETAIL_AFTER_APPROVE");                      // 후결
            if(bApprove)
            {
                bReject = true;
                if (tData.ApvType.Equals(strTemp))
                    bReject = false;
            }

            sgDetailData.SetInit(true, sTransSeq, sApprSeq, nDataForwarded, bTransCancel, bApprove, bReject);

            HSCmdCenter.SetDetailDataChange(groupId, sgDetailData);

            refApprovePopUp.SetBindingData();
            OpenDetail(sTransSeq).Wait();
        }
    }
    public int GetForwarded(string strIsFile)
    {
        if (strIsFile.Equals("-"))
            return 0;
        else if (strIsFile.Equals("발송"))
            return 1;
        else if (strIsFile.Equals("수신"))
            return 2;
        else
            return 0;
    }
    protected override async Task OnInitializedAsync()
    {
        InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        HSCmdCenter.sgPageEvent.SetApprSearchEventAdd(groupID, SearchResult);
        HSCmdCenter.sgPageEvent.SetApprSearchCountEventAdd(groupID, SearchCount);
        HSCmdCenter.sgPageEvent.SetApprBatchEvent(groupID, ApproveBatchResult);

        GetInitDateTime(out strFromDay, out strToDay);

        base.OnInitialized();

        await ApproveSearchCount();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initApproveUI");
            jsRuntime.InvokeAsync<object>("initPageLeft");
        }
        base.OnAfterRender(firstRender);
    }

    public void InitText()
    {
        strApprTitle = XmlConf.GetTitle("T_COMMON_APPROVEMANAGE");                      // 결재관리
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                     // 결재종류
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                                // 기간
        strPreAppr = XmlConf.GetTitle("T_DETAIL_BEFORE_APPROVE");                       // 선결
        strAfterAppr = XmlConf.GetTitle("T_DETAIL_AFTER_APPROVE");                      // 후결
        strTransKind = XmlConf.GetTitle("T_COMMON_TRANSKIND");                          // 전송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                    // 전체
        strCarryIn = XmlConf.GetTitle("T_COMMON_IMPORT");                               // 반입
        strCarryOut = XmlConf.GetTitle("T_COMMON_EXPORT");                              // 반출
        strApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                  // 승인상태
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                              // 승인
        strApproveWait = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                     // 승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                             // 반려
        strApproveCancle = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");                  // 요청취소
        strReqApprover = XmlConf.GetTitle("T_COMMON_REQUESTER");                        // 승인요청자
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                                // 조회
        strBtnApprove = XmlConf.GetTitle("T_APPROVE_BTN");                              // 결재승인
        strBtnReject = XmlConf.GetTitle("T_REJECT_BTN");                                // 결재반려
        strFileForward = XmlConf.GetTitle("T_ETC_FILEFORWARD");                         // 파일전달
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                                   // 제목
        strApproveReqDay = XmlConf.GetTitle("T_COMMON_APPROVEREQDATE");                 // 승인요청일
        strApproveDay = XmlConf.GetTitle("T_COMMON_APPROVEDATE");                       // 승인일
        strApproveDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                     // 상세보기
        strURLAuto = XmlConf.GetTitle("T_INFO_USE_URLREDIRECT_AUTO");                   // URL 자동전환 사용
        strRemainFile = XmlConf.GetTitle("T_ETC_ONEDAY_LEFT_FILE");                     // 남은 일일 파일전송
        strTitleInputInfo = XmlConf.GetWarnMsg("W_0021");                               // 제목을 입력하여 주십시오.
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                               // 총페이지

        strTransKindValue = strTotal;
        strApprKindValue = strTotal;
        strApprStatusValue = strTotal;
    }
    public void ApproveAction()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strApprSeq = GetCheckApprSeq();

        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }


        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();
        string strProcID = "A";
        string strReason = "Approve";
        string strApproveSeqs = "";
        for (int i = 0; i < ListData.Count; i++)
        {
            if (ListData[i].bCheck == true)
            {
                string temp = (ListData[i].ApprSeq + '\u0002');
                strApproveSeqs += temp;
            }
        }
        string strApprover = "0";
        string strApproveUserKind = "0";

        HSCmdCenter.SendApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, strApprover, strApproveUserKind);
    }
    private async Task ApproveReject()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (GetCheckRejectPossible()!=true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0092"); // 후결은 반려를 할 수 없습니다./r/n다시 확인하십시오.
            ShowMessage("info", strMsg);
            return;
        }
        string strApprSeq = GetCheckApprSeq();
        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        refSGReject.ResetReason();
        refSGReject.SetGroupID(groupID);
        refSGReject.SetApprRejectEvent(ApproveRejectSend);
        await refSGReject.openPopUp();
    }
    public void ApproveRejectSend(int groupID,string strReason)
    {
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();
        string strProcID = "R";
        string strApproveSeqs = "";
        for (int i = 0; i < ListData.Count; i++)
        {
            if (ListData[i].bCheck == true)
            {
                string temp = (ListData[i].ApprSeq + '\u0002');
                strApproveSeqs += temp;
            }
        }
        string strApprover = "0";
        string strApproveUserKind = "0";

        HSCmdCenter.SendApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, strApprover, strApproveUserKind);
    }
    public string GetCheckApprSeq()
    {
        string strApprSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.bCheck)
            {
                strApprSeq = temp.TransSeq;
            }
        }
        return strApprSeq;
    }
    public approveData GetApprListData(string strTransSeq)
    {
        approveData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
            return tdata;

        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.TransSeq.Equals(strTransSeq))
            {
                tdata = temp;
                break;
            }
        }
        return tdata;
    }
    public bool GetCheckRejectPossible()
    {
        string strApprKind = "";
        string strTemp = XmlConf.GetTitle("T_COMMON_APPROVE_AFTER");        // 후결
        bool bRejectPossible = true;
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.bCheck == true)
            {
                strApprKind = temp.ApvType;
                if (strApprKind.Equals(strTemp))
                {
                    bRejectPossible = false;
                    break;
                }
            }
        }
        return bRejectPossible;
    }
    public async Task ApproveSearchCount()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        await GetDateTime();
        curApprKind = GetApprKind();
        curTransKind = GetTransKind();
        curApprStatus = GetApprStatus();
        curReqUserName = strReqUserValue;
        curTitle = strTitleValue;

        nViewPageNo = 1;

        ApproveParam param = new ApproveParam(curFromDay, curToDay, curApprKind, curTransKind, curApprStatus, curReqUserName, curTitle, curUserID, nPageListCount, nViewPageNo);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();
        ApproveDao dao = new ApproveDao();
        string strCountQuery = dao.TotalCount(param);
        HSCmdCenter.SendApprListCountQuery(groupID, curUserID, strCountQuery);
    }

    public void ApproveSearchData(int pageNum)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (nViewPageNo == 0)
            nViewPageNo = 1;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        ApproveParam param = new ApproveParam(curFromDay, curToDay, curApprKind, curTransKind, curApprStatus, curReqUserName, curTitle, curUserID, nPageListCount, nViewPageNo);
        if (sgLoginData.GetSystemPosition())
            param.SystemId = "I001";
        else
            param.SystemId = "E001";

        int nApprTypeSFM = sgLoginData.GetApproveTypeSFM();
        param.APPROVE_TYPE_SFM = nApprTypeSFM.ToString();
        ApproveDao dao = new ApproveDao();
        string strQuery = dao.List(param);
        HSCmdCenter.SendApprListQuery(groupID, curUserID, strQuery);
    }

    public void GetInitDateTime(out string fromDate, out string toDate)
    {
        toDate = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        fromDate = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
    }

    private async Task RetriveDateFromJS()
    {
        object[] param = { "datepicker" };
        string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
        if (vStr != null && vStr.Length > 0)
            strFromDay = vStr;
        object[] param2 = { "datepicker2" };
        string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
        if (vStr2 != null && vStr2.Length > 0)
            strToDay = vStr2;
    }

    public async Task GetDateTime()
    {
        await RetriveDateFromJS();

        char sep = '-';
        string[] splitFrom = strFromDay.Split(sep);
        curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
        string[] splitTo = strToDay.Split(sep);
        curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
    }

    public string GetApprKind()
    {
        string strValue = "";

        if (strApprKindValue.Equals(strTotal))                         // 전체
            strValue = "";
        else if (strApprKindValue.Equals(strPreAppr))                  // 선결
            strValue = "0";
        else if (strApprKindValue.Equals(strAfterAppr))                // 후결
            strValue = "1";
        else
            strValue = "";

        return strValue;
    }

    public string GetTransKind()
    {
        string strValue = "";

        if (strTransKindValue.Equals(strTotal))                         // 전체
            strValue = "";
        else if (strTransKindValue.Equals(strCarryOut))                 // 반출
            strValue = "1";
        else if (strTransKindValue.Equals(strCarryIn))                  // 반입
            strValue = "2";
        else
            strValue = "";

        return strValue;
    }

    public string GetApprStatus()
    {
        string strValue = "";

        if (strApprStatusValue.Equals(strTotal))                        // 전체
            strValue = "";
        else if (strApprStatusValue.Equals(strApproveWait))             // 승인대기
            strValue = "1";
        else if (strApprStatusValue.Equals(strApprove))                 // 승인
            strValue = "2";
        else if (strApprStatusValue.Equals(strReject))                  // 반려
            strValue = "3";
        else if (strApprStatusValue.Equals(strApproveCancle))           // 요청취소
            strValue = "4";

        return strValue;
    }
    public void SearchCount(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        if (e.count <= 0)
        {
            ShowMessage("warn", strMsg);            // 검색결과가 존재하지 않습니다.
            ListData.Clear();
            UpdateList(0);
            SetPageinfo(e.count);
            StateHasChanged();
            return;
        }

        SetPageinfo(e.count);    // 페이징 계산
        UpdateData();
    }
    public void SearchResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        if (ret != 0)
        {
            //ShowMessage(strMsg);
            return;
        }

        ListData.Clear();

        SGApprManageData sgData = null;
        sgData = (SGApprManageData)HSCmdCenter.GetApprManageData(groupId);
        if (sgData == null)
            return;

        List<Dictionary<int, string>> ApprSearchList = null;
        ApprSearchList = sgData.GetQuerySearchData();
        int nCount = ApprSearchList.Count;

        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> dic = ApprSearchList[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if (tmpStr.Equals(""))
                    continue;
            }

            approveData aData = new approveData();
            aData.bCheckDisable = !(sgData.GetApprEnableChk(dic));             // 결재 가능/불가능
            aData.bCheck = false;
            aData.TransSeq = sgData.GetTransSeq(dic);                      // TransSeq;
            aData.ApprSeq = sgData.GetApproveSeq(dic);                     // ApprSeq;
            aData.ApvType = sgData.GetApprKind(dic);                       // 결재종류 (선결/후결)
            aData.TransferType = sgData.GetTransKind(dic);                 // 전송구분 (반출/반입)
            aData.RequesterName = sgData.GetApproveReqUser(dic);           // 승인요청자
            aData.ApvStatus = sgData.GetApprStaus(dic);                    // 승인상태 (요청취소,승인대기,승인,반려)
            aData.IsFile = sgData.GetUseFileForward(dic);                  // 파일전달.
            aData.Title = sgData.GetTitle(dic);                            // 제목                                                                  
            //aData.RequestTime = sgData.GetTransReqDay(dic);                // 승인요청일(type : YYYY-MM-DD hh:mm:ss)
            aData.RequestTime = sgData.GetQueryTransReqDay(dic);                  // 승인요청일(type : YYYY-MM-DD hh:mm:ss)
            //aData.ApvTime = sgData.GetApprDay(dic);                        // 승인일
            aData.ApvTime = sgData.GetQueryApprDay(dic);                        // 승인일
            aData.TransStatusCode = sgData.GetTransStatusCode(dic);        // 전송상태 원본 코드( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
            aData.ApprStatusCode = sgData.GetApprStausCode(dic);           // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
            aData.ApprTablePos = sgData.GetApprDataPos(dic);               // 결재 테이블 위치 정보(C : 결재 테이블, H : 결재 이력테이블)
            aData.ApprPossible = sgData.GetApprPossible(dic);              // 결재 가능 여부(0: 결재불가능, 1:결재가능)
            aData.ApprStepStatus = sgData.GetApprStepPossible(dic);        // 결재자가 포함된 결재단계의 결재상태 정보(0: 결재불가능, 1:결재가능)

            ListData.Add(aData);
        }

        UpdateInitList(nViewPageNo);

        /*
        TotalCount = ListData.Count;
        UpdateList(0);
        //페이징 계산
        dispLimit = 1;
        nTotalPages = (int)TotalCount / nPageListCount;
        if (TotalCount % nPageListCount > 0)
            nTotalPages++;
        nStartPage = nViewPageNo - (int)viewPageCount / 2;
        if (nStartPage < 1)
            nStartPage = 1;
        */

        bAllCheck = false;

        StateHasChanged();
    }

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;
        //nStartPage = nViewPageNo - (int)viewPageCount / 2;
        //if (nStartPage < 1)
        if (nTotalPages <= 0)
            nTotalPages = 1;
        nViewPageNo = nStartPage = 1;
    }

    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = ListData.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for(int i=0;i<nCount;i++)
        {
            if (ListData[i].bCheckDisable != true)
                ListData[i].bCheck = bAllCheck;
        }

        StateHasChanged();
    }

    public void CheckStateUpdate(approveData item)
    {
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            approveData temp = ListData[i];
            if (temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
                ListData[i] = temp;
                break;
            }
        }
        StateHasChanged();

    }

    public void ApproveBatchResult(int groupid, PageEventArgs e)
    {
        int ret = e.result;
        string strMsg = e.strMsg;
        if (ret != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        ShowMessage("info", strMsg);

        if(e.strDummy.Equals("A"))
        {
            InsertMessage(NOTI_TYPE.USER, groupid, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgApprConfirm, "", strMsg);
        }
        else
        {
            InsertMessage(NOTI_TYPE.USER, groupid, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgApprReject, "", strMsg);
        }
        //bAllCheck = true;
        UpdateData();
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void InsertMessage(NOTI_TYPE type, int groupID, LSIDEBAR menuCategory, eMsgType eMType, string path, string body)
    {
        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
        {
            return;
        }

        string strUserSeq = sgUserData.GetUserSequence();
        SGMsgData sgMsgData = null;
        sgMsgData = new SGMsgData();
        if (sgMsgData == null)
        {
            return;
        }
        string strHead = sgMsgData.GetConvertMessageTitle(eMType);
        string strNotiContent = body;
        for(int i=0;i<5;i++)
        {
            if(pageService.GetDBWriting()==true)
            {
                System.Threading.Thread.Sleep(1000);
                continue;
            }
            else
            {
                pageService.SetDBWriting(true);
                SQLiteDB.InsertNotiInfo(type, groupID, strUserSeq, "0", menuCategory, path, "", strHead, strNotiContent);
                pageService.SetDBWriting(false);
                break;
            }
        }

        LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
        loginAfterSGHeaderUI = HSCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
        if (loginAfterSGHeaderUI != null)
            loginAfterSGHeaderUI(groupID);

        LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
        loginAfterSGSideBar = HSCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
        if (loginAfterSGSideBar != null)
            loginAfterSGSideBar(groupID);

        BoardNotiAfterDashBoardEvent boardNotiAfterDashBoard = null;
        boardNotiAfterDashBoard = HSCmdCenter.sgPageEvent.GetBoardNotiAfterDashBoardEvent(groupID);
        if (boardNotiAfterDashBoard != null)
            boardNotiAfterDashBoard(groupID);

        NotiAfterTotalMsgEvent NotiAfterMsg = null;
        NotiAfterMsg = HSCmdCenter.sgPageEvent.GetNotiAfterTotalMsgEvent();
        if (NotiAfterMsg != null)
            NotiAfterMsg();
    }
    public class approveData
    {
        public bool bCheckDisable { get; set; }           // 체크 가능 불가능
        public bool bCheck { get; set; }                  // 체크 상태
        public string TransSeq { get; set; }              // TransSeq
        public string ApprSeq { get; set; }               // ApproveSeq
        public string ApvType { get; set; }               // 결재 종류 (선결/후결)
        public string TransferType { get; set; }          // 전송 구분 (반출/반입)
        public string TransStatus { get; set; }           // 전송 상태 (전송대기, 전송취소, 전송실패)
        public string RequesterName { get; set; }         // 승인요청자
        public string ApvStatus { get; set; }             // 결재상태(승인대기/승인/반려)
        public string IsFile { get; set; }                // 파일 전달 유무
        public string Title { get; set; }                 // 제목
        public string RequestTime { get; set; }           // 전송요청일
        public string ApvTime { get; set; }               // 승인일
        public string TransStatusCode { get; set; }         //전송상태 원본 ( W : 전송대기 , C : 전송취소 , S : 수신완료 , F : 전송실패 )
        public string ApprStatusCode { get; set; }          //승인상태 원본 ( 1 : 승인대기 , 2 : 승인 , 3 : 반려 )
        public string ApprTablePos { get; set; }            // 결재 데이터 위치 ( C : 결재 테이블 , H : 결재 이력 테이블 )
        public string ApprPossible { get; set; }            // 결재 가능 여부 ( 1: 가능 , 0 : 불가능)
        public string ApprStepStatus { get; set; }          // 결재자가 포함된 결재단계의 결재 상태 ( 1 : 승인가능상태, 2 : 승인불가능상태 )


        public approveData()
        {
            bCheckDisable = bCheck = false;
            TransSeq = ApprSeq = ApvType = TransferType = RequesterName = ApvStatus = IsFile = Title = RequestTime = ApvTime = TransStatusCode = ApprStatusCode = ApprTablePos = ApprPossible = ApprStepStatus = "";
        }
        public approveData(bool bChkDisable, bool bChk, string seq, string apprseq, string apvtype, string transfertype, string reqname, string apvstatus, string isfile, string title, string reqtime, string apvtime,
            string strTransStatusCode, string strApprStatusCode, string strApprTablePos, string strApprPossible, string strApprStepStatus)
        {
            bCheckDisable = bChkDisable;
            bCheck = bChk;
            TransSeq = seq;
            ApvType = apvtype;
            TransferType = transfertype;
            RequesterName = reqname;
            ApvStatus = apvstatus;
            IsFile = isfile;
            Title = title;
            RequestTime = reqtime;
            ApvTime = apvtime;
            TransStatusCode = strTransStatusCode;
            ApprStatusCode = strApprStatusCode;
            ApprTablePos = strApprTablePos;
            ApprPossible = strApprPossible;
            ApprStepStatus = strApprStepStatus;
        }
    }
}
