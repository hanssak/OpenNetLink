@using OpenNetLinkApp.Services
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Components.SGTreeSearch
@using HsNetWorkSG
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService


<div class="modal fade" id="ApproverSelect_PopUp">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-outline pl-3 pr-3">
                <h5 class="modal-title pt-1 text-bold ">@strApproverSearch</h5>                             <!--결재자 조회-->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- content -->
                <!-- s------------------------------------------------------------------------------------------------------  -->

                <div class="card-body p-0">


                    <!--s table -->
                    <div class="box1" style=" width:46%;  float:left;">
                        @if (approverSearchType == "SEARCH")
                        {
                            <div class="d-inline-flex  w-100 mb-2 " style="height:28px;">
                                <label class="p-1">@strDept</label>                                                       <!--부서-->
                            <input type="text" class="form-control col-md-4" disabled="@(bEditDeptName==false)" placeholder="부서입력" @bind-value="strCurDept">
                                <label class="p-1 pl-2">@strName</label>                                                  <!--이름-->
                            <input type="text" class="form-control col-md-3" placeholder="이름입력" @bind-value="strCurName">
                                <button type="button" class="btn bg-gradient-secondary ml-1" @onclick="DeptApprLine"><i class="fas fa-search pr-1 pl-1"></i>@strSearch</button>  <!--조회-->
                        </div>

                            <div class="card-body table-responsive p-0" style="height:331px; border:1px solid #ddd; background-color:#fff;">
                                <table class="table table-head-fixed">
                                    <colgroup>
                                        <col width="">
                                        <col width="">
                                        <col width="">
                                        <col width="">
                                    </colgroup>
                                    <thead>
                                        <tr>
                                            <th style="text-align:center">@strOrder </th>        <!--순번-->
                                        <th style="text-align:center">@strDept </th>        <!--부서-->
                                        <th style="text-align:center">@strRank </th>        <!--직급-->
                                        <th style="text-align:center">@strName </th>        <!--이름-->
                                    </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (ApproverInfo item in ApproverSearch)
                                        {
                                            <tr name="trItem" draggable="false" data-draggable="tritem" aria-grabbed="false" value="@item.UserSeq">
                                                <td style="text-align:center">@item.Index</td>
                                                <td>@item.DeptName</td>
                                                <td>@item.Grade</td>
                                                <td>@item.Name</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else    //TREE
                        {
                            <SGDeptTreeList @ref="refSGDeptTreeList" UseInputSearch="@useInputInTree" Height="359" TreeHeight="160" UserSearchList="@ApproverSearch" OnItemClick="(item) => AssignApprover(item.UserSeq)" OnItemDoubleClick="(item) => SGDeptTreeList_OnItemDoubleClick(item)" />
                        }
                    </div>
                    <!--e table -->
                    <!--s btn -->
                    <div class="box2" style=" width:8%; height:300px; float:left;">
                        <div class="col-md-12 text-center" style="top:45% !important;">
                            <button type="button" class="btn bg-gradient-primary mb-3" @onclick="AddSelectApprover"><i class="fas fa-angle-right fa-2x"></i></button>
                            <button type="button" class="btn bg-gradient-primary" @onclick="RemoveAssignApprover"><i class="fas fa-angle-left fa-2x"></i></button>
                        </div>
                    </div>
                    <!--e btn -->
                    <!--s table -->
                    <div class="box1" style="width:46%;float:left;">
                        <div class="btn-group w-100 mb-2 ">
                            @if (m_step == 0)
                            {
                                <button type="button" class="btn bg-gradient-secondary mr-1" @onclick="moveToTop"><i class="fas fa-angle-double-up pr-2"></i>@strMostTop</button>  <!--맨위-->
                                <button type="button" class="btn bg-gradient-secondary mr-1" @onclick="moveToUpper"><i class="fas fa-arrow-up pr-1"></i>@strTop</button>          <!--위-->
                                <button type="button" class="btn bg-gradient-secondary mr-1" @onclick="moveToLower"><i class="fas fa-arrow-down pr-1"></i>@strDown</button>       <!--아래-->
                                <button type="button" class="btn bg-gradient-secondary" @onclick="moveToBottom"><i class="fas fa-angle-double-down pr-2"></i>@strMostBottom</button>   <!--맨아래-->
                            }
                            else
                            {
                                <div style="height:28px;">&nbsp;</div>
                            }
                        </div>

                        <div class="card-body table-responsive p-0" style="height:331px; border:1px solid #ddd; background-color:#fff;">
                            <table class="table table-head-fixed">

                                <thead>
                                    <tr>
                                        <th style="text-align:center">@strOrder </th>            <!--순번-->
                                        <th style="text-align:center">@strDept </th>            <!--부서-->
                                        <th style="text-align:center">@strRank </th>            <!--직급-->
                                        <th style="text-align:center">@strName </th>            <!--이름-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (ApproverInfo item in ApproverSelect)
                                    {
                                        <tr name="trSelect" draggable="false" data-draggable="tritem" aria-grabbed="@(item.UserSeq == stTargetSelect ? "true" : "false")" value="@item.UserSeq">
                                            <td style="text-align:center">@item.Index</td>
                                            <td>@item.DeptName</td>
                                            <td>@item.Grade</td>
                                            <td>@item.Name</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!--e table -->
                </div>
                <!--/. content -->
            </div>

            <!-- e------------------------------------------------------------------------------------------------------  -->

            <div class="modal-footer">
                <button type="button" class="btn btn-md btn-blue mr-0" @onclick="SelectOK"><i class="fas fa-check"></i>@strOK</button>
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="SelectCancel"><i class="fas fa-times"></i>@strClose</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
@code {

    private LinkedList<ApproverInfo> ApproverSearch = new LinkedList<ApproverInfo>();
    private LinkedList<ApproverInfo> ApproverSelect = new LinkedList<ApproverInfo>();
    private string stSelectApprover = "";
    private string stTargetSelect = "";
    private static Action<string> actionAssign;
    private static Action<string> actionTargetSelect;
    private int m_step = 0;
    private string approverSearchType = "";
    private bool useInputInTree;
    private SGDeptTreeList refSGDeptTreeList;

    public string strApproverSearch = "";
    public string strDept = "";
    public string strName = "";
    public string strSearch = "";
    public string strOrder = "";
    public string strRank = "";
    public string strMostTop = "";
    public string strMostBottom = "";
    public string strTop = "";
    public string strDown = "";
    public string strOK = "";
    public string strClose = "";

    public string strCurDept = "";
    public string strCurName = "";
    public bool bEditDeptName = true;


    ISGSideBarUIService SideBarUISvc;

    //ISGHeaderUIService sGHeaderUIService;

    public delegate void ApprSelectChangeEvent();

    public event ApprSelectChangeEvent ApprSelectChange;

    //public static bool bLoadBaseLine = false;

    SGSettingsDBProc sgSettingProc;

    ISGSiteConfigService siteConfig;


    private void moveToTop()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
        {
            ApproverSelect.Remove(apvTarget);
            ApproverSelect.AddFirst(apvTarget);
        }
        StateHasChanged();
    }
    private void moveToUpper()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);

        if (apvTarget != null)
        {
            //현재값으 앞에값을 구하기
            LinkedListNode<ApproverInfo> current;
            LinkedListNode<ApproverInfo> next;
            current = ApproverSelect.First;
            if (current.Value.UserSeq == stTargetSelect)
            {
                return;
            }

            for (int i = 0; i < ApproverSelect.Count; i++)
            {
                next = current.Next;
                if (next.Value.UserSeq == stTargetSelect)
                {
                    ApproverSelect.Remove(apvTarget);
                    ApproverSelect.AddBefore(current, apvTarget);
                    break;
                }
                else
                {
                    current = current.Next;
                }
            }
        }
        StateHasChanged();
    }
    private void moveToLower()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);

        if (apvTarget != null)
        {
            //현재값으 앞에값을 구하기
            LinkedListNode<ApproverInfo> current;
            LinkedListNode<ApproverInfo> next;
            LinkedListNode<ApproverInfo> last;
            current = ApproverSelect.First;
            last = ApproverSelect.Last;
            if (last.Value.UserSeq == stTargetSelect)
            {
                return;
            }

            for (int i = 0; i < ApproverSelect.Count; i++)
            {
                next = current.Next;
                if (current.Value.UserSeq == stTargetSelect)
                {
                    ApproverSelect.Remove(apvTarget);
                    ApproverSelect.AddAfter(next, apvTarget);
                    break;
                }
                else
                {
                    current = current.Next;
                }
            }
        }
        StateHasChanged();
    }
    private void moveToBottom()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
        {
            ApproverSelect.Remove(apvTarget);
            ApproverSelect.AddLast(apvTarget);
        }
        StateHasChanged();
    }

    public bool GetUserSeqExistence(string strUserSeq)
    {
        bool bRet = false;
        foreach (var item in ApproverSelect)
        {
            if (strUserSeq.Equals(item.UserSeq))
            {
                bRet = true;
                break;
            }
        }
        return bRet;
    }
    public string GetUserSeqExistenceName(string strUserSeq)
    {
        string strName = "";
        foreach (var item in ApproverSelect)
        {
            if (strUserSeq.Equals(item.UserSeq))
            {
                strName = item.Name;
                break;
            }
        }
        return strName;
    }
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void SGDeptTreeList_OnItemDoubleClick(ApproverInfo doubleClickInfo)
    {
        stSelectApprover = doubleClickInfo.UserSeq;
        AddSelectApprover();
    }

    private void AddSelectApprover()
    {
        if (stSelectApprover.Length < 1)
            return;

        ApproverInfo apv = ApproverSearch.FirstOrDefault(x => x.UserSeq == stSelectApprover);
        if (apv != null)
        {
            string strUserSeq = apv.UserSeq;
            if (GetUserSeqExistence(strUserSeq))
            {
                string strName = GetUserSeqExistenceName(strUserSeq);
                string strMsg = XmlConf.GetWarnMsg("W_0026");   //{0} 사용자는 결재자로 등록되어 있습니다.
                strMsg = String.Format(strMsg, strName);
                ShowMessage("warn", strMsg);
                return;
            }
            else
            {
                apv.Index = apv.Index.Trim();
                ApproverSelect.AddLast(apv);
            }

            //ApproverInfo apvAsign = ApproverSelect.FirstOrDefault(x => x.Index == stSelectApprover);
            //if (apvAsign == null)
            //   ApproverSelect.AddLast(apv);
        }


        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.SetApprLineList(groupID, ApproverSelect);
        InitDeptApprInsert();
        InitApprLine();

    }
    private void RemoveAssignApprover()
    {
        ApproverInfo apvTarget = ApproverSelect.FirstOrDefault(x => x.UserSeq == stTargetSelect);
        if (apvTarget != null)
            ApproverSelect.Remove(apvTarget);

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        HSCmdCenter.SetApprLineList(groupID, ApproverSelect);
        InitDeptApprInsert();
        InitApprLine();
    }

    public async Task openPopUp()
    {
        object[] param = { "ApproverSelect_PopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void SelectOK()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.SetApprLineList(groupID, ApproverSelect);

        bool bApprLineLocalSave = SGAppMgrSvc.OpConfigInfoService.GetUseApprLineLocalSave(groupID);     // siteConfig. json으로 이동
        if (bApprLineLocalSave)
        {
            SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupID);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(groupID, "", "", "", "", 0);

            string strEncSaveApprLine = "";
            string strApprLine = "";
            SGRSACrypto sgRSACrypto = new SGRSACrypto();
            if (sgSettingData != null)
            {
                strEncSaveApprLine = sgSettingProc.GetSettingApprLine(groupID);
                sgRSACrypto.ValueDecrypt(strEncSaveApprLine, out strApprLine);
            }
            SGUserData sgUserData = null;
            sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
            if (sgUserData == null)
                return;

            int step = 0;
            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData != null)
                step = sgLoginData.GetApproveStep();

            string strUserSeq = sgUserData.GetUserSequence();
            strApprLine = SGApprLineData.LocalSaveANDApprLineData(ApproverSelect, strUserSeq, strApprLine, step);
            string strEncApprLine = "";
            sgRSACrypto.ValueEncrypt(strApprLine, out strEncApprLine);
            sgSettingProc.SetSettingApprLine(groupID, strEncApprLine);
        }

        ApprSelectChange();

        closePopUp();
    }
    public void SelectCancel()
    {
        closePopUp();
    }
    public void closePopUp()
    {
        object[] param = { "ApproverSelect_PopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    public void SetApprSelectChangeEvent(ApprSelectChangeEvent apprSelChange)
    {
        ApprSelectChange = apprSelChange;
    }

    protected override void OnInitialized()
    {

        actionAssign = AssignApprover;
        actionTargetSelect = SelectTarget;

        approverSearchType = SGAppMgrSvc.OpConfigInfoService.GetApproverSearchType();
        useInputInTree = SGAppMgrSvc.OpConfigInfoService.GetUseInputSearchInApproverTree();
        InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        sgSettingProc = SGSettingsDBProc.Instance;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;


        bEditDeptName = SGAppMgrSvc.OpConfigInfoService.GetUseApprDeptSearch(groupID);

        if (pageService.GetLoadApprBaseLine(groupID) == false)
        {
            bool bLocalSave = SGAppMgrSvc.OpConfigInfoService.GetUseApprLineLocalSave(groupID); // siteConfig. json으로 이동
            if (bLocalSave)
            {
                SGSettingData sgSettingData = null;
                sgSettingData = sgSettingProc.SelectSettingData(groupID);
                if (sgSettingData == null)
                {
                    InitBaseApprLine();
                }
                else
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncApprLine = sgSettingProc.GetSettingApprLine(groupID);
                    string strApprLine = "";
                    sgRSACrypto.ValueDecrypt(strEncApprLine, out strApprLine);

                    SGUserData sgUserData = null;
                    sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
                    if (sgUserData == null)
                    {
                        InitApprLine();
                        StateHasChanged();
                        return;
                    }

                    string strUserSeq = sgUserData.GetUserSequence();

                    SGApprLineData sgApprLineData = null;
                    sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
                    if (sgApprLineData != null)
                        sgApprLineData.LocalLoadANDApprLineData(strApprLine, strUserSeq);
                    InitApprLine();
                }
            }
            else
            {
                InitBaseApprLine();
            }
            StateHasChanged();
            pageService.SetLoadApprBaseLine(groupID, true);
            //bLoadBaseLine = true;
        }
        else
        {
            InitApprLine();
            //ApprSelectChange();
            StateHasChanged();
        }
    }
    public void BindEvent()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetDeptApprLineReflashEventAdd(groupID, DeptApprLineResult); //타부서 조회 결과

        if (approverSearchType == "TREE" && refSGDeptTreeList != null)
            refSGDeptTreeList.BindEvent();
    }
    public void InitDeptApprInsert()
    {
        ApproverSearch.Clear();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGDeptApprLineSearchData sgDeptApprLine = null;
        sgDeptApprLine = (SGDeptApprLineSearchData)HSCmdCenter.GetDeptApprLineSearchData(groupID);
        if (sgDeptApprLine == null)
            return;

        LinkedList<ApproverInfo> apprLinkedList = null;
        apprLinkedList = sgDeptApprLine.GetDeptApproverInfoData();
        if ((apprLinkedList == null) || (apprLinkedList.Count <= 0))
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();

        int count = 1;
        foreach (var item in apprLinkedList)
        {
            if (strUserSeq.Equals(item.UserSeq))
                continue;
            item.Index = String.Format("{0,2}", count.ToString());
            ApproverSearch.AddLast(item);
            count++;
        }
        StateHasChanged();

    }
    public void InitBaseApprLine()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;

        LinkedList<ApproverInfo> apprLinkedList = null;
        apprLinkedList = sgApprLineData.GetConvertBaseApprAndLineData();
        if ((apprLinkedList == null) || (apprLinkedList.Count <= 0))
            return;

        HSCmdCenter.SetApprLineList(groupID, apprLinkedList);
        ApproverSelect.Clear();
        //StateHasChanged();
    }

    /// <summary>
    /// 조회/저장/선택된 Select Approve 리스트를 가지고 와서 컨트롤에 세팅
    /// 전역으로 저장된 결재 리스트 세팅
    /// </summary>
    public void InitApprLine()
    {
        ApproverSelect.Clear();
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGApprLineData sgApprLineData = null;
        sgApprLineData = (SGApprLineData)HSCmdCenter.GetApprLineData(groupID);
        if (sgApprLineData == null)
            return;


        LinkedList<ApproverInfo> apprLinkedList = null;
        apprLinkedList = sgApprLineData.GetApprAndLineData();
        if ((apprLinkedList == null) || (apprLinkedList.Count <= 0))
        {
            // string strMsg = XmlConf.GetWarnMsg("W_0242");   // 검색 결과가 존재하지 않습니다.
            // ShowMessage("Info", strMsg);
            // return;

            InitBaseApprLine();
            StateHasChanged();
            //bLoadBaseLine = true;
            pageService.SetLoadApprBaseLine(groupID, true);
            return;
        }

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strUserSeq = sgUserData.GetUserSequence();

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;
        int step = sgLoginData.GetApproveStep();    //결재유형 취득
        m_step = step;

        int count = 1;
        foreach (var item in apprLinkedList)
        {
            if (strUserSeq.Equals(item.UserSeq))
                continue;

            if (step == 0) //AND 결재
            {
                item.selectIndex = count.ToString();
                //item.Index = String.Format("{0,2}", count.ToString());
                item.Index = count.ToString();
                ApproverSelect.AddLast(item);

            }
            else if (step == 1)  //OR결재
            {
                item.selectIndex = count.ToString();
                item.Index = "1";
                ApproverSelect.AddLast(item);
            }
            else
            {
                item.selectIndex = count.ToString();
                ApproverSelect.AddLast(item);   //AND+OR 결재
            }
            count++;
        }
        StateHasChanged();
    }

    public void SetInitDeptName(string strDeptName)
    {
        strCurDept = strDeptName;
    }

    public void DeptApprLine()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        SGUserData sgUserData = null;
        sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupID);
        if (sgUserData == null)
            return;

        string strSysID = sgLoginData.GetSysID();
        string strUserID = sgLoginData.GetUserID();
        string strUserName = strCurName;
        string strTeamName = strCurDept;
        strCurDept = strTeamName;
        string strTeamCode = "";
        SGQueryExtend sgQuery = new SGQueryExtend();
        string strQuery = sgQuery.GetDeptApprLineSearch(strSysID, strUserName, strTeamName, strTeamCode, true);
        HSCmdCenter.SendDeptApprLineSearchQuery(groupID, strUserID, strQuery);
    }
    public void DeptApprLineResult(int groupid, PageEventArgs e)
    {
        if (e.result != 0)
        {
            ShowMessage("error", e.strMsg);
            return;
        }

        InitDeptApprInsert();
    }

    [JSInvokable("ApproverTargetSelect")]
    public static void ApproverTargetSelect(string value)
    {
        actionTargetSelect.Invoke(value);
    }
    private void SelectTarget(string value)
    {
        stTargetSelect = value;
        StateHasChanged();
    }

    [JSInvokable("ApproverSearchSelect")]
    public static void ApproverSearchSelect(string value)
    {
        actionAssign.Invoke(value);
    }

    private void AssignApprover(string value)
    {
        stSelectApprover = value;
        StateHasChanged();
    }

    public void InitText()
    {
        strApproverSearch = XmlConf.GetTitle("T_COMMON_APPROVESEARCH");             // 결재자 조회
        strDept = XmlConf.GetTitle("T_COMMON_DEPT");                                // 부서
        strName = XmlConf.GetTitle("T_COMMON_NAME");                                // 이름
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            // 조회
        strOrder = XmlConf.GetTitle("T_COMMON_ORDER");                              // 순번
        strRank = XmlConf.GetTitle("T_COMMON_RANK");                                // 직급
        strMostTop = XmlConf.GetTitle("T_ETC_TOP");                                 // 맨위
        strMostBottom = XmlConf.GetTitle("T_ETC_BOTTOM");                           // 맨아래
        strTop = XmlConf.GetTitle("T_ETC_UP");                                      // 위
        strDown = XmlConf.GetTitle("T_ETC_DOWN");                                   // 아래
        strOK = XmlConf.GetTitle("T_COMMON_OK");                                    // 확인
        strClose = XmlConf.GetTitle("T_FILE_FOLD");                                 // 닫기
    }

}
