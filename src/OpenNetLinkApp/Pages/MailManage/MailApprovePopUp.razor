@using OpenNetLinkApp.Data.SGQuery
@using System.Diagnostics
@using HsNetWorkSGData
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Common
@using AgLogManager

@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService

<div class="modal fade" id="MailApprovePopUp" data-backdrop="static" data-keyboard="false" style="z-index:5000;">
    <div class="modal-dialog modal-dialog-top" style="vertical-align:top;">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold">@XmlConf.GetTitle("T_EMAIL_APPROVE_DETAIL")</h5>   <!-- 메일결재 상세보기 -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="card-body pt-0">
                    <div class="modal-sub-title mb-2"> @XmlConf.GetTitle("T_COMMON_DETAILVIEW") </div>      <!-- 상세내역 -->
                    <table class="table table-bordered blue">
                        <tbody>
                            <tr>
                                <th>@XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND") </th>      <!-- 발송구분 -->
                                <td>@strDataTransKind</td>
                                <th>@XmlConf.GetTitle("T_EMAIL_STATUS")</th>    <!-- 발송상태 -->
                                <td>@strDataTransStatus</td>

                                <th>@XmlConf.GetTitle("T_EMAIL_SENDDATE")</th>        <!--발신일-->
                                <td>@strDataApprReqDay</td>
                                <th>@XmlConf.GetTitle("T_EMAIL_SENDER")</th>  <!--발신자-->
                                <td>@strDataApprReqUser</td>

                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_COMMON_APPROVE_KIND")</th> <!-- 결재종류 -->
                                <td>@strDataApprKind</td>
                                <th>@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th> <!--  승인상태 -->
                                <td>@strDataApprStatus</td>

                                <th>@XmlConf.GetTitle("T_DETAIL_APPROVEUSER")</th>    <!--승인자-->
                                <td>@strDataLastApprName</td>
                                <th>@XmlConf.GetTitle("T_DETAIL_APPROVEHIST")</th>  <!-- 승인이력 -->
                                <td>

                                    @if (apprHList.Count > 0)
                                    {
                                        <div class="navbar-nav ml-auto txte-right">
                                            <!-- Messages Dropdown Menu -->
                                        <div class="nav-item dropdown show">
                                                <a class="nav-link p-0" data-toggle="dropdown" href="#" aria-expanded="true" hidden="@bApprHistHidden">
                                                    <i class="fas fa-list-alt fa-lg"></i>
                                                </a>

                                                <div class="dropdown-menu dropdown-menu-xl dropdown-menu-right" style=" right:0px; height:135px; overflow-y:scroll;transform:matrix3d(-338px,19px,0px);">
                                                    <div class="dropdown-title">
                                                        <div class="media">
                                                            <div class="media-body">
                                                                <div class="col-md-3 float-left dropdown-item-title1">@XmlConf.GetTitle("T_DETAIL_APPROVEUSER")</div>
                                                                <div class="col-md-2 float-left dropdown-item-title1">@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</div>
                                                                <div class="col-md-3 float-left dropdown-item-title1">@XmlConf.GetTitle("T_COMMON_APPROVEDATE")</div>
                                                                <div class="col-md-2 float-left dropdown-item-title1">@XmlConf.GetTitle("T_APPROVE_REJECTREASON")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    @foreach (ApprHist appritem in apprHList)
                                                    {
                                                        <div class="dropdown-divider"></div>
                                                        <a class="dropdown-item">
                                                            <div class="media">
                                                                <div class="media-body">
                                                                    @*<div class="col-md-2 float-left dropdown-item-title">@apvList[i].approveOrder</div>*@
                                                                    <div class="col-md-2 float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:15%;">@appritem.strName</div>
                                                                    @*<div class="col-md-2 float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:15%;">@appritem.strName</div>*@
                                                                    <div class="col-md-2 float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:15%;">@appritem.strApprStatus</div>
                                                                    <div class="float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:30%;">@appritem.strApprDay</div>
                                                                    <div class="col-md-2 float-left dropdown-item-title" style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@appritem.strReason</div>
                                                                </div>
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                    }

                                </td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_RECV_USER")</th>        <!--수신자-->
                                <td colspan="7">@stDispReceiver</td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_EMAIL_REFERENCE")</th>    <!-- 참조 -->
                                <td colspan="7">
                                    @stDispCC
                                </td>
                            </tr>
                            <tr>
                                <th>@XmlConf.GetTitle("T_EMAIL_HIDEREFERENCE")</th>     <!-- 숨은참조-->
                                <td colspan="7">@stHideCC</td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_TRANS_TITLE")</th>       <!--   제목 -->
                                <td colspan="7">
                                    @stTitle
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>



                <div class="card-body pt-0 pb-0">
                    <div class="modal-sub-title mb-2"> @XmlConf.GetTitle("T_DETAIL_EMAILFILEINFO") </div>  <!--첨부 파일정보 -->

                    <div class="col-md-12">

                        <div class="float-left mt-2">
                            <i class="fas fa-lightbulb fa-1x"></i>&nbsp;&nbsp;
                            @strPrevInfo1 &nbsp;&nbsp; @strPrevInfo2
                        </div>

                    </div>

                    <table class="table table-head-fixed table-bordered table-hover white">
                        <thead>
                            <tr>

                                @if (bUseDlpDataView)
                                {
                                    <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_PRIVACY") </th>
                                    <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_DLP_CONTENTS") </th>
                                    <!-- 개인정보-->
                                }

                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_FILENAME") </th>               <!-- 파일명-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_KIND") </th>                    <!-- 유형-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_SIZE") </th>                    <!-- 크기-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_DETAIL_VIRUSHIST") </th>            <!-- 바이러스내역-->
                                @if (m_bCanFilePreView)
                                {
                                    <th style="text-align:center;width:8%;">@XmlConf.GetTitle("T_COMMON_DETAILVIEW")</th>
                                }

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (FileInfoData file in mFileData)
                            {
                                <tr>
                                    @if (bUseDlpDataView)
                                    {
                                        <td style="text-align:center;">@file.stDLP</td>
                                        <td style="text-align:center;">@file.stDLPDesc</td>
                                    }
                                    <td>@file.strFileName</td>
                                    <td style="text-align:center;">@file.strFileType</td>
                                    <td style="text-align:center;">@file.strFileSize</td>
                                    <td style="text-align:center;">@file.strVirusHistory</td>
                                    @if (m_bCanFilePreView)
                                    {
                                        if (file.bCheckDisable == false)
                                        {
                                            <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e => attachDownload(file.fileNo, "", file.strFileName))"><i class="fas fa-search"></i></button></td>
                                        }
                                        else
                                        {
                                            <td style="text-align:center">-</td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>

                <!--/. content -->
            </div>
            <div class="modal-footer">
                @if (bApproveEnable)
                {
                    <button type="button" class="btn btn-md btn-blue" @onclick="DetailApprove"><i class="fas fa-check-circle"></i>@XmlConf.GetTitle("T_COMMON_APPROVE")</button>

                    @if (m_bReject)
                    {
                        <button type="button" class="btn btn-md btn-red" disabled="@false" @onclick="DetailReject"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_COMMON_REJECTION")</button>
                    }
                    else
                    {
                        <!-- btn-gray로 표현 -->
                        <button type="button" class="btn btn-md btn-red" disabled="@true"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_COMMON_REJECTION")</button>
                    }
                }
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_FILE_FOLD")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<SGReject @ref="refSGDetailReject" Guid="modalEmailDetailReject"></SGReject>

@code
{
    private SGApproveUIData.ApproveDetailData DetailData;

    ISGNetworkService NetWorkSvc;

    //string stEmailSeq = String.Empty;
    //string stApproveSeq = String.Empty;
    bool bApproveEnable = false;

    SGReject refSGDetailReject;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MailApprovePopUp>();
    List<Dictionary<int, string>> detailData = null;          //DB 데이타 직접 사용하는걸로 수정
    string strDataTransKind = String.Empty;
    string strDataTransStatus = String.Empty;
    string strDataApprReqDay = "";               // 승인요청일
    string strDataApprReqUser = "";
    string strDataApprKind = "";
    string strDataApprStatus = "";
    string strDataLastApprName = "";


    string stApproveKindValue = String.Empty;
    string stApproveStatusValue = String.Empty;
    string stApproverList = String.Empty;
    string stDispReceiver = String.Empty;
    string stDispCC = String.Empty;
    string stHideCC = String.Empty;
    string stTitle = String.Empty;
    // bool bTransCancelVisuable = false;
    List<ApprHist> apprHList = new List<ApprHist>();
    bool bApprHistHidden = false;

    List<FileInfoData> mFileData = new List<FileInfoData>();
    ISGSideBarUIService SideBarUISvc;
    public bool m_bFilePrevOpening = false;

    /// <summary>
    /// 개인정보 검색된 내용 보여주도록 설정
    /// </summary>
    public bool bUseDlpDataView = true;

    /// <summary>
    /// 정보보호결재 View 상황인지유무
    /// </summary>
    public bool bIsPrivacyApproveDetail = false;

    /// <summary>
    /// 대결재 SFM2 상태인지 유무
    /// </summary>
    public bool bIsEmailApproveSfm2Mode = false;

    public string strPrevInfo1 = "";
    public string strPrevInfo2 = "";
    public bool m_bReject = true;                              // 반려 가능 상태 여부
    public bool m_bCanFilePreView = false;                     // 파일 미리보기 가능유무

    public class ApprHist
    {
        public string strName = "";                // 이름
        public string strApprStatus = "";          // 결재상태
        public string strApprDay = "";             // 승인일
        public string strReason = "";              // 반려사유

        public ApprHist()
        {
            strName = strApprStatus = strApprDay = strReason = "";
        }

        public ApprHist(string Name, string ApprStatus, string ApprDay, string Reason)
        {
            strName = Name;
            strApprStatus = ApprStatus;
            strApprDay = ApprDay;
            strReason = Reason;
        }
    }
    SGeMailTransManageData strDisplayData = new SGeMailTransManageData();
    FileAddManage fileAddManage = new FileAddManage();

    /// <summary>
    /// 첨부파일 다운로드 요청
    /// </summary>
    /// <param name="fileseq"></param>
    /// <param name="filekey"></param>
    /// <param name="filename"></param>
    private void attachDownload(string fileseq, string filekey, string filename)
    {
        //AppId, ClientId, EmailSeq, FileName, FileKey, FileSeq
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        //pageService.SetFilePrevRecving(true);
        //string sFileName = fileAddManage.GetFileRename(true, filename);
        ShowProgress(groupID, 1, 0, filename);
        HSCmdCenter.sgPageEvent.SetFilePrevProgressEventAdd(groupID, FileDownloadProgressNoti);
        //Task.Delay(1000);


        // Server 쪽에서 파일이름에서 특수문자 치완해서 찾는거 안함. 동작할때 적용
        // filename = fileAddManage.GetFileRename(true, filename);

        HSCmdCenter.SendEmailDownload(groupID, strUserID, DetailData?.TransSeq, filename, filekey, fileseq);
    }

    /// <summary>
    /// 파일 수신 진행과정 보여주는 Noti
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    public void FileDownloadProgressNoti(int groupID, PageEventArgs e)
    {

        string strMsg = "";
        CLog.Here().Error($"FileDownloadProgressNoti - result : {e.result}, StrMsg : {e.strMsg}");

        if (e.result != 0)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }

        string sFileName = e.strMsg;
        int per = e.count;
        int type = 0;

        CLog.Here().Error($"FileDownloadProgressNoti - Percent : {per}");

        if (per >= 100)
        {
            type = 2;
            ShowProgress(groupID, type, 100, sFileName);
            Task.Delay(500);
            type = 3;                                       // close
            pageService.SetFilePrevRecving(false);
        }
        else if ((per > 0) && (per < 100))
        {
            type = 2;                                       // update
            pageService.SetFilePrevRecving(true);
        }
        else
            return;

        ShowProgress(groupID, type, per, sFileName);
    }

    /// <summary>
    /// 파일수신 ProgressBar 표현 (type : 1 - open , 2 - update ,3 -close)
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="type"></param>
    /// <param name="per"></param>
    /// <param name="sFileName"></param>
    private async void ShowProgress(int groupID, int type, int per, string sFileName)
    {
        object[] param = { };
        string identifier = "";
        string strID = groupID.ToString();
        //strID = strFileName;
        strID = "FILEPREVIEW";
        string strProgress = String.Format("{0}%", per);
        string strFileRecvInfo = "";
        if (per == 0)
        {
            string strInfoStart = XmlConf.GetInfoMsg("I_0203");                 // 다른 서버에서 파일을 탐색하는 중입니다./r/n잠시만 기다려 주십시요.
            strInfoStart = strInfoStart.Replace("/r/n", "<br>");
            strFileRecvInfo = strFileRecvInfo + strInfoStart;
        }
        else
        {
            strFileRecvInfo = XmlConf.GetWarnMsg("W_0087");                     // 파일 수신중 입니다./r/n잠시만 기다려 주십시오.
            strFileRecvInfo = strFileRecvInfo.Replace("/r/n", "<br>");
        }
        strFileRecvInfo = strFileRecvInfo + "<br>";

        string strProgressInfo = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
        string strProgressInfoStart =

        strFileRecvInfo = strFileRecvInfo + strProgressInfo + " : " + strProgress;

        switch (type)
        {
            case 1:
                string strTitleName = XmlConf.GetTitle("T_DETAIL_FILEPREVIEW");
                identifier = "fireProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strTitleName;
                param[2] = strFileRecvInfo;
                pageService.SetFilePrevRecving(true);
                break;
            case 2:
                identifier = "updateProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFileRecvInfo;
                param[2] = strProgress;
                break;
            case 3:
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFilePrevRecving(false);
                await Task.Delay(500);
                break;
            default:
                break;
        }
        await JSRuntime.InvokeAsync<object>(identifier, param);

        if (type == 3)
        {
            if (sFileName.Equals(""))
                return;

            if (m_bFilePrevOpening)
                return;
            else
                m_bFilePrevOpening = true;
            string strFilePath = Path.Combine("wapprove", sFileName);
            string strModulePath = "";
            strModulePath = System.IO.Directory.GetCurrentDirectory();
            strFilePath = Path.Combine(strModulePath, strFilePath);
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                strFilePath = strFilePath.Replace("/", "\\");
            }
            else
            {
                strFilePath = strFilePath.Replace("\\", "/");
            }
            await Task.Delay(2000);

            ProcessStartInfo pi = new ProcessStartInfo(strFilePath);
            pi.Arguments = Path.GetFileName(strFilePath);
            pi.UseShellExecute = true;
            pi.WorkingDirectory = Path.GetDirectoryName(strFilePath);
            pi.FileName = strFilePath;
            pi.Verb = "OPEN";
            Process.Start(pi);
            m_bFilePrevOpening = false;
        }
    }


    /// <summary>
    /// 승인CMD 보내기
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="strReason"></param>
    /*public void ApproveSend(int groupID, string strReason)
    {

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, "A", strReason, stApproveSeq, bIsEmailApproveSfm2Mode, bIsPrivacyApproveDetail);

        closePopUp();
    }*/

    /// <summary>
    /// 승인 동작
    /// </summary>
    public async Task DetailApprove()
    {
        string strMsg = "";
        if (pageService.GetFilePrevRecving() == true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0250");           // 파일 미리보기 수행 중에는 승인 할 수 없습니다./r/n미리보기 완료 후 다시 시도하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (SGAppMgrSvc.OpConfigInfoService.GetUseFileApproveReason(groupID))
        {
            refSGDetailReject.ResetReason(Common.Enums.EnumApproveType.Approve);
            refSGDetailReject.SetGroupID(groupID);
            refSGDetailReject.SetApprRejectEvent(DetailApproveRejectSend);
            await refSGDetailReject.openPopUp();
        }
        else
            DetailApproveRejectSend(groupID, "Approve", false);

    }

    /// <summary>
    /// 반려 동작
    /// </summary>
    /// <returns></returns>
    private async Task DetailReject()
    {
        string strMsg = "";
        if (pageService.GetFilePrevRecving() == true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0251");           // 파일 미리보기 수행 중에는 반려 할 수 없습니다./r/n미리보기 완료 후 다시 시도하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        refSGDetailReject.ResetReason();
        refSGDetailReject.SetGroupID(groupID);
        refSGDetailReject.SetApprRejectEvent(DetailApproveRejectSend);
        await refSGDetailReject.openPopUp();
    }

    /// <summary>
    /// 반려동작 실제 서버에 data 전송하는 event
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="strReason"></param>
    public void DetailApproveRejectSend(int groupID, string strReason, bool bisReject)
    {
        /*SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, "R", strReason, stApproveSeq, bIsEmailApproveSfm2Mode, bIsPrivacyApproveDetail);*/

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
        {
            CLog.Here().Error($"ApproveAction, HSCmdCenter.GetUserData = null");
            ShowMessage("error", XmlConf.GetErrMsg(bisReject ? "E_0210" : "E_0209"));
            return;
        }

        string strUserSeq = sgLoginData.GetUserSequence();
        List<Int64> listApproveSeq = new List<Int64>();
        listApproveSeq.Add(DetailData.TransSeqValue);

        HSCmdCenter.RestSendApproveBatch(groupID, Convert.ToInt64(strUserSeq), bIsPrivacyApproveDetail ? "security" : "common", "mail", (bisReject ? "reject" : "confirm"), strReason, listApproveSeq);

        closePopUp();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="strData"></param>
    /// <returns></returns>
    public string GetApproveRejectReasonText(string strData)
    {
        string strOnlyData = strData;
        int nIdx = strOnlyData.LastIndexOf(')');
        if (nIdx < 1)
            return "";
        else
        {
            strOnlyData = strOnlyData.Substring(0, nIdx);
            return strOnlyData;
        }
    }

    //Param : Email Seq, Request Seq, 승인가능여부
    public void SetBindingData(SGApproveUIData.ApproveDetailData getDetailData)
    {
        apprHList.Clear();

        DetailData = getDetailData;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        strDataTransKind = DetailData.TransKindName;// 발송구분
        strDataTransStatus = DetailData.TransStatusName;    //발송상태

        strDataApprKind = DetailData.ApprKindName;// 승인구분
        strDataApprStatus = DetailData.ApprStatusName;                                   // 승인상태
        strDataApprReqUser = DetailData.ReqUserName;                                     // 승인요청자
        strDataApprReqDay = GetTimeFormatString(DetailData.ApprReqDay);  //발신일

        stTitle = DetailData.Title;                                             // 제목

        m_bCanFilePreView = DetailData.FilePrevEnable;

        mFileData = DetailData.FileData;
        if (mFileData == null)
            return;

        bApproveEnable = DetailData.ApprConfirmEnable;
        m_bReject = DetailData.ApprRejectEnable;   //결재 가능 && 선결인 경우, 반려 가능


        for (int i = 0; i < mFileData.Count; i++)
        {
            mFileData[i].bCheckDisable = !(m_bCanFilePreView);
            if (mFileData[i].bCheckDisable)
                mFileData[i].bCheck = false;
        }

        List<ApproverHist> apprListHist = DetailData.ApproverInfoHist;

        if (apprListHist?.Count <= 1)
            bApprHistHidden = true;

        if (apprListHist?.Count <= 0)
            strDataLastApprName = "-";
        else
        {
            //strDataLastApprStatus = DetailData.MyApproveInfo?.ApproveStatusName;
            strDataLastApprName = DetailData.MyApproveInfo?.UserName;
            //strDataLastApprDay = DetailData.MyApproveInfo?.ApproveTime;
            //strDataLastApprRejectReason = DetailData.MyApproveInfo?.ApproveReason;
            //if (strDataLastApprRejectReason.Length > 100)
            //    strDataLastApprRejectReason = strDataLastApprRejectReason.Substring(0, 100) + "\n" + strDataLastApprRejectReason.Substring(101);

            apprHList.Clear();
            foreach (ApproverHist data in apprListHist)
            {
                //TODO 고도화 - 메일에서 History는 직급도 포함 필요
                string sName = data.m_strApproverName;
                string sApprStatus = data.m_strApprStatus;
                string sApprDay = data.m_strApprDay;
                string sRejectReason = data.m_strRejectReason;
                apprHList.Add(new ApprHist(sName, sApprStatus, sApprDay, sRejectReason));
            }
        }

        //수신자
        stDispReceiver = DetailData.ForwardReceiver;

        //참조
        stDispCC = DetailData.ForwardCCReceiver;

        //숨은참조
        stHideCC = DetailData.ForwardHiddenCCReceiver;
        StateHasChanged();
    }


    public async Task openPopUp()
    {
        object[] param = { "MailApprovePopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        object[] param = { "MailApprovePopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    private string GetApproveStatusString(string strApproveStatus, string strTransStatus)
    {
        return strDisplayData.GetApprStausDisplayData(strApproveStatus, strTransStatus);
    }

    private string GetFileSizeString(string value)
    {
        string rtn = String.Empty;
        long lSize = long.Parse(value);

        rtn = CsFunction.GetSizeStr(lSize);

        return rtn;
    }

    public string GetTransKindString(string value)
    {
        string rtn = String.Empty;
        if (value == "0")
            rtn = XmlConf.GetTitle("T_COMMON_EXPORT");
        else if (value == "1")
            rtn = XmlConf.GetTitle("T_COMMON_IMPORT");
        return rtn;
    }

    private string GetTimeFormatString(string value)
    {
        string rtn = String.Empty;
        if (value.Length > 0)
            rtn = value.Substring(0, 4) + "-" + value.Substring(4, 2) + "-" + value.Substring(6, 2);
        return rtn;
    }
    private string GetApproveKindString(string value)
    {
        string rtn = String.Empty;
        switch (value)
        {
            case "0":
                rtn = XmlConf.GetTitle("T_FILE_APPROVEBEFORE");
                break;
            case "1":
                rtn = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");
                break;
            default:
                rtn = "";
                break;
        }
        return rtn;
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        InitText();
        base.OnInitialized();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void InitText()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strConNetwork = "UnKnown";
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == groupID)
            {
                strConNetwork = listNetWork[nIdx].FromName;
                break;
            }
        }

        strPrevInfo1 = strConNetwork + XmlConf.GetWarnMsg("W_0237");                // 업무망에 접속되어 있습니다.

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

        if (sgLoginData == null)
            strPrevInfo2 = XmlConf.GetWarnMsg("W_0238");                            // 반출파일만 파일미리보기가 가능합니다.
        else
        {
            bool bInner = sgLoginData.GetSystemPosition();
            if (bInner)
                strPrevInfo2 = XmlConf.GetWarnMsg("W_0238");                            // 반출파일만 파일미리보기가 가능합니다.
            else
                strPrevInfo2 = XmlConf.GetWarnMsg("W_0240");                            // 반입파일만 파일미리보기가 가능합니다.
        }

    }



}
