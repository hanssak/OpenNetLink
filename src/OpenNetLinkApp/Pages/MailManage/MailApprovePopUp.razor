@using OpenNetLinkApp.Data.SGQuery
@using System.Diagnostics
@using HsNetWorkSGData
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using System.Runtime.InteropServices
@using OpenNetLinkApp.PageEvent
@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
@inject PageStatusService pageService

<div class="modal fade" id="MailApprovePopUp">
    <div class="modal-dialog modal-dialog-top" style="vertical-align:top;">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold">@XmlConf.GetTitle("T_EMAIL_APPROVE_DETAIL")</h5>   <!-- 메일결재 상세보기 -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="card-body pt-0">
                    <div class="modal-sub-title mb-2"> @XmlConf.GetTitle("T_COMMON_DETAILVIEW") </div>      <!-- 상세내역 -->
                    <table class="table table-bordered blue">
                        <tbody>
                            <tr>
                                <th>@XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND") </th>      <!-- 발송구분 -->
                                <td>@GetTransKindString(stTransKindValue)</td>
                                <th>@XmlConf.GetTitle("T_EMAIL_STATUS")</th>    <!-- 발송상태 -->
                                <td>@GetTransStatusString(stTransStatusValue)</td>

                                <th>@XmlConf.GetTitle("T_EMAIL_SENDDATE")</th>        <!--발신일-->
                                <td>@GetTimeFormatString(stReqTime)</td>
                                <th>@XmlConf.GetTitle("T_EMAIL_SENDER")</th>  <!--발신자-->
                                <td>@stSendder</td>

                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_COMMON_APPROVE_KIND")</th> <!-- 결재종류 -->
                                <td>@GetApproveKindString(stApproveKindValue)</td>
                                <th>@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th> <!--  승인상태 -->
                                <td>@GetApproveStatusString(stApproveStatusValue)</td>

                                <th>@XmlConf.GetTitle("T_DETAIL_APPROVEUSER")</th>    <!--승인자-->
                                <td>@stApproverList</td>
                                <th>@XmlConf.GetTitle("T_DETAIL_APPROVEHIST")</th>  <!-- 승인이력 -->
                                <td>
                                    <div class="navbar-nav ml-auto txte-right">
                                        <!-- Messages Dropdown Menu -->
                                        <div class="nav-item dropdown show">
                                            <a class="nav-link p-0" data-toggle="dropdown" href="#" aria-expanded="true">
                                                <i class="fas fa-list-alt fa-lg"></i>
                                            </a>

                                            <div class="dropdown-menu dropdown-menu-xl dropdown-menu-right" style=" right:0px; height:135px; overflow-y:scroll;transform:matrix3d(-338px,19px,0px);">
                                                @for (int i = 0; i < apvList.Count; i++)
                                                {
                                                    <a href="#" class="dropdown-item">
                                                        <div class="media">
                                                            <div class="media-body">
                                                                <div class="col-md-2 float-left dropdown-item-title">@apvList[i].approveOrder</div>
                                                                <div class="col-md-2 float-left dropdown-item-title">@apvList[i].approverName</div>
                                                                <div class="col-md-2 float-left dropdown-item-title">@apvList[i].approverRank</div>
                                                                <div class="col-md-2 float-left dropdown-item-title">@apvList[i].approveFlag</div>
                                                                <div class="col-md-2 float-left dropdown-item-title">@apvList[i].approveResTime</div>
                                                            </div>
                                                        </div>
                                                    </a>
                                                    if (i < apvList.Count - 1)
                                                    {
                                                        <div class="dropdown-divider"></div>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>

                                </td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_RECV_USER")</th>        <!--수신자-->
                                <td colspan="7">@stDispReceiver</td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_EMAIL_REFERENCE")</th>    <!-- 참조 -->
                                <td colspan="7">
                                    @stDispCC
                                </td>
                            </tr>
                            <tr>
                                <th>@XmlConf.GetTitle("T_EMAIL_HIDEREFERENCE")</th>     <!-- 숨은참조-->
                                <td colspan="7">@stHideCC</td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_TRANS_TITLE")</th>       <!--   제목 -->
                                <td colspan="7">
                                    @stTitle
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>



                <div class="card-body pt-0 pb-0">
                    <div class="modal-sub-title mb-2"> @XmlConf.GetTitle("T_DETAIL_EMAILFILEINFO") </div>  <!--첨부 파일정보 -->

                    <div class="col-md-12">
                        <!--
                        <div class="float-left mt-2">
                            <i class="fas fa-lightbulb fa-1x"></i>&nbsp;&nbsp;
                            업무망에 접속되어 있습니다. &nbsp;&nbsp;반출파일만 파일미리보기가 가능합니다.
                        </div>
                        -->
                        @*<div class="float-right mb-2">
                            @if (bApproveEnable)
                            {
                                <button type="button" class="btn btn-info btn-sm"><i class="fas fa-eye fa-lg"></i>&nbsp;&nbsp;@XmlConf.GetTitle("T_EMAIL_BODYPREVIEW")</button> 
                                <button type="button" class="btn btn-info btn-sm"><i class="fas fa-eye fa-lg"></i>&nbsp;&nbsp;@XmlConf.GetTitle("T_EMAIL_ATTATCHPREVIEW")</button> 
                            }
                        </div>*@
                    </div>

                    <table class="table table-head-fixed table-bordered table-hover white">
                        <thead>
                            <tr>
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_PRIVACY") </th>              <!-- 개인정보-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_FILENAME") </th>               <!-- 파일명-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_KIND") </th>                    <!-- 유형-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_SIZE") </th>                    <!-- 크기-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_DETAIL_VIRUSHIST") </th>            <!-- 바이러스내역-->
                                <th style="text-align:center;width:8%;">@XmlConf.GetTitle("T_COMMON_DETAILVIEW")</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (emailFile file in fileList)
                            {
                            <tr>
                                <td style="text-align:center;">@file.fileDLP</td>
                                <td>@file.fileName</td>
                                <td style="text-align:center;">@file.fileKind</td>
                                <td style="text-align:center;">@file.fileSize</td>
                                <td>@file.virusDesc</td>
                                @if (bApproveEnable)
                                {
                                    <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e => attachDownload(file.fileSeq, file.fileKey, file.fileName))"><i class="fas fa-search"></i></button></td>
                                }
                            </tr>
                            }
                        </tbody>
                    </table>

                </div>

                <!--/. content -->
            </div>
            <div class="modal-footer">
                @if (bApproveEnable)
                {
                    <button type="button" class="btn btn-md btn-blue" @onclick="DetailApprove"><i class="fas fa-check-circle"></i>@XmlConf.GetTitle("T_COMMON_APPROVE")</button>
                    <button type="button" class="btn btn-md btn-red" @onclick="DetailReject"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_COMMON_REJECTION")</button>
                }
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_FILE_FOLD")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<SGDetailReject @ref="refSGDetailReject"></SGDetailReject>
@code {
    string stEmailSeq = String.Empty;
    string stApproveSeq = String.Empty;
    bool bApproveEnable = false;

    SGDetailReject refSGDetailReject;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MailApprovePopUp>();
    List<Dictionary<int, string>> detailData = null;          //DB 데이타 직접 사용하는걸로 수정
    string stTransKindValue = String.Empty;
    string stTransStatusValue = String.Empty;
    string stReqTime = String.Empty;
    string stSendder = String.Empty;
    string stApproveKindValue = String.Empty;
    string stApproveStatusValue = String.Empty;
    string stApproverList = String.Empty;
    string stDispReceiver = String.Empty;
    string stDispCC = String.Empty;
    string stHideCC = String.Empty;
    string stTitle = String.Empty;
    // bool bTransCancelVisuable = false;
    List<emalApprover> apvList = new List<emalApprover>();
    List<emailFile> fileList = new List<emailFile>();
    ISGSideBarUIService SideBarUISvc;
    public bool m_bFilePrevOpening = false;

    private void attachDownload(string fileseq, string filekey, string filename)
    {
        //AppId, ClientId, EmailSeq, FileName, FileKey, FileSeq
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        pageService.SetFilePrevRecving(true);
        ShowProgress(groupID, 1, 0, filename);
        Task.Delay(1000);
        FileAddManage fileAddManage = new FileAddManage();
        //string sFileName = fileAddManage.GetFileRename(true, filename);
        HSCmdCenter.SendEmailDownload(groupID, strUserID, stEmailSeq, filename, filekey, fileseq);
    }

    public void FileDownloadProgressNoti(int groupID, PageEventArgs e)
    {
        string strMsg = "";
        if (e.result != 0)
        {
            strMsg = XmlConf.GetErrMsg("E_0219");           // 파일 수신 중 오류가 발생되었습니다.
            ShowMessage("error", strMsg);
            return;
        }
        string sFileName = e.strMsg;
        int per = e.count;
        int type = 0;
        if (per >= 100)
        {
            type = 2;
            ShowProgress(groupID, type, 100, sFileName);
            Task.Delay(500);
            type = 3;                                       // close
            pageService.SetFilePrevRecving(false);
        }
        else if ((per > 0) && (per < 100))
        {
            type = 2;                                       // update
            pageService.SetFilePrevRecving(true);
        }
        else
            return;

        ShowProgress(groupID, type, per, sFileName);
    }
    // type : 1 - open , 2 - update ,3 -close
    private async void ShowProgress(int groupID, int type, int per, string sFileName)
    {
        object[] param = { };
        string identifier = "";
        string strID = groupID.ToString();
        //strID = strFileName;
        strID = "FILEPREVIEW";
        string strProgress = String.Format("{0}%", per);
        string strFileRecvInfo = "";
        if (per == 0)
        {
            string strInfoStart = XmlConf.GetInfoMsg("I_0203");                 // 다른 서버에서 파일을 탐색하는 중입니다./r/n잠시만 기다려 주십시요.
            strInfoStart = strInfoStart.Replace("/r/n", "<br>");
            strFileRecvInfo = strFileRecvInfo + strInfoStart;
        }
        else
        {
            strFileRecvInfo = XmlConf.GetWarnMsg("W_0087");                     // 파일 수신중 입니다./r/n잠시만 기다려 주십시오.
            strFileRecvInfo = strFileRecvInfo.Replace("/r/n", "<br>");
        }
        strFileRecvInfo = strFileRecvInfo + "<br>";

        string strProgressInfo = XmlConf.GetTitle("T_FILERECV_PER");           // 파일 수신 진행률
        string strProgressInfoStart =

        strFileRecvInfo = strFileRecvInfo + strProgressInfo + " : " + strProgress;

        switch (type)
        {
            case 1:
                string strTitleName = XmlConf.GetTitle("T_DETAIL_FILEPREVIEW");
                identifier = "fireProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strTitleName;
                param[2] = strFileRecvInfo;
                pageService.SetFilePrevRecving(true);
                break;
            case 2:
                identifier = "updateProgressMessage";
                param = new object[3];
                param[0] = strID;
                param[1] = strFileRecvInfo;
                param[2] = strProgress;
                break;
            case 3:
                identifier = "closeProgressMessage";
                param = new object[1];
                param[0] = strID;
                pageService.SetFilePrevRecving(false);
                await Task.Delay(300);
                break;
            default:
                break;
        }
        await JSRuntime.InvokeAsync<object>(identifier, param);

        if (type == 3)
        {
            if (sFileName.Equals(""))
                return;

            if (m_bFilePrevOpening)
                return;
            else
                m_bFilePrevOpening = true;
            string strFilePath = Path.Combine("wapprove", sFileName);
            string strModulePath = "";
            strModulePath = System.IO.Directory.GetCurrentDirectory();
            strFilePath = Path.Combine(strModulePath, strFilePath);
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                strFilePath = strFilePath.Replace("/", "\\");
            }
            else
            {
                strFilePath = strFilePath.Replace("\\", "/");
            }
            await Task.Delay(2000);

            ProcessStartInfo pi = new ProcessStartInfo(strFilePath);
            pi.Arguments = Path.GetFileName(strFilePath);
            pi.UseShellExecute = true;
            pi.WorkingDirectory = Path.GetDirectoryName(strFilePath);
            pi.FileName = strFilePath;
            pi.Verb = "OPEN";
            Process.Start(pi);
            m_bFilePrevOpening = false;
        }
    }

    public void DetailApprove()
    {
        string strMsg = "";
        if (pageService.GetFilePrevRecving() == true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0250");           // 파일 미리보기 수행 중에는 승인 할 수 없습니다./r/n미리보기 완료 후 다시 시도하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        string strProcID = "A";
        string strReason = "Approve";
        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, stApproveSeq);
        closePopUp();
    }
    private async Task DetailReject()
    {
        string strMsg = "";
        if (pageService.GetFilePrevRecving() == true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0251");           // 파일 미리보기 수행 중에는 반려 할 수 없습니다./r/n미리보기 완료 후 다시 시도하여 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("warn", strMsg);
            return;
        }

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        refSGDetailReject.ResetReason();
        refSGDetailReject.SetGroupID(groupID);
        refSGDetailReject.SetApprRejectEvent(DetailApproveRejectSend);
        await refSGDetailReject.openPopUp();
    }

    public void DetailApproveRejectSend(int groupID, string strReason)
    {
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        string strProcID = "R";

        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, stApproveSeq);
        closePopUp();
    }


    public void DetailResult(int groupId, SGData e)
    {
        stTransKindValue = String.Empty;
        stTransStatusValue = String.Empty;
        stReqTime = String.Empty;
        stSendder = String.Empty;
        stApproveKindValue = String.Empty;
        stApproveStatusValue = String.Empty;
        stApproverList = String.Empty;
        stDispReceiver = String.Empty;
        stDispCC = String.Empty;
        stHideCC = String.Empty;

        string result = e.GetTagData("RESULT");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        string reason = e.GetTagData("REASON");
        detailData = e.GetSvrRecordData2("RECORD");

        string stData = String.Empty;
        List<string> listReceiver = new List<string>();       //RECIEVER
        List<string> listCCUser = new List<string>();         //CCUSER
        List<string> listHideCCUser = new List<string>();     //HIDECCUSER
        List<string> listApprover = new List<string>();     //APPROVE
        List<string> listFile = new List<string>();         //FILE
        try
        {
            apvList.Clear();
            foreach (Dictionary<int, string> item in detailData)
            {
                if (item[0].IndexOf("DATA") > -1)
                    stData = item[0];
                else if (item[0].IndexOf("TITLE") > -1)
                    if (item[0].IndexOf("\"") > -1)
                        stTitle = item[0].Substring(item[0].IndexOf("\"") + 1, (item[0].LastIndexOf("\"") - item[0].IndexOf("\"")) - 1);
                    else if (item[0].IndexOf("(") > -1)
                        stTitle = item[0].Substring(item[0].IndexOf("(") + 1, (item[0].LastIndexOf(")") - item[0].IndexOf("(")) - 1).Split(",")[1];
                    else
                        stTitle = item[0];
                else if (item[0].IndexOf("RECIEVER") > -1)
                    listReceiver.Add(item[0]);
                else if (item[0].IndexOf("CCUSER") > -1)
                    listCCUser.Add(item[0]);
                else if (item[0].IndexOf("HIDECCUSER") > -1)
                    listHideCCUser.Add(item[0]);
                else if (item[0].IndexOf("APPROVE") > -1)
                    listApprover.Add(item[0]);
                else if (item[0].IndexOf("FILE") > -1)
                    listFile.Add(item[0]);
            }
            string[] arrData = stData.Split("|");
            stTransKindValue = arrData[1].Split(":")[1];
            stTransStatusValue = arrData[3].Split(":")[1];
            stReqTime = arrData[2].Split(":")[1];
            stSendder = arrData[6].Split(":")[1];
            stApproveKindValue = arrData[4].Split(":")[1];
            stApproveStatusValue = arrData[5].Split(":")[1];

            for (int i = 0; i < listApprover.Count - 1; i++)
            {
                string[] arrVal = listApprover[i + 1].Split("|");
                stApproverList += arrVal[2] + "(" + arrVal[3] + ")";
                if (i < listApprover.Count - 2)
                    stApproverList += ",";

                emalApprover tmpApv = new emalApprover();
                tmpApv.approveOrder = arrVal[0].Split(",")[1];
                tmpApv.approverName = arrVal[2];
                tmpApv.approverRank = arrVal[3];
                tmpApv.approveFlag = GetApproveStatusString(arrVal[4]);
                if (arrVal[5].Length > 10)
                    tmpApv.approveResTime = arrVal[5].Substring(0, 4) + "-" + arrVal[5].Substring(4, 2) + "-" + arrVal[5].Substring(6, 2) + " " + arrVal[5].Substring(8, 2) + ":" + arrVal[5].Substring(10, 2) + ":" + arrVal[5].Substring(12, 2);
                else
                    tmpApv.approveResTime = "-";
                apvList.Add(tmpApv);
            }
            for (int i = 0; i < listReceiver.Count - 1; i++)
            {
                string[] arrVal = listReceiver[i + 1].Split(",");
                stDispReceiver += arrVal[1].Substring(0, arrVal[1].Length - 1);
                if (i < listReceiver.Count - 2)
                    stDispReceiver += ", ";
            }
            for (int i = 0; i < listCCUser.Count - 1; i++)
            {
                string[] arrVal = listCCUser[i + 1].Split(",");
                stDispCC += arrVal[1].Substring(0, arrVal[1].Length - 1);
                if (i < listCCUser.Count - 2)
                    stDispCC += ", ";
            }
            for (int i = 0; i < listHideCCUser.Count - 1; i++)
            {
                string[] arrVal = listHideCCUser[i + 1].Split(",");
                stHideCC += arrVal[1].Substring(0, arrVal[1].Length - 1);
                if (i < listHideCCUser.Count - 2)
                    stHideCC += ", ";
            }

            for (int i = 0; i < listFile.Count - 1; i++)
            {
                string[] arrVal = listFile[i + 1].Split("|");

                emailFile tmpFile = new emailFile();
                if (arrVal[1] == "1")
                    tmpFile.fileDLP = XmlConf.GetTitle("T_COMMON_DLP_INCLUSION");
                else
                    tmpFile.fileDLP = XmlConf.GetTitle("T_COMMON_DLP_NOTINCLUSION");
                tmpFile.fileSeq = arrVal[0].Split("\"")[1];
                tmpFile.fileName = arrVal[2];
                tmpFile.fileKind = arrVal[3];
                tmpFile.fileKey = arrVal[4];
                tmpFile.fileSize = GetFileSizeString(arrVal[4]);
                tmpFile.virusDesc = arrVal[5];
                fileList.Add(tmpFile);
            }

            // if (stApproveKindValue == "0" && stTransStatusValue == "W" && stApproveStatusValue == "1")
            //    bTransCancelVisuable = true;

        }
        catch (Exception ex)
        {
            CLog.Error(ex.StackTrace);
            CLog.Error(ex.Message);
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
        StateHasChanged();
    }
    //Param : Email Seq, Request Seq, 승인가능여부
    public async Task openPopUp(string seq, string apvseq, string apvenable)
    {
        apvList.Clear();
        fileList.Clear();

        stEmailSeq = seq;
        stApproveSeq = apvseq;
        if (apvenable == "true")
            bApproveEnable = true;
        else
            bApproveEnable = false;

        ISGSideBarUI sgSideBar = SGAppMgrSvc.SideBarUIService.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        HSCmdCenter.sgPageEvent.SetQueryDetailEvent(groupID, DetailResult); //결과 이벤트 메핑

        MailManageDao dao = new MailManageDao();
        string strQuery = dao.MailDetail(seq);
        //Debug.WriteLine(strQuery);
        HSCmdCenter.SendDetailQuery(groupID, curUserID, strQuery);


        object[] param = { "MailApprovePopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        object[] param = { "MailApprovePopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

    private string GetApproveStatusString(string value)
    {
        string rtn = String.Empty;
        switch (value)
        {
            case "1":
                rtn = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");
                break;
            case "2":
                rtn = XmlConf.GetTitle("T_COMMON_APPROVE");
                break;
            case "3":
                rtn = XmlConf.GetTitle("T_DASH_APPROVE_REJECT");
                break;
        }
        return rtn;
    }

    private string GetFileSizeString(string value)
    {
        string rtn = String.Empty;
        long lSize = long.Parse(value);
        if (lSize > 1024 * 1024 * 1024)
        {
            float fsize = lSize / 1024 * 1024 * 1024;
            rtn = string.Format("{0:0.0}", fsize) + "GB";
        }
        else if (lSize > 1024 * 1024)
        {
            float fsize = lSize / 1024 * 1024;
            rtn = string.Format("{0:0.0}", fsize) + "MB";
        }
        else if (lSize > 1024)
        {
            float fsize = lSize / 1024;
            rtn = string.Format("{0:0.0}", fsize) + "KB";
        }
        else
            rtn = value + "Byte";
        return rtn;
    }
    public string GetTransKindString(string value)
    {
        string rtn = String.Empty;
        if (value == "0")
            rtn = XmlConf.GetTitle("T_COMMON_IMPORT");
        else if (value == "1")
            rtn = XmlConf.GetTitle("T_COMMON_EXPORT");
        return rtn;
    }

    private string GetTransStatusString(string value)
    {
        string rtn = String.Empty;
        switch (value)
        {
            case "S":
                rtn = XmlConf.GetTitle("T_COMMON_TRANS_SUCCESS");
                break;
            case "F":
                rtn = XmlConf.GetTitle("T_COMMON_TRANSFAIL");
                break;
            case "W":
                rtn = XmlConf.GetTitle("T_COMMON_TRANSWAIT");
                break;
            case "V":
                rtn = XmlConf.GetTitle("T_COMMON_TRANSCHECKING");
                break;
            default:
                rtn = "";
                break;
        }
        return rtn;
    }
    private string GetTimeFormatString(string value)
    {
        string rtn = String.Empty;
        if (value.Length > 0)
            rtn = value.Substring(0, 4) + "-" + value.Substring(4, 2) + "-" + value.Substring(6, 2);
        return rtn;
    }
    private string GetApproveKindString(string value)
    {
        string rtn = String.Empty;
        switch (value)
        {
            case "0":
                rtn = XmlConf.GetTitle("T_FILE_APPROVEBEFORE");
                break;
            case "1":
                rtn = XmlConf.GetTitle("T_FILE_APPROVEAFTERPROC");
                break;
            default:
                rtn = "";
                break;
        }
        return rtn;
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetFilePrevProgressEventAdd(groupID, FileDownloadProgressNoti);
        base.OnInitialized();
    }

    private void ShowMessage(string strType, string strMsg)
    {
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }
    public class emalApprover
    {
        public string approveOrder;
        public string approverName;
        public string approverRank;
        public string approveFlag;
        public string approveResTime;
    }
    public class emailFile
    {
        public string fileDLP;
        public string fileName;
        public string fileKind;
        public string virusDesc;
        public string fileSize;
        public string fileKey;
        public string fileSeq;
    }
}
