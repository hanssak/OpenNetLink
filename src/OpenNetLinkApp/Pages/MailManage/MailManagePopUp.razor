@using OpenNetLinkApp.Data.SGQuery
@using System.Diagnostics
@using HsNetWorkSGData
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Common
@using AgLogManager

@inject IJSRuntime JSRuntime
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject HSCmdCenter HSCmdCenter
<div class="modal fade" id="MailManagePopUp" data-backdrop="static" data-keyboard="false" style="z-index:5000;">
    <div class="modal-dialog modal-dialog-top" style="vertical-align:top;">
        <div class="modal-content">
            <div class="modal-header modal-outline">
                <h5 class="modal-title pt-1 text-bold">@XmlConf.GetTitle("T_EMAIL_TRANS_DETAIL")</h5>   <!-- 메일전송 상세보기 -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closePopUp">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="card-body pt-0">
                    <div class="modal-sub-title mb-2"> @XmlConf.GetTitle("T_COMMON_DETAILVIEW") </div>     <!-- 상세내역 -->
                    <table class="table table-bordered blue">
                        <tbody>
                            <tr>
                                <th>@XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND") </th>      <!-- 발송구분 -->
                                <td>@GetTransKindString(stTransKindValue)</td>
                                <th>@XmlConf.GetTitle("T_EMAIL_STATUS")</th>    <!-- 발송상태 -->
                                <td>@GetTransStatusString(stTransStatusValue, stApproveStatusValue)</td>

                                <th>@XmlConf.GetTitle("T_EMAIL_SENDDATE")</th>        <!--발신일-->
                                <td>@GetTimeFormatString(stReqTime)</td>
                                <th>@XmlConf.GetTitle("T_EMAIL_SENDER")</th>  <!--발신자-->
                                <td>@stSendder</td>

                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_COMMON_APPROVE_KIND")</th> <!-- 결재종류 -->
                                <td>@GetApproveKindString(stApproveKindValue)</td>
                                <th>@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th> <!--  승인상태 -->
                                <td>@GetApproveStatusString(stApproveStatusValue, stTransStatusValue)</td>

                                <th>@XmlConf.GetTitle("T_DETAIL_APPROVEUSER")</th>    <!--승인자-->
                                <td>@stApproverList</td>
                                <th>@XmlConf.GetTitle("T_DETAIL_APPROVEHIST")</th>  <!-- 승인이력 -->
                                <td>

                                    @if (apvList.Count > 0)
                                    {
                                        <div class="navbar-nav ml-auto txte-right">
                                            <!-- Messages Dropdown Menu -->
                                            <div class="nav-item dropdown show">
                                                <a class="nav-link p-0" data-toggle="dropdown" href="#" aria-expanded="true">
                                                    <i class="fas fa-list-alt fa-lg"></i>
                                                </a>

                                                <div class="dropdown-menu dropdown-menu-xl dropdown-menu-right" style=" right:0px; height:135px; overflow-y:scroll;transform:matrix3d(-338px,19px,0px);">
                                                    @for (int i = 0; i < apvList.Count; i++)
                                                    {
                                                        @*<a href="#" class="dropdown-item">*@
                                                        <div class="dropdown-item">
                                                            <div class="media">
                                                                <div class="media-body">
                                                                    @*<div class="col-md-2 float-left dropdown-item-title">@apvList[i].approveOrder</div>*@
                                                                        <div class="col-md-2 float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:15%;" >@apvList[i].approverName</div>
                                                                        <div class="col-md-2 float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:15%;" >@apvList[i].approverRank</div>
                                                                        <div class="col-md-2 float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:15%;" >@apvList[i].approveFlag</div>
                                                                        <div class="float-left dropdown-item-title" style="text-align:center; vertical-align:middle;width:30%;">@apvList[i].approveResTime</div>
                                                                    <div class="col-md-2 float-left dropdown-item-title" style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@apvList[i].apprRejectReason</div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        if (i < apvList.Count - 1)
                                                        {
                                                            <div class="dropdown-divider"></div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                    } @*@if (apvList.Count > 0)*@

                                </td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_RECV_USER")</th>            <!-- 수신자 -->
                                <td colspan="7">@stDispReceiver</td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_EMAIL_REFERENCE")</th>            <!--  참조 -->
                                <td colspan="7">
                                    @stDispCC
                                </td>
                            </tr>
                            <tr>
                                <th>@XmlConf.GetTitle("T_EMAIL_HIDEREFERENCE")</th>       <!-- 숨은참조-->
                                <td colspan="7">@stHideCC</td>
                            </tr>

                            <tr>
                                <th>@XmlConf.GetTitle("T_TRANS_TITLE")</th>     <!-- 제목-->
                                <td colspan="7">
                                    @stTitle
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>



                <div class="card-body pt-0 pb-0">
                    <div class="modal-sub-title mb-2">@XmlConf.GetTitle("T_DETAIL_EMAILFILEINFO") </div>   <!-- 첨부 파일정보-->
                    <table class="table table-head-fixed table-bordered table-hover white">
                        <thead>
                            <tr>
                                @if (bUseDlpDataView)
                                {
                                    <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_PRIVACY") </th>
                                    <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_DLP_CONTENTS") </th>
                                    <!-- 개인정보-->
                                }
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_FILENAME") </th>               <!-- 파일명-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_KIND") </th>                    <!-- 유형-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_COMMON_SIZE") </th>                    <!-- 크기-->
                                <th style="text-align:center;">@XmlConf.GetTitle("T_DETAIL_VIRUSHIST") </th>            <!-- 바이러스내역-->
                            </tr>
                        </thead>
                        <tbody>
                            @for (int j = 0; j < fileList.Count; j++)
                            {
                                <tr>
                                    @if (bUseDlpDataView)
                                    {
                                        <td style="text-align:center;">@fileList[j].fileDLP</td>
                                        <td style="text-align:center;">@fileList[j].fileDLPContents</td>
                                    }
                                    <td>@fileList[j].fileName</td>
                                    <td style="text-align:center;">@fileList[j].fileKind</td>
                                    <td style="text-align:center;">@fileList[j].fileSize</td>
                                    <td style="text-align:center;">@fileList[j].virusDesc</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>

                <!--/. content -->
            </div>
            <div class="modal-footer">
                @if (bTransCancelVisuable)
                {
                    <button type="button" class="btn btn-md btn-red mr-0" @onclick="emailTransCancel"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_EMAIL_SENDCANCEL")</button>
                }
                <button type="button" class="btn btn-md btn-black mr-0" @onclick="closePopUp"><i class="fas fa-times"></i>@XmlConf.GetTitle("T_FILE_FOLD")</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@code {
    string stEmailSeq = String.Empty;
    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MailManagePopUp>();
    List<Dictionary<int, string>> detailData = null;          //DB 데이타 직접 사용하는걸로 수정
    string stTransKindValue = String.Empty;
    string stTransStatusValue = String.Empty;
    string stReqTime = String.Empty;
    string stSendder = String.Empty;
    string stApproveKindValue = String.Empty;
    string stApproveStatusValue = String.Empty;
    string stApproverList = String.Empty;
    string stDispReceiver = String.Empty;
    string stDispCC = String.Empty;
    string stHideCC = String.Empty;
    string stTitle = String.Empty;
    bool bTransCancelVisuable = false;
    List<emalApprover> apvList = new List<emalApprover>();
    List<emailFile> fileList = new List<emailFile>();
    SGeMailTransManageData strDisplayData = new SGeMailTransManageData();


    ISGSideBarUIService SideBarUISvc;

    public bool bUseDlpDataView = true;

    private void emailTransCancel()
    {
        ISGSideBarUI sgSideBar = SGAppMgrSvc.SideBarUIService.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendEmailTransferCancel(groupID, curUserID, stEmailSeq);
    }

    public void DetailResult(int groupId, SGData e)
    {
        stTransKindValue = String.Empty;
        stTransStatusValue = String.Empty;
        stReqTime = String.Empty;
        stSendder = String.Empty;
        stApproveKindValue = String.Empty;
        stApproveStatusValue = String.Empty;
        stApproverList = String.Empty;
        stDispReceiver = String.Empty;
        stDispCC = String.Empty;
        stHideCC = String.Empty;

        string result = e.GetTagData("RESULT");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        string reason = e.GetTagData("REASON");
        detailData = e.GetSvrRecordData2("RECORD");

        string stData = String.Empty;
        List<string> listReceiver = new List<string>();       //RECIEVER
        List<string> listCCUser = new List<string>();         //CCUSER
        List<string> listHideCCUser = new List<string>();     //HIDECCUSER
        List<string> listApprover = new List<string>();     //APPROVE
        List<string> listFile = new List<string>();         //FILE
        try
        {
            apvList.Clear();
            foreach (Dictionary<int, string> item in detailData)
            {
                if (item[0].IndexOf("DATA") > -1)
                    stData = item[0];
                else if (item[0].IndexOf("TITLE") > -1)
                {
                    if (item[0].IndexOf("\"") > -1)
                        stTitle = item[0].Substring(item[0].IndexOf("\"") + 1, (item[0].LastIndexOf("\"") - item[0].IndexOf("\"")) - 1);
                    else if (item[0].IndexOf("(") > -1)
                        stTitle = item[0].Substring(item[0].IndexOf("(") + 1, (item[0].LastIndexOf(")") - item[0].IndexOf("(")) - 1).Split(",")[1];
                    else
                        stTitle = item[0];
                }
                else if (item[0].IndexOf("RECIEVER") > -1)
                    listReceiver.Add(item[0]);
                else if (item[0].IndexOf("CCUSER") > -1)
                    listCCUser.Add(item[0]);
                else if (item[0].IndexOf("HIDECCUSER") > -1)
                    listHideCCUser.Add(item[0]);
                else if (item[0].IndexOf("APPROVE") > -1)
                    listApprover.Add(item[0]);
                else if (item[0].IndexOf("FILE") > -1)
                    listFile.Add(item[0]);
            }

            string[] arrData = stData.Split("|");
            stTransKindValue = arrData[1].Split(":")[1];
            stTransStatusValue = arrData[3].Split(":")[1];
            stReqTime = arrData[2].Split(":")[1];
            stSendder = arrData[6].Split(":")[1];
            stApproveKindValue = arrData[4].Split(":")[1];
            stApproveStatusValue = arrData[5].Split(":")[1];

            for (int i = 0; i < listApprover.Count - 1; i++)
            {
                string[] arrVal = listApprover[i + 1].Split("|");
                stApproverList += arrVal[2] + "(" + arrVal[3] + ")";
                if (i < listApprover.Count - 2)
                    stApproverList += ",";

                emalApprover tmpApv = new emalApprover();
                tmpApv.approveOrder = arrVal[0].Split(",")[1];
                tmpApv.approverName = arrVal[2];
                tmpApv.approverRank = arrVal[3];
                tmpApv.approveFlag = GetApproveStatusString(arrVal[4], stTransStatusValue);
                if (arrVal[5].Length > 10)
                    tmpApv.approveResTime = arrVal[5].Substring(0, 4) + "-" + arrVal[5].Substring(4, 2) + "-" + arrVal[5].Substring(6, 2) + " " + arrVal[5].Substring(8, 2) + ":" + arrVal[5].Substring(10, 2) + ":" + arrVal[5].Substring(12, 2);
                else
                    tmpApv.approveResTime = "-";

                tmpApv.apprRejectReason = "-";
                if (arrVal[4] == "3")   // 반려일때에만 - 사유정보 표현
                    tmpApv.apprRejectReason = arrVal[6];

                apvList.Add(tmpApv);
            }

            for (int i = 0; i < listReceiver.Count - 1; i++)
            {
                string[] arrVal = listReceiver[i + 1].Split(",");
                stDispReceiver += arrVal[1].Substring(0, arrVal[1].Length - 1);
                if (i < listReceiver.Count - 2)
                    stDispReceiver += ", ";
            }
            for (int i = 0; i < listCCUser.Count - 1; i++)
            {
                string[] arrVal = listCCUser[i + 1].Split(",");
                stDispCC += arrVal[1].Substring(0, arrVal[1].Length - 1);
                if (i < listCCUser.Count - 2)
                    stDispCC += ", ";
            }
            for (int i = 0; i < listHideCCUser.Count - 1; i++)
            {
                string[] arrVal = listHideCCUser[i + 1].Split(",");
                stHideCC += arrVal[1].Substring(0, arrVal[1].Length - 1);
                if (i < listHideCCUser.Count - 2)
                    stHideCC += ", ";
            }


            fileList.Clear();
            for (int i = 0; i < listFile.Count - 1; i++)
            {

                string[] arrVal = listFile[i + 1].Split("|");
                // 0 : EmailSeq, 1:개인정보 검출(유무등정보), 2:파일 이름, 3 :파일 Type, 4:파일 크기, 5:파일위변조 및 바이러스 검출내용, 6:개인정보 검출내용

                emailFile tmpFile = new emailFile();
                tmpFile.fileDLP = strDisplayData.GetDlpDisplayData(arrVal[1]);
                tmpFile.fileDLPContents = "-";

                tmpFile.fileName = arrVal[2];
                tmpFile.fileKind = arrVal[3];

                tmpFile.fileSize = GetFileSizeString(arrVal[4]);
                tmpFile.virusDesc = arrVal[5];

                if (arrVal.Length > 6)
                    tmpFile.fileDLPContents = arrVal[6];

                fileList.Add(tmpFile);
            }

            if (stApproveStatusValue == "1" && (stTransStatusValue == "W" || stTransStatusValue == "V"))
                bTransCancelVisuable = true;

        }
        catch (Exception ex)
        {
            CLog.Here().Error($@"Exception - Msg : {ex.Message}, StackTrace : {ex.StackTrace}");
            CLog.Error(ex.StackTrace);
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }

        StateHasChanged();
    }

    private string GetFileSizeString(string value)
    {
        string rtn = String.Empty;
        long lSize = long.Parse(value);

        rtn = CsFunction.GetSizeStr(lSize);

        return rtn;
    }

    /// <summary>
    /// 결재상태 값을 화면에 표현할 수 있는 형태로 변경
    /// </summary>
    /// <param name="strApproveStatus"></param>
    /// <param name="strTransStatus"></param>
    /// <returns></returns>
    private string GetApproveStatusString(string strApproveStatus, string strTransStatus)
    {
        return strDisplayData.GetApprStausDisplayData(strApproveStatus, strTransStatus);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private string GetApproveKindString(string value)
    {
        return strDisplayData.GetApprKindDisplayData(value);
    }

    private string GetTimeFormatString(string value)
    {
        string rtn = String.Empty;
        if (value.Length > 0)
            rtn = value.Substring(0, 4) + "-" + value.Substring(4, 2) + "-" + value.Substring(6, 2);
        return rtn;
    }


    private string GetTransStatusString(string strTransStatus, string strApproveStatusValue)
    {
        return strDisplayData.GetTransStatusDisplayData(strTransStatus, strApproveStatusValue);
    }

    /// <summary>
    /// email 발송구분 data 표현
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public string GetTransKindString(string value)
    {
        string rtn = String.Empty;
        if (value == "0")
            rtn = XmlConf.GetTitle("T_COMMON_EXPORT");
        else if (value == "1")
            rtn = XmlConf.GetTitle("T_COMMON_IMPORT");
        return rtn;
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        bUseDlpDataView = SGAppMgrSvc.OpConfigInfoService.GetUseUIdlpData(groupID);
    }

    private void CancelResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        if (result == "0")
            ShowMessage("success", reason);
        else
            ShowMessage("error", reason);
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public async Task openPopUp(string seq)
    {
        stEmailSeq = seq;
        ISGSideBarUI sgSideBar = SGAppMgrSvc.SideBarUIService.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        HSCmdCenter.sgPageEvent.SetQueryDetailEvent(groupID, DetailResult); //결과 이벤트 메핑
        HSCmdCenter.sgPageEvent.SetEmailSendCancelEvent(groupID, CancelResult);

        MailManageDao dao = new MailManageDao();
        string strQuery = dao.MailDetail(seq);
        Debug.WriteLine(strQuery);
        HSCmdCenter.SendDetailQuery(groupID, curUserID, strQuery);

        object[] param = { "MailManagePopUp" };
        await JSRuntime.InvokeAsync<object>("openPopUp", param);
    }

    public void closePopUp()
    {
        object[] param = { "MailManagePopUp" };
        JSRuntime.InvokeAsync<object>("closePopUp", param);
    }

}
