@page "/mailManage"
@page "/mailManage/{groupIDbyParam:int}"

@using HsNetWorkSGData
@using OpenNetLinkApp.Data.SGQuery
@using System.Diagnostics
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@inject IJSRuntime jsRuntime
@inject HSCmdCenter HSCmdCenter
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strMailManage</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strMailManageGap</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-2">@strPeriod</th>
                                <td>
                                    <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker" readonly="readonly" value="@strFromDay">
                                    <span class="float-left col-md-1">-</span>
                                    <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker2" readonly="readonly" value="@strToDay">
                                </td>
                                <th class="p-2"> @strTransferKind </th>
                                <td>
                                    <select style="width:80px;height:28px; border: 1px solid #ced4da;" @bind="strTransKindValue">
                                        <option value=" "> @strTotal </option>
                                        <option value="S"> @strToOutbound </option>
                                        <option value="R"> @strToInbound </option>
                                    </select>
                                </td>
                                <th class="p-2"> @strPersonInfo </th>
                                <td>
                                    <select style="width:80px;height:28px; border: 1px solid #ced4da;" @bind="strDlpValue">
                                        <option value=" "> @strTotal </option>
                                        <option value="1"> @strToBe </option>
                                        <option value="2"> @strNotToBe </option>
                                    </select>
                                </td>
                                <th class="p-2"> @strTransferStatus </th>
                                <td>
                                    <select  style="width:80px;height:28px; border: 1px solid #ced4da;" @bind="strTransFlag">
                                        <option value=" "> @strTotal </option>
                                        <option value="3"> @strTransferComplete </option>
                                        <option value="1"> @strTransferReady </option>
                                        <option value="5"> @strTransferCancel </option>
                                    </select>
                                </td>

                            </tr>

                            <tr>
                                <th class="p-2 pt-2"> @strReceiver </th>
                                <td class="pt-2" colspan="1"><input type="text" class="form-control" placeholder="@stReceivePlease" @bind="strSearchReceiver" @onkeyup="HandleKeyEvent"></td>

                                <th class="p-2 pt-2"> @strTitle </th>
                                <td class="pt-2" colspan="3"><input type="text" class="form-control" placeholder="@stTitlePlease" @bind="strSearchTitle" @onkeyup="HandleKeyEvent"></td>
                                <th class="p-2"> @strApproveStatus </th>
                                <td>
                                    <select style="width:80px;height:28px; border: 1px solid #ced4da;" @bind="strSearchApproveStatus">
                                        <option value=" "> @strTotal</option>
                                        <option value="2"> @strApprove</option>
                                        <option value="1"> @strApproveReady</option>
                                        <option value="3"> @strReject</option>
                                        <option value="5"> @strRequestCancel</option>
                                    </select>
                                </td>
                            </tr>
                        </table>

                    </div>



                </div>
            </div>
        </div>

        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-3">
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox">
                        <label class="form-check-label">@strRefresh</label>
                    </div>
                </div>
            </div>

            <div class="col-sm-9 text-right">
                <button type="button" class="btn btn-md btn-black" @onclick="doSearch"><i class="fas fa-search"></i>@strSearch</button>
            </div>
        </div>

        <!-- list -->

        <div class="row">



            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">
                    <form class="form-horizontal">

                        <div class="card-body  p-0">
                            <table class="table table-head-fixed table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <!--<th style="text-align:center">
                                            <input class="input" type="checkbox">
                                        </th>-->
                                        <th style="text-align:center">@strApproveKind</th>
                                        <th style="text-align:center">@strTransferKind</th>
                                        <th style="text-align:center">@strPersonInfo</th>
                                        <th style="text-align:center">@strFileAttach</th>
                                        <th style="text-align:center">@strTransferStatus</th>
                                        <th style="text-align:center">@strApproveStatus</th>
                                        <th style="text-align:center">@strReceiver</th>
                                        <th style="text-align:center">@strTitle</th>
                                        <th style="text-align:center">@strSendDay</th>
                                        <th style="text-align:center">@strViewDetail</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (mailData item in mData)
                                    {
                                        <tr>
                                            <!--<td style="text-align:center">
                                                <input class="input" type="checkbox">
                                            </td>-->
                                            <td style="text-align:center">@item.ApvType</td>
                                            <td style="text-align:center">@item.TransferType</td>
                                            <td style="text-align:center">@item.DlpInfo</td>
                                            <td style="text-align:center">@item.FileAttach</td>
                                            <td style="text-align:center">@item.TransferStatus</td>
                                            <td style="text-align:center">@item.ApvStatus</td>
                                            <td style="text-align:center">@item.Receiver</td>
                                            <td>@item.Title</td>
                                            <td style="text-align:center">@item.SendTime</td>
                                            <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>OpenDetail(item.TransSeq))"><i class="fas fa-search"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>


                        <div class="card-body pt-0">

                            <!--S page -->


                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>


                            <!--/.S page -->


                        </div>






                        <!--footer test-->
                        <Footer></Footer>
                        <!--./footer test-->
                        <!-- /.card-footer -->


                    </form>

                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<MailManagePopUp @ref="refMailManagePopUp"></MailManagePopUp>

@code {

    [Parameter]
    public int groupIDbyParam { get; set; }

    MailManagePopUp refMailManagePopUp;
    public int TotalCount { get; set; }
    public List<mailData> mData = new List<mailData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 0;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    ISGSideBarUIService SideBarUISvc;

    private string strMailManage;           // 메일관리
    private string strMailManageGap;        //메일 관리
    private string strPeriod;               //기간
    private string strTransferKind;         //발송구분
    private string strTotal;                //전체
    private string strToInbound;            //반입
    private string strToOutbound;           //반출
    private string strPersonInfo;           //개인정보
    private string strToBe;                 //있음
    private string strNotToBe;              //없음
    private string strTransferStatus;       //발송상태
    private string strTransferComplete;     //전송완료
    private string strTransferReady;        //전송대기
    private string strTransferCancel;       //전송취소
    private string strReceiver;             //수신자
    private string strTitle;                //제목
    private string strApproveStatus;        //승인상태
    private string strApprove;              //승인
    private string strApproveReady;         //승인대기
    private string strReject;               //반려
    private string strRequestCancel;        //요청취소
    private string strRefresh;              //새로고침
    private string strSearch;               //조회
    private string strSendCancel;           //발송취소
    private string strApproveKind;          //결재종류
    private string strPersonalInfo;         //개인정보
    private string strFileAttach;           //파일첨부
    private string strSendDay;              //발신일
    private string strViewDetail;           //상세보기
    private string strTotalPage;            //총페이지
    private string stReceivePlease;         //수신자를 입력해 주세요.
    private string stTitlePlease;           //제목을 입력해 주세요.

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            doSearch();
        }
    }

    public string strFromDay = "";
    public string strToDay = "";
    public string curUserID = "";
    //검색조건 바인딩 변수
    private string curFromDay;
    private string curToDay;
    private string strTransKindValue;       //반입,반출(sr_type)
    public string _strTransKindValue
    {
        get { return strTransKindValue; }
        set
        {
            strTransKindValue = value;
            doSearch();
        }
    }


    private string strDlpValue;             //포함,미포함(dlp_flag)
    public string _strDlpValue
    {
        get { return strDlpValue; }
        set
        {
            strDlpValue = value;
            doSearch();
        }
    }

    private string strTransFlag;            //전송상태(trans_flag)
    public string _strTransFlag
    {
        get { return strTransFlag; }
        set
        {
            strTransFlag = value;
            doSearch();
        }
    }

    private string strSearchReceiver;       //검색수신자(user_id)
    private string strSearchTitle;          //제목(title)
    private string strSearchApproveStatus;   //승인상태(approve_flag, 요청취소만 trans_flag)
    public string _strSearchApproveStatus
    {
        get { return strSearchApproveStatus; }
        set
        {
            strSearchApproveStatus = value;
            doSearch();
        }
    }

    public void doSearch()
    {
        //임시설정 시작
        int groupID = 0;
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();
        MailParam param = new MailParam();
        param.SystemId = "E001";
        param.SearchFromDay = "20190101";
        param.SearchToDay = "20200728";

        param.UserID = curUserID;
        MailManageDao dao = new MailManageDao();
        Debug.WriteLine(dao.TotalCount(param));
        Debug.WriteLine(dao.List(param));
        //임시설정 종료
    }

    private void UpdateList(int pageNumber)
    {
        nViewPageNo = pageNumber + 1;
        mData = ListData.Skip(pageNumber * nPageListCount).Take(nPageListCount).ToList();
    }

    //원데이타라고 가정함
    public List<mailData> ListData = new List<mailData>();

    public async Task OpenDetail(long transSeq)
    {
        await refMailManagePopUp.openPopUp(transSeq);
    }

    public void InitText()
    {
        strMailManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE");                   // 메일관리
        strMailManageGap = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");            //메일 관리
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                            //기간
        strTransferKind = XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND");              //발송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                //전체
        strToInbound = XmlConf.GetTitle("T_COMMON_IMPORT");                         //반입
        strToOutbound = XmlConf.GetTitle("T_COMMON_EXPORT");                        //반출
        strPersonInfo = XmlConf.GetTitle("T_COMMON_PRIVACY");                       //개인정보
        strToBe = XmlConf.GetTitle("T_COMMON_EXIST");                               //있음
        strNotToBe = XmlConf.GetTitle("T_COMMON_NOTEXIST");                         //없음
        strTransferStatus = XmlConf.GetTitle("T_EMAIL_STATUS");                     //발송상태
        strTransferComplete = XmlConf.GetTitle("T_DETAIL_TRANS_SUCCESS");           //전송완료
        strTransferReady = XmlConf.GetTitle("T_COMMON_TRANSWAIT");                  //전송대기
        strTransferCancel = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");               //전송취소
        strReceiver = XmlConf.GetTitle("T_ETC_RECIVER");                            //수신자
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                               //제목
        strApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");              //승인상태
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                          //승인
        strApproveReady = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                //승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                         //반려
        strRequestCancel = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");              //요청취소
        strRefresh = XmlConf.GetTitle("T_COMMON_REFRESH");                          //새로고침
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            //조회
        strSendCancel = XmlConf.GetTitle("T_EMAIL_SENDCANCEL");                     //발송취소
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                 //결재종류
        strPersonalInfo = XmlConf.GetTitle("T_COMMON_PRIVACY");                     //개인정보
        strFileAttach = XmlConf.GetTitle("T_EMAIL_ATTACHFILE");                     //파일첨부
        strSendDay = XmlConf.GetTitle("T_EMAIL_SENDDATE");                          //발신일
        strViewDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                    //상세보기
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                       //총페이지
        stReceivePlease = XmlConf.GetTitle("T_EMAIL_RECEIVER_NEEDED");              //수신자를 입력해 주세요.
        stTitlePlease = XmlConf.GetTitle("T_EMAIL_TITLE_NEEDED");                   //제목을 입력해 주세요.
    }
    //protected override async Task OnInitializedAsync()
    protected override void OnInitialized()
    {
        InitText();
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        //SearchResult 나머지 구현 계속 필요
        HSCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, SearchResult);                  // 조회 데이터 결과.
        HSCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, SearchCount);              // 조회 데이터 수 결과.

        GetInitDateTime();
        base.OnInitialized();
        //await MailSearchCount();
    }

    public async Task MailSearchCount()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();
        await GetDateTime();
        //curTransKind = GetTransKind();
        //curTransStatus = GetTransStatus();
        //curApprStatus = GetApprStatus();
        //curTitle = strTitleValue;
        //byte[] temp = Encoding.Default.GetBytes(curTitle);
        //curTitle = Encoding.UTF8.GetString(temp);

        nViewPageNo = 1;
        //TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curTitle, curFromDay, curToDay, curUserID, nPageListCount, nViewPageNo);
        //TransferDao dao = new TransferDao();
        //string strQueryCount = dao.TotalCount(param);   // 쿼리 데이터 카운트
        //string str = dao.List(param);                  // 확인용
        //HSCmdCenter.SendTransListCountQuery(groupID, curUserID, strQueryCount);
    }

    public async Task GetDateTime()
    {
        await RetriveDateFromJS();

        char sep = '-';
        string[] splitFrom = strFromDay.Split(sep);
        curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
        string[] splitTo = strToDay.Split(sep);
        curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
    }

    private async Task RetriveDateFromJS()
    {
        object[] param = { "datepicker" };
        string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
        if (vStr != null && vStr.Length > 0)
            strFromDay = vStr;
        object[] param2 = { "datepicker2" };
        string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
        if (vStr2 != null && vStr2.Length > 0)
            strToDay = vStr2;
    }

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;
        nViewPageNo = nStartPage = 1;
    }

    public void SearchCount(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        if (e.count <= 0)
        {
            ShowMessage("warn", strMsg);            // 검색결과가 존재하지 않습니다.
            ListData.Clear();
            UpdateList(0);
            SetPageinfo(e.count);
            StateHasChanged();
            return;
        }
        SetPageinfo(e.count);    // 페이징 계산
        UpdateData();
    }

    private void UpdateData()
    {
        MailSearchData(nViewPageNo);
    }

    public void MailSearchData(int pageNum)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        //TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curTitle, curFromDay, curToDay, curUserID, nPageListCount, pageNum);
        //TransferDao dao = new TransferDao();
        //string strQuery = dao.List(param);   // 쿼리 데이터 카운트
        //HSCmdCenter.SendTransListQuery(groupID, curUserID, strQuery);
    }

    public void SearchResult(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }
        ListData.Clear();

        SGMailManageData sgData = null;
        sgData = (SGMailManageData)HSCmdCenter.GetTransManageData(groupId);
        if (sgData == null)
            return;
        //세부구현보류
        /*
            List<Dictionary<int, string>> TransSearchList = null;

            TransSearchList = sgData.GetQuerySearchData();
            int nCount = TransSearchList.Count;

            for (int i = 0; i < nCount; i++)
            {
                Dictionary<int, string> dic = TransSearchList[i];
                if (dic == null)
                    continue;

                string tmpStr = "";
                if (dic.TryGetValue(0, out tmpStr) != true)
                {
                    if (tmpStr.Equals(""))
                        continue;
                }

                transData tData = new transData();
                tData.bCheck = false;
                tData.bCheckDisable = !(sgData.GetTransCancelEnableChk(dic));
                tData.TransSeq = sgData.GetTransSeq(dic);                   // TransSeq;
                tData.ApvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
                tData.TransferType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
                tData.TransferStatus = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
                tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)
                tData.IsFile = sgData.GetFileForwardKind(dic);              // 파일전달.
                tData.Title = sgData.GetTitle(dic);                         // 제목
                tData.RequestTime = sgData.GetQueryTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
                tData.TransStatusCode = sgData.GetTransStatusCode(dic);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
                tData.ApprStatusCode = sgData.GetApprStausCode(dic);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )

                ListData.Add(tData);
            }

            UpdateInitList(nViewPageNo);
        */
        StateHasChanged();
    }
    public void GetInitDateTime()
    {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /*
    protected override void OnInitialized()
    {

        ListData.Add(new mailData(1, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩1", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(2, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩2", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(3, "후결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩3", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(4, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩4", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(5, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩5", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(6, "선결", "반출", "포함", "첨부", "발송실패", "승인", "test@naver.com", "자료전송 포워딩6", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(7, "선결", "반출", "포함", "첨부", "발송실패", "승인", "test@naver.com", "자료전송 포워딩7", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(8, "선결", "반출", "포함", "첨부", "발송실패", "승인", "test@naver.com", "자료전송 포워딩8", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(9, "후결", "반출", "포함", "첨부", "발송실패", "승인", "test@naver.com", "자료전송 포워딩9", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(10, "선결", "반출", "포함", "첨부", "발송실패", "승인", "test@naver.com", "자료전송 포워딩10", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(11, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩11", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(12, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩12", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(13, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩13", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(14, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩14", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(15, "후결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩15", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(16, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩16", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(17, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩17", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(18, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩18", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(19, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩19", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(20, "후결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩20", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(21, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩21", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(22, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩22", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(23, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩23", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(24, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩24", "2020/04/01 10:11:12"));
        ListData.Add(new mailData(25, "선결", "반출", "포함", "첨부", "발송대기", "승인", "test@naver.com", "자료전송 포워딩25", "2020/04/01 10:11:12"));

        TotalCount = ListData.Count;
        UpdateList(0);
        //페이징 계산
        dispLimit = 1;
        nTotalPages = (int)TotalCount / nPageListCount;
        if (TotalCount % nPageListCount > 0)
            nTotalPages++;
        nStartPage = nViewPageNo - (int)viewPageCount / 2;
        if (nStartPage < 1)
            nStartPage = 1;


        base.OnInitialized();
    }
    */

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initApproveUI");
            jsRuntime.InvokeAsync<object>("initPageLeft");
        }
        base.OnAfterRender(firstRender);
    }


    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }


    public class mailData
    {
        public long TransSeq { get; set; }
        public string ApvType { get; set; }                 //결재종류
        public string TransferType { get; set; }            //발송구분
        public string DlpInfo { get; set; }                 //개인정보
        public string FileAttach { get; set; }              //파일첨부
        public string TransferStatus { get; set; }          //발송상태
        public string ApvStatus { get; set; }               //승인상태
        public string Receiver { get; set; }                  //수신자
        public string Title { get; set; }                   //제목
        public string SendTime { get; set; }             //발신일


        public mailData(long seq, string apvtype, string transfertype, string dlpinfo, string fileattach, string transferstatus, string apvstatus, string receiver, string title, string sendtime)
        {
            TransSeq = seq;
            ApvType = apvtype;
            TransferType = transfertype;
            DlpInfo = dlpinfo;
            FileAttach = fileattach;
            TransferStatus = transferstatus;
            ApvStatus = apvstatus;
            Receiver = receiver;
            Title = title;
            SendTime = sendtime;
        }
    }
}
