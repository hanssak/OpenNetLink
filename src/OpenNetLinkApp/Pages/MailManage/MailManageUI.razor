@page "/mailManage"
@page "/mailManage/{groupIDbyParam:int}"

@using HsNetWorkSG
@using HsNetWorkSGData
@using OpenNetLinkApp.Data.SGQuery
@using System.Diagnostics
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Components.SGSearchCondition
@using AgLogManager
@using Serilog
@using Serilog.Events

@inject IJSRuntime jsRuntime
@inject HSCmdCenter HSCmdCenter
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strMailManage</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strMailManageGap</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-1" style="text-align: right; vertical-align: middle;">@strPeriod</th>
                                <td style="width:30%;">
                                    @*<input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker9" readonly="readonly" value="@strFromDay">
            <span class="float-left col-md-1">-</span>
            <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker10" readonly="readonly" value="@strToDay">*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>

                                <th class="p-1" style="text-align: right; vertical-align: middle;"> @strApproveKind </th>                     <!--결재종류-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strApproveTypeText
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("ApproveKind"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strApproveTypeText, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApproveTypeText<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                                <th class="p-1" style="text-align: right; vertical-align: middle;"> @strApproveStatus </th>                     <!--승인상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu5" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strSearchApproveStatus
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu5">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("MailApproveStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strSearchApproveStatus, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("MailApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strSearchApproveStatus<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>


                                @if (bUseDlpDataView)
                                {
                                    <th class="p-1"style="text-align: right; vertical-align: middle;"> @strDlpInfo </th> <!-- 개인정보 -->
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                @strDlpValue
                                            </button>
                                            <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                                                @foreach (string str in Common.CsFunction.GetOptionValue("DlpValue"))
                                                {
                                                    <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strDlpValue, str, TransSearchCount))">@str</button>
                                                }
                                            </div>
                                        </div>
                                        <!--<button type="button" @onclick="@(()=>openCustomSelect("DlpValue"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDlpValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                    </td>
                                }

                            </tr>

                            <tr>
                                <th class="p-1 pt-2" style="text-align: right; vertical-align: middle;"> @strReceiver </th> <!-- 수신자 -->
                                <td class="pt-2" colspan="1"><input type="text" class="form-control  col-md-11" placeholder="@stReceivePlease" @bind="strSearchReceiver" @onkeyup="HandleKeyEvent"></td>

                                <th class="p-1 pt-2" style="text-align: right; vertical-align: middle;"> @strTitle </th> <!-- 제목 -->
                                <td class="pt-2" colspan="3"><input type="text" class="form-control" placeholder="@stTitlePlease" @bind="strSearchTitle" @onkeyup="HandleKeyEvent"></td>

                                <th class="p-1" style="text-align: right; vertical-align: middle;"> @strTransferKind </th>                     <!--발송구분-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransTypeText
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransType"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransTypeText, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransTypeText<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                                <th class="p-1" style="text-align: right; vertical-align: middle;"> @strTransferStatus </th>                     <!--발송상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu5" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransFlag
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("MailTransStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer-left text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransFlag, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("MailTransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransFlag<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                            </tr>
                        </table>

                    </div>



                </div>
            </div>
        </div>

        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-12 text-right">
                <button type="button" class="btn btn-md btn-black" @onclick="TransSearchCount"><i class="fas fa-search"></i>@strSearch</button>
                <button type="button" class="btn btn-md btn-red" @onclick="@TransCancel"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_EMAIL_SENDCANCEL")</button>
            </div>
        </div>

        <!-- list -->

        <div class="row">



            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">
                    <form class="form-horizontal">

                        <div class="card-body  p-0">
                            <table id="table1" class="table table-head-fixed table-bordered table-hover" style="table-layout: fixed;">
                                <thead>
                                    <tr>
                                        <th style="text-align:center;width:3%;">
                                            <!--  <input class="input" type="checkbox">  -->
                                        </th>
                                        <th style="text-align:center; vertical-align:middle;width:6%;">@strApproveKind</th>     <!--결재종류-->
                                        <th style="text-align:center; vertical-align:middle;width:6%;">@strTransferKind</th>    <!--발송구분-->

                                        @if (bUseDlpDataView)
                                        {
                                            <th style="text-align:center; vertical-align:middle;width:6%;">@strDlpInfo</th>     <!-- 개인정보 -->
                                        }
                                        <th style="text-align:center; vertical-align:middle;width:6%;">@strFileAttach</th>      <!-- 파일첨부 -->
                                        <th style="text-align:center; vertical-align:middle;width:8%;">@strTransferStatus</th>  <!-- 발송상태 -->
                                        <th style="text-align:center;width:7%;">@strApproveStatus</th>                          <!-- 승인상태 -->
                                        <th style="text-align:center;width:15%;">@strReceiver</th>                              <!-- 수신자 -->
                                        <th style="text-align:center">@strTitle</th>                                            <!-- 제목 -->
                                        <th style="text-align:center;width:15%;">@strSendDay</th>                                <!-- 발신일 -->
                                        <th style="text-align:center;width:6%;">@strViewDetail</th>                             <!-- 상세보기 -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (emailtransData item in mData)
                                    {
                                        <tr class="TransSearch">
                                            <td style="text-align:center; vertical-align:middle">
                                                <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                            </td>

                                            <td style="text-align:center; vertical-align: middle">@item.ApvType</td>
                                            <td style="text-align:center; vertical-align: middle">@item.TransferType</td>

                                            @if (bUseDlpDataView)
                                            {
                                                <td style="text-align:center; vertical-align: middle">@item.stDLP</td>
                                            }

                                            <td style="text-align:center; vertical-align: middle">@item.IsFile</td>

                                            <td style="text-align:center; vertical-align: middle">@item.TransferStatus</td>
                                            <td style="text-align:center; vertical-align: middle">@item.ApvStatus</td>

                                            <td style="vertical-align:middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.strReceiver</td>
                                            <td style="vertical-align:middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                            <td style="text-align:center; vertical-align: middle">@item.RequestTime</td>

                                            @*@if (item.isPossibleDownload)
                                                {
                                                <td style="text-align:center; vertical-align: middle">@item.isPossibleDownloadCount</td>
                                                <td style="text-align:center; vertical-align: middle"><button ondrop="return false;" ondragover="return false;" type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>RequestManualDownload(item))"><i class="far fa-arrow-alt-circle-down"></i></button></td>
                                                }
                                                else
                                                {
                                                <td style="text-align:center; vertical-align: middle">0</td>
                                                <td style="text-align:center; vertical-align: middle">-</td>
                                                }*@

                                            <td style="text-align:center; vertical-align: middle"><button ondrop="return false;" ondragover="return false;" type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>OpenDetail(item.TransSeq, item.downloadCount))"><i class="fas fa-search"></i></button></td>

                                            @*
                                                <td style="text-align:center">@GetTransTypeText(item[0])</td>
                                                <td style="text-align:center">@GetDLPFlagText(item[4])</td>
                                                <td style="text-align:center">@GetAttachFileText(item[5])</td>
                                                <td style="text-align:center">@GetTransStatusText(item[6])</td>
                                                <td style="text-align:center">@GetApproveFlagText(item[7])</td>
                                                <td style="text-align:center;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" title="@item[8]">@item[8]</td>
                                                <td style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" title="@item[9]">@item[9]</td>
                                                <td style="text-align:center">@GetRequestTime(item[11])</td>
                                                <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>OpenDetail(item[1]))"><i class="fas fa-search"></i></button></td>
                                            *@
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>


                        <div class="card-body pt-0">

                            <!--S page -->


                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo" NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>
                        </div>
                        <Footer @ref="refFooter"></Footer>

                    </form>

                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<MailManagePopUp @ref="refMailManagePopUp"></MailManagePopUp>
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>

@code {

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransType")
            _strTransTypeText = stValue;
        else if (stOption == "DlpValue")
            _strDlpValue = stValue;
        else if (stOption == "MailTransStatus")
            _strTransFlag = stValue;
        else if (stOption == "MailApproveStatus")
            _strSearchApproveStatus = stValue;
        else if (stOption == "ApproveKind")
            _strApproveTypeText = stValue;
    }
    SGCustomSelect refSGCustomSelect;

    private async void openCustomSelect(string opt)
    {
        if (opt == "TransType")
            await refSGCustomSelect.openPopUp(opt, strTransTypeText);
        else if (opt == "DlpValue")
            await refSGCustomSelect.openPopUp(opt, strDlpValue);
        else if (opt == "MailTransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransFlag);
        else if (opt == "MailApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strSearchApproveStatus);
        else if (opt == "ApproveKind")
            await refSGCustomSelect.openPopUp(opt, strApproveTypeText);

    }

    [Parameter]
    public int groupIDbyParam { get; set; }
    private MailParam mailParam = new MailParam();
    //원데이타라고 가정함
    //public List<mailData> ListData = new List<mailData>();  //--> 이거 안쓰고
    List<Dictionary<int, string>> listTempData = null;          //DB 데이타 직접 사용하는걸로 수정

    MailManagePopUp refMailManagePopUp;
    Footer refFooter;
    PeriodDatePicker refPeriodDatePicker;

    public int TotalCount { get; set; }


    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MailManageUI>();

    /// <summary>
    /// checkBox 등 사용자의 설정 정보가 반영된 LIST data
    /// </summary>
    public List<emailtransData> mData = new List<emailtransData>();

    /// <summary>
    /// 조회해서 받은 원본data data
    /// </summary>
    public List<emailtransData> ListData = new List<emailtransData>();

    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    ISGSideBarUIService SideBarUISvc;

    public bool bUseDlpDataView = true;
    //private string strEmailTranSeq = "";    // 상세보기에서 transSeq 값임시저장용도

    // 목적지 Data
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    public string strDestNetWork = "";

    public string curUserID = "";

    private string strMailManage;           // 메일관리
    private string strMailManageGap;        //메일 관리
    private string strPeriod;               //기간

    private string strTransferKind;         //발송구분
    private string strTotal;                //전체
    private string strToInbound;            //반입
    private string strToOutbound;           //반출
    private string strDlpInfo;           //개인정보
    private string strToBe;                 //있음
    private string strNotToBe;              //없음
    private string strTransferStatus;       //발송상태
    private string strTransferComplete;     //전송완료
    private string strTransferReady;        //전송대기
    private string strTransferCancel;       //전송취소
    private string strReceiver;             //수신자
    private string strTitle;                //제목
    private string strApproveStatus;        //승인상태
    private string strApprove;              //승인
    private string strApproveReady;         //승인대기
    private string strReject;               //반려
    private string strRequestCancel;        //요청취소
    private string strRefresh;              //새로고침
    private string strSearch;               //조회
    private string strApproveKind;          //결재종류
    private string strPersonalInfo;         //개인정보
    private string strFileAttach;           //파일첨부
    private string strSendDay;              //발신일
    private string strViewDetail;           //상세보기
    private string strTotalPage;            //총페이지
    private string stReceivePlease;         //수신자를 입력해 주세요.
    private string stTitlePlease;           //제목을 입력해 주세요.



    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Task.Run(async () => { await TransSearchCount(); });
            //Task.Run(async () => { await UpdateDataTask(); });
        }
    }


    /// <summary>
    /// 발송구분 combo설정data(반입, 반출)
    /// </summary>
    public string strTransTypeText = "";
    public string _strTransTypeText
    {
        get { return strTransTypeText; }
        set
        {
            strTransTypeText = value;
            //mailParam.SetApprKindCode(value);
            mailParam.SetTransKindCode(value);
            //TransSearchData(nViewPageNo);
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    /// <summary>
    /// 발송상태 combo설정data(...)
    /// </summary>
    private string strTransFlag;            //전송상태(trans_flag) => TransStatus
    public string _strTransFlag
    {
        get { return strTransFlag; }
        set
        {
            strTransFlag = value;
            mailParam.SetTransStatusCode(value);
            //TransSearchData(nViewPageNo);
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    /// <summary>
    /// 결재종류 combo설정data(선결,후결)
    /// </summary>
    public string strApproveTypeText = "";
    public string _strApproveTypeText
    {
        get { return strApproveTypeText; }
        set
        {
            strApproveTypeText = value;
            mailParam.SetApprKindCode(value);
            //TransSearchData(nViewPageNo);
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    /// <summary>
    /// 승인상태 combo설정data(...)
    /// </summary>
    private string strSearchApproveStatus;   //승인상태(approve_flag, 요청취소만 trans_flag)
    public string _strSearchApproveStatus
    {
        get { return strSearchApproveStatus; }
        set
        {
            strSearchApproveStatus = value;
            mailParam.SetApprStatusCode(value);

            //TransSearchData(nViewPageNo);
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    private string strDlpValue;             //포함,미포함(dlp_flag)
    public string _strDlpValue
    {
        get { return strDlpValue; }
        set
        {
            strDlpValue = value;
            mailParam.SetDlpValue(value);
            //TransSearchData(nViewPageNo);
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    private string strSearchReceiver;       //검색수신자(user_id)
    private string strSearchTitle;          //제목(title)


    /// <summary>
    /// Count 개수를 고려한 List 검색
    /// </summary>
    /// <param name="pageNum"></param>
    public void TransSearchData(int pageNum)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
        //COUNT 요청응답
        HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

        mailParam.UserID = curUserID;

        Task.Run(async () =>
        {
            await refPeriodDatePicker.RetriveDateFromJS();

            string curFromDay = refPeriodDatePicker.FromDateSearchValue;
            string curToDay = refPeriodDatePicker.ToDateSearchValue;
            curFromDay = curFromDay.Substring(0, 8);
            curToDay = curToDay.Substring(0, 8);

            // Test용도
            //curFromDay = "20220101";
            //curToDay = "20221227";

            // 실제사용 - UI상에 설정된 값 안나옴
            mailParam.SetSearchStartDate(curFromDay);
            mailParam.SetSearchEndDate(curToDay);

            mailParam.SetApprKindCode(strApproveTypeText);
            mailParam.SetTransKindCode(strTransTypeText);

            mailParam.SetTransStatusCode(strTransFlag);
            mailParam.SetApprStatusCode(strSearchApproveStatus);

            mailParam.SetDlpValue(strDlpValue);
            mailParam.SetReceiver(strSearchReceiver);
            mailParam.SetTitle(strSearchTitle);

            mailParam.ViewPageNo = nViewPageNo;
            mailParam.PageListCount = nPageListCount;

            MailManageDao dao = new MailManageDao();
            string strQuery = dao.ListDbFunc(mailParam);
            CLog.Here().Information($"QueryLIST-@@@@@@@@@@ : {strQuery}");

            HSCmdCenter.SendListQuery(groupID, curUserID, strQuery);
        });
    }


    /// <summary>
    /// email List Count를 Query한후 List를 Query 하는 함수
    /// </summary>
    /// <returns></returns>
    public async Task TransSearchCount()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if(!strSearchReceiver.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }

        if(!strSearchTitle.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
        //COUNT 요청응답
        HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        mailParam.UserID = curUserID;
        await refPeriodDatePicker.RetriveDateFromJS();

        string curFromDay = refPeriodDatePicker.FromDateSearchValue;
        string curToDay = refPeriodDatePicker.ToDateSearchValue;
        curFromDay = curFromDay.Substring(0, 8);
        curToDay = curToDay.Substring(0, 8);

        // Test용도
        // curFromDay = "20220101";
        // curToDay = "20221231";

        mailParam.SetSearchStartDate(curFromDay);
        mailParam.SetSearchEndDate(curToDay);

        mailParam.SetApprKindCode(strApproveTypeText);
        mailParam.SetTransKindCode(strTransTypeText);

        mailParam.SetTransStatusCode(strTransFlag);
        mailParam.SetApprStatusCode(strSearchApproveStatus);

        mailParam.SetDlpValue(strDlpValue);
        mailParam.SetReceiver(strSearchReceiver);
        mailParam.SetTitle(strSearchTitle);

        mailParam.ViewPageNo = nViewPageNo;
        mailParam.PageListCount = nPageListCount;

        MailManageDao dao = new MailManageDao();

        string strQueryCount = dao.TotalCountDbFunc(mailParam);
        CLog.Here().Information($"QueryCount-@@@@@@@@@@ : {strQueryCount}");
        HSCmdCenter.SendCountQuery(groupID, curUserID, strQueryCount);

    }

    /// <summary>
    /// 발송취소 결과값 받는 Event
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void TransCancelResult(int groupid, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        string reason = e.GetSvrRecordTagData("REASON");

        CLog.Here().Information(@$"TransCancelResult(Email) - result : {result}, reason : {reason}");

        if (result != "0")
        {
            ShowMessage("error", XmlConf.GetErrMsg("E_0206"));            // 취소 중 오류가 발생되었습니다.
            StateHasChanged();
            return;
        }

        ShowMessage("info", XmlConf.GetInfoMsg("I_0021"));          // 취소가 완료되었습니다.
        UpdateData();

        //InsertMessage(NOTI_TYPE.USER, groupId, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileCancel, "", strMsg);
    }

    private void UpdateList(int pageNumber)
    {
        //nViewPageNo = pageNumber + 1;
        //Task.Run(async () => { await TransSearchCount(); });

        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip((pageNumber - 1) * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="transSeq"></param>
    /// <param name="downCount"></param>
    public async Task OpenDetail(string transSeq, int downCount)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        refMailManagePopUp.bUseDlpDataView = bUseDlpDataView;
        await refMailManagePopUp.openPopUp(transSeq);

    }

    /// <summary>
    /// TransSeq에 해당하는 transData 를 찾아준다
    /// </summary>
    /// <param name="strTransSeq">TransSeq</param>
    /// <returns>TransData</returns>
    public emailtransData GetTransListData(string strTransSeq)
    {
        emailtransData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
            return tdata;

        for (int i = 0; i < nCount; i++)
        {
            emailtransData temp = ListData[i];
            if (temp.TransSeq.Equals(strTransSeq))
            {
                tdata = temp;
                break;
            }
        }
        return tdata;
    }


    public void InitText()
    {
        strMailManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE");                   // 메일관리
        strMailManageGap = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");            //메일 관리
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                            //기간
        strTransferKind = XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND");              //발송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                //전체
        strToInbound = XmlConf.GetTitle("T_COMMON_IMPORT");                         //반입
        strToOutbound = XmlConf.GetTitle("T_COMMON_EXPORT");                        //반출
        strDlpInfo = XmlConf.GetTitle("T_COMMON_PRIVACY");                       //개인정보
        strToBe = XmlConf.GetTitle("T_COMMON_EXIST");                               //있음
        strNotToBe = XmlConf.GetTitle("T_COMMON_NOTEXIST");                         //없음
        strTransferStatus = XmlConf.GetTitle("T_EMAIL_STATUS");                     //발송상태
        strTransferComplete = XmlConf.GetTitle("T_DETAIL_TRANS_SUCCESS");           //전송완료
        strTransferReady = XmlConf.GetTitle("T_COMMON_TRANSWAIT");                  //전송대기
        strTransferCancel = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");               //전송취소
        strReceiver = XmlConf.GetTitle("T_ETC_RECIVER");                            //수신자
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                               //제목
        strApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");              //승인상태
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                          //승인
        strApproveReady = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                //승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                         //반려
        strRequestCancel = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");              //요청취소
        strRefresh = XmlConf.GetTitle("T_COMMON_REFRESH");                          //새로고침
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            //조회
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                 //결재종류
        strPersonalInfo = XmlConf.GetTitle("T_COMMON_PRIVACY");                     //개인정보
        strFileAttach = XmlConf.GetTitle("T_EMAIL_ATTACHFILE");                     //파일첨부
        strSendDay = XmlConf.GetTitle("T_EMAIL_SENDDATE");                          //발신일
        strViewDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                    //상세보기
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                       //총페이지
        stReceivePlease = XmlConf.GetTitle("T_EMAIL_RECEIVER_NEEDED");              //수신자를 입력해 주세요.
        stTitlePlease = XmlConf.GetTitle("T_EMAIL_TITLE_NEEDED");                   //제목을 입력해 주세요.

        strApproveTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strTransTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strDlpValue = XmlConf.GetTitle("T_COMMON_ALL");
        strTransFlag = XmlConf.GetTitle("T_COMMON_ALL");
        strSearchApproveStatus = XmlConf.GetTitle("T_COMMON_ALL");
    }


    /// <summary>
    /// List상에 Checked(체크된) 항목들중 제일 마지막 항목을 준다.
    /// </summary>
    /// <returns>TransSeq</returns>
    public string GetCheckTransSeq()
    {
        string strTransSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            emailtransData temp = ListData[i];
            if (temp.bCheck)
            {
                strTransSeq = temp.TransSeq;
            }
        }
        return strTransSeq;
    }


    /// <summary>
    /// 발송취소 명령실행
    /// </summary>
    public void TransCancel()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strTransSeq = GetCheckTransSeq();
        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

        CLog.Here().Information($"TransCancel(email) - EmailTransSeq : {strTransSeq}, GetLoginData : {(sgLoginData != null?"YES":"No")}");

        if (strTransSeq == null || strTransSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        CLog.Here().Information($"TransCancel(email) - Request(EmailTransSeq) : {strTransSeq}");

        HSCmdCenter.SendEmailTransferCancel(groupID, curUserID, strTransSeq);
    }


    protected override void OnInitialized()
    {
        //파라미터 핸들링 클래스 초기화
        mailParam.XmlConf = XmlConf;
        mailParam.jsRuntime = jsRuntime;

        InitText();
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        bUseDlpDataView = SGAppMgrSvc.OpConfigInfoService.GetUseUIdlpData(groupIDbyParam);
        HSCmdCenter.sgPageEvent.SetEmailSendCancelEvent(groupIDbyParam, TransCancelResult);             // 전송 취소 결과.

        base.OnInitialized();
    }

    /// <summary>
    /// 메일관리 검색된 Data 개수로 전체페이지, ViewPage, StartPage 값들을 설정
    /// </summary>
    /// <param name="nDataCount"></param>
    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;

        nViewPageNo = nStartPage = 1;
    }

    public void SearchCountResult(int groupId, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");

        if (listCnt == null || listCnt.Count < 1 || count <= 0)
        {
            CLog.Here().Information("SearchCount - RECORD - empty!");

            ListData.Clear();
            mData.Clear();
            StateHasChanged();

            ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.
            return;
        }

        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        //ShowMessage("warn", @$"listCnt.Count : {listCnt.Count}, totalCnt : {totalCnt}, 개 검색됨!!!");            // 검색결과가 존재하지 않습니다.

        if (result != "0")
        {
            CLog.Here().Information($"SearchCountResult - Result : {result}, reason : {reason}");
            ShowMessage("error", reason);
            return;
        }

        CLog.Here().Information($"SearchCountResult - COUNT : {totalCnt}, reason : {reason}");

        if (totalCnt <= 0)
        {
            if (listCnt != null) listCnt.Clear();
            SetPageinfo(totalCnt);
            ListData.Clear();
            mData.Clear();

            StateHasChanged();
            ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.

            return;
        }

        SetPageinfo(totalCnt);
        //UpdateList(nViewPageNo);
        //리스트 쿼리 호출
        UpdateData();
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="updatePageNum"></param>
    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }


    /// <summary>
    ///
    /// </summary>
    private void UpdateData()
    {
        TransSearchData(nViewPageNo);
        //doSearch();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="strTransSeq"></param>
    /// <returns></returns>
    public async Task OpenDetailPopup(string strTransSeq)
    {
        //Console.WriteLine("Open Detail Start" + strTransSeq);
        CLog.Here().Information($"OpenDetailPopup - TransSeq : {strTransSeq}");
        long ltransSeq = Convert.ToInt64(strTransSeq);
        //await refTransPopUp.openPopUp(ltransSeq);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void DetailSearchResult(int groupId, PageEventArgs e)
    {
        int nRet = e.result;
        string strMsg = e.strMsg;
        if (nRet != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        SGDetailData sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupId);
        if (sgDetailData == null)
            return;

        emailtransData tData = null;
        tData = GetTransListData(strMsg);
        if (tData != null)
        {
            string sTransSeq = tData.TransSeq;
            string sApprSeq = "";
            // int nDataForwarded = GetForwarded(tData.IsFile);
            bool bTransCancel = !tData.bCheckDisable;
            bool bApprove = false;
            bool bReject = false;

            //sgDetailData.SetInit(false, sTransSeq, sApprSeq, nDataForwarded, bTransCancel, bApprove, bReject);
            HSCmdCenter.SetDetailDataChange(groupId, sgDetailData);

            // refTransPopUp.m_downloadCount = m_currentDownloadCount;
            // refTransPopUp.SetBindingData();
            OpenDetailPopup(sTransSeq).Wait();

        }
    }


    /// <summary>
    /// LIST 검색결과 받는 함수
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SearchListResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        listTempData = e.GetSvrRecordData2("RECORD");

        if (listTempData == null || listTempData.Count < 1)
        {
            CLog.Here().Information("SearchListResult - RECORD - empty!");

            ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.
            ListData.Clear();
            mData.Clear();

            StateHasChanged();
            return;
        }

        CLog.Here().Information($"SearchListResult - Result : {result}, reason : {reason}");

        if (result != "0")
        {
            ShowMessage("error", reason);
            return;
        }


        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
        string curUserID = "";
        int maxDownloadCount = 0;
        bool isInner = false;
        if (sgLoginData != null)
        {
            curUserID = sgLoginData.GetUserID();
            maxDownloadCount = sgLoginData.GetMaxDownCount();
            isInner = sgLoginData.GetSystemPosition();
        }
        else
            return;

        ListData.Clear();

        SGeMailTransManageData sgData = new SGeMailTransManageData();
        sgData.Copy(HSCmdCenter.GetConnectNetWork(groupId), e);

        int nCount = listTempData.Count;
        int nowDate = Int32.Parse(DateTime.Now.ToString("yyyyMMdd"));   // Server Time으로 가져올 것

        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> dic = listTempData[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if (tmpStr.Equals(""))
                    continue;
            }

            emailtransData tData = new emailtransData();
            tData.bCheck = false;
            tData.bCheckDisable = !(sgData.GetTransCancelEnableChk(curUserID, dic));
            tData.TransSeq = sgData.GetTransSeq(dic);                   // TransSeq;
            tData.ApvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
            tData.TransferType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
            tData.TransferStatus = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
            tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)
            tData.IsFile = sgData.GetFileAdd(dic);              // 파일첨부 유무
            tData.strDestNet = "";

            tData.strReceiver = sgData.GetRecvUser(dic);
            tData.Title = sgData.GetTitle(dic);                         // 제목
            FileAddManage fileAddManage = new FileAddManage();
            tData.Title = fileAddManage.GetConvertTitleDesc(false, tData.Title);
            tData.RequestTime = sgData.GetTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
                                                                   //tData.TransStatusCode = sgData.GetTransStatusCode(dic);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
                                                                   //tData.ApprStatusCode = sgData.GetApprStausCode(dic);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
                                                                   //tData.downloadCount = Int32.Parse(sgData.GetDownloadCount(dic));  //다운로드 카운트
                                                                   //tData.expiredDate = sgData.GetExpiredDate(dic);             //파일저장 만료일
            tData.stDLP = sgData.GetDlp(dic);
            tData.isPossibleDownload = GetIsPossibleDownLoad(tData, isInner, maxDownloadCount, nowDate);

            if (maxDownloadCount - tData.downloadCount < 0)
                tData.isPossibleDownloadCount = 0;
            else
                tData.isPossibleDownloadCount = maxDownloadCount - tData.downloadCount;

            ListData.Add(tData);
        }

        UpdateInitList(nViewPageNo);
        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="tData"></param>
    /// <param name="isInner"></param>
    /// <param name="maxDownloadCount"></param>
    /// <param name="nowDate"></param>
    /// <returns></returns>
    public bool GetIsPossibleDownLoad(emailtransData tData, bool isInner, int maxDownloadCount, int nowDate)
    {
        bool isPossibleDownload = false;
        //파일 다운로드 가능여부 판단
        if (!isInner && tData.TransferType == XmlConf.GetTitle("T_COMMON_EXPORT"))
            isPossibleDownload = true;
        else if (isInner && tData.TransferType == XmlConf.GetTitle("T_COMMON_IMPORT"))
            isPossibleDownload = true;

        if (isPossibleDownload)
        {

        //요청자 PC미수신 시 에도 전송대기, 수신완료 시에는 다운로드 가능
            @*
            if (SGAppMgrSvc.SiteConfigInfoService.GetUseFileForwardDownBeforeRecv())
            {
            if (tData.TransferStatus == XmlConf.GetTitle("T_TRANS_COMPLETE") || tData.TransferStatus == XmlConf.GetTitle("T_COMMON_TRANSWAIT"))
            isPossibleDownload = true;
            else
            isPossibleDownload = false;
            }
            else
            {
            //수동다운로드 이므로 PC수신완료 건만 다운가능
            if (tData.TransferStatus == XmlConf.GetTitle("T_TRANS_COMPLETE"))
            isPossibleDownload = true;
            else
            isPossibleDownload = false;
            }
            *@

            //수동다운로드 이므로 PC수신완료 건만 다운가능
            if (tData.TransferStatus == XmlConf.GetTitle("T_TRANS_COMPLETE"))
                isPossibleDownload = true;
            else
                isPossibleDownload = false;
        }

        //int expireDate = Int32.Parse(tData.expiredDate.Replace("-", ""));
        int expireDate = 0;
        if (isPossibleDownload)
        {
            if (expireDate >= nowDate)
                isPossibleDownload = true;
            else
                isPossibleDownload = false;
        }

        if (maxDownloadCount == 0)
            isPossibleDownload = false;

        if (isPossibleDownload)
        {
            if (tData.downloadCount < maxDownloadCount)
                isPossibleDownload = true;
            else
                isPossibleDownload = false;
        }

        return isPossibleDownload;
    }


    @*
        public void GetInitDateTime()
        {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
        }
    *@

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    /// <summary>
    /// item 항목만 List에서 check 상태를 변경, 나머지는 check 상태 false로 설정
    /// </summary>
    /// <param name="item"></param>
    public void CheckStateUpdate(emailtransData item)
    {
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            emailtransData temp = ListData[i];
            if (temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
            }
            else
                temp.bCheck = false;

            ListData[i] = temp;
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TransSearchCount();
        }
        base.OnAfterRender(firstRender);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initPageLeft");
        }
        base.OnAfterRender(firstRender);
    }


    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }


}
