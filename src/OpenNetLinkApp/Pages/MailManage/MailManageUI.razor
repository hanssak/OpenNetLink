@page "/mailManage"
@page "/mailManage/{groupIDbyParam:int}"

@using HsNetWorkSGData
@using OpenNetLinkApp.Data.SGQuery
@using System.Diagnostics
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGDomain
@inject IJSRuntime jsRuntime
@inject HSCmdCenter HSCmdCenter
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strMailManage</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strMailManageGap</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-2">@strPeriod</th>
                                <td>
                                    @*<input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker9" readonly="readonly" value="@strFromDay">
                                        <span class="float-left col-md-1">-</span>
                                        <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker10" readonly="readonly" value="@strToDay">*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>
                                <th class="p-2"> @strTransferKind </th>
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("TransType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransTypeText<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                                <th class="p-2"> @strPersonInfo </th>
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("DlpValue"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDlpValue<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                                <th class="p-2"> @strTransferStatus </th>
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("MailTransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransFlag<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                            </tr>

                            <tr>
                                <th class="p-2 pt-2"> @strReceiver </th>
                                <td class="pt-2" colspan="1"><input type="text" class="form-control" placeholder="@stReceivePlease" @bind="strSearchReceiver" @onkeyup="HandleKeyEvent"></td>

                                <th class="p-2 pt-2"> @strTitle </th>
                                <td class="pt-2" colspan="3"><input type="text" class="form-control" placeholder="@stTitlePlease" @bind="strSearchTitle" @onkeyup="HandleKeyEvent"></td>
                                <th class="p-2"> @strApproveStatus </th>
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("MailApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strSearchApproveStatus<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                            </tr>
                        </table>

                    </div>



                </div>
            </div>
        </div>

        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-12 text-right">
                <button type="button" class="btn btn-md btn-black" @onclick="doSearch"><i class="fas fa-search"></i>@strSearch</button>
            </div>
        </div>

        <!-- list -->

        <div class="row">



            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">
                    <form class="form-horizontal">

                        <div class="card-body  p-0">
                            <table class="table table-head-fixed table-bordered table-hover" style="table-layout: fixed;">
                                <thead>
                                    <tr>
                                        <th style="text-align:center;width:7%;">@strTransferKind</th>
                                        <th style="text-align:center;width:7%;">@strPersonInfo</th>
                                        <th style="text-align:center;width:7%;">@strFileAttach</th>
                                        <th style="text-align:center;width:7%;">@strTransferStatus</th>
                                        <th style="text-align:center;width:7%;">@strApproveStatus</th>
                                        <th style="text-align:center;width:15%;">@strReceiver</th>
                                        <th style="text-align:center">@strTitle</th>
                                        <th style="text-align:center;width:8%;">@strSendDay</th>
                                        <th style="text-align:center;width:6%;">@strViewDetail</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (listData != null)
                                    {
                                        @foreach (var item in listData)
                                        {
                                            <tr>
                                                <td style="text-align:center">@GetTransTypeText(item[0])</td>
                                                <td style="text-align:center">@GetDLPFlagText(item[4])</td>
                                                <td style="text-align:center">@GetAttachFileText(item[5])</td>
                                                <td style="text-align:center">@GetTransStatusText(item[6])</td>
                                                <td style="text-align:center">@GetApproveFlagText(item[7])</td>
                                                <td style="text-align:center;white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" title="@item[8]">@item[8]</td>
                                                <td style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" title="@item[9]">@item[9]</td>
                                                <td style="text-align:center">@GetRequestTime(item[11])</td>
                                                <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>OpenDetail(item[1]))"><i class="fas fa-search"></i></button></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>


                        <div class="card-body pt-0">

                            <!--S page -->


                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo" NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>
                        </div>
                        <Footer @ref="refFooter"></Footer>

                    </form>

                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<MailManagePopUp @ref="refMailManagePopUp"></MailManagePopUp>
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>

@code {

    public string strTransTypeText = "";
    public string _strTransTypeText
    {
        get { return strTransTypeText; }
        set
        {
            strTransTypeText = value;
            doSearch();
        }
    }

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransType")
            _strTransTypeText = stValue;
        else if (stOption == "DlpValue")
            _strDlpValue = stValue;
        else if (stOption == "MailTransStatus")
            _strTransFlag = stValue;
        else if (stOption == "MailApproveStatus")
            _strSearchApproveStatus = stValue;
    }
    SGCustomSelect refSGCustomSelect;

    private async void openCustomSelect(string opt)
    {
        if (opt == "TransType")
            await refSGCustomSelect.openPopUp(opt, strTransTypeText);
        else if (opt == "DlpValue")
            await refSGCustomSelect.openPopUp(opt, strDlpValue);
        else if (opt == "MailTransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransFlag);
        else if (opt == "MailApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strSearchApproveStatus);
    }

    [Parameter]
    public int groupIDbyParam { get; set; }
    private MailParam mailParam = new MailParam();
    //원데이타라고 가정함
    //public List<mailData> ListData = new List<mailData>();  //--> 이거 안쓰고
    List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정

    MailManagePopUp refMailManagePopUp;
    Footer refFooter;
    PeriodDatePicker refPeriodDatePicker;

    public int TotalCount { get; set; }
    //public List<mailData> mData = new List<mailData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    ISGSideBarUIService SideBarUISvc;

    private string strMailManage;           // 메일관리
    private string strMailManageGap;        //메일 관리
    private string strPeriod;               //기간
    private string strTransferKind;         //발송구분
    private string strTotal;                //전체
    private string strToInbound;            //반입
    private string strToOutbound;           //반출
    private string strPersonInfo;           //개인정보
    private string strToBe;                 //있음
    private string strNotToBe;              //없음
    private string strTransferStatus;       //발송상태
    private string strTransferComplete;     //전송완료
    private string strTransferReady;        //전송대기
    private string strTransferCancel;       //전송취소
    private string strReceiver;             //수신자
    private string strTitle;                //제목
    private string strApproveStatus;        //승인상태
    private string strApprove;              //승인
    private string strApproveReady;         //승인대기
    private string strReject;               //반려
    private string strRequestCancel;        //요청취소
    private string strRefresh;              //새로고침
    private string strSearch;               //조회
    private string strSendCancel;           //발송취소
    private string strApproveKind;          //결재종류
    private string strPersonalInfo;         //개인정보
    private string strFileAttach;           //파일첨부
    private string strSendDay;              //발신일
    private string strViewDetail;           //상세보기
    private string strTotalPage;            //총페이지
    private string stReceivePlease;         //수신자를 입력해 주세요.
    private string stTitlePlease;           //제목을 입력해 주세요.

    public string GetRequestTime(string value)
    {
        return value.Substring(0, 10);
    }
    public string GetApproveFlagText(string value)
    {
        if (value == "1")
            return XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");  //승인대기
        else if (value == "2")
            return XmlConf.GetTitle("T_DASH_APPROVE_COMPLETE"); //승인
        else if (value == "3")
            return XmlConf.GetTitle("T_DASH_APPROVE_REJECT"); //거부
        else
            return "-";
    }
    public string GetTransStatusText(string value)
    {
        if (value == "1")
            return XmlConf.GetTitle("T_COMMON_TRANSWAIT");  //전송대기
        else if (value == "2" || value == "9")
            return XmlConf.GetTitle("T_COMMON_TRANSFRING"); //전송중
        else if (value == "3" || value == "7")
            return XmlConf.GetTitle("T_COMMON_TRANS_SUCCESS"); //전송성공
        else if (value == "4" || value == "8")
            return XmlConf.GetTitle("T_COMMON_TRANSFAIL"); //전송실패
        else if (value == "5")
            return XmlConf.GetTitle("T_MESSAGE_TRANSCANCLE"); //전송취소
        else if (value == "6")
            return XmlConf.GetTitle("T_COMMON_TRANSCHECKING"); //검사중
        else
            return "-";
    }
    public string GetAttachFileText(string value)
    {
        if (value == "Y")
            return XmlConf.GetTitle("T_EMAIL_FILEATTACH");
        else
            return XmlConf.GetTitle("T_EMAIL_FILENOTATTACH");
    }
    public string GetDLPFlagText(string value)
    {
        if (value == "0")
            return XmlConf.GetTitle("T_COMMON_DLP_UNUSE");
        else if (value == "1")
            return XmlConf.GetTitle("T_COMMON_DLP_INCLUSION");
        else if (value == "2")
            return XmlConf.GetTitle("T_COMMON_DLP_NOTINCLUSION"); //미포함
        else
            return XmlConf.GetTitle("T_COMMON_DLP_UNKNOWN"); //검출불가
    }
    public string GetTransTypeText(string value)
    {
        if (value == "S")
            return XmlConf.GetTitle("T_COMMON_EXPORT"); //반출
        else
            return XmlConf.GetTitle("T_COMMON_IMPORT"); //반입
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            doSearch();
        }
    }

    @*public string strFromDay = "";
        public string strToDay = "";*@
    public string curUserID = "";
    //검색조건 바인딩 변수
    @*private string curFromDay;
        private string curToDay;*@
    //반입,반출(sr_type)


    public string strTransKindValue;
    public string _strTransKindValue
    {
        get { return strTransKindValue; }
        set
        {
            strTransKindValue = value;
            mailParam.TransKind = value;
            doSearch();
        }
    }

    private string strDlpValue;             //포함,미포함(dlp_flag)
    public string _strDlpValue
    {
        get { return strDlpValue; }
        set
        {
            strDlpValue = value;
            mailParam.DlpValue = value;
            doSearch();
        }
    }

    private string strTransFlag;            //전송상태(trans_flag) => TransStatus
    public string _strTransFlag
    {
        get { return strTransFlag; }
        set
        {
            strTransFlag = value;
            mailParam.TransStatus = value;
            doSearch();
        }
    }

    private string strSearchReceiver;       //검색수신자(user_id)
    private string strSearchTitle;          //제목(title)
    private string strSearchApproveStatus;   //승인상태(approve_flag, 요청취소만 trans_flag)
    public string _strSearchApproveStatus
    {
        get { return strSearchApproveStatus; }
        set
        {
            strSearchApproveStatus = value;
            mailParam.ApprStatus = value;
            doSearch();
        }
    }

    public void doSearchList()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        string systemid = (sgLoginData.GetSystemPosition() == true ? "I" : "E");
        /*
        mailParam.UserID = curUserID;
        mailParam.SystemId = systemid;
        await mailParam.SetSearchStartDate("datepicker9");
        await mailParam.SetSearchEndDate("datepicker10");
        mailParam.Receiver = strSearchReceiver;
        mailParam.Title = strSearchTitle;
        mailParam.PageListCount = nPageListCount;
        mailParam.ViewPageNo = nViewPageNo;
        */
        MailManageDao dao = new MailManageDao();
        string strQueryList = dao.List(mailParam);
        HSCmdCenter.SendListQuery(groupID, curUserID, strQueryList);
    }

    public async void doSearch()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
        //COUNT 요청응답
        HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        string systemid = (sgLoginData.GetSystemPosition() == true ? "I" : "E");

        mailParam.UserID = curUserID;
        mailParam.SystemId = systemid;
        @*await mailParam.SetSearchStartDate("datepicker9");
        await mailParam.SetSearchEndDate("datepicker10");*@

        await refPeriodDatePicker.RetriveDateFromJS();
        mailParam.SetSearchStartDate(refPeriodDatePicker.FromDateSearchValue);
        mailParam.SetSearchEndDate(refPeriodDatePicker.ToDateSearchValue);

        //TransKInd => sr_type
        mailParam.SetTransKindCode(strTransTypeText);

        //Debug.WriteLine("strFromDay:" + mailParam.SearchStartDate);
        //Debug.WriteLine("strEndDay:" + mailParam.SearchEndDate);
        //Debug.WriteLine("strToDay:");
        //Debug.WriteLine("TransKind:" + strTransKindValue);
        //Debug.WriteLine("TransKindCode:" + mailParam.GetTransKindCode());
        //Debug.WriteLine("DlpValue:" + strDlpValue);
        //Debug.WriteLine("DlpValueCode:" + mailParam.GetDlpValueCode()); //1:있음 0,2,3:없음
        //Debug.WriteLine("TransStatus:" + strTransFlag);
        //Debug.WriteLine("TransStatusCode:" + mailParam.GetTransStatusCode());
        //Debug.WriteLine("strSearchReceiver:" + strSearchReceiver);

        mailParam.Receiver = strSearchReceiver;
        //Debug.WriteLine("strSearchTitle:" + strSearchTitle);
        mailParam.Title = strSearchTitle;
        //Debug.WriteLine("ApproveStatus:" + mailParam.ApprStatus);
        //Debug.WriteLine("ApproveStatusCode:" + mailParam.GetApprStatusCode());

        MailManageDao dao = new MailManageDao();
        string strQueryCount = dao.TotalCount(mailParam);
        //Debug.WriteLine(dao.List(mailParam));
        HSCmdCenter.SendCountQuery(groupID, curUserID, strQueryCount);
    }

    private void UpdateList(int pageNumber)
    {
        nViewPageNo = pageNumber + 1;
        doSearch();
    }

    public async Task OpenDetail(string transSeq)
    {
        await refMailManagePopUp.openPopUp(transSeq);
    }

    public void InitText()
    {
        strMailManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE");                   // 메일관리
        strMailManageGap = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");            //메일 관리
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                            //기간
        strTransferKind = XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND");              //발송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                //전체
        strToInbound = XmlConf.GetTitle("T_COMMON_IMPORT");                         //반입
        strToOutbound = XmlConf.GetTitle("T_COMMON_EXPORT");                        //반출
        strPersonInfo = XmlConf.GetTitle("T_COMMON_PRIVACY");                       //개인정보
        strToBe = XmlConf.GetTitle("T_COMMON_EXIST");                               //있음
        strNotToBe = XmlConf.GetTitle("T_COMMON_NOTEXIST");                         //없음
        strTransferStatus = XmlConf.GetTitle("T_EMAIL_STATUS");                     //발송상태
        strTransferComplete = XmlConf.GetTitle("T_DETAIL_TRANS_SUCCESS");           //전송완료
        strTransferReady = XmlConf.GetTitle("T_COMMON_TRANSWAIT");                  //전송대기
        strTransferCancel = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");               //전송취소
        strReceiver = XmlConf.GetTitle("T_ETC_RECIVER");                            //수신자
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                               //제목
        strApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");              //승인상태
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                          //승인
        strApproveReady = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                //승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                         //반려
        strRequestCancel = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");              //요청취소
        strRefresh = XmlConf.GetTitle("T_COMMON_REFRESH");                          //새로고침
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                            //조회
        strSendCancel = XmlConf.GetTitle("T_EMAIL_SENDCANCEL");                     //발송취소
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                 //결재종류
        strPersonalInfo = XmlConf.GetTitle("T_COMMON_PRIVACY");                     //개인정보
        strFileAttach = XmlConf.GetTitle("T_EMAIL_ATTACHFILE");                     //파일첨부
        strSendDay = XmlConf.GetTitle("T_EMAIL_SENDDATE");                          //발신일
        strViewDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                    //상세보기
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                       //총페이지
        stReceivePlease = XmlConf.GetTitle("T_EMAIL_RECEIVER_NEEDED");              //수신자를 입력해 주세요.
        stTitlePlease = XmlConf.GetTitle("T_EMAIL_TITLE_NEEDED");                   //제목을 입력해 주세요.

        strTransTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strDlpValue = XmlConf.GetTitle("T_COMMON_ALL");
        strTransFlag = XmlConf.GetTitle("T_COMMON_ALL");
        strSearchApproveStatus = XmlConf.GetTitle("T_COMMON_ALL");
    }

    protected override void OnInitialized()
    {
        //파라미터 핸들링 클래스 초기화
        mailParam.XmlConf = XmlConf;
        mailParam.jsRuntime = jsRuntime;

        InitText();
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        @*GetInitDateTime();*@
        base.OnInitialized();

    }
    @*
        public async Task GetDateTime()
        {
        await RetriveDateFromJS();
        char sep = '-';
        string[] splitFrom = strFromDay.Split(sep);
        curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
        string[] splitTo = strToDay.Split(sep);
        curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
        }

        private async Task RetriveDateFromJS()
        {
        object[] param = { "datepicker9" };
        string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
        if (vStr != null && vStr.Length > 0)
        strFromDay = vStr;
        object[] param2 = { "datepicker10" };
        string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
        if (vStr2 != null && vStr2.Length > 0)
        strToDay = vStr2;
        }*@

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;

        //nViewPageNo = nStartPage = 1;
    }

    public void SearchCountResult(int groupId, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");
        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        if (result != "0")
        {
            ShowMessage("error", reason);
            return;
        }
        if (count <= 0)
        {
            ShowMessage("warn", reason);            // 검색결과가 존재하지 않습니다.
            if (listData != null) listData.Clear();
            //UpdateList(0);
            SetPageinfo(totalCnt);
            StateHasChanged();
            return;
        }
        SetPageinfo(totalCnt);
        //UpdateList(nViewPageNo);
        //리스트 쿼리 호출
        doSearchList();
    }

    public void SearchListResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        listData = e.GetSvrRecordData2("RECORD");

        StateHasChanged();
    }

    @*   public void GetInitDateTime()
        {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
        }*@

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            @*    object[] param = { "datepicker9", "datepicker10" };
                jsRuntime.InvokeAsync<object>("initDatePicker", param);*@
            jsRuntime.InvokeAsync<object>("initPageLeft");
            doSearch();
        }
        base.OnAfterRender(firstRender);
    }


    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }
}
