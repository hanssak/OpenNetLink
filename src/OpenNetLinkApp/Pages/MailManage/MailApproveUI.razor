@page "/mailApprove"
@page "/mailApprove/{groupIDbyParam:int}"
@page "/mailApprove/{groupIDbyParam:int}/{menuMode:int}"

@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Models.SGNetwork
@using HsNetWorkSGData;
@using OpenNetLinkApp.Data.SGDomain
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGSearchCondition
@using AgLogManager
@using System
@using System.Threading

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP")</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP")</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-2" style="text-align:right; vertical-align:middle;">@XmlConf.GetTitle("T_COMMON_PERIOD")</th>
                                <td style="width:285px;">
                                    @*<input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker11" readonly="readonly" value="@strFromDay">
                                        <span class="float-left col-md-1">-</span>
                                        <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker12" readonly="readonly" value="@strToDay">*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>
                            </tr>



                            <tr>

                                <th class="p-2" style="text-align: right; vertical-align: middle; width: 90px;"> @XmlConf.GetTitle("T_COMMON_APPROVE_KIND") </th>   <!-- 결재종류 -->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strApproveKind
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("ApproveKind"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strApproveKind, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("ApproveKind"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApproveKind<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                                <th class="p-2" style="text-align: right; vertical-align: middle; width: 90px;">  @XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND") </th> <!--발송구분-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransTypeText
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransType"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransTypeText, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransTypeText<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                                @if (bUseDlpDataView)
                                {
                                    <th class="p-2" style="width:90px;"> @XmlConf.GetTitle("T_COMMON_PRIVACY") </th>
                                    <!--개인정보-->
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                @strDlpValue
                                            </button>
                                            <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                                                @foreach (string str in Common.CsFunction.GetOptionValue("DlpValue"))
                                                {
                                                    <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strDlpValue, str, doSearch))">@str</button>
                                                }
                                            </div>
                                        </div>
                                        <!--<button type="button" @onclick="@(()=>openCustomSelect("DlpValue"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDlpValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                    </td>
                                }

                                <th class="p-2" style="text-align: right; vertical-align: middle; width: 90px;"> @XmlConf.GetTitle("T_EMAIL_STATUS") </th>  <!--발송상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransFlag
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu4">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("MailTransStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransFlag, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("MailTransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransFlag<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                                <th class="p-2" style="text-align: right; vertical-align: middle; width: 90px;"> @XmlConf.GetTitle("T_COMMON_APPROVESTATUS") </th> <!--승인상태-->
                                <td style="width:210px;">
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu5" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strSearchApproveStatus
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu5">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("MailApproveStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strSearchApproveStatus, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("MailApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strSearchApproveStatus<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                            </tr>

                            <tr>

                                <th class="p-2 pt-2" style="text-align: right; vertical-align: middle;"> @XmlConf.GetTitle("T_EMAIL_SENDER") </th>  <!--발신자-->
                                <td class="pt-2" colspan="1"><input type="text" class="form-control" placeholder="@XmlConf.GetTitle("T_EMAIL_SENDER")" @bind="strSearchSender" @onkeyup="HandleKeyEvent"></td>

                                <th class="p-2 pt-2" style="text-align: right; vertical-align: middle;"> @XmlConf.GetTitle("T_RECV_USER") </th>     <!--수신자-->
                                <td class="pt-2" colspan="3">
                                    <input type="text" class="form-control" placeholder="@XmlConf.GetTitle("T_EMAIL_RECEIVER_NEEDED")" @bind="strSearchReceiver" @onkeyup="HandleKeyEvent">
                                </td>

                                <th class="p-2 pt-2" style="text-align: right; vertical-align: middle;"> @XmlConf.GetTitle("T_TRANS_TITLE") </th>      <!--제목-->
                                <td class="pt-2" colspan="3">
                                    <input type="text" class="form-control" placeholder="@XmlConf.GetTitle("T_EMAIL_TITLE_NEEDED")" @bind="strSearchTitle" @onkeyup="HandleKeyEvent">
                                </td>

                            </tr>
                        </table>

                    </div>
                </div>
            </div>
        </div>

        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-12 text-right">
                <button type="button" class="btn btn-md btn-black" @onclick="doSearch"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                <button type="button" class="btn btn-md btn-blue" @onclick="ApproveAction"><i class="fas fa-check-circle"></i>@XmlConf.GetTitle("T_APPROVE_BTN")</button>
                <button type="button" class="btn btn-md btn-red" @onclick="ApproveReject"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_REJECT_BTN")</button>

            </div>
        </div>


        <!-- list -->

        <div class="row">

            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">


                    <form class="form-horizontal">

                        <div class="card-body p-0">
                            <table class="table table-head-fixed table-bordered table-hover" style="table-layout: fixed;">
                                <thead>
                                    <tr>
                                        <th style="text-align: center; vertical-align:middle;width: 2%;">
                                            <input class="input" type="checkbox" checked="@bAllCheck" style="text-align:center; vertical-align:middle" @onclick="(e=>AllCheckStateUpdate())">
                                        </th>
                                        <th style="text-align:center; vertical-align:middle;width:6%;">@XmlConf.GetTitle("T_COMMON_APPROVE_KIND")</th>     <!--결재종류-->
                                        <th style="text-align:center; vertical-align:middle;width:6%;">@XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND")</th>     <!--발송구분-->

                                        @if (bUseDlpDataView)
                                        {
                                            <th style="text-align:center; vertical-align:middle;width:6%;">@XmlConf.GetTitle("T_COMMON_PRIVACY")</th>
                                            <!-- 개인정보 -->
                                        }

                                        <th style="text-align:center; vertical-align:middle;width:6%;">@XmlConf.GetTitle("T_EMAIL_ATTACHFILE")</th>     <!--파일첨부-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_EMAIL_STATUS")</th>         <!--발송상태-->

                                        @if (approveTypesfm == 2)
                                        { 
                                            <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_DETAIL_APPROVEUSER")</th>  <!--승인자-->
                                        }

                                        <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th> <!--승인상태-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_EMAIL_SENDER")</th>         <!--발신자-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_RECV_USER")</th>           <!--수신자-->
                                        <th style="text-align: center; vertical-align: middle;">@XmlConf.GetTitle("T_TRANS_TITLE")</th>     <!--제목-->
                                        <th style="text-align: center; vertical-align: middle; width: 14%;">@XmlConf.GetTitle("T_EMAIL_SENDDATE")</th>              <!--발신일-->
                                        <th style="text-align: center; vertical-align: middle; width: 14%;">@XmlConf.GetTitle("T_COMMON_APPROVEDATE")</th>          <!--승인일-->
                                        <th style="text-align: center; vertical-align: middle; width: 6%;">@XmlConf.GetTitle("T_COMMON_DETAILVIEW")</th><!--상세보기-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (emailApproveData item in mData)
                                    {

                                    <tr>
                                        <td style="text-align:center; vertical-align:middle">
                                            <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                        </td>
                                        <td style="text-align: center; vertical-align: middle">@item.ApvType</td>
                                        <td style="text-align: center; vertical-align: middle">@item.TransferType</td>
                                        @if (bUseDlpDataView)
                                        {
                                            <td style="text-align: center; vertical-align: middle">@item.stDLP</td>
                                        }
                                        <td style="text-align: center; vertical-align: middle">@item.strIsFileAdd</td>
                                        <td style="text-align: center; vertical-align: middle">@item.TransStatusCode</td>

                                        @if (approveTypesfm == 2)
                                        {
                                            <td style="text-align: center; vertical-align: middle">@item.ApproverName</td>
                                        }

                                        <td style="text-align: center; vertical-align: middle">@item.ApvStatus</td>
                                        <td style="text-align: center; vertical-align: middle">@item.strSender</td>
                                        <td style="vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; ">@item.strReceiver</td>
                                        <td style="vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                        <td style="text-align: center; vertical-align: middle">@item.RequestTime</td>
                                        <td style="text-align: center; vertical-align: middle">@item.ApvTime</td>
                                        <td style="text-align:center; vertical-align: middle"><button ondrop="return false;" ondragover="return false;" type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>OpenDetail(item.TransSeq, item.ApprSeq, item.bCanApproveReject?"true":"false", item.bIsAfterApprove, item.bIsCanFilePreview))"><i class="fas fa-search"></i></button></td>
                                    </tr>

                                    }

                                </tbody>
                            </table>
                        </div>
                        <div class="card-body pt-0">

                            <!--S page -->
                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@XmlConf.GetTitle("T_TRANS_TOTALPAGE") : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>

                            <!--/.S page -->

                        </div>


                        <!--footer test-->
                        <Footer @ref=refFooter></Footer>
                        <!--./footer test-->
                        <!-- /.card-footer -->


                    </form>

                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<MailApprovePopUp @ref="refMailApprovePopUp"></MailApprovePopUp>
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>
<SGReject @ref="refSGReject" Guid="modalEmailReject"></SGReject>

@code {
    [Parameter]
    public int menuMode { get; set; } = 0;
    [Parameter]
    public int groupIDbyParam { get; set; }
    private MailApproveEx1Param mailParam = new MailApproveEx1Param();

    SGReject refSGReject;
    SGCustomSelect refSGCustomSelect;
    Footer refFooter;
    PeriodDatePicker refPeriodDatePicker;

    public bool bUseDlpDataView = true;

    @*public string strFromDay = "";
        public string strToDay = "";*@
    //검색조건 바인딩 변수
    @*private string curFromDay;
        private string curToDay;*@

    private string strSearchReceiver;       //검색수신자(user_id)
    private string strSearchTitle;          //제목(title)
    private string strSearchSender;
    //List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정

    private int approveTypesfm = 0;

    /// <summary>
    /// checkBox 등 사용자의 설정 정보가 반영된 LIST data
    /// </summary>
    public List<emailApproveData> mData = new List<emailApproveData>();

    /// <summary>
    /// 조회해서 받은 원본data data
    /// </summary>
    public List<emailApproveData> ListData = new List<emailApproveData>();


    /// <summary>
    /// 임시 list를 받아두는 용도
    /// </summary>
    List<Dictionary<int, string>> listTempData = null;          //DB 데이타 직접 사용하는걸로 수정


    public bool bAllCheck = false;
    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MailApproveUI>();

    public void CheckStateUpdate(emailApproveData item)
    {
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            emailApproveData temp = ListData[i];
            if (temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
                ListData[i] = temp;
                break;
            }
        }
        StateHasChanged();
    }

    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = ListData.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }

        for (int i = 0; i < nCount; i++)
        {
            if (ListData[i].bCheckDisable != true)
                ListData[i].bCheck = bAllCheck;
        }

        StateHasChanged();
    }


    private string strApproveKind;          //선결,후결
    public string _strApproveKind
    {
        get { return strApproveKind; }
        set
        {
            strApproveKind = value;
            mailParam.SetApprKindCode(value);
            doSearch();
        }
    }
    private string strTransTypeText;    //반입,반출
    public string _strTransTypeText
    {
        get { return strTransTypeText; }
        set
        {
            strTransTypeText = value;
            mailParam.SetTransKindCode(value);
            doSearch();
        }
    }
    private string strDlpValue;             //포함,미포함(dlp_flag)
    public string _strDlpValue
    {
        get { return strDlpValue; }
        set
        {
            strDlpValue = value;
            mailParam.SetDlpValue(value);
            doSearch();
        }
    }

    /// <summary>
    /// TransStatus 선택한 문자값(전체, 발송대기, ...)
    /// </summary>
    private string strTransFlag;            //전송상태(trans_flag) => TransStatus
    public string _strTransFlag
    {
        get { return strTransFlag; }
        set
        {
            strTransFlag = value;
            mailParam.SetTransStatusCode(value);
            doSearch();
        }
    }
    private string strSearchApproveStatus;   //승인상태(approve_flag, 요청취소만 trans_flag)
    public string _strSearchApproveStatus
    {
        get { return strSearchApproveStatus; }
        set
        {
            strSearchApproveStatus = value;
            mailParam.SetApprStatusCode(value);
            doSearch();
        }
    }

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransType")
            _strTransTypeText = stValue;
        else if (stOption == "ApproveKind")
            _strApproveKind = stValue;
        else if (stOption == "DlpValue")
            _strDlpValue = stValue;
        else if (stOption == "MailTransStatus")
            _strTransFlag = stValue;
        else if (stOption == "MailApproveStatus")
            _strSearchApproveStatus = stValue;
    }

    MailApprovePopUp refMailApprovePopUp;
    public int TotalCount { get; set; }
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;
    ISGSideBarUIService SideBarUISvc;

    /// <summary>
    ///
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="strReason"></param>
    public void ApproveSend(int groupID, string strReason)
    {

        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        string strProcID = "A";
        string strApproveSeqs = "";

        for (int i = 0; i < ListData.Count; i++)
        {
            if (ListData[i].bCheck == true)
            {
                string temp = (ListData[i].ApprSeq + '\u0002');  // 제일마지막에 '\u0002' 하나 더 붙어야 정상동작
                strApproveSeqs += temp;
            }
        }

        HSCmdCenter.sgPageEvent.SetEmailApprBatchEvent(groupID, ApproveBatchResult);
        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, approveTypesfm==2, false);
    }

    public async Task ApproveAction()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strApprSeq = GetCheckApprSeq();

        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        HSCmdCenter.sgPageEvent.SetEmailApprBatchEvent(groupID, ApproveBatchResult);
        if (!SGAppMgrSvc.OpConfigInfoService.GetUseFileApproveReason(groupID))
        {
            SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
            string strUserID = "";
            if (sgLoginData != null)
                strUserID = sgLoginData.GetUserID();

            string strProcID = "A";
            string strReason = "Approve";
            string strApproveSeqs = "";

            for (int i = 0; i < ListData.Count; i++)
            {
                if (ListData[i].bCheck == true)
                {
                    string temp = (ListData[i].ApprSeq + '\u0002');  // 제일마지막에 '\u0002' 하나 더 붙어야 정상동작
                    strApproveSeqs += temp;
                }
            }

            HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, approveTypesfm==2, false);
        }
        else
        {
            refSGReject.ResetReason(Common.Enums.EnumApproveType.Approve);
            refSGReject.SetGroupID(groupID);
            refSGReject.SetApprRejectEvent(ApproveSend);
            await refSGReject.openPopUp();
        }
    }


    private async Task ApproveReject()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (GetCheckRejectPossible() != true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0092"); // 후결은 반려를 할 수 없습니다./r/n다시 확인하십시오.
            ShowMessage("info", strMsg);
            return;
        }
        string strApprSeq = GetCheckApprSeq();
        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }
        refSGReject.ResetReason();
        refSGReject.SetGroupID(groupID);
        refSGReject.SetApprRejectEvent(ApproveRejectSend);
        await refSGReject.openPopUp();
    }

    /// <summary>
    /// 반려 입력창에서 호출해주는 event
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="strReason"></param>
    public void ApproveRejectSend(int groupID, string strReason)
    {
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        string strProcID = "R";
        string strApproveSeqs = "";

        for (int i = 0; i < ListData.Count; i++)
        {
            if (ListData[i].bCheck == true)
            {
                string temp = (ListData[i].ApprSeq + '\u0002'); // 제일마지막에 '\u0002' 하나 더 붙어야 정상동작
                strApproveSeqs += temp;
            }
        }

        HSCmdCenter.sgPageEvent.SetEmailApprBatchEvent(groupID, RejectBatchResult);
        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs, approveTypesfm==2, false);
    }

    public bool GetCheckRejectPossible()
    {
        string strApprKind = "";
        string strTemp = XmlConf.GetTitle("T_COMMON_APPROVE_AFTER");        // 후결
        bool bRejectPossible = true;
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            emailApproveData temp = ListData[i];
            if (temp.bCheck == true)
            {
                strApprKind = temp.ApvType;
                if (strApprKind.Equals(strTemp))
                {
                    bRejectPossible = false;
                    break;
                }
            }
        }
        return bRejectPossible;
    }


    public string GetCheckApprSeq()
    {
        string strApprSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            emailApproveData temp = ListData[i];
            if (temp.bCheck)
            {
                strApprSeq = temp.TransSeq;
            }
        }
        return strApprSeq;
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Task.Run(async () => { await doSearch(); });
        }
    }

    private async void openCustomSelect(string opt)
    {
        if (opt == "TransType")
            await refSGCustomSelect.openPopUp(opt, strTransTypeText);
        else if (opt == "ApproveKind")
            await refSGCustomSelect.openPopUp(opt, strApproveKind);
        else if (opt == "DlpValue")
            await refSGCustomSelect.openPopUp(opt, strDlpValue);
        else if (opt == "MailTransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransFlag);
        else if (opt == "MailApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strSearchApproveStatus);
    }



    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;

        nViewPageNo = nStartPage = 1;
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strMsg = strMsg.Replace("/r/n", "<br/>");
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /// <summary>
    /// 개수검색 Query 결과로 호출되는 event
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SearchCountResult(int groupId, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");
        if (listCnt == null || listCnt.Count < 1 || count <= 0)
        {
            CLog.Here().Information("SearchCount - RECORD - empty!");

            ListData.Clear();
            mData.Clear();
            StateHasChanged();

            ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.

            return;
        }

        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        if (result != "0")
        {
            CLog.Here().Information($"SearchCountResult - Result : {result}, reason : {reason}");
            ListData.Clear();
            mData.Clear();
            StateHasChanged();

            ShowMessage("error", reason);
            return;
        }

        CLog.Here().Information($"SearchCountResult - COUNT : {totalCnt}, reason : {reason}");

        if (totalCnt <= 0)
        {
            if (listCnt != null) listCnt.Clear();
            SetPageinfo(totalCnt);
            ListData.Clear();
            mData.Clear();

            StateHasChanged();

            ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.
            return;
        }

        SetPageinfo(totalCnt);
        //리스트 쿼리 호출
        UpdateData();

    }


    /// <summary>
    /// Count 개수를 고려한 List 검색
    /// </summary>
    /// <param name="pageNum"></param>
    public void ApproveSearchData(int pageNum)
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);

        mailParam.UserID = curUserID;

        Task.Run(async () =>
        {
            await refPeriodDatePicker.RetriveDateFromJS();

            string curFromDay = refPeriodDatePicker.FromDateSearchValue;
            string curToDay = refPeriodDatePicker.ToDateSearchValue;
            curFromDay = curFromDay.Substring(0, 8);
            curToDay = curToDay.Substring(0, 8);

        // Test용도
        //curFromDay = "20220101";
        //curToDay = "20221231";

        // 실제사용 - UI상에 설정된 값 안나옴
        mailParam.SetSearchStartDate(curFromDay);
            mailParam.SetSearchEndDate(curToDay);

            string systemid = (sgLoginData.GetSystemPosition() ? "I" : "E");
            mailParam.PageListCount = nPageListCount;
            mailParam.APPROVE_TYPE_SFM = sgLoginData.GetApproveTypeSFM().ToString();    //대결재 방식 지정
        mailParam.UserID = curUserID;
            mailParam.SystemId = systemid;

            mailParam.Sender = strSearchSender;
            mailParam.Receiver = strSearchReceiver;
            mailParam.Title = strSearchTitle;

            mailParam.SetApprKindCode(strApproveKind);
            mailParam.SetTransKindCode(strTransTypeText);

            mailParam.SetTransStatusCode(strTransFlag);

        // SetTransStatusCode 이후에 SetApprStatusCode 사용해야함(꼭)
        mailParam.SetApprStatusCode(strSearchApproveStatus);

            mailParam.SetDlpValue(strDlpValue);

            mailParam.SetSender(strSearchSender);
            mailParam.SetReceiver(strSearchReceiver);
            mailParam.SetTitle(strSearchTitle);

            mailParam.ViewPageNo = nViewPageNo;
            mailParam.PageListCount = nPageListCount;

            MailApproveDao dao = new MailApproveDao();
            string strQuery = dao.ListDbFunc(mailParam);
            CLog.Here().Information($"QueryLIST-@@@@@@@@@@ : {strQuery}");

            HSCmdCenter.SendListQuery(groupID, curUserID, strQuery);
        });
    }


    /// <summary>
    /// LIST 검색결과 받음 event
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SearchListResult(int groupId, SGData e)
    {

        try
        {

            string result = e.GetTagData("RESULT");
            string reason = e.GetTagData("REASON");
            int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
            listTempData = e.GetSvrRecordData2("RECORD");

            if (listTempData == null || listTempData.Count < 1)
            {
                CLog.Here().Information("SearchListResult - RECORD - empty!");

                ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.
                ListData.Clear();
                mData.Clear();

                StateHasChanged();
                return;
            }

            CLog.Here().Information($"SearchListResult - Result : {result}, reason : {reason}");

            if (result != "0")
            {
                ShowMessage("error", reason);
                return;
            }

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
            string curUserID = "";
            //int maxDownloadCount = 0;
            bool isInner = false;
            if (sgLoginData != null)
            {
                curUserID = sgLoginData.GetUserID();
                //maxDownloadCount = sgLoginData.GetMaxDownCount();
                isInner = sgLoginData.GetSystemPosition();
            }
            else
                return;

            ListData.Clear();

            SGeMailApproveManageData sgData = new SGeMailApproveManageData();
            sgData.Copy(HSCmdCenter.GetConnectNetWork(groupId), e);

            int nCount = listTempData.Count;
            int nowDate = Int32.Parse(DateTime.Now.ToString("yyyyMMdd"));   // Server Time으로 가져올 것


            for (int i = 0; i < nCount; i++)
            {
                Dictionary<int, string> dic = listTempData[i];
                if (dic == null)
                    continue;

                string tmpStr = "";
                if (dic.TryGetValue(0, out tmpStr) != true)
                {
                    if (tmpStr.Equals(""))
                        continue;
                }

                emailApproveData tData = new emailApproveData();
                tData.bCheckDisable = !(sgData.GetApprEnableChk(dic));             // 결재 가능/불가능

                tData.bCheck = false;
                tData.TransSeq = sgData.GetEmailSeq(dic);
                tData.ApprSeq = sgData.GetApproveSeq(dic);
                tData.ApvType = sgData.GetApprKind(dic);                            // 결재종류 (선결/후결)
                tData.bIsAfterApprove = (sgData.GetApprKindRawData(dic) == "1");    // 결재종류 (후결:true, 선결:false)
                tData.TransferType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)

                tData.stDLP = sgData.GetDlp(dic);                           // 개인정보 포함여부
                tData.strIsFileAdd = sgData.GetFileAdd(dic);                // 파일첨부유무
                tData.TransStatusCode = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)

                tData.ApproverName = sgData.GetQueryApprName(dic);             // 승인자
                tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)
                tData.strSender = sgData.GetMailSender(dic);                // 송신자
                tData.strReceiver = sgData.GetRecvUser(dic);                // 수산자

                tData.bCanApproveReject = (sgData.GetApproveCanDo(dic) && sgData.GetApprEnableChk(dic))  ;         // 승인대기 상태 인지 유무 값 (true : 승인/반려가능, false:불가능)
                tData.bIsCanFilePreview = ((isInner && sgData.GetTransKindRawData(dic) == "1") || (isInner == false && sgData.GetTransKindRawData(dic) == "2"));

                tData.Title = sgData.GetTitle(dic);                         // 제목
                FileAddManage fileAddManage = new FileAddManage();
                tData.Title = fileAddManage.GetConvertTitleDesc(false, tData.Title);
                tData.RequestTime = sgData.GetTransReqDay(dic);             // 발신일(type : YYYY-MM-DD hh:mm:ss)
                tData.ApvTime = sgData.GetApproveDay(dic);                 // 승인일(type : YYYY-MM-DD hh:mm:ss)
                tData.strDestNet = "";

                ListData.Add(tData);

            }// for (int i = 0; i < nCount; i++)

            UpdateInitList(nViewPageNo);
            StateHasChanged();

        }
        catch (Exception ex)
        {
            CLog.Here().Information($"SearchListResult - Exception - msg : {ex.Message}");
        }

    }


    /// <summary>
    /// 조회시작 함수
    /// </summary>
    /// <returns></returns>
    private async Task doSearch()
    {


        using (Mutex mutex = new Mutex(true, "MailApproveUI", out bool isNewInstance))
        { 
            if (isNewInstance)
            {
            
                ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
                int groupID = 0;
                if (sgSideBar != null)
                    groupID = sgSideBar.GroupId;

                string strMsg = "";
                if (pageService.GetConnectStatus(groupID) == false)
                {
                    strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
                    strMsg = strMsg.Replace("/r/n", "<br>");
                    ShowMessage("error", strMsg);
                    return;
                }

                //LIST 요청응답
                HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
                //COUNT 요청응답
                HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

                SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
                string curUserID = "";
                if (sgLoginData != null)
                    curUserID = sgLoginData.GetUserID();

                //await mailParam.SetSearchStartDate("datepicker11");
                //await mailParam.SetSearchEndDate("datepickoer12");
                await refPeriodDatePicker.RetriveDateFromJS();

                string curFromDay = refPeriodDatePicker.FromDateSearchValue;
                string curToDay = refPeriodDatePicker.ToDateSearchValue;
                curFromDay = curFromDay.Substring(0, 8);
                curToDay = curToDay.Substring(0, 8);

                // Test용도
                //curFromDay = "20220101";
                //curToDay = "20221231";

                mailParam.SetSearchStartDate(curFromDay);
                mailParam.SetSearchEndDate(curToDay);

                string systemid = (sgLoginData.GetSystemPosition() ? "I" : "E");
                mailParam.PageListCount = nPageListCount;
                mailParam.APPROVE_TYPE_SFM = sgLoginData.GetApproveTypeSFM().ToString();    //대결재 방식 지정
                mailParam.UserID = curUserID;
                mailParam.SystemId = systemid;

                mailParam.Sender = strSearchSender;
                mailParam.Receiver = strSearchReceiver;
                mailParam.Title = strSearchTitle;

                mailParam.SetApprKindCode(strApproveKind);
                mailParam.SetTransKindCode(strTransTypeText);

                mailParam.SetTransStatusCode(strTransFlag);
                // SetTransStatusCode 이후에 SetApprStatusCode 사용해야함(꼭)
                mailParam.SetApprStatusCode(strSearchApproveStatus);

                mailParam.SetDlpValue(strDlpValue);

                mailParam.SetSender(strSearchSender);
                mailParam.SetReceiver(strSearchReceiver);
                mailParam.SetTitle(strSearchTitle);

                mailParam.ViewPageNo = nViewPageNo;
                mailParam.PageListCount = nPageListCount;

                MailApproveDao dao = new MailApproveDao();
                // HSCmdCenter.SendCountQuery(groupID, curUserID, dao.TotalCount(mailParam));

                string strQueryCount = dao.TotalCountDbFunc(mailParam);
                CLog.Here().Information($"Query Approve Count-########## : {strQueryCount}");

                HSCmdCenter.SendCountQuery(groupID, curUserID, strQueryCount);

            }
            else
            { 
                CLog.Here().Information($"MailApproveUI - doSearch, Doing ~");
            }

        }

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="updatePageNum"></param>
    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }

    private void UpdateData()
    {
        ApproveSearchData(nViewPageNo);
    }

    private void UpdateList(int pageNumber)
    {

        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip((pageNumber - 1) * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }

    public async Task OpenDetail(string transSeq, string apvseq, string apvenable, bool bIsAfterApprove, bool bIsCanFilePreview)
    {
        refMailApprovePopUp.bUseDlpDataView = bUseDlpDataView;
        refMailApprovePopUp.bIsPrivacyApproveDetail = false;
        //apvenable = "true";
        await refMailApprovePopUp.openPopUp(transSeq, apvseq, apvenable, bIsAfterApprove, bIsCanFilePreview);
    }

    @*protected override void OnInitialized()
    {
    }*@

    protected override async Task OnInitializedAsync()
    {

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        //파라미터 핸들링 클래스 초기화
        mailParam.XmlConf = XmlConf;
        mailParam.jsRuntime = jsRuntime;

        InitText();

        //Email 배치 승인,반려 요청에 응답 이벤트
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        bUseDlpDataView = SGAppMgrSvc.OpConfigInfoService.GetUseUIdlpData(groupIDbyParam);

        HSCmdCenter.sgPageEvent.SetEmailApprBatchEvent(groupIDbyParam, ApproveBatchResult);
        HSCmdCenter.sgPageEvent.SetPageDataRefreshEvent(Common.Enums.EnumPageView.MailApproveUI, UpdateData);
        HSCmdCenter.sgPageEvent.SetPageDataRefreshEvent(Common.Enums.EnumPageView.MailApproveWaitUI, ApproveWaitSearch);


        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            approveTypesfm = sgLoginData.GetApproveTypeSFM();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initPageLeft");

            if (menuMode == 1)
            {
                refPeriodDatePicker.SetDateTime(DateTime.MinValue.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"));
                strSearchApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT"); //"승인대기"
            }
            await doSearch();
        }
        
        base.OnAfterRender(firstRender);
    }

    private void ApproveWaitSearch()
    {

        refPeriodDatePicker.SetDateTime(DateTime.MinValue.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"));
        strDlpValue = XmlConf.GetTitle("T_COMMON_ALL");
        strApproveKind = XmlConf.GetTitle("T_COMMON_ALL");
        strTransTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strTransFlag = XmlConf.GetTitle("T_COMMON_ALL");
        strSearchApproveStatus = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT"); //"승인대기"

        Task.Run(async () => { await doSearch(); });
    }

    public void InitText()
    {

        strDlpValue = XmlConf.GetTitle("T_COMMON_ALL");
        strApproveKind = XmlConf.GetTitle("T_COMMON_ALL");
        strTransTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strTransFlag = XmlConf.GetTitle("T_COMMON_ALL");
        strSearchApproveStatus = XmlConf.GetTitle("T_COMMON_ALL");
    }

    /// <summary>
    /// 승인명령에 대한 결과
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    public void ApproveBatchResult(int groupid, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");

        CLog.Here().Information($"ApproveBatchResult - RESULT : {result}, reason : {reason}");
        if (result != "0")
        {
            //ShowMessage("error", reason);
            ShowMessage("error", XmlConf.GetTitle("T_EMAIL_APPROVE_FAILED"));
            return;
        }
        ShowMessage("info", XmlConf.GetTitle("T_EMAIL_APPROVE_DONE"));
        Task.Run(async () => { await doSearch(); });
    }

    /// <summary>
    /// 반려 명령에 대한 결과
    /// </summary>
    /// <param name="groupid"></param>
    /// <param name="e"></param>
    public void RejectBatchResult(int groupid, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");

        CLog.Here().Information($"ApproveBatchResult - RESULT : {result}, reason : {reason}");
        if (result != "0")
        {
            //ShowMessage("error", reason);
            ShowMessage("error", XmlConf.GetTitle("T_EMAIL_REJECT_FAILED"));
            return;
        }

        //ShowMessage("info", reason);
        ShowMessage("info", XmlConf.GetTitle("T_EMAIL_REJECT_DONE"));
        Task.Run(async () => { await doSearch(); });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsRuntime.InvokeAsync<object>("initPageLeft");

            if (groupIDbyParam >=0 && SGAppMgrSvc.OpConfigInfoService.GetUseEmailApprUIwait(groupIDbyParam))
                ApproveWaitSearch();
            else
            {
                Task.Run(async () => { await doSearch(); });
            }
        }

        // pageService.SetDayInfoRefreshEvent(groupIDbyParam, DayInfoRefreshResult);
        base.OnAfterRender(firstRender);
    }

    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        strNavigateWithGroupID += groupID.ToString();
        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }

    }
}
