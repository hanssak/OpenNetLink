@page "/mailApprove"
@page "/mailApprove/{groupIDbyParam:int}"

@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Models.SGNetwork
@using HsNetWorkSGData;
@using OpenNetLinkApp.Data.SGDomain
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Components.SGSearchCondition
@using AgLogManager

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject NavigationManager MyNavigationManager

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP")</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;cursor:pointer;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP")</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-2">@XmlConf.GetTitle("T_COMMON_PERIOD");</th>
                                <td>
                                    @*<input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker11" readonly="readonly" value="@strFromDay">
                                        <span class="float-left col-md-1">-</span>
                                        <input type="text" style="color:black;" class="form-control col-md-5 float-left" id="datepicker12" readonly="readonly" value="@strToDay">*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>
                                <th class="p-2" style="width:70px;"> @XmlConf.GetTitle("T_COMMON_APPROVE_KIND") </th>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strApproveKind
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("ApproveKind"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strApproveKind, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("ApproveKind"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApproveKind<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2" style="width:70px;">  @XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND") </th> <!--발송구분-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransTypeText
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransType"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransTypeText, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransTypeText<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2" style="width:70px;"> @XmlConf.GetTitle("T_COMMON_PRIVACY") </th>  <!--개인정보-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strDlpValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("DlpValue"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strDlpValue, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("DlpValue"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDlpValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>

                            </tr>
                            <tr>
                                <th class="p-2" style="width:70px;"> @XmlConf.GetTitle("T_EMAIL_STATUS") </th>  <!--발송상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransFlag
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu4">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("MailTransStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransFlag, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("MailTransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransFlag<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2" style="width:70px;"> @XmlConf.GetTitle("T_COMMON_APPROVESTATUS") </th> <!--승인상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu5" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strSearchApproveStatus
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu5">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("MailApproveStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strSearchApproveStatus, str, doSearch))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("MailApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strSearchApproveStatus<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2 pt-2"> @XmlConf.GetTitle("T_EMAIL_SENDER") </th>  <!--발신자-->
                                <td class="pt-2" colspan="3"><input type="text" class="form-control" placeholder="@XmlConf.GetTitle("T_EMAIL_SENDER")" @bind="strSearchSender" @onkeyup="HandleKeyEvent"></td>
                            </tr>

                            <tr>
                                <th class="p-2 pt-2"> @XmlConf.GetTitle("T_RECV_USER") </th>     <!--수신자-->
                                <td class="pt-2" colspan="3">
                                    <input type="text" class="form-control" placeholder="@XmlConf.GetTitle("T_EMAIL_RECEIVER_NEEDED")" @bind="strSearchReceiver" @onkeyup="HandleKeyEvent">
                                </td>

                                <th class="p-2 pt-2"> @XmlConf.GetTitle("T_TRANS_TITLE") </th>      <!--제목-->
                                <td class="pt-2" colspan="3">
                                    <input type="text" class="form-control" placeholder="@XmlConf.GetTitle("T_EMAIL_TITLE_NEEDED")" @bind="strSearchTitle" @onkeyup="HandleKeyEvent">
                                </td>

                            </tr>
                        </table>

                    </div>
                </div>
            </div>
        </div>

        <div style="padding-left:30px;" class="row mb-3">
            <div class="col-sm-12 text-right">
                <button type="button" class="btn btn-md btn-black" @onclick="doSearch"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                <button type="button" class="btn btn-md btn-blue" @onclick="ApproveAction"><i class="fas fa-check-circle"></i>@XmlConf.GetTitle("T_COMMON_APPROVE")</button>
                <button type="button" class="btn btn-md btn-red" @onclick="ApproveReject"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_COMMON_REJECTION")</button>

            </div>
        </div>


        <!-- list -->

        <div class="row">

            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">


                    <form class="form-horizontal">

                        <div class="card-body p-0">
                            <table class="table table-head-fixed table-bordered table-hover" style="table-layout: fixed;">
                                <thead>
                                    <tr>
                                        <th style="text-align:left;width:2%;">
                                            <input class="input" type="checkbox" checked="@bAllCheck" @onclick="(e=>AllCheckStateUpdate())">
                                        </th>
                                        <th style="text-align:center">@XmlConf.GetTitle("T_COMMON_APPROVE_KIND")</th>     <!--결재종류-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_COMMON_EMAILTRANSKIND")</th>     <!--발송구분-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_COMMON_PRIVACY")</th>     <!--개인정보-->
                                        <!--<th style="text-align:center">@XmlConf.GetTitle("T_EMAIL_ATTACHFILE")</th> -->    <!--파일첨부-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_EMAIL_STATUS")</th>     <!--발송상태-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_COMMON_APPROVESTATUS")</th>     <!--승인상태-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_EMAIL_SENDER")</th>       <!--발신자-->
                                        <th style="text-align:center;width:8%;">@XmlConf.GetTitle("T_RECV_USER")</th>       <!--수신자-->
                                        <th style="text-align:center;width:15%;">@XmlConf.GetTitle("T_TRANS_TITLE")</th>           <!--제목-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_EMAIL_SENDDATE")</th>          <!--발신일-->
                                        <th style="text-align:center">@XmlConf.GetTitle("T_COMMON_APPROVEDATE")</th>          <!--승인일-->
                                        <th style="text-align:center;width:6%;">@XmlConf.GetTitle("T_COMMON_DETAILVIEW")</th>         <!--상세보기-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (listData != null)
                                    {
                                        @foreach (var item in listData)
                                        {
                                            <tr>
                                                <td>
                                                    @if (item[99] == "true")
                                                    {
                                                        @if (item[100] == "true")
                                                        {
                                                            <input class="input" type="checkbox" checked="checked" @onclick="(e=>CheckStateUpdate(item))">
                                                        }
                                                        else
                                                        {
                                                            <input class="input" type="checkbox" @onclick="(e=>CheckStateUpdate(item))">
                                                        }

                                                    }
                                                    else
                                                    {
                                                        @if (item[100] == "true")
                                                        {
                                                            <input class="input" type="checkbox" disabled="disabled" checked="checked" @onclick="(e=>CheckStateUpdate(item))">
                                                        }
                                                        else
                                                        {
                                                            <input class="input" type="checkbox" disabled="disabled" @onclick="(e=>CheckStateUpdate(item))">
                                                        }
                                                    }
                                                </td>
                                                <td style="text-align:center">@GetApproveKind(item[3])</td>
                                                <td style="text-align:center">@GetTransKind(item[4])</td>
                                                <td style="text-align:center">@GetDLPFlag(item[5])</td>
                                                <!-- <td style="text-align:center">@item[6]</td>  -->
                                                <td style="text-align:center">@GetTransStatus(item[7])</td>
                                                <td style="text-align:center">@GetApproveStatus(item[8])</td>
                                                <td style="text-align:center">@item[9]</td>
                                                <td style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" title="@item[10]">@item[10]</td>
                                                <td style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;" title="@item[12]">@item[12]</td>
                                                <td style="text-align:center">@GetDateOnly(item[13])</td>
                                                <td style="text-align:center">@GetDateOnly(item[14])</td>
                                                <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e => OpenDetail(item[0], item[2], item[99]))"><i class="fas fa-search"></i></button></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="card-body pt-0">

                            <!--S page -->
                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@XmlConf.GetTitle("T_TRANS_TOTALPAGE") : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>


                            <!--/.S page -->


                        </div>






                        <!--footer test-->
                        <Footer @ref=refFooter></Footer>
                        <!--./footer test-->
                        <!-- /.card-footer -->


                    </form>

                    <!-- /.card-body -->
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->

<MailApprovePopUp @ref="refMailApprovePopUp"></MailApprovePopUp>
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>
<SGReject @ref="refSGReject"></SGReject>
@code {

    [Parameter]
    public int groupIDbyParam { get; set; }
    private MailApproveParam mailParam = new MailApproveParam();

    SGReject refSGReject;
    SGCustomSelect refSGCustomSelect;
    Footer refFooter;
    PeriodDatePicker refPeriodDatePicker;

    @*public string strFromDay = "";
        public string strToDay = "";*@
    //검색조건 바인딩 변수
    @*private string curFromDay;
        private string curToDay;*@
    private string strSearchReceiver;       //검색수신자(user_id)
    private string strSearchTitle;          //제목(title)
    private string strSearchSender;
    List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정
    public bool bAllCheck = false;
    private SGNtfyDBProc SQLiteDB { get; set; } = SGNtfyDBProc.Instance;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<MailApproveUI>();

    public void CheckStateUpdate(Dictionary<int, string> item)
    {
        int nCount = listData.Count;
        foreach (Dictionary<int, string> listItem in listData)
        {
            if (item[0] == listItem[0])
            {
                if (listItem[100] == "true")
                    listItem[100] = "false";
                else
                    listItem[100] = "true";
                break;
            }
        }
        StateHasChanged();
    }

    public void AllCheckStateUpdate()
    {
        bAllCheck = !(bAllCheck);
        int nCount = listData.Count;
        string strMsg = "";
        if (nCount <= 0)
        {
            strMsg = XmlConf.GetWarnMsg("W_0243"); // 체크할 항목이 존재하지 않습니다.
            ShowMessage("warn", strMsg);
            return;
        }
        foreach (Dictionary<int, string> item in listData)
        {
            string bAllCheckString = "";
            if (bAllCheck == true)
                bAllCheckString = "true";
            else
                bAllCheckString = "false";

            if (item[99] != "true")
                item[100] = bAllCheckString;
        }
        StateHasChanged();
    }

    public string GetDateOnly(string value)
    {
        if (value.Length > 10)
            return value.Substring(0, 10);
        else
            return value;
    }

    public string GetApproveStatus(string value)
    {
        if (value == "1")
            return XmlConf.GetTitle("T_COMMON_APPROVE_WAIT"); //대기
        else if (value == "2")
            return XmlConf.GetTitle("T_DASH_APPROVE_COMPLETE"); //승인
        else if (value == "3")
            return XmlConf.GetTitle("T_DASH_APPROVE_REJECT"); //반려
        else
            return "";
    }
    public string GetTransStatus(string value)
    {
        if (value == "3" || value == "7")
            return XmlConf.GetTitle("T_COMMON_TRANS_SUCCESS"); //성공
        else if (value == "1")
            return XmlConf.GetTitle("T_COMMON_TRANSWAIT"); //대기
        else if (value == "5")
            return XmlConf.GetTitle("T_COMMON_TRANSCANCLE"); //취소
        else if (value == "4" || value == "8")
            return XmlConf.GetTitle("T_COMMON_TRANSFAIL"); //실패
        else if (value == "6" || value == "9")
            return XmlConf.GetTitle("T_EMAIL_TRANSCHECKING"); //검사중
        else
            return "-";
    }
    public string GetDLPFlag(string value)
    {
        if (value == "1")
            return XmlConf.GetTitle("T_COMMON_DLP_INCLUSION"); //포함
        else
            return XmlConf.GetTitle("T_COMMON_DLP_NOTINCLUSION"); //미포함
    }
    public string GetTransKind(string value)
    {
        if (value == "R")
            return XmlConf.GetTitle("T_COMMON_IMPORT"); //반입
        else
            return XmlConf.GetTitle("T_COMMON_EXPORT"); //반출
    }
    public string GetApproveKind(string value)
    {
        if (value == "0")
            return XmlConf.GetTitle("T_COMMON_APPROVE_BEFORE"); //선결
        else
            return XmlConf.GetTitle("T_COMMON_APPROVE_AFTER"); //후결
    }

    private string strApproveKind;          //선결,후결
    public string _strApproveKind
    {
        get { return strApproveKind; }
        set
        {
            strApproveKind = value;
            mailParam.SetApproveKindCode(value);
            doSearch();
        }
    }
    private string strTransTypeText;    //반입,반출
    public string _strTransTypeText
    {
        get { return strTransTypeText; }
        set
        {
            strTransTypeText = value;
            mailParam.SetTransKindCode(value);
            doSearch();
        }
    }
    private string strDlpValue;             //포함,미포함(dlp_flag)
    public string _strDlpValue
    {
        get { return strDlpValue; }
        set
        {
            strDlpValue = value;
            mailParam.SetDlpValueCode(value);
            doSearch();
        }
    }
    private string strTransFlag;            //전송상태(trans_flag) => TransStatus
    public string _strTransFlag
    {
        get { return strTransFlag; }
        set
        {
            strTransFlag = value;
            mailParam.SetTransStatusCode(value);
            doSearch();
        }
    }
    private string strSearchApproveStatus;   //승인상태(approve_flag, 요청취소만 trans_flag)
    public string _strSearchApproveStatus
    {
        get { return strSearchApproveStatus; }
        set
        {
            strSearchApproveStatus = value;
            mailParam.SetApprStatusCode(value);
            doSearch();
        }
    }

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransType")
            _strTransTypeText = stValue;
        else if (stOption == "ApproveKind")
            _strApproveKind = stValue;
        else if (stOption == "DlpValue")
            _strDlpValue = stValue;
        else if (stOption == "MailTransStatus")
            _strTransFlag = stValue;
        else if (stOption == "MailApproveStatus")
            _strSearchApproveStatus = stValue;
    }

    MailApprovePopUp refMailApprovePopUp;
    public int TotalCount { get; set; }
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;
    ISGSideBarUIService SideBarUISvc;

    public void ApproveAction()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strApprSeq = GetCheckApprSeq();

        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();

        string strProcID = "A";
        string strReason = "Approve";
        string strApproveSeqs = "";
        for (int i = 0; i < listData.Count; i++)
        {
            Dictionary<int, string> tmp = listData[i];
            if (tmp[100] == "true")
            {
                string temp = (tmp[2] + '\u0002');
                strApproveSeqs += temp;
            }
        }
        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs);
    }

    private async Task ApproveReject()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (GetCheckRejectPossible() != true)
        {
            strMsg = XmlConf.GetWarnMsg("W_0092"); // 후결은 반려를 할 수 없습니다./r/n다시 확인하십시오.
            ShowMessage("info", strMsg);
            return;
        }
        string strApprSeq = GetCheckApprSeq();
        if (strApprSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }
        refSGReject.ResetReason();
        refSGReject.SetGroupID(groupID);
        refSGReject.SetApprRejectEvent(ApproveRejectSend);
        await refSGReject.openPopUp();
    }

    public void ApproveRejectSend(int groupID, string strReason)
    {
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string strUserID = "";
        if (sgLoginData != null)
            strUserID = sgLoginData.GetUserID();
        string strProcID = "R";
        string strApproveSeqs = "";
        for (int i = 0; i < listData.Count; i++)
        {
            Dictionary<int, string> temp = listData[i];
            if (temp[100] == "true")
            {
                string seq = (temp[2] + '\u0002');
                strApproveSeqs += seq;
            }
        }
        HSCmdCenter.SendEmailApproveBatch(groupID, strUserID, strProcID, strReason, strApproveSeqs);
    }

    public bool GetCheckRejectPossible()
    {
        string strApprKind = "";
        string strTemp = XmlConf.GetTitle("T_COMMON_APPROVE_AFTER");        // 후결
        bool bRejectPossible = true;
        int nCount = listData.Count;
        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> temp = listData[i];
            if (temp[100] == "true")
            {
                strApprKind = temp[3];
                if (strApprKind == "1")
                {
                    bRejectPossible = false;
                    break;
                }
            }
        }
        return bRejectPossible;
    }
    public string GetCheckApprSeq()
    {
        string strApprSeq = "";
        int nCount = listData.Count;
        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> temp = listData[i];
            if (temp[100] == "true")
            {
                strApprSeq = temp[2];
            }
        }
        return strApprSeq;
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Task.Run(async () => { await doSearch(); });
        }
    }
    private async void openCustomSelect(string opt)
    {
        if (opt == "TransType")
            await refSGCustomSelect.openPopUp(opt, strTransTypeText);
        else if (opt == "ApproveKind")
            await refSGCustomSelect.openPopUp(opt, strApproveKind);
        else if (opt == "DlpValue")
            await refSGCustomSelect.openPopUp(opt, strDlpValue);
        else if (opt == "MailTransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransFlag);
        else if (opt == "MailApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strSearchApproveStatus);
    }
    @*   public void GetInitDateTime()
        {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
        }
        public async Task GetDateTime()
        {
        await RetriveDateFromJS();
        char sep = '-';
        string[] splitFrom = strFromDay.Split(sep);
        curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
        string[] splitTo = strToDay.Split(sep);
        curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
        }

        private async Task RetriveDateFromJS()
        {
        object[] param = { "datepicker11" };
        string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
        if (vStr != null && vStr.Length > 0)
        strFromDay = vStr;
        object[] param2 = { "datepicker12" };
        string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
        if (vStr2 != null && vStr2.Length > 0)
        strToDay = vStr2;
        }*@
    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    /// <summary>
    /// 개수검색 Query 결과로 호출되는 event
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void SearchCountResult(int groupId, SGData e)
    {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");
        if (listCnt == null || listCnt.Count < 1)
        {
            CLog.Here().Information("SearchCount - RECORD - empty!");
            return;
        }

        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        if (result != "0")
        {
            CLog.Here().Information($"SearchCountResult - Result : {result}, reason : {reason}");
            ShowMessage("error", reason);
            return;
        }
        if (totalCnt <= 0)
        {
            ShowMessage("warn", reason);            // 검색결과가 존재하지 않습니다.
            if (listData != null) 
                listData.Clear();
            SetPageinfo(totalCnt);
            StateHasChanged();
            return;
        }

        SetPageinfo(totalCnt);
        //리스트 쿼리 호출
        doSearchList();
    }

    public void doSearchList()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        MailApproveDao dao = new MailApproveDao();
        string strQueryList = dao.List(mailParam);
        HSCmdCenter.SendListQuery(groupID, curUserID, strQueryList);
    }
    public void SearchListResult(int groupId, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        listData = e.GetSvrRecordData2("RECORD");
        //check 관련데이타가 없어서 임으로 99:checkDisable(체크가능여부)  100:check(체크여부) 데이타를 수동 구성함
        foreach (Dictionary<int, string> item in listData)
        {
            string strApprStatusCode = item[8];
            string strApprPossible = item[15];
            string strApprStepStatus = item[16];

            if (strApprStatusCode.Equals("1"))                           // 승인대기
            {
                if (strApprPossible.Equals("0"))                         // 승인불가능
                    item.Add(99, "false");
                else
                {
                    if ((strApprStatusCode.Equals("1") == true) && (strApprStepStatus.Equals("2") == true))         // 승인대기 이지만 strApprStepStatus 값이 결재 불가능일 때
                        item.Add(99, "false");
                    else
                    {
                        item.Add(99, "true");
                    }
                }
            }
            else
            {
                item.Add(99, "false");
            }
            item.Add(100, "false");
        }
        StateHasChanged();
    }
    private async Task doSearch()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        //LIST 요청응답
        HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
        //COUNT 요청응답
        HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

        string systemid = (sgLoginData.GetSystemPosition() == true ? "I" : "E");
        mailParam.PageListCount = nPageListCount;
        mailParam.APPROVE_TYPE_SFM = sgLoginData.GetApproveTypeSFM().ToString();    //대결재 방식 지정
        mailParam.UserID = curUserID;
        mailParam.SystemId = systemid;
        mailParam.ViewPageNo = nViewPageNo;
        mailParam.Sender = strSearchSender;
        mailParam.Receiver = strSearchReceiver;
        mailParam.Title = strSearchTitle;

        mailParam.SetTransKindCode(strTransTypeText);
        mailParam.SetApproveKindCode(strApproveKind);
        mailParam.SetDlpValueCode(strDlpValue);
        mailParam.SetTransStatusCode(strTransFlag);
        mailParam.SetApprStatusCode(strSearchApproveStatus);

        @*await mailParam.SetSearchStartDate("datepicker11");
            await mailParam.SetSearchEndDate("datepickoer12");*@
        await refPeriodDatePicker.RetriveDateFromJS();
        mailParam.SetSearchStartDate(refPeriodDatePicker.FromDateSearchValue);
        mailParam.SetSearchEndDate(refPeriodDatePicker.ToDateSearchValue);

        MailApproveDao dao = new MailApproveDao();
        HSCmdCenter.SendCountQuery(groupID, curUserID, dao.TotalCount(mailParam));
        //System.Diagnostics.Debug.WriteLine(dao.TotalCount(mailParam));
        //System.Diagnostics.Debug.WriteLine(dao.List(mailParam));
    }

    private void UpdateList(int pageNumber)
    {
        nViewPageNo = pageNumber + 1;
        Task.Run(async () => { await doSearch(); });
    }

    public async Task OpenDetail(string transSeq, string apvseq, string apvenable)
    {
        await refMailApprovePopUp.openPopUp(transSeq, apvseq, apvenable);
    }
    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        //파라미터 핸들링 클래스 초기화
        mailParam.XmlConf = XmlConf;
        mailParam.jsRuntime = jsRuntime;

        InitText();

        @*GetInitDateTime();*@

        //Email 배치 승인,반려 요청에 응답 이벤트
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        HSCmdCenter.sgPageEvent.SetEmailApprBatchEvent(groupID, ApproveBatchResult);
        base.OnInitialized();
    }

    public void InitText()
    {

        strDlpValue = XmlConf.GetTitle("T_COMMON_ALL");
        strApproveKind = XmlConf.GetTitle("T_COMMON_ALL");
        strTransTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strTransFlag = XmlConf.GetTitle("T_COMMON_ALL");
        strSearchApproveStatus = XmlConf.GetTitle("T_COMMON_ALL");
    }

    public void ApproveBatchResult(int groupid, SGData e)
    {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        if (result != "0")
        {
            ShowMessage("error", reason);
            return;
        }
        ShowMessage("info", reason);
        Task.Run(async () => { await doSearch(); });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            @*object[] param = { "datepicker11", "datepicker12" };
                jsRuntime.InvokeAsync<object>("initDatePicker", param);*@
            jsRuntime.InvokeAsync<object>("initPageLeft");
            Task.Run(async () => { await doSearch(); });
        }
        @*pageService.SetDayInfoRefreshEvent(groupIDbyParam, DayInfoRefreshResult);*@
        base.OnAfterRender(firstRender);
    }

    private void HomeMove()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = "/Welcome/";
        strNavigateWithGroupID += groupID.ToString();

        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }

    }
}
