@page "/"
@using System.Diagnostics
@using OpenNetLinkApp.Services
@using System.Security.Authentication
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data.SGDicData.SGUnitData 
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc

<div class="hold-transition login-page" style="background:url('/images/adminlte/login_full.png')no-repeat center center; background-size:cover;">
    <div class="login-box  p-0 m-0" style="height:413px; width:880px !important;">
        <div class="card p-0" style="border-radius:.7rem !important; background-color:rgba(0,0,0,0.7);">
            <div class="card-body login-card-body  p-0">
                <div class="row1">
                    <div class="col-md-6 login-card-body  pt-0 pb-0" style="border-radius:.7rem 0rem 0rem .7rem !important;">
                        <ul class="full_login_left">
                            <li> <img src="/images/adminlte/SecureGate_logo.png" class="logo"></li>
                            <li>
                                <span>
                                    This is a solution providing the data transmission service <br>
                                    among networks with the highest level of security <br>
                                    in the separated network environment.
                                </span>
                            </li>
                            <li><img src="/images/adminlte/login_full_1.png" class="bg"></li>
                        </ul>
                    </div>

                    <div class="col-md-6 login-card-body" style="height:413px; border-radius:0rem .7rem .7rem 0rem !important;">

                        <div style=" width:310px;">
                            <p class="login-box-msg1" style=" padding-top:50px;color:#fff; font-size:1.5rem;">@strSystemName <span class="full_txt">@strConNetwork </span></p>



                            <input type="text" class="full-input mb-3 username" placeholder="ID" @bind="id">

                            <input type="password" class="full-input mb-2 password" placeholder="password" @bind="pw" @onkeyup="keyCheck">

                            <div class="row p-0">
                                <div class="col-md-12 mt-1 ">
                                    <div class="form-group float-right">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" style="margin-top: 0.2rem !important;">
                                            <label class="form-check-label" style="color:#fff;">@strAutoLogin</label>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-12 text-center">
                                    <button @onclick="doLogIn" class="full_login_btn btn mb-3">LOGIN</button>
                                    <div class="full_copy">COPYRIGHT &copy 2020 HANSSAK. ALL RIGHTS RESERVED</div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
</div>

@code {
    public string id { get; set; }
    public string pw { get; set; }

    public string strSystemName = "";
    public string strConNetwork = "";
    public string strAutoLogin = "";

    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    public bool bInitBaseLogin = true;

    private void keyCheck(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
            doLogIn();
    }
    private void doLogIn()
    {
        try
        {
            Console.WriteLine("ID:" + id);
            Console.WriteLine("PW:" + pw);
            HSCmdCenter.Login(0,id,pw);
            //MyNavigationManager.NavigateTo("/Transfer");
            //InitSideMenu(0);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        object[] param = { "none" };
        await JSRuntime.InvokeAsync<object>("initLogIn", param);

        await JSRuntime.InvokeAsync<object>("InitDragAndDrop");
        await JSRuntime.InvokeAsync<object>("addMouseDown");
        await JSRuntime.InvokeAsync<object>("addMouseUp");
        await JSRuntime.InvokeAsync<object>("addDragStart");

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        InitText();
        //HSCmdCenter.LoginResult_Event += LoginResult;
        int groupid = 0;
        HSCmdCenter.sgPageEvent.SetLoginEventAdd(groupid, LoginResult);
        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
    }

    public void InitText()
    {
        strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strConNetwork = XmlConf.GetTitle("T_COMMON_LOGININNER");            // 업무망
        strAutoLogin = XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX");        // 자동로그인
    }

    public void LoginResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        if (ret == 0)
        {
            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
            SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData);
            InitSideMenu(groupId);
            MyNavigationManager.NavigateTo("/Transfer");
        }
        else
        {
            string strPopupMsg = e.strMsg;
            strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
        }
    }

    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        object[] param = { "error", strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void InitSideMenu(int groupid)
    {
        string strDataTrans = XmlConf.GetTitle("T_COMMON_FILETRANS_BASIC");                     // 자료전송
        string strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                           // 파일전송
        string strTransManage = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                       // 전송관리
        string strApprManage = XmlConf.GetTitle("T_COMMON_APPROVEMANAGE");                      // 결재관리
        string strSecurityApprManage = XmlConf.GetTitle("T_COMMON_APPROVESECURITY");            // 보안결재
        string strClipboard = XmlConf.GetTitle("T_COMMON_CLIPBOARD");                           // 클립보드
        string strClipboardTransManage = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                // 클립보드 관리
        string strClipboardApprManage = XmlConf.GetTitle("T_COMMON_CLIPAPPR");                  // 클립보드 결재
        string strEmail = XmlConf.GetTitle("T_COMMON_EMAIL");                                   // 메일
        string strEmailTransManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");              // 메일 관리
        string strEmailApprManage = XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP");              // 메일 결재
        string strPCURL = XmlConf.GetTitle("T_COMMON_URL");                                     // PCURL
        string strPCURLTransManage = XmlConf.GetTitle("T_COMMON_URLMANAGE");                    // PCURL 관리
        string strPCURLApprManage = XmlConf.GetTitle("T_COMMON_URLAPPROVE");                    // PCURL 결재
        string strEnvSetInfo = XmlConf.GetTitle("T_COMMON_OPTION");                             // 환경설정.
        string strNetSetInfo = XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE");                         // 접속환경
        string strBasicSetInfo = XmlConf.GetTitle("T_ETC_BASICSET_TITLE");                      // 기본설정.

        SideBarUISvc.DeleteAllItem();
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int count = listNetWork.Count;
        //count = 1;
        for (int i = 0; i < count; i++)
        {
            int gID = listNetWork[i].GroupID;
            string strNetFromName = listNetWork[i].FromName;
            string strNetToName = listNetWork[i].ToName;

            bool bExpand = false;
            bool bActived = false;
            if (groupid == gID)
            {
                bExpand = true;
                bActived = true;
            }

            SGLoginData sgLoginData = null;
            SGUserData sgUserData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(i);
            sgUserData = (SGUserData)HSCmdCenter.GetUserData(i);

            bool bFileTransMenuUse = false;
            bool bApprMenuUse = false;
            bool bSecurityApprMenuUse = false;
            bool bPCURLUse = false;
            bool bClipBoardApprUse = false;

            if ((sgLoginData != null) && (sgUserData != null))
            {
                bFileTransMenuUse = sgLoginData.GetFileTrans();
                if (sgLoginData.GetApprove() == true)
                    if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                        bApprMenuUse = true;

                bSecurityApprMenuUse = sgUserData.GetUserPrivacyApprPos();
                bPCURLUse = sgLoginData.GetPCURLUse();
            }

            // 우선 모든 메뉴가 나오도록 임시 설정.
            bFileTransMenuUse = bApprMenuUse = bSecurityApprMenuUse = bPCURLUse = bClipBoardApprUse = true;

            SideBarUISvc.AddMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: "", badgeType: "right badge badge-success mr-3", badgeValue: "N", "", bActived, bExpand)

                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strFileTrans, icon: "fas fa-copy", path: "transfer", badgeType: "right badge badge-warning", bUse : bFileTransMenuUse)                                                                     // 파일전송
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strTransManage, icon: "fas fa-copy", path: "transManage", badgeType: "right badge badge-warning")                                                                // 전송관리
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strApprManage, icon: "fas fa-copy", path: "transferApprove", badgeType: "right badge badge-warning", bUse: bApprMenuUse)                      // 결재관리
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strSecurityApprManage, icon: "fas fa-copy", path: "transferApprove", badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse)                                                     // 보안결재관리

                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailTransManage, icon: "fas fa-envelope", path: "/mailManage", badgeType: "right badge badge-warning")                                                                 // 메일 관리
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailApprManage, icon: "fas fa-envelope", path: "/mailApprove", badgeType: "right badge badge-warning", bUse: bApprMenuUse)                                                                // 메일 결재

                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLTransManage, icon: "fas fa-globe", path: "/pcurlManage", badgeType: "right badge badge-warning", bUse :bPCURLUse)                                                       // PCURL 관리
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLApprManage, icon: "fas fa-globe", path: "/pcurlApprove", badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse))                                                       // PCURL 결재

                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardTransManage, icon: "fas fa-object-ungroup", path: "/clipBoardManage", badgeType: "right badge badge-warning" , bUse : bClipBoardApprUse)                                                          // 클립보드 관리
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardApprManage, icon: "fas fa-object-ungroup", path: "/clipBoardApprove", badgeType: "right badge badge-warning", bUse: (bClipBoardApprUse & bApprMenuUse))                                                         // 클립보드 결재

                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: "/viewConf", badgeType: "right badge badge-warning")                                                                         // 접속환경
                    .AddSubMenu(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBasicSetInfo, icon: "fas fa-cog", path: "#", badgeType: "right badge badge-warning");                                                                     // 기본설정

        }
        SideBarUISvc.EmitNotifyStateChangedActMenu();
    }

}
