@page "/LogIn"
@page "/LogIn/{srcLoc}"


@using System.Diagnostics
@using OpenNetLinkApp.Services
@using System.Security.Authentication
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSGData
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using System.Threading
@using System.Runtime.InteropServices
@using NetSparkleUpdater
@using Serilog
@using Serilog.Events
@using AgLogManager
@using System.Net.NetworkInformation
@using System.Xml
@using System.Xml.Linq
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject PageStatusService pageService
@inject OSXcmdService OSxCmdService

<div id="divLoginMain" class="hold-transition login-page" style="background:url('/images/adminlte/login_full.png')no-repeat center center; background-size:cover;">
    <div class="login-box  p-0 m-0" style="height:413px; width:880px !important;">
        <div class="card p-0" style="border-radius:.7rem !important; background-color:rgba(0,0,0,0.7);">
            <div class="card-body login-card-body  p-0">
                <div class="row1">
                    <div class="col-md-6 login-card-body  pt-0 pb-0" style="border-radius:.7rem 0rem 0rem .7rem !important;">
                        <ul class="full_login_left">
                            <li> <img src="/images/adminlte/SecureGate_logo.png" class="logo"></li>
                            <li>
                                <span>
                                    This is a solution providing the data transmission service <br>
                                    among networks with the highest level of security <br>
                                    in the separated network environment.
                                </span>
                            </li>
                            <li><img src="/images/adminlte/login_full_1.png" class="bg"></li>
                        </ul>
                    </div>

                    <div id="loginCard" class="col-md-6 login-card-body" style="height:413px; border-radius:0rem .7rem .7rem 0rem !important;">

                        <div style=" width:310px;">
                            <p class="login-box-msg1" style=" padding-top:50px;color:#fff; font-size:1.4rem;">@strSystemName <span class="full_txt">@strConNetwork </span></p>

                            <input id="loginId" type="text" class="full-input mb-3 username" placeholder="ID" @bind="id" tabindex="1" autocomplete="off">
                            @if (pageService.m_nLoginType != 5) //OTP PW 필요없음
                            {
                                <input id="loginPw" type="password" class="full-input mb-2 password" placeholder="password" @bind="pw" @onkeyup="keyCheck" tabindex="2" autocomplete="off">
                            }
                            @if (pageService.m_nLoginType == 4 || pageService.m_nLoginType == 5) //PW_OTP(4), OTP(5)
                            {
                                <input id="otp" type="text" class="full-input mb-3 password" placeholder="OTP" @bind="otp" @onkeyup="keyCheck" tabindex="3" autocomplete="off">
                            }
                            <div class="row p-0">
                                @if (bAutoLogin)
                                {
                                    <div class="col-md-12 mt-1 ">
                                        <div class="form-group float-right col-md-4">
                                            <div class="form-check" style="width:150px;">
                                                <input class="form-check-input" type="checkbox" style="margin-top: 0.2rem !important;" tabindex="4" @onclick="CheckStateChange" checked="@bAutoLoginCheck">
                                                <label class="form-check-label" style="color:#fff;width:80px;">@strAutoLogin</label>
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="col-md-12 text-center">
                                    @if (pageService.m_nLoginType != (int)eLoginType.eLOGINTYPE_AD)
                                    {
                                        @if (bViewBackButton == false)
                                        {
                                            <button id="btnLoginViewBack" @onclick="doLogIn" class="full_login_btn btn mb-3" tabindex="5" disabled="@bLoginBtnDisable">LOGIN</button>
                                        }
                                        else
                                        {
                                            <div class="col-md-12 text-center">
                                                <table style="width:100%;">
                                                    <tr>
                                                        <td>
                                                            <button id="btnLogin" @onclick="doLogIn" class="full_login_btn btn mb-3" tabindex="6" disabled="@bLoginBtnDisable">LOGIN</button>
                                                        </td>
                                                        <td>
                                                            <button id="btnLoginCancel" @onclick="doBack" class="full_cancel_btn btn mb-3" tabindex="7" disabled="@bLoginBtnDisable">Cancel</button>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        }
                                    }
                                    <div class="full_copy">COPYRIGHT &copy HANSSAK. ALL RIGHTS RESERVED</div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
</div>

<PWChange @ref="refPWChange"></PWChange>
<PWChangeDefaultPW @ref="refPWChangeDefaultPW"></PWChangeDefaultPW>
<SGAlert @ref="refSGAlert" OnCancel="SessionAlertCancel" OnConfirm="SessionAlertConfirm"></SGAlert>

@code {
    SGAlert refSGAlert;

    [Parameter]
    public string srcLoc { get; set; }                    // Login Page를 호출한 page에 대한 정보 저장

    public string id { get; set; }
    public string pw { get; set; }
    public string otp { get; set; }

    public string strSystemName = "";
    public string strConNetwork = "";
    public string strAutoLogin = "";
    public bool bViewBackButton = false;  //로그인 취소버튼 표시여부

    ISGAppConfigService AppConfigSvc;
    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGSiteConfigService siteConfig;
    ISGCtrlSideUIService CtrlSideUISvc;

    public bool bInitBaseLogin = true;
    PWChange refPWChange;
    PWChangeDefaultPW refPWChangeDefaultPW;
    SGSettingsDBProc sgSettingProc;
    public bool bAutoLogin = false;
    public bool bAutoLoginCheck = false;
    public bool bLoginBtnDisable;
    Dictionary<string, SGNetOverData> dicSysIdName = null;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<Main>();

    /// <summary>
    /// 세션중복 로그인 포기 처리
    /// </summary>
    private void SessionAlertCancel()
    {
        JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        refSGAlert.closePopUp();
    }

    /// <summary>
    /// 세션중복 로그인 진행 처리
    /// </summary>
    private void SessionAlertConfirm()
    {
        HSCmdCenter.SetAllowSessionDuplicate(refSGAlert.groupId);
        doLogIn();
    }

    /// <summary>
    /// 세션중복시 보여주는 이벤트 팝업
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    private async void ShowSessionCountPopup(int groupID, PageEventArgs e)
    {
        await refSGAlert.openPopUp(XmlConf.GetTitle("T_LOGIN_DUPLICATE"), XmlConf.GetTitle("T_LOGIN_DUPLICATE_GUIDE"), 2, groupID);
    }

    private void keyCheck(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
            doLogIn();
    }

    /// <summary>
    /// 2번째 이상 로그인을 Page형태로 구현할때 사용하려했으나, 사용않함 
    /// </summary>
    private void doBack()
    {

        // 원래 groupID의 Page로 이동
        pageService.m_nCurViewPageGroupID = pageService.m_nLastViewPageGroupID;
        //MyNavigationManager.NavigateTo(pageService.m_strLastPage);

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if (MenuItem.Child.Count > 0)
            {
            }
            else
            {
            }
        }*/

    }

    /// <summary>
    /// 
    /// </summary>
    private void doLogIn()
    {
        try
        {
            //VAlidation Check  PW_OTP(4), OTP(5)
            if (pageService.m_nLoginType == 4 || pageService.m_nLoginType == 5)
            {
                if (otp == null || otp.Length < 6)
                {
                    ShowLoginFail(XmlConf.GetTitle("T_OTP_GUIDE"));
                    bLoginBtnDisable = false;
                    return;
                }
            }

            JSRuntime.InvokeAsync<object>("loginCursorChange");

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            CLog.Information("[Main] LogIn Type:" + pageService.m_nLoginType.ToString());
            HSCmdCenter.SetCliVersion(strCurCliVersion);
            HSCmdCenter.Login(pageService.m_nCurViewPageGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    private void doADLogin()
    {
        try
        {
            JSRuntime.InvokeAsync<object>("loginCursorChange");
            id = Environment.UserName;

            //OSX의 경우 임의로 아래와 같이 처리 추후 objective-c API 찾아볼 예정
            //Linux는 아직 실제값 확인해보지 못함
            if(RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                pw = IPGlobalProperties.GetIPGlobalProperties().DomainName;
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                pw = OSxCmdService.GetOSXADConfig("Active Directory Domain");

#if DEBUG
            pw = "HsckAD.com";
#endif

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            CLog.Information("[Main] LogIn Type:" + pageService.m_nLoginType.ToString());

            HSCmdCenter.SetCliVersion(strCurCliVersion);
            HSCmdCenter.LoginAD(pageService.m_nCurViewPageGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    private void WaitForFocus()
    {
        Task.Delay(1000);
        @*if (id.Length == 0)
            {
                object[] param2 = { "loginId" };
                JSRuntime.InvokeAsync<object>("changeFocus", param2);
            }
            else
            {
                object[] param3 = { "loginPw" };
                JSRuntime.InvokeAsync<object>("changeFocus", param3);
            }*@
    }


    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        Thread waitTh = new Thread(WaitForFocus);
        waitTh.Start();
        base.OnAfterRender(firstRender);
    }


    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        object[] param = { "none" };
        await JSRuntime.InvokeAsync<object>("initLogIn", param);

        await JSRuntime.InvokeAsync<object>("InitDragAndDrop");
        await JSRuntime.InvokeAsync<object>("addMouseDown");
        await JSRuntime.InvokeAsync<object>("addMouseUp");
        await JSRuntime.InvokeAsync<object>("addDragStart");
        await JSRuntime.InvokeAsync<object>("addKeyDown");

        int groupID = pageService.m_nCurViewPageGroupID;

        if (firstRender)
        {
            //if (AppConfigSvc.GetUseGPKILogin(groupID))
            if (SGAppMgrSvc.OpConfigInfoService.GetUseGPKILogin(groupID))
            {
                if (srcLoc != "GPKI")
                    MyNavigationManager.NavigateTo("/GPKI_LogIn/1");    // login Mode로 실행
            }
            else
            {

                if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_ORIGIN)
                {
                    // ID저장
                    // if (siteConfig.GetUseLoginIDSave(groupID) == true)   // json으로 설정이동
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(groupID))
                    {
                        string strEncID = "";
                        strEncID = sgSettingProc.GetSettingUID(groupID);
                        if (strEncID == null || strEncID.Equals(""))
                            return;
                        string strID = "";
                        SGRSACrypto sgRSACrypto = new SGRSACrypto();
                        sgRSACrypto.ValueDecrypt(strEncID, out strID);
                        id = strID;
                        StateHasChanged();
                    }

                    // IDPW자동로그인
                    bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupID);      // siteConfig.  json으로 설정이동
                    if (bAutoLogin)
                        StateHasChanged();

                    if (bAutoLogin)
                    {
                        //NetConf.razor 와 맞추기 위해 아래 코드 제거 2021/06/01 YKH
                        //bAutoLoginCheck = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLoginCheck(groupID);

                        bool bAutoLoginContinue = sgSettingProc.GetSettingAutoLogin(groupID);
                        bAutoLoginCheck = bAutoLoginContinue;

                        if (bAutoLoginContinue && srcLoc != "Logout")
                            bLoginBtnDisable = true;

                        if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLoginCheck(groupID))
                            bAutoLoginCheck = true;

                        if (bAutoLoginCheck)
                            StateHasChanged();

                        if (bAutoLoginContinue)
                        {
                            bAutoLoginCheck = bAutoLoginContinue;
                            if (bAutoLoginCheck)
                                StateHasChanged();

                            string strEncID = "";
                            string strEncPW = "";
                            strEncID = sgSettingProc.GetSettingUID(groupID);
                            strEncPW = sgSettingProc.GetSettingUPW(groupID);
                            if ((strEncID == null || strEncID.Equals("")) || (strEncPW == null || strEncPW.Equals("")))
                            {
                                bLoginBtnDisable = false;
                                StateHasChanged();
                                return;
                            }

                            SGRSACrypto sgRSACrypto = new SGRSACrypto();
                            string strID = "";
                            string strPW = "";
                            sgRSACrypto.ValueDecrypt(strEncID, out strID);
                            id = strID;

                            // Logout 으로 인해 온 상황에서는 PW를 표시하지 않고, 로그인도하지 않음.
                            if (srcLoc != "Logout")
                            {
                                sgRSACrypto.ValueDecrypt(strEncPW, out strPW);
                                pw = strPW;
                            }

                            StateHasChanged();
                            await Task.Delay(500);

                            if (srcLoc != "Logout")
                                doLogIn();
                            StateHasChanged();
                        }
                    }

                }
                else if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
                {
                }

            }

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// 
    /// </summary>
    protected override void OnInitialized()
    {
        int groupid = pageService.m_nCurViewPageGroupID;
        //세션중복 이벤트 등록 2021/07/16 YKH
        HSCmdCenter.sgPageEvent.SetSessionDuplicateEventAdd(groupid, ShowSessionCountPopup);

        HSCmdCenter.sgPageEvent.SetLoginEventAdd(groupid, LoginResult);
        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;
        sgSettingProc = SGSettingsDBProc.Instance;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

        InitText();

        if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
            doADLogin();

        if (srcLoc == "Logout" && (SGAppMgrSvc.OpConfigInfoService.GetUseSelectFirstConnectNetServer() && NetWorkSvc.NetWorkInfo.Count > 1))
            MyNavigationManager.NavigateTo("/SelectNet");

    }

    /// <summary>
    /// 
    /// </summary>
    public void InitText()
    {
        strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        int groupID = pageService.m_nCurViewPageGroupID;


        @*
            SGData tmpData = null;
            tmpData = HSCmdCenter.GetSGSvrData(groupID);

            if (tmpData != null)
            {
                int systemID = 1;
                string sysID = tmpData.GetBasicTagData("SYSTEMID");
                if (!sysID.Equals(""))
                    systemID = Convert.ToInt32(sysID);
                if (systemID == 1)
                    strConNetwork = XmlConf.GetTitle("T_COMMON_LOGININNER");            // 업무망
                else
                    strConNetwork = XmlConf.GetTitle("T_COMMON_LOGINOUTER");            // 인터넷망
            }
            else
                strConNetwork = XmlConf.GetTitle("T_COMMON_LOGININNER");            // 업무망
        *@


        // 접속하는 망 정보는 NetWork.json 의 string 사용으로 일원화
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == groupID)
            {
                strConNetwork = listNetWork[nIdx].FromName;
                break;
            }
        }

        strAutoLogin = XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX");        // 자동로그인
    }


    /// <summary>
    /// 3망일때에는 NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 수정해서 표현
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="dicSystemIdName"></param>
    public void ChangeNetOverTitle(int nGroupID, Dictionary<string, SGNetOverData> dicSystemIdName)
    {

        if (dicSystemIdName == null || dicSystemIdName.Count < 2)
            return;

        // string strNetOverDestTitle = "";

        // NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 전부 수정해서 표현
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        /*for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                listNetWork[nIdx].FromName = "";
                listNetWork[nIdx].ToName = "";

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx != 0 && item.Key.Length > 0)
                    {
                        if (strNetOverDestTitle.Length > 0)
                            strNetOverDestTitle += ",";

                        strNetOverDestTitle += item.Key;
                    }

                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }
                }

                if (strNetOverDestTitle.Length > 0)
                    listNetWork[nIdx].ToName = strNetOverDestTitle;
            }
        }*/

        // 왼쪽 SideBar 에서 도착하는 곳만 "다중망"으로 표현, 시작하는 곳 이름은 Server에서 받은 망이름(NETOVERMODE) 사용
        // Welcome(대쉬보드)에서 표현은 시작망이름은 망이름(NETOVERMODE) 사용, 도착망이름은 망이름(NETOVERMODE)에서 1번째 도달하는 망이름 사용
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }

                    if (item.Value.nIdx == 1 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].ToName = item.Key;
                    }
                }

                // 다중망 양 끝단이 아닐때는 도착지를 "다중망"으로 표기하지 않음
                if (pageService.m_bIsMultiNetWork == false)
                    listNetWork[nIdx].ToName = XmlConf.GetTitle("T_RECV_SIDE_TITLE");
                return;
            }
        }


    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public async void LoginResult(int groupId, PageEventArgs e)
    {
        await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        int ret = e.result;
        if (ret == 0)
        {

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);

            pageService.ConnectCountAdd(groupId);
            pageService.SetConnectStatus(groupId, true);
            pageService.SetLogoutStatus(groupId, false);

            CLog.Here().Information($"groupID : {groupId} - User Do Login(GPKI_Main), UrlRedirection LogIn State ReSet !!!");
            HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupId, true);


            /*
            if (ClientPatch(sgLoginData))
            {
                string strSvrVersion = sgLoginData.GetServClientVersion();
                refUpdate_PopUp.SetVersionText(strSvrVersion);
                refUpdate_PopUp.SetType(0);
                refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                await refUpdate_PopUp.openPopUp();
                return;
            }
            */
            SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData);

            // 3중망 정보 적용
            dicSysIdName = new Dictionary<string, SGNetOverData>();

            if (sgLoginData.GetUseOverNetwork2())
            {

                if (sgLoginData.GetOverNetwork2Data(ref dicSysIdName, pageService.m_bIsMultiNetWork))
                {
                    pageService.SetTargetSystemList(groupId, dicSysIdName);

                    // 3중망이상일때, 왼쪽Sidebar 포함 도착망이름 변경
                    if (dicSysIdName != null && dicSysIdName.Count > 1)
                    {
                        ChangeNetOverTitle(groupId, dicSysIdName);
                    }
                }
            }

            // CLIENT_ZIP_DEPTH 정보 가져옴
            SGQueryExtend sgQueryExtend = null;
            sgQueryExtend = new SGQueryExtend();
            if (sgQueryExtend != null)
            {
                string strQuery = sgQueryExtend.GetZipDepthSQLsystemEnv();
                HSCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);
            }

            InitSideMenu(groupId);

            // MyNavigationManager.NavigateTo("/Welcome");


            bool bUseClipBoard = sgLoginData.GetClipboard();
            if (bUseClipBoard)
            {
                List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                // 단일 - 다중망일때 처리
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                    bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                    bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                    bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                    Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                }
                else
                {
                    Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKey);
                }

                // 3중망일때, Clipboard 단축키 처리
                if (sgLoginData.GetUseOverNetwork2() && dicSysIdName != null && dicSysIdName.Count > 1)
                {

                    bool bUseClipNetOverALL = true;

                    foreach (var item in dicSysIdName)
                    {
                        // 1번재 상대편 망으로 전송은 위에 기존 Code로 처리
                        if (item.Value.nIdx > 1 && item.Value.bUseClipTrans)
                        {
                            // listModKey = AppConfigSvc.GetClipBoardModifierWhen(groupId);

                            listModKey = AppConfigSvc.GetClipBoardModifierWhenNetOver(groupId, item.Value.nIdx);
                            chVKey = ' ';
                            chVKey = AppConfigSvc.GetClipBoardVKeyWhenNetOver(groupId, item.Value.nIdx, NetWorkSvc.NetWorkInfo.Count, dicSysIdName.Count);

                            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                            {
                                bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                                bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                                bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                                bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                                Window.WinRegClipboardHotKeyNetOver(groupId, bAlt, bCtrl, bShift, bWin, chVKey, item.Value.nIdx);
                            }
                            else
                            {
                                Window.RegClipboardHotKeyNetOver(groupId,
                                                listModKey[(int)HOTKEY_MOD.ALT],
                                                listModKey[(int)HOTKEY_MOD.CTRL],
                                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                                chVKey, item.Value.nIdx);
                            }

                            // 3망 사용 중이지 않다가 갑자가 사용으로 설정변경시 단축키 저장
                            CtrlSideUISvc.SetClipBoardHotKeyNetOver(groupId, item.Value.nIdx,
                                                            listModKey[(int)HOTKEY_MOD.WINDOW],
                                                            listModKey[(int)HOTKEY_MOD.CTRL],
                                                            listModKey[(int)HOTKEY_MOD.ALT],
                                                            listModKey[(int)HOTKEY_MOD.SHIFT],
                                                            chVKey);
                        }

                        // 한곳이라도 clipboard 사용하지 않으면 Both 기능 사용않함
                        if (item.Value.nIdx > 0 && item.Value.bUseClipTrans == false)
                            bUseClipNetOverALL = false;
                    }

                    // 3중망 - 동시에 수신망 전체에 전송
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseNetOverAllsend() && bUseClipNetOverALL && NetWorkSvc.NetWorkInfo.Count < 2)
                    {
                        // 3중망, clipboard 단축키 추가작업필요
                        listModKey = AppConfigSvc.GetClipBoardModifierWhenNetOver(groupId, 0);
                        chVKey = ' ';
                        chVKey = AppConfigSvc.GetClipBoardVKeyWhenNetOver(groupId, 0, NetWorkSvc.NetWorkInfo.Count, dicSysIdName.Count);

                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                            bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                            bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                            bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                            Window.WinRegClipboardHotKeyNetOver(groupId, bAlt, bCtrl, bShift, bWin, chVKey, 0);
                        }
                        else
                        {
                            Window.RegClipboardHotKeyNetOver(groupId,
                                            listModKey[(int)HOTKEY_MOD.ALT],
                                            listModKey[(int)HOTKEY_MOD.CTRL],
                                            listModKey[(int)HOTKEY_MOD.SHIFT],
                                            listModKey[(int)HOTKEY_MOD.WINDOW],
                                            chVKey, 0);
                        }

                        // 3망 사용 중이지 않다가 갑자가 사용으로 설정변경시 단축키 저장
                        CtrlSideUISvc.SetClipBoardHotKeyNetOver(groupId, 0,
                                                        listModKey[(int)HOTKEY_MOD.WINDOW],
                                                        listModKey[(int)HOTKEY_MOD.CTRL],
                                                        listModKey[(int)HOTKEY_MOD.ALT],
                                                        listModKey[(int)HOTKEY_MOD.SHIFT],
                                                        chVKey);
                    }

                }



            }


            DateTime dt = sgLoginData.GetSvrTimeConvert();
            pageService.SetSvrTime(groupId, dt);
            bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
            bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
            pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
            pageService.SetAfterApprEnable(groupId, bAfterApprEnable);

            Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
            int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
            Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
            int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
            pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);

            // 서버에서 받은 화면잠금 시간 설정
            ScreenTimeInitNotiEvent screenTimeInitEvent = HSCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
            if (screenTimeInitEvent != null)
            {
                ConfigArgs config = new ConfigArgs();
                config.ScreenTime = sgLoginData.GetSCRLimit();
                screenTimeInitEvent(groupId, config);
            }

            HsNetWork hsNetWork = null;
            hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
            if (hsNetWork != null)
            {
                pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
                pageService.SetCurUserPassWD(groupId, pw);
            }

            SGSettingData sgSettingData = null;
            sgSettingData = sgSettingProc.SelectSettingData(groupId);
            if (sgSettingData == null)
                sgSettingProc.InsertSettingData(groupId, "", "", "", "", 0);


            string strNavigatePathWithGroupID = "";

            // GPKI Login
            if (srcLoc == "GPKI")
                strNavigatePathWithGroupID = "/GPKI_LogIn/2";    // Register Mode로 실행
            // IDPW
            else if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_ORIGIN)
            {

                // if (siteConfig.GetUseAutoLogin(groupId) == true)
                if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupId))
                {
                    if (bAutoLoginCheck)
                    {
                        SGRSACrypto sgRSACrypto = new SGRSACrypto();
                        string strEncID = "";
                        string strEncPW = "";
                        if ((!id.Equals("")) & (id != null) & (!pw.Equals("")) & (pw != null))
                        {
                            sgRSACrypto?.ValueEncrypt(id, out strEncID);
                            sgRSACrypto?.ValueEncrypt(pw, out strEncPW);

                            sgSettingProc.SetSettingUID(groupId, strEncID);
                            sgSettingProc.SetSettingUPW(groupId, strEncPW);
                            sgSettingProc.SetSettingAutoLogin(groupId, true);
                        }
                    }
                    else
                    {
                        sgSettingProc.SetSettingAutoLogin(groupId, false);
                    }

                }


                // if (siteConfig.GetUseLoginIDSave(groupId) == true)
                if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(groupId))
                {
                    SGRSACrypto sgRSACrypto = new SGRSACrypto();
                    string strEncID = "";
                    sgRSACrypto.ValueEncrypt(id, out strEncID);
                    sgSettingProc.SetSettingUID(groupId, strEncID);
                }


                //초기패스워드 설정이면 패스워드 재설정 강제하는 부분이나 TOSS 요청으로 해당로직 제거함 시작 2021/07/05 YKH
                @*if (GetInitPWLogin(groupId) == true)
                    {
                        pageService.SetPassWDChgType(groupId, ePassWDType.eINITPASSWDCHG);
                        refPWChangeDefaultPW.nGroupID = groupId;
                        await refPWChangeDefaultPW.openPopUp();
                        return;
                    }*@
                //초기패스워드 설정이면 패스워드 재설정 강제하는 부분이나 TOSS 요청으로 해당로직 제거함 종료

                if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eNone)
                {

                }
                else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eEnforce)
                {
                    // password 강제변경 창
                    pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                    refPWChange.nGroupID = groupId;
                    refPWChange.Init();
                    await refPWChange.openPopUp();
                    return;
                }
                else
                {

                    // password 변경권고 창 띄울지 검사
                    string strTime = "";
                    sgSettingData = sgSettingProc.SelectSettingData(groupId);
                    if (sgSettingData == null)
                    {
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        refPWChange.nGroupID = groupId;
                        refPWChange.Init();
                        await refPWChange.openPopUp();
                        return;
                    }

                    strTime = sgSettingProc.GetSettingDelayDspPw(groupId);
                    if (strTime.Equals(""))
                    {
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        refPWChange.nGroupID = groupId;
                        refPWChange.Init();
                        await refPWChange.openPopUp();
                        return;
                    }

                    SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
                    string strUserSeq = sgUserData.GetUserSequence();
                    strTime = sgPassWDData.LoaclPassWDDelayLoadString(strTime, strUserSeq);

                    if (strTime.Equals(""))
                    {
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        refPWChange.nGroupID = groupId;
                        refPWChange.Init();
                        await refPWChange.openPopUp();
                        return;
                    }

                    DateTime dtLocalTime = DateTime.Parse(strTime);
                    DateTime svrDt = sgLoginData.GetSvrTimeDayConvert();

                    if (DateTime.Compare(dtLocalTime, svrDt) < 0)
                    {
                        pageService.SetPassWDChgType(groupId, ePassWDType.eDAYPASSWDCHG);
                        refPWChange.nGroupID = groupId;
                        refPWChange.Init();
                        await refPWChange.openPopUp();
                        return;
                    }

                }


            }
            else if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
            {

            }

            if (srcLoc != "GPKI")
            {
                strNavigatePathWithGroupID = SGAppMgrSvc.OpConfigInfoService.GetMainPage() + "/";

                // 파일전송 화면이면 직전에 방문했던 Page를 찾아서 거기로 이동하게 함
                string strNavigateUrl = strNavigatePathWithGroupID.ToLower();
                if (strNavigateUrl.IndexOf("transfer") > 0)
                {
                    strNavigateUrl = pageService.GetFileTransPage(groupId);
                    if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                        strNavigatePathWithGroupID = strNavigateUrl;
                    else
                        strNavigatePathWithGroupID = "/Transfer/";
                }

                strNavigatePathWithGroupID += groupId.ToString();
            }
            //else if (siteConfig.GetUseDashBoard())
            //{
            //    strNavigatePathWithGroupID = "/Welcome/";
            //    strNavigatePathWithGroupID += groupId.ToString();
            //}
            //else
            //{
            //    strNavigatePathWithGroupID = "/Transfer/";
            //    strNavigatePathWithGroupID += groupId.ToString();
            //}

            // Clipboard 단축키 및 HeaderUI에서 바로 클립보드를 전송할 수 있으므로 사후결재 관련 현재상태값을 로그인후 바로 저장
            SaveAfterApproveCheckBoxStatus(groupId);

            MyNavigationManager.NavigateTo(strNavigatePathWithGroupID);

            //if (AppConfigSvc.GetStartTrayMove())
            if (SGAppMgrSvc.OpConfigInfoService.GetStartTrayMove())
            {
                if (pageService.GetConnectCount(groupId) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                {
                    string strTitle = XmlConf.GetTitle("T_ETC_TRAYMOVE");                                                   // 트레이 이동.
                    string strInfoMsg = XmlConf.GetInfoMsg("I_0051");                                                       // 트레이 아이콘으로 이동합니다.
                    Window.Notification(OS_NOTI.ONLINE, strTitle, strInfoMsg);
                    Window.MoveWebWindowToTray();
                }
                else
                    Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            }
            else
            {
                Window.Notification(OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
            }


            CtrlSideEvent ctrlSideEvent = null;
            ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
            if (ctrlSideEvent != null)
                ctrlSideEvent();

            // Move WebWindow To Tray.
            //if (AppConfigSvc.GetStartTrayMove()) Window.MoveWebWindowToTray();
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
            bLoginBtnDisable = false;
            string strPopupMsg = e.strMsg;
            strPopupMsg = strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
            HSCmdCenter.SendLogOut(groupId, "");
            StateHasChanged();
        }

    }

    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void InitSideMenu(int groupid)
    {
        string strDataTrans = XmlConf.GetTitle("T_COMMON_FILETRANS_BASIC");                     // 자료전송
        string strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                           // 파일전송
        string strTransManage = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                       // 전송관리
        string strApprManage = XmlConf.GetTitle("T_COMMON_APPROVEMANAGE");                      // 결재관리
        string strSecurityApprManage = XmlConf.GetTitle("T_COMMON_APPROVESECURITY");            // 보안결재
        string strClipboard = XmlConf.GetTitle("T_COMMON_CLIPBOARD");                           // 클립보드
        string strClipboardTransManage = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                // 클립보드 관리
        string strClipboardApprManage = XmlConf.GetTitle("T_COMMON_CLIPAPPR");                  // 클립보드 결재
        string strEmail = XmlConf.GetTitle("T_COMMON_EMAIL");                                   // 메일
        string strEmailTransManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");              // 메일 관리
        string strEmailApprManage = XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP");              // 메일 결재
        string strPCURL = XmlConf.GetTitle("T_COMMON_URL");                                     // PCURL
        string strPCURLTransManage = XmlConf.GetTitle("T_COMMON_URLMANAGE");                    // PCURL 관리
        string strPCURLApprManage = XmlConf.GetTitle("T_COMMON_URLAPPROVE");                    // PCURL 결재
        string strEnvSetInfo = XmlConf.GetTitle("T_COMMON_OPTION");                             // 환경설정.
        string strNetSetInfo = XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE");                         // 접속환경
        string strBasicSetInfo = XmlConf.GetTitle("T_ETC_BASICSET_TITLE");                      // 기본설정.
        string strBoardNotiInfo = XmlConf.GetTitle("T_COMMON_NOTIFY");                          // 공지사항

        SideBarUISvc.DeleteAllItem();
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int count = listNetWork.Count;


        // 첫번째 접속된곳과 동일하거나, groupid 설정값에 따라 가도록 for 밖으로 빼놓는다
        bool bFileTransMenuUse = false;
        bool bApprMenuUse = false;
        bool bSecurityApprMenuUse = false;
        bool bPCURLUse = false;
        bool bUseClipBoardManageUI = false;
        bool bUseClipBoardApproveUI = false;
        bool bEmailUse = false;
        bool bPublicBoard = false;
        bool bBasicConf = false;
        bool bDeputyApprove = false;
        int nUseNetOverFileTrans = -1;  // -1 : 3망상황아님, 0 : 3망상황에서 파일전송 모든곳에 미사용, 1 : 3망상황에서 파일전송 1곳에서라도 사용
        bool bHanssakOTP = false;       //OTP 팝업메뉴 표시여부
        int nApproveProxy = 1; //대결재사용여부 1:고장결재자,대결사용  2:결재자선택
                               // 파일전송 사용권한 확인
        if (dicSysIdName != null && dicSysIdName.Count > 1)
        {
            nUseNetOverFileTrans = 0;
            foreach (var item in dicSysIdName)
            {

                if ((item.Value.strDestSysid.Length > 0 && item.Value.bUseFileTrans && item.Key.Length > 0) &&
                   ((pageService.m_bIsMultiNetWork && item.Value.nIdx == 1) || (pageService.m_bIsMultiNetWork == false && item.Value.nIdx != 0)))

                //if (item.Value.bUseFileTrans)
                {
                    nUseNetOverFileTrans = 1;
                    break;
                }
            }
        }
        //메뉴루프 시작
        for (int i = 0; i < count; i++)
        {
            int gID = listNetWork[i].GroupID;
            string strNetFromName = listNetWork[i].FromName;
            string strNetToName = listNetWork[i].ToName;

            bool bExpand = false;
            bool bActived = false;
            if (groupid == gID)
            {
                bExpand = true;
                bActived = true;
            }

            SGLoginData sgLoginData = null;
            SGUserData sgUserData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(i);
            sgUserData = (SGUserData)HSCmdCenter.GetUserData(i);

            if (sgLoginData != null && sgUserData != null)
            {
                bHanssakOTP = sgLoginData.GetTagValue("OTP");
                bFileTransMenuUse = sgLoginData.GetFileTrans();

                //보안결재 사용여부
                bSecurityApprMenuUse = sgLoginData.GetTagValue("PRIVACYAPPROVE");
                if (bSecurityApprMenuUse)
                {
                    if (sgUserData.GetUserPrivacyApprPos())
                        bSecurityApprMenuUse = true;
                    else
                        bSecurityApprMenuUse = false;
                }
                nApproveProxy = sgLoginData.GetTagValueInteger("APPROVEPROXY"); //대결사용여부 1:사용, 2:결재자선택

                //if (sgLoginData.GetApprove() == true)
                // 3망 정책고려한 결재사용유무 설정
                if (pageService.GetUseApproveNetOver(groupid, sgLoginData) && SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI() == false) // 결재관리 UI 않나오는 설정추가
                    if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserData.GetUserApprpos() > 0))
                        bApprMenuUse = true;

                //bSecurityApprMenuUse = sgUserData.GetUserPrivacyApprPos();
                bPCURLUse = sgLoginData.GetPCURLUse();

            }

            // 3망 상황 - 파일전송 UI view 설정 확인
            if (nUseNetOverFileTrans > -1)
            {
                if (nUseNetOverFileTrans == 0)
                    bFileTransMenuUse = false;
                else
                    bFileTransMenuUse = true;
            }

            @*string strRootPath = "/Welcome";
            if (!siteConfig.GetUseDashBoard())
                strRootPath = "/Transfer";*@

            // 파일전송화면 이면 저장했던 위치를 찾아서 사용한다. (AppOPsetting.json 의 enMainPageType : 2 이면, 파일전송 화면이됨, 다른값:DashBoard)
            string strRootPath = SGAppMgrSvc.OpConfigInfoService.GetMainPage() + "/";
            string strNavigateUrl = strRootPath.ToLower();
            if (strNavigateUrl.IndexOf("transfer") > 0)
            {
                strNavigateUrl = pageService.GetFileTransPage(groupid);
                if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                    strRootPath = strNavigateUrl;
                else
                    strRootPath = "/Transfer/";
            }

            // siteConfig. json으로 이동
            bEmailUse = SGAppMgrSvc.OpConfigInfoService.GetUseEmailManageApprove(groupid);
            //bEmailUse = AppConfigSvc.GetEmailApproveUse();

            bPCURLUse = SGAppMgrSvc.OpConfigInfoService.GetUsePCURL(groupid);

            bUseClipBoardManageUI = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipManageUI(groupid);
            bUseClipBoardApproveUI = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipApproveUI(groupid);
            //bUseClipBoardManageUI = AppConfigSvc.GetClipboardManageUse();

            bPublicBoard = SGAppMgrSvc.OpConfigInfoService.GetUsePublicBoard(groupid);


            bDeputyApprove = false;
            if (sgLoginData != null)
                bDeputyApprove = sgLoginData.GetDeputyApprove();

            bool bCertSend = SGAppMgrSvc.OpConfigInfoService.GetUseCertSend(groupid);            // siteConfig - json으로 설정이동
            bool bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupid);

            bBasicConf = (bDeputyApprove | bCertSend | bAutoLogin);

            int nParentID = 0;
            // int nParentID = LastParentID;

            // 우선 모든 메뉴가 나오도록 임시 설정.
            //bFileTransMenuUse = bApprMenuUse = bSecurityApprMenuUse = bPCURLUse = bUseClipBoardApproveUI = bUseClipBoardManageUI = bEmailUse = bPublicBoard = true;

            string strNavigatePathWithGroupID = "";
            string strUserSeq = "";
            if (sgUserData != null)
                strUserSeq = sgUserData.GetUserSequence();

            if (pageService.GetConnectStatus(i) == false)
            {

                strNavigatePathWithGroupID = strRootPath;
                strNavigatePathWithGroupID += gID.ToString();

                SideBarUISvc.AddRoot(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: strNavigatePathWithGroupID, badgeType: "right badge badge-danger", badgeValue: "N", "", bActived, bExpand, strUserSeq);
                nParentID++;
            }
            else
            {
                strNavigatePathWithGroupID = strRootPath;
                strNavigatePathWithGroupID += gID.ToString();

                SideBarUISvc.AddRoot(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: strNavigatePathWithGroupID, badgeType: "right badge badge-danger", badgeValue: "N", "", bActived, bExpand, strUserSeq);

                if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                    SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // Menu index는 list index가 아니므로, 메뉴 구분용도로 만 사용하면됨.
                // 파일전송(0)
                strNavigatePathWithGroupID = "/transfer/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strFileTrans, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bFileTransMenuUse, strUserSeq: strUserSeq);

                // 전송관리(1)
                strNavigatePathWithGroupID = "/transManage/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                    pageService.m_TransMenuArray[gID] = SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strTransManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", strUserSeq: strUserSeq);

                // 결재관리(2)
                strNavigatePathWithGroupID = "/transferApprove/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                    pageService.m_approveMenuArray[gID] = SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bApprMenuUse, strUserSeq: strUserSeq);

                // 보안결재관리(3)
                if (bSecurityApprMenuUse)
                {
                    strNavigatePathWithGroupID = "/securityApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strSecurityApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse, strUserSeq: strUserSeq);
                }

                //파일검사 예외 신청(4)
                if (SGAppMgrSvc.OpConfigInfoService.GetUseFileCheckException())
                {
                    strNavigatePathWithGroupID = "/fileException/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 4) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 4, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_FILE_EXCEPTION"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);              // 파일검사 예외 신청
                }

                //대결재관리(5)
                if ((nApproveProxy == 1 || nApproveProxy == 3) && sgUserData.GetUserApprpos() > 0)
                {
                    strNavigatePathWithGroupID = "";    //안씀
                    //strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 4) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 4, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_PROXY_PROXYREG_MANAGE"), icon: "fas fa-cog", path: "POPUP('DEPUTY')", badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strUserSeq);
                }


                if (bEmailUse)
                {
                    // 메일 관리
                    nParentID++;
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse, strUserSeq: strUserSeq);

                    // 메일 관리(0)
                    strNavigatePathWithGroupID = "/mailManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailTransManage, icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bEmailUse, strUserSeq: strUserSeq);

                    // 메일 결재(1)
                    strNavigatePathWithGroupID = "/mailApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailApprManage, icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse), strUserSeq: strUserSeq);
                }

                if (bPCURLUse)
                {
                    // PCURL 관리
                    nParentID++;
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strUserSeq);

                    // PCURL 관리
                    strNavigatePathWithGroupID = "/pcurlManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLTransManage, icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strUserSeq);

                    // PCURL 결재
                    strNavigatePathWithGroupID = "/pcurlApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLApprManage, icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse), strUserSeq: strUserSeq);
                }

                if (bUseClipBoardManageUI)
                {
                    // 클립보드 관리
                    nParentID++;
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bUseClipBoardManageUI, strUserSeq: strUserSeq);

                    // 클립보드 관리
                    strNavigatePathWithGroupID = "/clipBoardManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardTransManage, icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bUseClipBoardManageUI, strUserSeq: strUserSeq);


                    if (bUseClipBoardApproveUI)
                    {
                        // 클립보드 결재
                        strNavigatePathWithGroupID = "/clipBoardApprove/";
                        strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardApprManage, icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bUseClipBoardApproveUI & bApprMenuUse), strUserSeq: strUserSeq);
                    }

                }

                // 접속환경
                nParentID++;
                strNavigatePathWithGroupID = "/viewConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                    SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // 공지사항(0)
                strNavigatePathWithGroupID = "/publicBoard/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBoardNotiInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPublicBoard, strUserSeq: strUserSeq);

                // 접속환경(1)
                strNavigatePathWithGroupID = "/viewConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // 기본설정(2)
                if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_ORIGIN)
                {
                    strNavigatePathWithGroupID = "/netConf/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBasicSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strUserSeq);
                }

                //OTP 팝업메뉴(3)
                if (bHanssakOTP)
                {
                    strNavigatePathWithGroupID = "/hanssakOTP/";    //안씀
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_COMMON_OTP"), icon: "fas fa-cog", path: "POPUP('OTP')", badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strUserSeq);
                }
            }

        }

        SideBarUISvc.EmitNotifyStateChangedActMenu();

    }

    public bool GetInitPWLogin(int groupID)
    {
        string strInitPW = SGAppMgrSvc.OpConfigInfoService.GetInitPasswordInfo(groupID);

        SGRSACrypto sgRSACrypto = new SGRSACrypto();

        string strEncPW = "";
        sgRSACrypto.ValueEncrypt(pw, out strEncPW);
        if (strEncPW.Equals(strInitPW))
            return true;
        return false;
    }

    public void CheckStateChange()
    {
        bAutoLoginCheck = (!bAutoLoginCheck);
        if (!bAutoLoginCheck)
        {
            bLoginBtnDisable = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 사후결재 사용유무에 대한 초기 checkBox의 check 상태 유무를 저장
    /// (파일전송화면 이동전에 클립보드전송 가능하므로)
    /// </summary>
    /// <param name="groupID"></param>
    public void SaveAfterApproveCheckBoxStatus(int groupID)
    {


    }

    /*
    public bool ClientPatch(SGLoginData sgLoginData)
    {

        if (sgLoginData == null)
            return false;
        bool bUpdate = sgLoginData.GetClientUpgrade();
        if (!bUpdate)
            return false;

        string strSvrCliVersion = sgLoginData.GetServClientVersion();
        if (strSvrCliVersion.Equals(""))
            return false;
        strSvrCliVersion = strSvrCliVersion.ToUpper();

        string strCliVersion = HSCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
            return false;
        strCliVersion = strCliVersion.ToUpper();

        //return true;

        if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
        {
            return true;
        }
        else
            return false;

    }
    */

}
