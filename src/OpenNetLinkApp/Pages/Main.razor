@page "/LogIn"
@page "/LogIn/{srcLoc}"
@page "/LogIn/{srcLoc}/{srcArgs}"


@using System.Diagnostics
@using OpenNetLinkApp.Services
@using System.Security.Authentication
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSGData
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using OpenNetLinkApp.Common
@using OpenNetLinkApp.LoginMethod
@using System.Threading
@using System.Runtime.InteropServices
@using NetSparkleUpdater
@using Serilog
@using Serilog.Events
@using AgLogManager
@using System.Net.NetworkInformation
@using System.Xml
@using System.Xml.Linq
@using OpenNetLinkApp.Common
@using System.Collections.Concurrent;
@using System.Text.Json;

@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject PageStatusService pageService
@inject OSXcmdService OSxCmdService

<div id="divLoginMain" class="hold-transition login-page" style="background:url('/images/adminlte/login_full.png')no-repeat center center; background-size:cover;">

    <div class="login-box  p-0 m-0" style="height:413px; width:@(bHiddenLogoMode?440:880)px !important;">

        <div class="card p-0" style="border-radius:.7rem !important; background-color:rgba(0,0,0,0.7);">
            <div class="card-body login-card-body  p-0">
                <div class="row1">

                    @if (bHiddenLogoMode == false)
                    {
                        <div class="col-md-6 login-card-body  pt-0 pb-0" style="border-radius:.7rem 0rem 0rem .7rem !important;">
                            <ul class="full_login_left">
                                <li> <img src="/images/adminlte/SecureGate_logo.png" class="logo"></li>
                                <li>
                                    <span>
                                        This is a solution providing the data transmission service <br>
                                        among networks with the highest level of security <br>
                                        in the separated network environment.
                                    </span>
                                </li>
                                <li><img src="/images/adminlte/login_full_1.png" class="bg"></li>
                            </ul>
                        </div>
                    }

                    <div id="loginCard" class="col-md-6 login-card-body" style="height:413px; border-radius:0rem .7rem .7rem 0rem !important;">

                        <div style=" width:310px; margin-left:@(bHiddenLogoMode?15:0)px ">
                            @if (bUseLoginCI)
                            {
                                <img src="/images/ci/sitelogo.png" style="width:60px; height:60px; margin-right:auto; margin-left:auto; display:block">
                            }

                            <p class="login-box-msg1" style="padding-top:@(bUseLoginCI ? 20 : 50)px;color:#fff; font-size:@(strLoginTextFontSize);">
                                @*<img src="/images/ci/sitelogo.png" style="width:50px; height:50px; margin-right:auto; margin-left:auto; display:block">*@
                                @strSystemName <span class="full_txt">@strConNetwork</span>
                            </p>

                            <input id="loginId" type="text" class="full-input mb-3 username" placeholder="ID" readonly="@(pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)" @bind="@id" tabindex="1" autocomplete="off">

                            @if (pageService.m_nLoginType != 5 && srcLoc != "OKTA" && SGAppMgrSvc.OpConfigInfoService.GetNACLoginType(0) != (int)Enums.enumNacLoginType.Genian) //OTP PW 필요없음
                            {
                                //AD 로그인은 PW 사용자 입력 불가 (Readonly)
                                <input id="loginPw" type="password" class="full-input mb-2 password" placeholder="password" readonly="@(pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)" value="@pw" @oninput="@(e => pw = e.Value.ToString())" @onkeyup="keyCheck" tabindex="2" autocomplete="off">
                            }
                            else if (SGAppMgrSvc.OpConfigInfoService.GetNACLoginType(0) == (int)Enums.enumNacLoginType.Genian && (srcLoc == "Logout" || !SGSystemService.IsStartedByNAC()))
                            {
                                //Genian NAC은 NAC 인자에 의해 실행되지 않을때는 PW 표시
                                <input id="loginPw" type="password" class="full-input mb-2 password" placeholder="password" value="@pw" @oninput="@(e => pw = e.Value.ToString())" @onkeyup="keyCheck" tabindex="2" autocomplete="off">
                            }

                            @if (pageService.m_nLoginType == 4 || pageService.m_nLoginType == 5) //PW_OTP(4), OTP(5)
                            {
                                <input id="otp" type="text" class="full-input mb-3 password" placeholder="OTP" value="@otp" @oninput="@(e=>otp = e.Value.ToString())" @onkeyup="keyCheck" tabindex="3" autocomplete="off">
                            }
                            <div class="row p-0">
                                @if (bAutoLogin)
                                {
                                    <div class="col-md-12 mt-1 ">
                                        <div class="form-group float-right col-md-4">
                                            <div class="form-check" style="width:150px;">
                                                <input class="form-check-input" type="checkbox" style="margin-top: 0.2rem !important;" tabindex="4" @onclick="CheckStateChange" checked="@bAutoLoginCheck">
                                                <label class="form-check-label" style="color:#fff;width:80px;">@strAutoLogin</label>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (bIDSave)
                                {
                                    <div class="col-md-12 mt-1 ">
                                        <div class="form-group float-right col-md-4">
                                            <div class="form-check" style="width:150px;">
                                                <input class="form-check-input" type="checkbox" style="margin-top: 0.2rem !important;" tabindex="4" @onclick="SaveIDCheckStateChange" checked="@bIDSaveCheck">
                                                <label class="form-check-label" style="color:#fff;width:80px;">@strIDSave</label>
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="col-md-12 text-center">
                                    @*@if (pageService.m_nLoginType != (int)eLoginType.eLOGINTYPE_AD)*@
                                    @*{*@

                                    @if (bViewBackButton == false)
                                    {
                                        <button id="btnLoginViewBack" @onclick="ClickdoLogin" class="full_login_btn btn mb-3" tabindex="5" disabled="@bLoginBtnDisable">LOGIN</button>
                                    }
                                    else
                                    {
                                        <div class="col-md-12 text-center">
                                            <table style="width:100%;">
                                                <tr>
                                                    <td>
                                                        <button id="btnLogin" @onclick="ClickdoLogin" class="full_login_btn btn mb-3" tabindex="6" disabled="@bLoginBtnDisable">LOGIN</button>
                                                    </td>
                                                    <td>
                                                        <button id="btnLoginCancel" @onclick="doBack" class="full_cancel_btn btn mb-3" tabindex="7" disabled="@bLoginBtnDisable">Cancel</button>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    }

                                    @*}*@
                                    <div class="full_copy">COPYRIGHT &copy HANSSAK. ALL RIGHTS RESERVED</div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
</div>

<PWChange @ref="refPWChange" Guid="modal-pwchange-main" basicPageType=(int)Enums.EnumBasicPageType.Main></PWChange>
<PWChangeDefaultPW @ref="refPWChangeDefaultPW" Guid="modal-pwchangedefaultpw-main" basicPageType=(int)Enums.EnumBasicPageType.Main></PWChangeDefaultPW>
<SGAlert @ref="refSGAlert" Guid="modal-alert-main" OnCancel="SessionAlertCancel" OnConfirm="SessionAlertConfirm"></SGAlert>
<GoogleOTP @ref="refGoogleOTP" Guid="modal-googleotp-main" OnCancel="GoogleOtpCancel" OnConfirm="GoogleOtpConfirm"></GoogleOTP>


@code {

    SGAlert refSGAlert;
    GoogleOTP refGoogleOTP;

    [Parameter]
    public string srcLoc { get; set; }                    // Login Page를 호출한 page에 대한 정보 저장

    [Parameter]
    public string srcArgs { get; set; }                    // srcLoc의 추가 인자

    public string id { get; set; } = "";


    // public string _pw = "";
    public string pw;
    @* private void OnInput(string value)
        {
        var newValue = value ?? string.Empty;
        pw  = newValue;
        }*@

    public string otp { get; set; }

    public string strSystemName = "";
    public string strConNetwork = "";
    public string strAutoLogin = "";
    public string strIDSave = "";
    public bool bViewBackButton = false;  //로그인 취소버튼 표시여부

    ISGAppConfigService AppConfigSvc;
    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGCtrlSideUIService CtrlSideUISvc;

    public bool bInitBaseLogin = true;
    PWChange refPWChange;
    PWChangeDefaultPW refPWChangeDefaultPW;
    SGSettingsDBProc sgSettingProc;
    public bool bAutoLogin = false;
    public bool bAutoLoginCheck = false;

    public bool bIDSave = false;
    public bool bIDSaveCheck = false;

    public bool bLoginBtnDisable;
    Dictionary<string, SGNetOverData> dicSysIdName = null;

    public bool bStartedLogin = false;//중복으로 로그인버튼 클릭 방지에 사용하는 상태

    object obj = new object();
    Dictionary<int, bool> dicLoginResult = new Dictionary<int, bool>(); // ConcurrentDictionary / Dictionary
    private static readonly AsyncLock s_lock = new AsyncLock();

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<Main>();

    CsGoogleQRcode QRcode = new CsGoogleQRcode();
    string str2FactorAuthType = "";
    string strOtpUrlCode = "";

    bool bHiddenLogoMode = false;
    bool bUseLoginCI = false;
    string strLoginTextFontSize = "1.4rem";

    private void GoogleOtpCancel()
    {
        QRcode.Dispose();
        CLog.Here().Information($"[Main] GoogleOtp, User Cancel - GroupID:{refGoogleOTP.nGroupID} - LogInType: {pageService.m_nLoginType.ToString()}");

        JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        bStartedLogin = false;
        bLoginBtnDisable = false;
        refGoogleOTP.strUserOTP = "";
    }

    private void GoogleOtpConfirm()
    {
        QRcode.Dispose();

        CLog.Here().Information($"[Main] GoogleOtp, User Confirm - GroupID:{refGoogleOTP.nGroupID} - LogInType: {pageService.m_nLoginType.ToString()}");

        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(refGoogleOTP.nGroupID);
        if (hsNetWork != null)
        {
            // 구글Otp 값 어느 Tag에 보낼것인지 협의후 동작
            //hsNetWork.stCliMem.GOTPNUMBER = refGoogleOTP.strUserOTP;
            hsNetWork.SetGoogleOtp(refGoogleOTP.strUserOTP);

            //GOTPNUMBER
            hsNetWork.SendSeedKeyBindFor2FactorAuth();
        }

        JSRuntime.InvokeAsync<object>("loginCursorChange");
        //bStartedLogin = true;
        //bLoginBtnDisable = true;

        refGoogleOTP.strUserOTP = "";
    }

    /// <summary>
    /// 세션중복 로그인 포기 처리
    /// </summary>
    private void SessionAlertCancel()
    {
        CLog.Here().Information($"[Main] SessionAlertCancel - GroupID:{refSGAlert.groupId} - LogInType: {pageService.m_nLoginType.ToString()}");

        JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
        bStartedLogin = false;
        bLoginBtnDisable = false;
        refSGAlert.closePopUp();
    }

    /// <summary>
    /// 세션중복 로그인 진행 처리
    /// </summary>
    private void SessionAlertConfirm()
    {
        HSCmdCenter.SetAllowSessionDuplicate(refSGAlert.groupId);

        CLog.Here().Information($"[Main] SessionAlertConfirm - GroupID:{refSGAlert.groupId} -  LogInType: {pageService.m_nLoginType.ToString()}");

        ShowMessage("info", XmlConf.GetInfoMsg("I_0237"));

        if (str2FactorAuthType == "google_otp" && strOtpUrlCode.Length > 0)
        {
            PageEventArgs e = new PageEventArgs();
            e.strDummy = str2FactorAuthType;
            e.strMsg = strOtpUrlCode;
            str2FactorAuthType = "";
            strOtpUrlCode = "";

            Show2FactorAuth(refSGAlert.groupId, e);
        }
        else
        {
            if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
            {
                if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(refSGAlert.groupId))
                {
                    if (doADLoginLocalCheck(refSGAlert.groupId))
                    {
                        doADLogin(true);
                    }
                    else
                    {
                        pageService.m_nLoginType = (int)eLoginType.eLOGINTYPE_ORIGIN;
                        doLogIn();
                    }
                }
                else
                    doADLogin(true);
            }
            else if (SGAppMgrSvc.OpConfigInfoService.GetNACLoginType(refSGAlert.groupId) == (int)Enums.enumNacLoginType.Genian) //Genian Nac Login
            {
                if (SGSystemService.IsStartedByNAC() && srcLoc != "Logout")
                {
                    string NacKey = SGAppMgrSvc.OpConfigInfoService.GetNACLoginEncryptKey(0);
                    string nacId = SGSystemService.GetGenianNACUserID(NacKey);
                    doNACLogin(nacId);
                }
                else
                {
                    doLogIn();
                }
            }
            else
            {
                doLogIn();
            }
        }

    }

    /// <summary>
    /// 세션중복시 보여주는 이벤트 팝업
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    private async void ShowSessionCountPopup(int groupID, PageEventArgs e)
    {
        bStartedLogin = false;

        if (SGAppMgrSvc.OpConfigInfoService.GetSessionDuplicateBlock(groupID) == -1)
        {
            await JSRuntime.InvokeVoidAsync("setElementValue", new object[] { "loginPw", "" });
            ShowLoginFail(XmlConf.GetWarnMsg("W_0039"));
            await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
            bStartedLogin = false;
            bLoginBtnDisable = false;
            StateHasChanged();
            return;
        }


        if (e.strDummy == "google_otp")
        {
            str2FactorAuthType = e.strDummy;
            strOtpUrlCode = e.strMsg;
        }

        Window.MoveTrayToWebWindow();
        await refSGAlert.openPopUp(XmlConf.GetTitle("T_LOGIN_DUPLICATE"), XmlConf.GetTitle("T_LOGIN_DUPLICATE_GUIDE"), 2, groupID);
    }

    /// <summary>
    /// 2Factor 인증이 필요한 시기에 호출됨
    /// </summary>
    /// <param name="groupID"></param>
    /// <param name="e"></param>
    private async void Show2FactorAuth(int groupID, PageEventArgs e)
    {


        if (e.strDummy == "google_otp")
        {

            // Server에서 받아서 동작하도록 수정
            string strSecureKey = "";

            //if (QRcode.GenerateQRsecureKey())
            //    strSecureKey = QRcode.strSecureKey; // "MARNVBMEK06VCXXK";
            if (QRcode.GetSecureKeyFromOtpUrl(e.strMsg, out strSecureKey) == false)
                CLog.Here().Information($"Show2FactorAuth, otpauth Type Error ################## : {e.strMsg}");

            CLog.Here().Information($"Show2FactorAuth, Otp-Key : {strSecureKey}");

            refGoogleOTP.strKeyMessage = strSecureKey;
            refGoogleOTP.nGroupID = groupID;
            //bool rWriteQRimg = QRcode.GenerateQRimg("SecureGate", id, strSecureKey);
            bool rWriteQRimg = QRcode.GenerateQRimg(e.strMsg, true);  // Server에서 받은 Url로 바로 생성
            Thread.Sleep(1000);
            refGoogleOTP.RedrawUI();

            // login이 가능항 상태로 ui 변경
            await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
            //bStartedLogin = false;
            //bLoginBtnDisable = false;
            StateHasChanged();

            await refGoogleOTP.openPopUp();
        }

    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="arg"></param>
    private void keyCheck(KeyboardEventArgs arg)
    {
        //Enter 로 인한 로그인은 [로그인] 버튼이 존재하는  AD 외 로그인 타입만 적용토록 변경

        if (arg.Key == "Enter")
        {
            CLog.Here().Information($"keyCheck, ENTER Key - ###### - try login");
            ClickdoLogin();
        }
    }

    /// <summary>
    /// 화면에서 로그인 버튼 눌러서 로그인시도
    /// </summary>
    public void ClickdoLogin()
    {

        @*PageEventArgs e = new PageEventArgs();
            e.strDummy = "google_otp";
            e.strMsg = "otpauth://totp/SecureGate:KS0002?secret=KPRHRMDWLFF7A3CHVAJTINDA74KM2PCU&issuer=SecureGate";
            Show2FactorAuth(0, e);
            return;*@

        int groupid = pageService.m_nCurViewPageGroupID;

        CLog.Here().Information($"ClickdoLogin - login - groupid : {groupid} (bLoginBtnDisable:{bLoginBtnDisable})");
        if (bLoginBtnDisable)   //버튼이 비활성화 되어 있다면, 이후 처리 불가(js에서 호출되는 경우에 체크 필요)
            return;

        bLoginBtnDisable = true;
        StateHasChanged();

        if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
        {
            if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(groupid))
            {
                if (doADLoginLocalCheck(groupid))
                {
                    doADLogin();
                }
                else
                {
                    pageService.m_nLoginType = (int)eLoginType.eLOGINTYPE_ORIGIN;
                    doLogIn();
                }
            }
            else
                doADLogin();
        }
        else if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_CUSTOM)
        {
            if (SGAppMgrSvc.OpConfigInfoService.GetCustomLoginType(groupid) == (int)Enums.EnumCustomLoginType.LoginTemplate01)
            {
                doCustomLogin01();
            }
        }
        else
        {
            doLogIn();
        }

        bLoginBtnDisable = false;
        StateHasChanged();

    }


    /// <summary>
    /// 2번째 이상 로그인을 Page형태로 구현할때 사용하려했으나, 사용않함
    /// </summary>
    private void doBack()
    {

        // 원래 groupID의 Page로 이동
        pageService.m_nCurViewPageGroupID = pageService.m_nLastViewPageGroupID;
        //MyNavigationManager.NavigateTo(pageService.m_strLastPage);

        /*ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if (MenuItem.Child.Count > 0)
            {
            }
            else
            {
            }
        }*/

    }

    /// <summary>
    /// 로그인 동작( DoLogin )
    /// </summary>
    private void doLogIn()
    {
        try
        {
            if (bStartedLogin)
                return;

            if ((id?.Length ?? 0) < 1)
            {
                ShowLoginFail(XmlConf.GetWarnMsg("W_0030"));
                return;
            }

            if ((pw?.Length ?? 0) < 1)
            {
                ShowLoginFail(XmlConf.GetWarnMsg("W_0029"));
                return;
            }


            CLog.Here().Information($"doLogin - ###### -  Start");

            int groupid = pageService.m_nCurViewPageGroupID;

            //VAlidation Check  PW_OTP(4), OTP(5)
            if (pageService.m_nLoginType == 4 || pageService.m_nLoginType == 5)
            {
                if (otp == null || otp.Length < 6)
                {
                    ShowLoginFail(XmlConf.GetTitle("T_OTP_GUIDE"));
                    bLoginBtnDisable = false;
                    return;
                }
            }

            JSRuntime.InvokeAsync<object>("loginCursorChange");
            bStartedLogin = true;

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            CLog.Here().Information($"[Main] LogIn Type (######) : {pageService.m_nLoginType.ToString()}, GroupIDLoginType : {pageService.GetGroupIDLoginType(groupid)}");
            HSCmdCenter.SetCliVersion(strCurCliVersion);


            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            int count = listNetWork.Count;

            //pageService.m_nCurViewPageGroupID=0;

            if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
            {
                foreach (ISGNetwork netlist in listNetWork)
                {
                    CLog.Here().Information($"doLogIn - UseOneToMultiLogin - GroupID : {netlist.GroupID}");
                    HSCmdCenter.Login(netlist.GroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
                    pageService.SetGroupIDLoginType(netlist.GroupID, (eLoginType)pageService.m_nLoginType);
                }
            }
            else
            {
                HSCmdCenter.Login(pageService.m_nCurViewPageGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
                pageService.SetGroupIDLoginType(pageService.m_nCurViewPageGroupID, (eLoginType)pageService.m_nLoginType);
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"doLogIn - Exception(Msg) : {ex.Message}");
            Debug.WriteLine(ex.Message);
            ShowMessage("error", XmlConf.GetErrMsg("W_0187"));
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="ngroupid"></param>
    /// <returns></returns>
    private bool doADLoginLocalCheck(int ngroupid)
    {
        try
        {

            if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(ngroupid) == false)
                return false;

            string strPW = "";

            //Linux는 아직 실제값 확인해보지 못함
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                strPW = IPGlobalProperties.GetIPGlobalProperties().DomainName;
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                strPW = OSxCmdService.GetOSXADConfig("Active Directory Domain");

#if DEBUG
            strPW = "HsckAD.com";
#endif

            List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
            if (listNetWork[ngroupid].ADDomain == null || listNetWork[ngroupid].ADDomain.Count < 1)
            {
                CLog.Here().Information($"doADLoginLocalCheck - Agent ADDomain Data Empty(groupID : {ngroupid}) - Do IDPW!");
                return false;
            }

            foreach (string strDomain in listNetWork[ngroupid].ADDomain)
            {
                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                //string strEncID = "";
                //sgRSACrypto?.ValueEn(strPW, out strDescPW);
                string strDescPW = "";
                sgRSACrypto?.ValueDecrypt(strDomain, out strDescPW);

                // hash 값으로 비교하면 대소문자 가려서 비교하게 되므로
                if (listNetWork.Count > 0 && String.Compare(strPW, strDescPW, true) == 0)
                {
                    CLog.Here().Information($"doADLoginLocalCheck - DoLogin(groupID : {ngroupid}) - Do!");
                    return true;
                }
            }

            CLog.Here().Information($"doADLoginLocalCheck - PC Ad Domain : {strPW} - Can't Login AD TYPE(#####), groupID : {ngroupid}");

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"doADLoginLocalCheck - Exception - Msg : {ex.Message}");
        }

        return false;
    }

    /// <summary>
    /// AD 로그인에 사용되는 data를 화면상에 표현
    /// </summary>
    private void SetADLoginData()
    {

        CLog.Here().Information($"SetADLoginData - #Start");

        id = Environment.UserName;

        //OSX의 경우 임의로 아래와 같이 처리 추후 objective-c API 찾아볼 예정
        //Linux는 아직 실제값 확인해보지 못함
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            pw = IPGlobalProperties.GetIPGlobalProperties().DomainName;
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
            pw = OSxCmdService.GetOSXADConfig("Active Directory Domain");

#if DEBUG
        pw = "HsckAD.com";
#endif

        pw = pw.ToLower();

        CLog.Here().Information($"SetADLoginData - #End");

        StateHasChanged();
    }

    /// <summary>
    /// AD로그인 방식으로 로그인동작 진행
    /// </summary>
    private void doADLogin(bool bDoLoginForce = false)
    {
        try
        {
            if (bDoLoginForce == false)
                ShowMessage("info", XmlConf.GetInfoMsg("I_0235"));

            CLog.Here().Information($"ADLogin - ###### -  Start");

            JSRuntime.InvokeAsync<object>("loginCursorChange");
            bStartedLogin = true;

            id = Environment.UserName;

            //OSX의 경우 임의로 아래와 같이 처리 추후 objective-c API 찾아볼 예정
            //Linux는 아직 실제값 확인해보지 못함
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                pw = IPGlobalProperties.GetIPGlobalProperties().DomainName;
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                pw = OSxCmdService.GetOSXADConfig("Active Directory Domain");



#if DEBUG
            pw = "HsckAD.com";
#endif
            pw = pw.ToLower();

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            CLog.Here().Information("[Main] LogIn Type:" + pageService.m_nLoginType.ToString());
            HSCmdCenter.SetCliVersion(strCurCliVersion);


            if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
            {
                List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
                foreach (ISGNetwork netlist in listNetWork)
                {
                    CLog.Here().Information($"LoginAD - UseOneToMultiLogin - GroupID : {netlist.GroupID}");
                    HSCmdCenter.LoginAD(netlist.GroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
                    pageService.SetGroupIDLoginType(netlist.GroupID, eLoginType.eLOGINTYPE_AD);
                }
            }
            else
            {
                CLog.Here().Information($"ADLogin - ###### -  Do");
                HSCmdCenter.LoginAD(pageService.m_nCurViewPageGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
                pageService.SetGroupIDLoginType(pageService.m_nCurViewPageGroupID, eLoginType.eLOGINTYPE_AD);
            }

            CLog.Here().Information($"ADLogin - ###### -  End");

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"ADLogin - Exception - Msg : {ex.Message}");
        }

    }

    /// <summary>
    /// OKTA로그인 방식으로 로그인동작 진행
    /// </summary>
    private void doOKTALogin(string oktaUserId)
    {
        try
        {
            CLog.Here().Information($"doOKTALogin - ###### -  Start");

            JSRuntime.InvokeAsync<object>("loginCursorChange");
            bStartedLogin = true;

            id = oktaUserId;
            pw = oktaUserId;

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            CLog.Here().Information("[Main] LogIn Type:" + pageService.m_nLoginType.ToString());
            HSCmdCenter.SetCliVersion(strCurCliVersion);


            if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
            {
                List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
                foreach (ISGNetwork netlist in listNetWork)
                {
                    CLog.Here().Information($"doOKTALogin - UseOneToMultiLogin - GroupID : {netlist.GroupID}");
                    HSCmdCenter.LoginNotCheckPw(netlist.GroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
                    pageService.SetGroupIDLoginType(netlist.GroupID, (eLoginType)pageService.m_nLoginType);
                }
            }
            else
            {
                CLog.Here().Information($"doOKTALogin - ###### -  Do");
                HSCmdCenter.LoginNotCheckPw(pageService.m_nCurViewPageGroupID, id, pw, strCurCliVersion, otp, pageService.m_nLoginType);
                pageService.SetGroupIDLoginType(pageService.m_nCurViewPageGroupID, (eLoginType)pageService.m_nLoginType);
            }

            CLog.Here().Information($"doOKTALogin - ###### -  End");

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"ADLogin - Exception - Msg : {ex.Message}");
        }
    }

    private void doCustomLogin01()
    {
        try
        {
            if (bStartedLogin)
                return;

            if ((id?.Length ?? 0) < 1)
            {
                ShowLoginFail(XmlConf.GetWarnMsg("W_0030"));
                return;
            }

            if ((pw?.Length ?? 0) < 1)
            {
                ShowLoginFail(XmlConf.GetWarnMsg("W_0029"));
                return;
            }

            CLog.Here().Information($"doCustomLogin01 - ###### -  Start");
            JSRuntime.InvokeAsync<object>("loginCursorChange");
            bStartedLogin = true;

            int groupid = pageService.m_nCurViewPageGroupID;


            //외부 그룹웨어 연동
            try
            {
                LoginTemplate01 loginTemplate01 = new LoginTemplate01();
                string url = SGAppMgrSvc.OpConfigInfoService.GetCustomLoginHttpUrl(groupid);
                string siteKey = SGAppMgrSvc.OpConfigInfoService.GetCustomLoginSecurityKey(groupid);
                string siteIV = SGAppMgrSvc.OpConfigInfoService.GetCustomLoginSecurityIV(groupid);
                (bool, string) resultMsg = loginTemplate01.Login(id, pw, url, siteKey, siteIV);
                CLog.Here().Information($"result bool  : {resultMsg.Item1} , result Msg : {resultMsg.Item2}");
                if (!resultMsg.Item1)
                {
                    JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
                    bStartedLogin = false;
                    ShowMessage("error", resultMsg.Item2);

                    return;
                }
            }
            catch (Exception ex)
            {
                CLog.Here().Error($"doCustomLogin01 - Exception(Msg) : {ex.Message}");
                ShowMessage("error", XmlConf.GetErrMsg("W_0187"));
                return;
            }

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            CLog.Here().Information($"[Main] LogIn Type (######) : {pageService.m_nLoginType.ToString()}, GroupIDLoginType : {pageService.GetGroupIDLoginType(groupid)}");
            HSCmdCenter.SetCliVersion(strCurCliVersion);


            List<ISGNetwork> listNetWork = SGAppMgrSvc.NetworkInfoService.NetWorkInfo;
            int count = listNetWork.Count;

            //pageService.m_nCurViewPageGroupID=0;

            if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
            {
                foreach (ISGNetwork netlist in listNetWork)
                {
                    CLog.Here().Information($"doLogIn - UseOneToMultiLogin - GroupID : {netlist.GroupID}");
                    HSCmdCenter.LoginNotCheckPw(netlist.GroupID, id, pw, strCurCliVersion, otp, 0);
                    pageService.SetGroupIDLoginType(netlist.GroupID, (eLoginType)pageService.m_nLoginType);
                }
            }
            else
            {
                HSCmdCenter.LoginNotCheckPw(pageService.m_nCurViewPageGroupID, id, pw, strCurCliVersion, otp, 0);
                pageService.SetGroupIDLoginType(pageService.m_nCurViewPageGroupID, (eLoginType)pageService.m_nLoginType);
            }

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"doLogIn - Exception(Msg) : {ex.Message}");
            Debug.WriteLine(ex.Message);
            ShowMessage("error", XmlConf.GetErrMsg("W_0187"));
        }
    }


    /// <summary>
    /// NAC로그인 방식으로 로그인동작 진행
    /// </summary>
    private void doNACLogin(string nacUserId)
    {
        try
        {
            CLog.Here().Information($"doNACLogin - ###### -  Start");

            JSRuntime.InvokeAsync<object>("loginCursorChange");

            id = nacUserId;
            pw = string.Empty;

            if ((id?.Length ?? 0) < 1)
            {
                Window.MoveTrayToWebWindow();
                ShowLoginFail(XmlConf.GetWarnMsg("W_0030"));
                return;
            }

            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
            }

            if (strCurCliVersion.Equals(""))
                return;

            bStartedLogin = true;

            CLog.Here().Information("[Main] LogIn Type:" + pageService.m_nLoginType.ToString());
            HSCmdCenter.SetCliVersion(strCurCliVersion);

            string unUsePw = id;
            if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
            {
                List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
                foreach (ISGNetwork netlist in listNetWork)
                {
                    //NAC Login 시 IdSave 여부 확인하여 저장
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(netlist.GroupID))
                        bIDSaveCheck = true;

                    CLog.Here().Information($"doNACLogin - UseOneToMultiLogin - GroupID : {netlist.GroupID}");
                    HSCmdCenter.LoginNotCheckPw(netlist.GroupID, id, unUsePw, strCurCliVersion, otp, pageService.m_nLoginType);
                    pageService.SetGroupIDLoginType(netlist.GroupID, (eLoginType)pageService.m_nLoginType);
                }
            }
            else
            {
                //NAC Login 시 IdSave 여부 확인하여 인자로 받은 ID 저장
                if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(pageService.m_nCurViewPageGroupID))
                    bIDSaveCheck = true;
                CLog.Here().Information($"doNACLogin - ###### -  Do");
                HSCmdCenter.LoginNotCheckPw(pageService.m_nCurViewPageGroupID, id, unUsePw, strCurCliVersion, otp, pageService.m_nLoginType);
                pageService.SetGroupIDLoginType(pageService.m_nCurViewPageGroupID, (eLoginType)pageService.m_nLoginType);
            }

            CLog.Here().Information($"doNACLogin - ###### -  End");
        }
        catch (Exception ex)
        {
            CLog.Here().Error($"doNACLogin - Exception - Msg : {ex.Message}");
        }

    }
    /// <summary>
    ///
    /// </summary>
    private void WaitForFocus()
    {
        Task.Delay(1000);
        @*if (id.Length == 0)
            {
            object[] param2 = { "loginId" };
            JSRuntime.InvokeAsync<object>("changeFocus", param2);
            }
            else
            {
            object[] param3 = { "loginPw" };
            JSRuntime.InvokeAsync<object>("changeFocus", param3);
            }*@
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        object[] param = { "none" };
        await JSRuntime.InvokeAsync<object>("initLogIn", param);

        await JSRuntime.InvokeAsync<object>("InitDragAndDrop");

        int groupID = pageService.m_nCurViewPageGroupID;

        if (firstRender)
        {
            string notiAppName = XmlConf.GetTitle("T_OS_NOTIFICATION_NAME");
            Window.SetToastAppName(notiAppName);


            await JSRuntime.InvokeAsync<object>("addMouseUp");
            await JSRuntime.InvokeAsync<object>("addMouseDown");
            await JSRuntime.InvokeAsync<object>("addDragStart");
            await JSRuntime.InvokeAsync<object>("addKeyDown");

            //if (AppConfigSvc.GetUseGPKILogin(groupID))
            if (SGAppMgrSvc.OpConfigInfoService.GetUseGPKILogin(groupID))
            {
                if (srcLoc != "GPKI")
                    MyNavigationManager.NavigateTo("/GPKI_LogIn/1");    // login Mode로 실행
            }
            else if (SGAppMgrSvc.OpConfigInfoService.GetNACLoginType(groupID) == (int)Enums.enumNacLoginType.Genian)
            {
                //NAC에 의해 로그인하지 않았거나, 로그아웃한 경우, ID 저장/자동로그인 옵션 적용
                if (!SGSystemService.IsStartedByNAC() || srcLoc == "Logout")
                    SetIdPwLogin(groupID);
            }
            else
            {
                if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
                {

                }
                else
                {
                    SetIdPwLogin(groupID);
                }

            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void SetIdPwLogin(int groupID)
    {
        // ID저장
        // if (siteConfig.GetUseLoginIDSave(groupID) == true)   // json으로 설정이동
        bIDSave = SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(groupID);
        if (bIDSave)
        {
            bool bIDSaveContinue = sgSettingProc.GetSettingIDSave(groupID);
            bIDSaveCheck = bIDSaveContinue;

            if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSaveCheck(groupID))
                bIDSaveCheck = true;

            if (bIDSaveContinue)
            {
                string strEncID = "";
                strEncID = sgSettingProc.GetSettingUID(groupID);
                if (strEncID == null || strEncID.Equals(""))
                    return;
                string strID = "";
                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                sgRSACrypto.ValueDecrypt(strEncID, out strID);
                id = strID;
            }

            StateHasChanged();
        }

        // IDPW자동로그인
        bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupID);      // siteConfig.  json으로 설정이동
        if (bAutoLogin)
            StateHasChanged();

        if (bAutoLogin)
        {
            //NetConf.razor 와 맞추기 위해 아래 코드 제거 2021/06/01 YKH
            //bAutoLoginCheck = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLoginCheck(groupID);

            bool bAutoLoginContinue = sgSettingProc.GetSettingAutoLogin(groupID);
            bAutoLoginCheck = bAutoLoginContinue;

            if (bAutoLoginContinue && srcLoc != "Logout")
                bLoginBtnDisable = true;

            if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLoginCheck(groupID))
                bAutoLoginCheck = true;

            if (bAutoLoginCheck)
                StateHasChanged();

            if (bAutoLoginContinue)
            {
                bAutoLoginCheck = bAutoLoginContinue;
                if (bAutoLoginCheck)
                    StateHasChanged();

                string strEncID = "";
                string strEncPW = "";
                strEncID = sgSettingProc.GetSettingUID(groupID);
                strEncPW = sgSettingProc.GetSettingUPW(groupID);
                if ((strEncID == null || strEncID.Equals("")) || (strEncPW == null || strEncPW.Equals("")))
                {
                    Window.MoveTrayToWebWindow();
                    bLoginBtnDisable = false;
                    StateHasChanged();
                    return;
                }

                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                string strID = "";
                string strPW = "";
                sgRSACrypto.ValueDecrypt(strEncID, out strID);
                id = strID;
                // Logout 으로 인해 온 상황에서는 PW를 표시하지 않고, 로그인도하지 않음.
                if (srcLoc != "Logout")
                {
                    sgRSACrypto.ValueDecrypt(strEncPW, out strPW);
                    pw = strPW;
                }

                StateHasChanged();
                await Task.Delay(500);

                if (srcLoc != "Logout")
                {
                    if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_CUSTOM)
                    {
                        if (SGAppMgrSvc.OpConfigInfoService.GetCustomLoginType(groupID) == (int)Enums.EnumCustomLoginType.LoginTemplate01)
                        {
                            doCustomLogin01();
                        }
                    }
                    else
                    {
                        doLogIn();
                    }
                }
                StateHasChanged();
            }
            else
            {
                Window.MoveTrayToWebWindow();
            }
        }
        else
        {
            Window.MoveTrayToWebWindow();
        }
    }

    /// <summary>
    ///
    /// </summary>
    protected override void OnInitialized()
    {
        int groupid = pageService.m_nCurViewPageGroupID;

        base.OnInitialized();

        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;
        sgSettingProc = SGSettingsDBProc.Instance;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

        InitText();
        if (srcLoc == "Logout")  //로그인 화면 재진입 시 SideBar는 기존 Layout으로 초기화
            JSRuntime.InvokeAsync<object>("initPushMenu", new object[] { "expand" });

        bHiddenLogoMode = SGAppMgrSvc.OpConfigInfoService.GetHiddenLoginLogo(0);
        bUseLoginCI = SGAppMgrSvc.OpConfigInfoService.GetUseLoginCI(0);
        strLoginTextFontSize = SGAppMgrSvc.OpConfigInfoService.GetLoginTextFontSize(0);
        if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
        {
            List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
            foreach (ISGNetwork netlist in listNetWork)
            {
                CLog.Here().Information($"doLogIn - UseOneToMultiLogin - GroupID : {netlist.GroupID}");

                // 1 login ALL 적용때에는 중복로그인시 강제 로그인 적용
                HSCmdCenter.sgPageEvent.SetSessionDuplicateEventAdd(netlist.GroupID, ShowSessionCountPopup);
                HSCmdCenter.sgPageEvent.Set2FactorAuthEventAdd(netlist.GroupID, Show2FactorAuth);
                HSCmdCenter.SetAllowSessionDuplicate(netlist.GroupID);  // 강제로그인
                HSCmdCenter.sgPageEvent.SetLoginEventAdd(netlist.GroupID, LoginResultOnetoAll);
            }
        }
        else
        {
            HSCmdCenter.sgPageEvent.SetSessionDuplicateEventAdd(groupid, ShowSessionCountPopup);
            HSCmdCenter.sgPageEvent.Set2FactorAuthEventAdd(groupid, Show2FactorAuth);
            HSCmdCenter.sgPageEvent.SetLoginEventAdd(groupid, LoginResultOnetoAll);
            HSCmdCenter.SetAllowSessionDuplicate(groupid, (SGAppMgrSvc.OpConfigInfoService.GetSessionDuplicateBlock(groupid) == 1));
            //HSCmdCenter.sgPageEvent.SetLoginEventAdd(groupid, LoginResult);
        }

        // 다중망 로그인에서 로그아웃됐을때에 다시 자동로그인 안되게 처리
        if (srcLoc == "Logout")
        {

            pageService.SetStatusSideMenuReBuildTime(groupid, true);

            if (SGAppMgrSvc.OpConfigInfoService.GetUseSelectFirstConnectNetServer(0) && NetWorkSvc.NetWorkInfo.Count > 1)
                MyNavigationManager.NavigateTo("/SelectNet");

            if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD ||
                (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(groupid) && doADLoginLocalCheck(groupid)))
            {
                SetADLoginData();
            }

            // 중복로그인된거 확인하고 강제로그인후, 다음부터도 확인하고 강제로그인 하도록 적용
            List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
            foreach (ISGNetwork netlist in listNetWork)
            {
                HSCmdCenter.SetAllowSessionDuplicate(netlist.GroupID,
                    (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0) ? true : (SGAppMgrSvc.OpConfigInfoService.GetSessionDuplicateBlock(groupid) == 1)));
            }

        }
        else if (srcLoc == "OKTA")
        {
            bLoginBtnDisable = true;
            StateHasChanged();

            doOKTALogin(srcArgs);
        }
        else if (SGAppMgrSvc.OpConfigInfoService.GetNACLoginType(groupid) == (int)Enums.enumNacLoginType.Genian) //Genian Nac Login
        {
            if (SGSystemService.IsStartedByNAC())
            {
                string NacKey = SGAppMgrSvc.OpConfigInfoService.GetNACLoginEncryptKey(0);
                string nacId = SGSystemService.GetGenianNACUserID(NacKey);
                bLoginBtnDisable = true;
                StateHasChanged();

                doNACLogin(nacId);
            }
        }
        else
        {
            if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
            {
                bLoginBtnDisable = true;
                StateHasChanged();

                if (SGAppMgrSvc.OpConfigInfoService.GetUseOver1auth(groupid))
                {
                    if (doADLoginLocalCheck(groupid))
                    {
                        doADLogin();
                    }
                    else
                    {
                        bLoginBtnDisable = false;
                        StateHasChanged();
                        ShowLoginFail(XmlConf.GetErrMsg("E_0254")); // "ID/PW 인증을 통해 Login 하셔야 합니다."
                        pageService.m_nLoginType = (int)eLoginType.eLOGINTYPE_ORIGIN;
                        SetIdPwLogin(groupid);
                    }
                }
                else
                    doADLogin();
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    public void InitText()
    {
        strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        int groupID = pageService.m_nCurViewPageGroupID;


        @*
            SGData tmpData = null;
            tmpData = HSCmdCenter.GetSGSvrData(groupID);

            if (tmpData != null)
            {
            int systemID = 1;
            string sysID = tmpData.GetBasicTagData("SYSTEMID");
            if (!sysID.Equals(""))
            systemID = Convert.ToInt32(sysID);
            if (systemID == 1)
            strConNetwork = XmlConf.GetTitle("T_COMMON_LOGININNER");            // 업무망
            else
            strConNetwork = XmlConf.GetTitle("T_COMMON_LOGINOUTER");            // 인터넷망
            }
            else
            strConNetwork = XmlConf.GetTitle("T_COMMON_LOGININNER");            // 업무망
        *@


        // 접속하는 망 정보는 NetWork.json 의 string 사용으로 일원화
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == groupID)
            {
                strConNetwork = listNetWork[nIdx].FromName;
                break;
            }
        }

        strAutoLogin = XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX");        // 자동로그인
        strIDSave = XmlConf.GetTitle("T_ETC_IDSAVE_CHECKBOX");        // ID 저장
    }


    /// <summary>
    /// 3망일때에는 NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 수정해서 표현
    /// </summary>
    /// <param name="nGroupID"></param>
    /// <param name="dicSystemIdName"></param>
    public void ChangeNetOverTitle(int nGroupID, Dictionary<string, SGNetOverData> dicSystemIdName)
    {

        if (dicSystemIdName == null || dicSystemIdName.Count < 2)
            return;

        // string strNetOverDestTitle = "";

        // NetWork.json 파일이 아니라 Server에서 받은 망이름(NETOVERMODE)으로 전부 수정해서 표현
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        /*for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                listNetWork[nIdx].FromName = "";
                listNetWork[nIdx].ToName = "";

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx != 0 && item.Key.Length > 0)
                    {
                        if (strNetOverDestTitle.Length > 0)
                            strNetOverDestTitle += ",";

                        strNetOverDestTitle += item.Key;
                    }

                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }
                }

                if (strNetOverDestTitle.Length > 0)
                    listNetWork[nIdx].ToName = strNetOverDestTitle;
            }
        }*/

        // 왼쪽 SideBar 에서 도착하는 곳만 "다중망"으로 표현, 시작하는 곳 이름은 Server에서 받은 망이름(NETOVERMODE) 사용
        // Welcome(대쉬보드)에서 표현은 시작망이름은 망이름(NETOVERMODE) 사용, 도착망이름은 망이름(NETOVERMODE)에서 1번째 도달하는 망이름 사용
        for (int nIdx = 0; nIdx < listNetWork.Count; nIdx++)
        {
            if (listNetWork[nIdx].GroupID == nGroupID)
            {

                foreach (var item in dicSystemIdName)
                {
                    if (item.Value.nIdx == 0 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].FromName = item.Key;
                    }

                    if (item.Value.nIdx == 1 && item.Key.Length > 0)
                    {
                        listNetWork[nIdx].ToName = item.Key;
                    }
                }

                // 다중망 양 끝단이 아닐때는 도착지를 "다중망"으로 표기하지 않음
                if (pageService.m_bIsMultiNetWork == false)
                    listNetWork[nIdx].ToName = XmlConf.GetTitle("T_RECV_SIDE_TITLE");
                return;
            }
        }


    }


    /// <summary>
    /// 다중망 1번에 동시로그인일때에 왼쪽SideBar가 nGroupID로 선택되게 동작
    /// </summary>
    public void MoveSiderBarFocusTogroupid(int nGroupID)
    {

        if (nGroupID < 0) return;

        // 로그인한 groupID 선택되게 적용
        if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
        {
            foreach (var MenuItem in SideBarUISvc.MenuList)
            {
                if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == nGroupID))
                {
                    KeyboardEventArgs eventArgs = new KeyboardEventArgs();
                    eventArgs.Key = "Enter";
                    //SideBarUISvc.ActiveMenu = MenuItem;

                    MenuItem.Expanded = false;  // 반대값을 넣어야 반전되며 펼저짐
                    pageService.m_nCurViewPageGroupID = MenuItem.GroupId;
                    SideBarUISvc.ChgActiveMenu(eventArgs, MenuItem);
                    CLog.Here().Information($"1 to ALL Login, GroupID : {nGroupID}, SideBarUI(#######) Select / Expand  !");
                    break;
                }
            }
        }
    }

    /// <summary>
    /// 수신 다운로드 설정
    /// </summary>
    /// <param name="groupID">그룹ID</param>
    /// <param name="strPath">다운경로</param>
    public string SetUserIDRecvDownLoad(int groupID)
    {
        ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        string strPath = AppConfigSvc.GetRecvDownPath(groupID);
        if (SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupID))
        {
            SGLoginData sgLoginData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);

            // ISGCtrlSideUIService CtrlSideUISvc = SGAppMgrSvc.CtrlSideUIService;

            if (sgLoginData != null)
            {
                //공영홈쇼핑에서 MAC/Window 모두 ID 적용요청하여 사용
                string strAddFolder = "";
                strAddFolder = sgLoginData.GetUserID();

                strPath = Path.Combine(strPath, strAddFolder);
                HSCmdCenter.SetDownLoadPath(groupID, strPath);
                HSCmdCenter.SetBaseDownLoadPath(groupID, strPath);
                //CtrlSideUISvc.SetRecvDownPath(groupID, strPath);
            }
        }
        return strPath;
    }

    /// <summary>
    /// Reconnect 동작할 수 있게 설정변경
    /// </summary>
    /// <param name="groupId"></param>
    public void SetReconnectStart(int groupId)
    {
        // sessionCheck 동작하게 적용
        HsNetWork hsNetWork = null;
        hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            hsNetWork.SetReconnectStop(false);
        }
    }

    /// <summary>
    /// 로그인 완료후 호출(한번에 다중망 로그인 가능하도록 수정됨)
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public async void LoginResultOnetoAll(int groupId, PageEventArgs e)
    {
        try
        {
            int ret = e.result;
            int nGroupIDfirst = -1;

            lock (obj)
            {

                CLog.Here().Information($"LoginResultOnetoAll(#######) - GroupID : {groupId}, Ret : {ret}, LockAsync - START!");

                if (ret == 0)
                {

                    string strNavigatePathWithGroupID = "";

                    SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);

                    //pageService.ConnectCountAdd(groupId);
                    pageService.SetConnectStatus(groupId, true);
                    pageService.SetLogoutStatus(groupId, false);

                    CLog.Here().Information($"LoginResultOnetoAll, groupID : {groupId}, User Do Login, UrlRedirection LogIn State ReSet !!!");
                    HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupId, true);

                    SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
                    SGData sfmData = HSCmdCenter.GetSFMListData(groupId);
                    while (true)
                    {
                        sfmData = HSCmdCenter.GetSFMListData(groupId);
                        if (sfmData != null)
                            break;
                        Thread.Sleep(50);
                    }
                    CLog.Here().Information($"LoginResultOnetoAll, groupID : {groupId}, Recved Sfm Data !!!");
                    sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData, sfmData);

                    HSCmdCenter.SetUseUserRecvDownPath(groupId, SGAppMgrSvc.OpConfigInfoService.GetUseUserRecvDownPath(groupId));
                    string recvPath = SetUserIDRecvDownLoad(groupId); //사용자별 수신 다운로드 설정

                    if (SGAppMgrSvc.OpConfigInfoService.GetMakeRecvDownPathShortCut(groupId))//바탕화면 바로가기 설정
                    {
                        string linkName = string.Empty;
                        //if (SGAppMgrSvc.OpConfigInfoService.GetUseFromNameRecvDownPathShortCut(groupId))
                        //    linkName = string.Format("{0}{1}.lnk", XmlConf.GetTitle("T_RECV_DOWNLOAD_LINK_NAME"), NetWorkSvc.NetWorkInfo?[groupId]?.FromName);
                        //else
                        //    linkName = string.Format("{0}{1}.lnk", XmlConf.GetTitle("T_RECV_DOWNLOAD_LINK_NAME"), NetWorkSvc.NetWorkInfo?[groupId]?.ToName);

                        linkName = String.Format($"{XmlConf.GetTitle("T_RECV_DOWNLOAD_LINK_NAME")}.lnk", NetWorkSvc.NetWorkInfo?[groupId]?.FromName, NetWorkSvc.NetWorkInfo?[groupId]?.ToName);

                        CtrlSideUISvc.ChangeRecvDownPathLink(linkName, recvPath);
                    }

                    // 3중망 정보 적용
                    dicSysIdName = new Dictionary<string, SGNetOverData>();

                    if (sgLoginData.GetUseOverNetwork2())
                    {

                        if (sgLoginData.GetOverNetwork2Data(ref dicSysIdName, pageService.m_bIsMultiNetWork))
                        {
                            pageService.SetTargetSystemList(groupId, dicSysIdName);

                            // 3중망이상일때, 왼쪽Sidebar 포함 도착망이름 변경
                            if (dicSysIdName != null && dicSysIdName.Count > 1)
                            {
                                ChangeNetOverTitle(groupId, dicSysIdName);
                            }
                        }
                    }

                    // CLIENT_ZIP_DEPTH, CS_EXCEPTION_EXT_REASON_TYPE
                    // 정보 가져옴
                    SGQueryExtend sgQueryExtend = null;
                    sgQueryExtend = new SGQueryExtend();
                    if (sgQueryExtend != null)
                    {

                        string strGetinfoTagName = "";
                        strGetinfoTagName = "'CLIENT_ZIP_DEPTH'";
                        strGetinfoTagName += ", 'CS_EXCEPTION_EXT_REASON_TYPE'";
                        strGetinfoTagName += ", 'CLIENT_OLE_EXTRACT'";
                        strGetinfoTagName += ", 'CLIENT_OLE_EXTRACT_EXT'";
                        // strGetinfoTagName += ", 'CLIENT_OLE_EXTRACT_MTYPE'";     // Table 이름 따로 정해졌음
                        strGetinfoTagName += ", 'CLIENT_PREVIEW_VIEWER_EXT'";
                        strGetinfoTagName += ", 'FORWARD_AUTODOWN'";
                        strGetinfoTagName += ", 'CLIENT_URL_FW_PAGE'";
                        strGetinfoTagName += ", 'CLIENT_BINARY_CHECK'";
                        strGetinfoTagName += ", 'CLIENT_BINARY_CHECK_EXT'";
                        strGetinfoTagName += ", 'CLIENT_PRIVACY_COMMENT'";

                        if (SGAppMgrSvc.OpConfigInfoService.GetUseMinLengthTitleDesc(groupId))
                        {
                            strGetinfoTagName += ", 'CLIENT_TITLE_MIN_LENGTH'";
                            strGetinfoTagName += ", 'CLIENT_DESC_MIN_LENGTH'";
                        }

                        if (SGAppMgrSvc.OpConfigInfoService.GetUseMaxLengthTitleDesc(groupId))
                        {
                            strGetinfoTagName += ", 'CLIENT_TITLE_MAX_LENGTH'";
                            strGetinfoTagName += ", 'CLIENT_DESC_MAX_LENGTH'";
                        }

                        string strQuery = sgQueryExtend.GetsystemEnvDataS(strGetinfoTagName); // sgQueryExtend.GetZipDepthSQLsystemEnv : CLIENT_ZIP_DEPTH 값만구할때 사용
                        HSCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);
                    }

                    if (pageService.GetIsPolicyUpdate(groupId))
                    {
                        SideBarLoginAfterMenuAddEvent sideBarLoginAfterMenuAddEvent = HSCmdCenter.sgPageEvent.GetSideBarLoginAfterMenuAddEvent();
                        if (sideBarLoginAfterMenuAddEvent != null)
                        {
                            SGAppMgrSvc.SideBarUIService.DeleteMenuAllButRoot(groupId);
                            sideBarLoginAfterMenuAddEvent(groupId);
                        }
                    }
                    else
                        InitSideMenu(groupId);

                    bool bUseClipBoard = sgLoginData.GetClipboard();
                    if (bUseClipBoard)
                    {
                        List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                        char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                        // 단일 - 다중망일때 처리
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                            bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                            bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                            bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                            Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                        }
                        else
                        {
                            Window.RegClipboardHotKey(groupId,
                                            listModKey[(int)HOTKEY_MOD.ALT],
                                            listModKey[(int)HOTKEY_MOD.CTRL],
                                            listModKey[(int)HOTKEY_MOD.SHIFT],
                                            listModKey[(int)HOTKEY_MOD.WINDOW],
                                            chVKey);
                        }

                        // 3중망일때, Clipboard 단축키 처리
                        if (sgLoginData.GetUseOverNetwork2() && dicSysIdName != null && dicSysIdName.Count > 1)
                        {

                            bool bUseClipNetOverALL = true;

                            foreach (var item in dicSysIdName)
                            {
                                // 1번재 상대편 망으로 전송은 위에 기존 Code로 처리
                                if (item.Value.nIdx > 1 && item.Value.bUseClipTrans)
                                {
                                    // listModKey = AppConfigSvc.GetClipBoardModifierWhen(groupId);

                                    listModKey = AppConfigSvc.GetClipBoardModifierWhenNetOver(groupId, item.Value.nIdx);
                                    chVKey = ' ';
                                    chVKey = AppConfigSvc.GetClipBoardVKeyWhenNetOver(groupId, item.Value.nIdx, NetWorkSvc.NetWorkInfo.Count, dicSysIdName.Count);

                                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                    {
                                        bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                                        bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                                        bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                                        bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                                        Window.WinRegClipboardHotKeyNetOver(groupId, bAlt, bCtrl, bShift, bWin, chVKey, item.Value.nIdx);
                                    }
                                    else
                                    {
                                        Window.RegClipboardHotKeyNetOver(groupId,
                                                        listModKey[(int)HOTKEY_MOD.ALT],
                                                        listModKey[(int)HOTKEY_MOD.CTRL],
                                                        listModKey[(int)HOTKEY_MOD.SHIFT],
                                                        listModKey[(int)HOTKEY_MOD.WINDOW],
                                                        chVKey, item.Value.nIdx);
                                    }

                                    // 3망 사용 중이지 않다가 갑자가 사용으로 설정변경시 단축키 저장
                                    CtrlSideUISvc.SetClipBoardHotKeyNetOver(groupId, item.Value.nIdx,
                                                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                                                    listModKey[(int)HOTKEY_MOD.ALT],
                                                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                                                    chVKey);
                                }

                                // 한곳이라도 clipboard 사용하지 않으면 Both 기능 사용않함
                                if (item.Value.nIdx > 0 && item.Value.bUseClipTrans == false)
                                    bUseClipNetOverALL = false;
                            }

                            // 3중망 - 동시에 수신망 전체에 전송
                            if (SGAppMgrSvc.OpConfigInfoService.GetUseNetOverAllsend(groupId) && bUseClipNetOverALL && NetWorkSvc.NetWorkInfo.Count < 2)
                            {
                                // 3중망, clipboard 단축키 추가작업필요
                                listModKey = AppConfigSvc.GetClipBoardModifierWhenNetOver(groupId, 0);
                                chVKey = ' ';
                                chVKey = AppConfigSvc.GetClipBoardVKeyWhenNetOver(groupId, 0, NetWorkSvc.NetWorkInfo.Count, dicSysIdName.Count);

                                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                                {
                                    bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                                    bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                                    bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                                    bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                                    Window.WinRegClipboardHotKeyNetOver(groupId, bAlt, bCtrl, bShift, bWin, chVKey, 0);
                                }
                                else
                                {
                                    Window.RegClipboardHotKeyNetOver(groupId,
                                                    listModKey[(int)HOTKEY_MOD.ALT],
                                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                                    chVKey, 0);
                                }

                                // 3망 사용 중이지 않다가 갑자가 사용으로 설정변경시 단축키 저장
                                CtrlSideUISvc.SetClipBoardHotKeyNetOver(groupId, 0,
                                                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                                                listModKey[(int)HOTKEY_MOD.CTRL],
                                                                listModKey[(int)HOTKEY_MOD.ALT],
                                                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                                                chVKey);
                            }

                        }

                        // clipboard 선택전송기능 사용유무설정
                        if (SGAppMgrSvc.OpConfigInfoService.GetUseClipTypeSelectSend(groupId))
                            Window.UseClipBoardSelect(groupId);

                        // ClipBoard(Type Mixed 일때) Text 우선송신 사용
                        if (SGAppMgrSvc.OpConfigInfoService.GetUseClipTypeTextFirstSend(groupId))
                            Window.UseClipFirstSendType(groupId);

                        // 자동전송기능 위해
                        if (SGAppMgrSvc.AppConfigInfoService.GetClipCopyAutoSend())
                        {
                            Window.SetNativeClipboardHotKey(groupId,
                                listModKey[(int)HOTKEY_MOD.ALT],
                                listModKey[(int)HOTKEY_MOD.CTRL],
                                listModKey[(int)HOTKEY_MOD.SHIFT],
                                listModKey[(int)HOTKEY_MOD.WINDOW],
                                chVKey, 0);
                        }

                    } // if (bUseClipBoard)

                    DateTime dt = (SGAppMgrSvc.OpConfigInfoService.GetUseOneAClockChangeAgentTimer(groupId)) ? DateTime.Now : sgLoginData.GetSvrTimeConvert();
                    pageService.SetSvrTime(groupId, dt, sgLoginData);
                    bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
                    bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
                    pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
                    pageService.SetAfterApprEnable(groupId, bAfterApprEnable);
                    bool bAfterCheck = false;
                    if (!bAfterApprEnable)
                        bAfterCheck = false;
                    else
                        bAfterCheck = SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();

                    pageService.SetAfterApproveCheck(groupId, bAfterCheck);

                    //
                    LoginAfterSGHeaderUIEvent loginAfterSGHeaderUI = null;
                    loginAfterSGHeaderUI = HSCmdCenter.sgPageEvent.GetLoginAfterSGHeaderUIEvent();
                    if (loginAfterSGHeaderUI != null)
                        loginAfterSGHeaderUI(groupId);

                    LoginAfterSGSideBarEvent loginAfterSGSideBar = null;
                    loginAfterSGSideBar = HSCmdCenter.sgPageEvent.GetLoginAfterSGSideBarEvent();
                    if (loginAfterSGSideBar != null)
                        loginAfterSGSideBar(groupId);

                    Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
                    int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
                    Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
                    int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
                    pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);

                    // 서버에서 받은 화면잠금 시간 설정
                    ScreenTimeInitNotiEvent screenTimeInitEvent = HSCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
                    if (screenTimeInitEvent != null)
                    {
                        ConfigArgs config = new ConfigArgs();
                        config.ScreenTime = sgLoginData.GetSCRLimit();
                        screenTimeInitEvent(groupId, config);
                    }

                    HsNetWork hsNetWork = null;
                    hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
                    if (hsNetWork != null)
                    {
                        pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());
                        pageService.SetCurUserPassWD(groupId, pw);
                    }

                    SGSettingData sgSettingData = null;
                    sgSettingData = sgSettingProc.SelectSettingData(groupId);
                    if (sgSettingData == null)
                        sgSettingProc.InsertSettingData(groupId, "", "", "", "", 0);

                    // GPKI Login
                    if (srcLoc == "GPKI")
                        strNavigatePathWithGroupID = "/GPKI_LogIn/2";    // Register Mode로 실행
                    else if (pageService.GetGroupIDLoginType(groupId) == eLoginType.eLOGINTYPE_AD)
                    {

                    }
                    else // ID/PW
                    {
                        if (SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupId) == true)
                        {
                            if (bAutoLoginCheck)
                            {
                                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                                string strEncID = "";
                                string strEncPW = "";
                                if ((!id.Equals("")) & (id != null) & (!pw.Equals("")) & (pw != null))
                                {
                                    sgRSACrypto?.ValueEncrypt(id, out strEncID);
                                    sgRSACrypto?.ValueEncrypt(pw, out strEncPW);

                                    sgSettingProc.SetSettingUID(groupId, strEncID);
                                    sgSettingProc.SetSettingUPW(groupId, strEncPW);
                                    sgSettingProc.SetSettingAutoLogin(groupId, true);
                                }
                            }
                            else
                            {
                                sgSettingProc.SetSettingAutoLogin(groupId, false);
                            }
                        }

                        if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginIDSave(groupId) == true)
                        {
                            if (bIDSaveCheck)
                            {
                                SGRSACrypto sgRSACrypto = new SGRSACrypto();
                                string strEncID = "";
                                if ((!id.Equals("")) & (id != null))
                                {
                                    sgRSACrypto.ValueEncrypt(id, out strEncID);
                                    sgSettingProc.SetSettingUID(groupId, strEncID);
                                    sgSettingProc.SetSettingIDSave(groupId, true);
                                }
                            }
                            else
                            {
                                sgSettingProc.SetSettingIDSave(groupId, false);
                            }

                        }
                    }

                    if (srcLoc != "GPKI")
                    {
                        //strNavigatePathWithGroupID = AppConfigSvc.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";

                        // enMainPageType 값이 2 : 파일전송화면, 다른거 : Dash보드 (AppOPsetting.json 의 enMainPageType : 2 이면, 파일전송 화면이됨, 다른값:DashBoard)
                        //strNavigatePathWithGroupID = SGAppMgrSvc.OpConfigInfoService.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";

                        strNavigatePathWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
                        strNavigatePathWithGroupID += groupId.ToString();
                    }

                    // Clipboard 단축키 및 HeaderUI에서 바로 클립보드를 전송할 수 있으므로 사후결재 관련 현재상태값을 로그인후 바로 저장
                    SaveAfterApproveCheckBoxStatus(groupId);

                    CtrlSideEvent ctrlSideEvent = null;
                    ctrlSideEvent = HSCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
                    if (ctrlSideEvent != null)
                        ctrlSideEvent(groupId);


                    SetReconnectStart(groupId);

                    // Move WebWindow To Tray.
                    //if (AppConfigSvc.GetStartTrayMove()) Window.MoveWebWindowToTray();
                }
                else
                {

                    // sessionCheck 동작하게 적용
                    HsNetWork hsNetWork = null;
                    hsNetWork = HSCmdCenter.GetConnectNetWork(groupId);
                    if (hsNetWork != null)
                    {
                        hsNetWork.SetLoginSessionCheckDo();
                    }

                    // PW 암호화해서 Log남김
                    if (pageService.GetGroupIDLoginType(groupId) == eLoginType.eLOGINTYPE_AD)
                    {
                        string strCheckData = "";
                        SGRSACrypto sgRSACrypto = new SGRSACrypto();
                        sgRSACrypto?.ValueEncrypt(pw, out strCheckData);
                        CLog.Here().Information($"LoginResultOnetoAll, RetVal : {ret}, LoginType : {pageService.GetGroupIDLoginType(groupId)}, Login Fail - PWCheck : {strCheckData}");
                    }

                    //await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");

                    //bLoginBtnDisable = false; //버튼 활성화는 finally로 이동
                    string strPopupMsg = "";

                    // 다중망일때에는 실패한 망이름 표현
                    if (pageService.m_bIsMultiNetWork)
                    {
                        string strFromNet = "";
                        string strToNet = "";
                        XmlConf.GetNetworkTitle(groupId, out strFromNet, out strToNet);
                        strPopupMsg = $"{strFromNet}<i class=\"fas fa-long-arrow-alt-right p-1\"></i> {strToNet}<br/>";
                    }

                    strPopupMsg += e.strMsg;

                    strPopupMsg = strPopupMsg.Replace("/r/n", "<br/>");
                    ShowLoginFail(strPopupMsg);
                    HSCmdCenter.SendLogOut(groupId, "");
                    StateHasChanged();
                }

                // 지정해놓은 UI로 이동하도록 적용 : Random하게 Result 오는 쪽 menu가 열리도록 하지 않음
                if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0))
                {

                    CLog.Here().Information($"1 to ALL Login, GroupID : {groupId}, LoginResult Add Before(#####) - Current / Total : {dicLoginResult.Count} / {NetWorkSvc.NetWorkInfo.Count} ");

                    bool bLoginResult = false;
                    if (dicLoginResult.TryGetValue(groupId, out bLoginResult) == false)
                    {
                        bLoginResult = dicLoginResult.TryAdd(groupId, e.result == 0);
                        CLog.Here().Information($"1 to ALL Login, GroupID : {groupId}, Result-Val : {e.result}, save : {bLoginResult}");
                    }

                    CLog.Here().Information($"1 to ALL Login, GroupID : {groupId}, LoginResult Add After(#####) - Current / Total : {dicLoginResult.Count} / {NetWorkSvc.NetWorkInfo.Count} ");

                    foreach (var item in dicLoginResult)
                    {
                        CLog.Here().Information($"1 to ALL Login, Item Identify(#####) -  GroupID : {item.Key}, LoginResult : {item.Value}");
                    }

                    if (dicLoginResult.Count == NetWorkSvc.NetWorkInfo.Count)
                    {
                        CLog.Here().Information($"1 to ALL Login, GroupID : {groupId}, Recved All Login Result !");

                        bLoginResult = false;
                        foreach (ISGNetwork Net in NetWorkSvc.NetWorkInfo)
                        {
                            if (dicLoginResult.TryGetValue(Net.GroupID, out bLoginResult))
                            {

                                CLog.Here().Information($"1 to ALL Login, GroupID : {Net.GroupID}, LoginResult.TryGetValue : {bLoginResult}");

                                if (bLoginResult)
                                {
                                    nGroupIDfirst = Net.GroupID;
                                    CLog.Here().Information($"LoginResultOnetoAll(########) , LoginType : {pageService.GetGroupIDLoginType(Net.GroupID)} , GroupID : {groupId}, Saved-GroupID : {nGroupIDfirst}, Ret : {ret}, CHECKED!");
                                    break;
                                }
                            }
                        }

                        // Login 화면으로 머물러있지 않도록
                        //if (nGroupIDfirst < 0)
                        //  nGroupIDfirst = 0;

                    } // if (dicLoginResult.Count == NetWorkSvc.NetWorkInfo.Count)

                } // if (SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin())
                else
                {
                    nGroupIDfirst = groupId;
                }

                CLog.Here().Information($"LoginResultOnetoAll(########) - GroupID : {groupId}, Ret : {ret}, LockAsync - END!");

            } // using ( await s_lock.LockAsync() )

            if (ret != 0)
                return;

            //if (false)
            if (nGroupIDfirst > -1)
            {

                // nGroupIDfirst : 로그인된 제일 첫번째 GroupID

                CLog.Here().Information($"LoginResultOnetoAll, LoginType : {pageService.GetGroupIDLoginType(groupId)}, GroupID : {groupId}, Saved-GroupID : {nGroupIDfirst}, START!");

                SGUserData sgUserData = null;
                SGLoginData sgLoginData = null;
                sgUserData = (SGUserData)HSCmdCenter.GetUserData(nGroupIDfirst);
                sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(nGroupIDfirst);

                if (pageService.GetGroupIDLoginType(groupId) == eLoginType.eLOGINTYPE_ORIGIN)
                {

                    refPWChange.nGroupID = nGroupIDfirst;
                    refPWChange.Init();

                    // 초기패스워드 설정이면 패스워드 재설정 강제하는 부분이나 TOSS 요청으로 해당로직 제거 시작 2021/07/05 YKH
                    //패스워드 변경 유무에 따라 패스워드 체크 가능 여부 확인

                    if (SGAppMgrSvc.OpConfigInfoService.GetUseUserPWChange(groupId) && pageService.GetStatusSideMenuReBuildTime(groupId))
                    {
                        if (GetInitPWLogin(groupId))
                        {
                            pageService.SetPassWDChgType(groupId, ePassWDType.eINITPASSWDCHG);
                            refPWChangeDefaultPW.nGroupID = groupId;
                            await refPWChangeDefaultPW.openPopUp();
                            Window.MoveTrayToWebWindow();
                            return;
                        }
                        else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eNone)
                        {
                        }
                        else if (sgLoginData.GetPasswordExpired() == ePassWDChgType.eEnforce)
                        {
                            // password 강제변경 창
                            pageService.SetPassWDChgType(nGroupIDfirst, ePassWDType.eDAYPASSWDCHG);
                            await refPWChange.openPopUp();
                            Window.MoveTrayToWebWindow();
                            return;
                        }
                        else    //AfterWord
                        {

                            // password 변경권고 창 띄울지 검사
                            string strTime = "";
                            SGSettingData sgSettingData = null;
                            sgSettingData = sgSettingProc.SelectSettingData(nGroupIDfirst);
                            if (sgSettingData == null)
                            {
                                pageService.SetPassWDChgType(nGroupIDfirst, ePassWDType.eDAYPASSWDCHG);
                                await refPWChange.openPopUp();
                                Window.MoveTrayToWebWindow();
                                return;
                            }

                            strTime = sgSettingProc.GetSettingDelayDspPw(nGroupIDfirst);
                            if (strTime.Equals(""))
                            {
                                // 처음설치해서 사용하는 사용자들 항상 실행하게 되는 경로
                                pageService.SetPassWDChgType(nGroupIDfirst, ePassWDType.eDAYPASSWDCHG);
                                await refPWChange.openPopUp();
                                Window.MoveTrayToWebWindow();
                                return;
                            }

                            SGPassWDPeriodData sgPassWDData = new SGPassWDPeriodData();
                            string strUserSeq = sgUserData.GetUserSequence();
                            strTime = sgPassWDData.LoaclPassWDDelayLoadString(strTime, strUserSeq);

                            if (strTime.Equals(""))
                            {
                                pageService.SetPassWDChgType(nGroupIDfirst, ePassWDType.eDAYPASSWDCHG);
                                await refPWChange.openPopUp();
                                Window.MoveTrayToWebWindow();
                                return;
                            }

                            DateTime dtLocalTime = DateTime.Parse(strTime);
                            DateTime svrDt = sgLoginData.GetSvrTimeDayConvert();

                            if (DateTime.Compare(dtLocalTime, svrDt) < 0)
                            {
                                pageService.SetPassWDChgType(nGroupIDfirst, ePassWDType.eDAYPASSWDCHG);
                                await refPWChange.openPopUp();
                                Window.MoveTrayToWebWindow();
                                return;
                            }

                        }
                    }


                }
                else if (pageService.m_nLoginType == (int)eLoginType.eLOGINTYPE_AD)
                {

                }

                CLog.Here().Information($"LoginResultOnetoAll, 1 to ALL Login, GroupID : {nGroupIDfirst}, First Screen !");

                string strNavigatePathnGroupID = "";

                if (srcLoc != "GPKI")
                {
                    //strNavigatePathWithGroupID = AppConfigSvc.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";

                    // enMainPageType 값이 2 : 파일전송화면, 다른거 : Dash보드 (AppOPsetting.json 의 enMainPageType : 2 이면, 파일전송 화면이됨, 다른값:DashBoard)
                    //strNavigatePathWithGroupID = SGAppMgrSvc.OpConfigInfoService.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";

                    strNavigatePathnGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
                    strNavigatePathnGroupID += nGroupIDfirst.ToString();
                }

                // Clipboard 단축키 및 HeaderUI에서 바로 클립보드를 전송할 수 있으므로 사후결재 관련 현재상태값을 로그인후 바로 저장
                SaveAfterApproveCheckBoxStatus(nGroupIDfirst);

                await JSRuntime.InvokeAsync<object>("closeAllPopup");

                ChangeActiveMenuEvent changeActiveMenuEvent = HSCmdCenter.sgPageEvent.GetChangeActiveMenu();
                if (changeActiveMenuEvent != null)
                    changeActiveMenuEvent(nGroupIDfirst, strNavigatePathnGroupID);

                MyNavigationManager.NavigateTo(strNavigatePathnGroupID);

                if (!pageService.GetIsPolicyUpdate(groupId))
                    HSCmdCenter.SendNetLinkStatus(nGroupIDfirst, sgUserData.GetUserID());

                // SideBarUI 에서 nGroupIDfirst로 지정된 UI로 선택
                MoveSiderBarFocusTogroupid(nGroupIDfirst);

                CLog.Here().Information($"LoginResultOnetoAll, LoginType : {pageService.GetGroupIDLoginType(groupId)}, GroupID : {groupId}, Saved-GroupID : {nGroupIDfirst}, END!");

                if (!pageService.GetIsPolicyUpdate(groupId))
                {
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginAfterTray(0)) //(SGAppMgrSvc.OpConfigInfoService.GetStartTrayMove())
                    {
                        if (pageService.GetConnectCount(nGroupIDfirst) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                        {
                            if (SGAppMgrSvc.OpConfigInfoService.GetUseHideToastPopup(nGroupIDfirst) == false)
                            {
                                string strTitle = XmlConf.GetTitle("T_ETC_TRAYMOVE");                                                   // 트레이 이동.
                                string strInfoMsg = XmlConf.GetInfoMsg("I_0051");                                                       // 트레이 아이콘으로 이동합니다.
                                HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, strTitle, strInfoMsg);
                            }

                            Window.MoveWebWindowToTray();
                        }
                        else
                            HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                    }
                    else if (SGAppMgrSvc.OpConfigInfoService.GetUseLoginAfterShow(0))
                    {
                        if (pageService.GetConnectCount(nGroupIDfirst) <= 0)                                                                     // 재접속이 아닐 경우에만 화면 호출
                        {
                            Window.MoveTrayToWebWindow();
                        }
                        else
                            HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                    }
                    else
                    {
                        HSCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                    }

                    pageService.ConnectCountAdd(nGroupIDfirst);
                }

            } // if (nGroupIDfirst > -1)

            pageService.SetStatusSideMenuReBuildTime(groupId, false);

        }
        catch (Exception ex)
        {
            CLog.Here().Error($"LoginResultOnetoAll - Exception(MSG) :  {ex.Message}");
        }
        finally
        {
            if (!pageService.GetIsPolicyUpdate(groupId))
            {
                if (!SGAppMgrSvc.OpConfigInfoService.GetUseOneToMultiLogin(0) || dicLoginResult.Count == NetWorkSvc.NetWorkInfo.Count)
                {
                    //멀티로그인이 아니거나, 멀티로그인이 전부 이루어 졌을 시, 재로그인 가능상태로 설정
                    await JSRuntime.InvokeAsync<object>("loginCursorChangeDefault");
                    bStartedLogin = false;
                    bLoginBtnDisable = false;
                }
            }

            pageService.SetIsPolicyUpdate(groupId, false);
        }
    }
    /// <summary>
    /// SGSideBarUI 와 동일
    /// </summary>
    /// <param name="eventArgs"></param>
    /// <param name="activeMenu"></param>
    public void ChangeActiveMenuWrap(EventArgs eventArgs, ISGSideBarUI activeMenu)
    {

        // ChangeActiveMenuWrap
        if (pageService.m_nCurViewPageGroupID != activeMenu.GroupId)
            pageService.m_nLastViewPageGroupID = pageService.m_nCurViewPageGroupID;

        // 이동하는UI 그룹ID 지정
        pageService.m_nCurViewPageGroupID = activeMenu.GroupId;

        SideBarUISvc.ChgActiveMenu(eventArgs, activeMenu);
    }

    private void ShowMessage(string strType, string strMsg)
    {
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public void InitSideMenu(int groupid)
    {

        if (pageService.GetStatusSideMenuReBuildTime(groupid) == false)
        {
            //Reconnect 이상현상
            CLog.Here().Information($"InitSideMenu, groupid : {groupid}, SideBar Build Skip!");
            SideBarUISvc.EmitNotifyStateChangedActMenu();
            return;
        }
        string pushmenuStat = (SGAppMgrSvc.AppConfigInfoService.GetHideSideBarAfterLogin()) ? "collapse" : "expand";
        JSRuntime.InvokeAsync<object>("initPushMenu", new object[] { pushmenuStat });

        string strDataTrans = XmlConf.GetTitle("T_COMMON_FILETRANS_BASIC");                     // 자료전송
        string strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                           // 파일전송
        string strTransManage = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                       // 전송관리
        string strApprManage = XmlConf.GetTitle("T_COMMON_APPROVEMANAGE");                      // 결재관리
        string strSecurityApprManage = XmlConf.GetTitle("T_COMMON_APPROVESECURITY");            // 보안결재
        string strClipboard = XmlConf.GetTitle("T_COMMON_CLIPBOARD");                           // 클립보드
        string strClipboardTransManage = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                // 클립보드 관리
        string strClipboardApprManage = XmlConf.GetTitle("T_COMMON_CLIPAPPR");                  // 클립보드 결재
        string strEmail = XmlConf.GetTitle("T_COMMON_EMAIL");                                   // 메일
        string strEmailTransManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");              // 메일 관리
        string strEmailApprManage = XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP");              // 메일 결재
        string strPCURL = XmlConf.GetTitle("T_COMMON_URL");                                     // PCURL
        string strPCURLTransManage = XmlConf.GetTitle("T_COMMON_URLMANAGE");                    // PCURL 관리
        string strPCURLApprManage = XmlConf.GetTitle("T_COMMON_URLAPPROVE");                    // PCURL 결재
        string strEnvSetInfo = XmlConf.GetTitle("T_COMMON_OPTION");                             // 환경설정.
        string strNetSetInfo = XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE");                         // 접속환경
        string strBasicSetInfo = XmlConf.GetTitle("T_ETC_BASICSET_TITLE");                      // 기본설정.
        string strBoardNotiInfo = XmlConf.GetTitle("T_COMMON_NOTIFY");                          // 공지사항

        SideBarUISvc.DeleteAllItem();
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int count = listNetWork.Count;


        // 첫번째 접속된곳과 동일하거나, groupid 설정값에 따라 가도록 for 밖으로 빼놓는다
        bool bFileTransMenuUse = false;
        bool bApprMenuUse = false;
        bool bSecurityApprMenuUse = false;
        bool bPCURLUse = false;
        bool bUseClipBoardManageUI = false;
        bool bUseClipBoardApproveUI = false;
        bool bEmailUse = false;
        bool bFileTransUse = false;

        bool bPublicBoard = false;
        bool bBasicConf = false;
        bool bDeputyApprove = false;
        int nUseNetOverFileTrans = -1;  // -1 : 3망상황아님, 0 : 3망상황에서 파일전송 모든곳에 미사용, 1 : 3망상황에서 파일전송 1곳에서라도 사용
        bool bHanssakOTP = false;       //OTP 팝업메뉴 표시여부
        int nApproveProxy = 1; //대결재사용여부 0: 사용안함, 1: 대결재(대결재를 신청하면 대결재가 결재),
                               //2: 결재자 추가(대결재 사용 결재자 추가),
                               //3:대결재 + 결재자 추가(대결 사용, 결재자 추가도 사용, 대결할 사람이 아닌 원 결재자가 보임)
                               // 파일2전송 사용권한 확인

        ISGUserInfo sgUserInfo = SGAppMgrSvc.UserInfoService.GetUserInfo(groupid);
        bool bSFMManageUse = false;
        if (sgUserInfo != null && sgUserInfo.UserInfoAdded != null)
            bSFMManageUse = sgUserInfo.UserInfoAdded.IsMySelfSFM;

        //bool bSFMManageUse = sgUserInfo.UserInfoAdded.IsMySelfSFM;

        if (dicSysIdName != null && dicSysIdName.Count > 1)
        {
            nUseNetOverFileTrans = 0;
            foreach (var item in dicSysIdName)
            {

                if ((item.Value.strDestSysid.Length > 0 && item.Value.bUseFileTrans && item.Key.Length > 0) &&
                   ((pageService.m_bIsMultiNetWork && item.Value.nIdx == 1) || (pageService.m_bIsMultiNetWork == false && item.Value.nIdx != 0)))

                //if (item.Value.bUseFileTrans)
                {
                    nUseNetOverFileTrans = 1;
                    break;
                }
            }
        }

        //메뉴루프 시작
        for (int i = 0; i < count; i++)
        {
            int gID = listNetWork[i].GroupID;
            string strNetFromName = listNetWork[i].FromName;
            string strNetToName = listNetWork[i].ToName;

            bool bExpand = false;
            bool bActived = false;
            if (groupid == gID)
            {
                bExpand = true;
                bActived = true;
            }

            SGLoginData sgLoginData = null;
            SGUserData sgUserData = null;
            sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(i);
            sgUserData = (SGUserData)HSCmdCenter.GetUserData(i);

            if (sgLoginData != null && sgUserData != null)
            {
                bHanssakOTP = sgLoginData.GetTagValue("OTP");
                bFileTransMenuUse = sgLoginData.GetFileTrans();

                //보안결재 사용여부
                bSecurityApprMenuUse = sgLoginData.GetTagValue("PRIVACYAPPROVE");
                if (bSecurityApprMenuUse)
                {
                    if (sgUserData.GetUserPrivacyApprPos())
                        bSecurityApprMenuUse = true;
                    else
                        bSecurityApprMenuUse = false;
                }
                nApproveProxy = sgLoginData.GetTagValueInteger("APPROVEPROXY");
                //if (sgLoginData.GetApprove() == true)
                // 3망 정책고려한 결재사용유무 설정
                if ((pageService.GetUseApproveNetOver(groupid, sgLoginData) && SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI(groupid) == false) || SGAppMgrSvc.OpConfigInfoService.GetUseApproveManageUIForce(groupid)) // 결재관리 UI 않나오는 설정추가
                    @*if ((sgLoginData.GetApproveProxyRight() && bSFMManageUse) || (sgUserInfo.GetUserApprPos() > 0))*@
                    if (sgLoginData.GetApproveProxyRight() || (sgUserInfo.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupid)) > 0))     //(일반사용자)대결재자 권한을 가지거나, 전결/결재자인 경우 결재관리 표시
                        bApprMenuUse = true;

                //bSecurityApprMenuUse = sgUserData.GetUserPrivacyApprPos();
                bPCURLUse = sgLoginData.GetPCURLUse();

            }

            // 3망 상황 - 파일전송 UI view 설정 확인
            if (nUseNetOverFileTrans > -1)
            {
                if (nUseNetOverFileTrans == 0)
                    bFileTransMenuUse = false;
                else
                    bFileTransMenuUse = true;
            }

            // 파일전송화면 이면 저장했던 위치를 찾아서 사용한다. (AppOPsetting.json 의 enMainPageType : 2 이면, 파일전송 화면이됨, 다른값:DashBoard)
            string strRootPath = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";

            bFileTransUse = SGAppMgrSvc.OpConfigInfoService.GetUseFileTrans(groupid);
            // siteConfig. json으로 이동
            bEmailUse = SGAppMgrSvc.OpConfigInfoService.GetUseEmailManageApprove(groupid);
            //bEmailUse = AppConfigSvc.GetEmailApproveUse();

            bPCURLUse = SGAppMgrSvc.OpConfigInfoService.GetUsePCURL(groupid);

            bUseClipBoardManageUI = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipManageUI(groupid);
            bUseClipBoardApproveUI = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipApproveUI(groupid);
            //bUseClipBoardManageUI = AppConfigSvc.GetClipboardManageUse();

            bPublicBoard = SGAppMgrSvc.OpConfigInfoService.GetUsePublicBoard(groupid);


            bDeputyApprove = false;
            if (sgLoginData != null)
                bDeputyApprove = sgLoginData.GetDeputyApprove();

            bool bCertSend = SGAppMgrSvc.OpConfigInfoService.GetUseCertSend(groupid);            // siteConfig - json으로 설정이동
            bool bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupid);


            //bBasicConf = (bDeputyApprove | bCertSend | bAutoLogin);
            bBasicConf = bAutoLogin;

            int nParentID = 0;
            // int nParentID = LastParentID;

            // 우선 모든 메뉴가 나오도록 임시 설정.
            //bFileTransMenuUse = bApprMenuUse = bSecurityApprMenuUse = bPCURLUse = bUseClipBoardApproveUI = bUseClipBoardManageUI = bEmailUse = bPublicBoard = true;

            string strNavigatePathWithGroupID = "";
            string strUserSeq = "";
            if (sgUserData != null)
                strUserSeq = sgUserData.GetUserSequence();

            if (pageService.GetConnectStatus(i) == false)
            {
                strNavigatePathWithGroupID = strRootPath;
                strNavigatePathWithGroupID += gID.ToString();

                SideBarUISvc.AddRoot(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: strNavigatePathWithGroupID, badgeType: "right badge badge-danger", badgeValue: "N", "", bActived, bExpand, strUserSeq);
                nParentID++;
            }
            else
            {
                strNavigatePathWithGroupID = strRootPath;
                strNavigatePathWithGroupID += gID.ToString();

                SideBarUISvc.AddRoot(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: strNavigatePathWithGroupID, badgeType: "right badge badge-danger", badgeValue: "N", "", bActived, bExpand, strUserSeq);

                if (bFileTransUse)
                {
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                    // Menu index는 list index가 아니므로, 메뉴 구분용도로 만 사용하면됨.
                    // 파일전송(0)

                    strNavigatePathWithGroupID = "/transfer/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strFileTrans, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bFileTransMenuUse, strUserSeq: strUserSeq);

                    // 전송관리(1)
                    strNavigatePathWithGroupID = "/transManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        pageService.m_TransMenuArray[gID] = SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strTransManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", strUserSeq: strUserSeq);

                    // 결재관리(2)
                    strNavigatePathWithGroupID = "/transferApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                        pageService.m_approveMenuArray[gID] = SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bApprMenuUse, strUserSeq: strUserSeq);

                    // 보안결재관리(3)
                    if (bSecurityApprMenuUse)
                    {
                        strNavigatePathWithGroupID = "/securityApprove/";
                        strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strSecurityApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse, strUserSeq: strUserSeq);
                    }

                    //파일검사 예외 신청(4)
                    if (SGAppMgrSvc.OpConfigInfoService.GetUseFileCheckException(gID))
                    {
                        if (sgLoginData.GetServerVirusExam())
                        {
                            strNavigatePathWithGroupID = "/fileException/";
                            strNavigatePathWithGroupID += gID.ToString();
                            if (SideBarUISvc.FindSubMenu(gID, nParentID, 4) == null)
                                SideBarUISvc.AddSubMenu(groupId: gID, Id: 4, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_FILE_EXCEPTION"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);              // 파일검사 예외 신청
                        }
                    }

                    //대결재관리(5)
                    if (bDeputyApprove && bApprMenuUse && sgUserInfo.GetUserApprPos(true, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(gID)) > 0)      //일반사용자는 (대결재권한을 가져도) 대결재 관리 사용 불가
                    {
                        strNavigatePathWithGroupID = "";    //안씀
                                                            //strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 5) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 5, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_PROXY_PROXYREG_MANAGE"), icon: "fas fa-cog", path: "POPUP('DEPUTY')", badgeType: "right badge badge-warning", bUse: bSFMManageUse, strUserSeq: strUserSeq);
                    }

                    // 인증서전송(6)
                    if (SGAppMgrSvc.OpConfigInfoService.GetUsePKIsendRecv(groupid))
                    {
                        strNavigatePathWithGroupID = "/pkiTransfer/";
                        strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 6) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 6, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: XmlConf.GetTitle("T_COMMON_PKI_TRANS"), icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);
                    }
                    nParentID++;
                }

                if (bEmailUse)
                {
                    // 메일 관리

                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse, strUserSeq: strUserSeq);

                    // 메일 관리(0)
                    strNavigatePathWithGroupID = "/mailManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailTransManage, icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bEmailUse, strUserSeq: strUserSeq);

                    // 메일 결재(1)
                    strNavigatePathWithGroupID = "/mailApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailApprManage, icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse), strUserSeq: strUserSeq);

                    // 보안결재관리(2)
                    if (bSecurityApprMenuUse)
                    {
                        strNavigatePathWithGroupID = "/mailSecurityApprove/";
                        strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strSecurityApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse, strUserSeq: strUserSeq);
                    }

                    //대결재관리(3)
                    if (bDeputyApprove && bApprMenuUse && sgUserInfo.GetUserApprPos(true, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(gID)) > 0)      //일반사용자는 (대결재권한을 가져도) 대결재 관리 사용 불가
                    {
                        strNavigatePathWithGroupID = "";    //안씀
                                                            //strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: XmlConf.GetTitle("T_PROXY_PROXYREG_MANAGE"), icon: "fas fa-cog", path: "POPUP('DEPUTY')", badgeType: "right badge badge-warning", bUse: bSFMManageUse, strUserSeq: strUserSeq);
                    }
                    nParentID++;
                }

                if (bPCURLUse)
                {
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strUserSeq);

                    // PCURL 관리
                    strNavigatePathWithGroupID = "/pcurlManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLTransManage, icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strUserSeq);

                    // PCURL 결재
                    strNavigatePathWithGroupID = "/pcurlApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLApprManage, icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse), strUserSeq: strUserSeq);

                    nParentID++;
                }

                if (bUseClipBoardManageUI)
                {
                    // 클립보드 관리
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bUseClipBoardManageUI, strUserSeq: strUserSeq);

                    // 클립보드 관리
                    strNavigatePathWithGroupID = "/clipBoardManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardTransManage, icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bUseClipBoardManageUI, strUserSeq: strUserSeq);


                    if (bUseClipBoardApproveUI)
                    {
                        // 클립보드 결재
                        strNavigatePathWithGroupID = "/clipBoardApprove/";
                        strNavigatePathWithGroupID += gID.ToString();
                        if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                            SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardApprManage, icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bUseClipBoardApproveUI & bApprMenuUse), strUserSeq: strUserSeq);
                    }
                    nParentID++;
                }

                // 접속환경
                strNavigatePathWithGroupID = "/viewConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                    SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // 공지사항(0)
                strNavigatePathWithGroupID = "/publicBoard/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBoardNotiInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPublicBoard, strUserSeq: strUserSeq);

                // 접속환경(1)
                strNavigatePathWithGroupID = "/viewConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // 기본설정(2)
                if (pageService.GetGroupIDLoginType(gID) != eLoginType.eLOGINTYPE_AD && bBasicConf)
                {
                    strNavigatePathWithGroupID = "/netConf/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBasicSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);
                }

                //OTP 팝업메뉴(3)
                if (bHanssakOTP)
                {
                    strNavigatePathWithGroupID = "/hanssakOTP/";    //안씀
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: XmlConf.GetTitle("T_COMMON_OTP"), icon: "fas fa-cog", path: "POPUP('OTP')", badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strUserSeq);
                }
            }

        }

        SideBarUISvc.EmitNotifyStateChangedActMenu();

    }

    public bool GetInitPWLogin(int groupID)
    {
        string strInitPW = SGAppMgrSvc.OpConfigInfoService.GetInitPasswordInfo(groupID);

        SGRSACrypto sgRSACrypto = new SGRSACrypto();

        string strEncPW = "";
        sgRSACrypto.ValueEncrypt(pw, out strEncPW);
        if (strEncPW.Equals(strInitPW))
            return true;

        //옵션에 따라, ID와 동일할 경우 초기 비밀번호로 인지
        if (SGAppMgrSvc.OpConfigInfoService.GetUseIDAsInitPassword(groupID) && id == pw)
            return true;
        return false;
    }

    public void CheckStateChange()
    {
        bAutoLoginCheck = (!bAutoLoginCheck);
        if (!bAutoLoginCheck)
        {
            bLoginBtnDisable = false;
            StateHasChanged();
        }
    }
    public void SaveIDCheckStateChange() => bIDSaveCheck = (!bIDSaveCheck);

    /// <summary>
    /// 사후결재 사용유무에 대한 초기 checkBox의 check 상태 유무를 저장
    /// (파일전송화면 이동전에 클립보드전송 가능하므로)
    /// </summary>
    /// <param name="groupID"></param>
    public void SaveAfterApproveCheckBoxStatus(int groupID)
    {

        // Service 쪽에 groupID 별로 사후결재 설정상태값 저장하고 있어야함.

    }

    /*
    public bool ClientPatch(SGLoginData sgLoginData)
        {

        if (sgLoginData == null)
        return false;
        bool bUpdate = sgLoginData.GetClientUpgrade();
        if (!bUpdate)
        return false;

        string strSvrCliVersion = sgLoginData.GetServClientVersion();
        if (strSvrCliVersion.Equals(""))
        return false;
        strSvrCliVersion = strSvrCliVersion.ToUpper();

        string strCliVersion = HSCmdCenter.GetCliVersion();
        if (strCliVersion.Equals(""))
        return false;
        strCliVersion = strCliVersion.ToUpper();

        //return true;

        if (String.Compare(strSvrCliVersion, strCliVersion, comparisonType: StringComparison.OrdinalIgnoreCase) > 0)
                                                                        {
                                                                            return true;
                                                                                }
                                                                                    else
                                                                                        return false;

                                                                                            }
    */

}
