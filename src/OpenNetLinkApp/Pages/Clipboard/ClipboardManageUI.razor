@page "/clipBoardManage"
@page "/clipBoardManage/{groupIDbyParam:int}"

@using OpenNetLinkApp.Data.SGQuery
@using HsNetWorkSGData
@using System.Diagnostics
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGDomain
@using System.Text
@using OpenNetLinkApp.Components.SGSearchCondition

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject HSCmdCenter HSCmdCenter

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strTransManTitleGap</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strTransManTitleGap</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">
                        <table>
                            <tr>
                                <th class="p-2">@strPeriod</th> <!--기간-->
                                <td style="width:28%;">
                                    @*  <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker13" readonly="readonly" value="@strFromDay">
                                        <span class="float-left col-md-1">-</span>
                                        <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker14" readonly="readonly" value="@strToDay">*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>
                                <th class="p-2"> @strTransKind </th> <!--전송구분-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransKindValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransKind"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransKindValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransKind"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransKindValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2"> @strTransStatus </th>     <!-- 전송상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransStatusValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransStatusValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransStatusValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2"> @strApprStatus </th>         <!-- 승인상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strApprStatusValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("ApproveStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strApprStatusValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("ApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApprStatusValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                            </tr>
                            <tr>
                                <th class="p-2"> @strDataTypeStatus </th>         <!-- 데이타타입-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strDataTypeValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu4">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("DataType"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strDataTypeValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("DataType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDataTypeValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                <div class="col-sm-12 text-right">
                    <button type="button" class="btn btn-md btn-black" @onclick="TransSearchCount"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                    <button type="button" class="btn btn-md btn-red" @onclick="@TransCancel"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_COMMON_TRANSCANCLE")</button>
                </div>
            </div>
        </div>

        <!-- list -->

        <div class="row">
            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">
                    <form class="form-horizontal">
                        <div class="card-body p-0">
                            <table class="table table-head-fixed table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th style="text-align:center; vertical-align:middle;width:5%;">
                                            @*체크박스*@
                                            @*<input class="input" type="checkbox">*@
                                        </th>
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strApproveKind</th>                        <!--결재종류-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strTransKind</th>                          <!--전송구분-->
                                        <th style="text-align:center; vertical-align:middle;width:8%;">@strTransStatus</th>                        <!--전송상태-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strApprStatus</th>                         <!--승인상태-->
                                        <th style="text-align:center; vertical-align:middle; width: 7%;">@strDataTypeStatus</th>                   <!--데이터타입-->
                                        <th style="text-align:center; vertical-align:middle;width:15%;">@strTitle</th>                             <!--제목-->
                                        <th style="text-align:center; vertical-align:middle;width:14%;">@strFileSendDay</th>                       <!--전송요청일-->
                                        @if (bUseDlpDataView)
                                        { 
                                            <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_COMMON_PRIVACY")</th>  <!--개인정보-->
                                        }
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strDetail</th>                             <!--상세보기-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (transData item in mData)
                                    {
                                        <tr>
                                            <td style="text-align:center; vertical-align:middle">
                                                <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                            </td>
                                            <td style="text-align:center; vertical-align:middle">@item.ApvType</td>
                                            <td style="text-align:center; vertical-align:middle">@item.TransferType</td>
                                            <td style="text-align:center; vertical-align:middle">@item.TransferStatus</td>
                                            <td style="text-align:center; vertical-align:middle">@item.ApvStatus</td>
                                            <td style="text-align:center; vertical-align:middle">@item.DataType</td>
                                            <td style="vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                            <td style="text-align:center; vertical-align:middle">@item.RequestTime</td>
                                            @if (bUseDlpDataView)
                                            { 
                                                <td style="text-align:center; vertical-align:middle">@item.stDLP</td>
                                            }
                                            <td style="text-align:center; vertical-align:middle"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>DetailSearch(item.TransSeq))"><i class="fas fa-search"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="card-body pt-0">
                            <!--S page -->
                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>
                        </div>
                        <Footer></Footer>
                    </form>
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>
<ClipboardManagePopUp @ref="refClipboardManagePopUp"></ClipboardManagePopUp>

@code {

    [Parameter]
    public int groupIDbyParam { get; set; }
    SGCustomSelect refSGCustomSelect;
    ClipboardManagePopUp refClipboardManagePopUp;
    PeriodDatePicker refPeriodDatePicker;

    public int TotalCount { get; set; }
    public List<transData> mData = new List<transData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    public string strTransManTitleGap = "";
    public string strTransManageTitle = "";
    public string strPeriod = "";
    public string strTransKind = "";
    public string strTotal = "";
    public string strCarryIn = "";
    public string strCarryOut = "";
    public string strTransStatus = "";
    public string strTransComplete = "";
    public string strTransWait = "";
    public string strTransCancle = "";
    public string strApprStatus = "";
    public string strDataTypeStatus = "";
    public string strApprove = "";
    public string strApprWait = "";
    public string strReject = "";
    public string strApprCancle = "";
    public string strTitle = "";
    public string strReflesh = "";
    public string strSearch = "";
    public string strDownload = "";
    public string strApproveKind = "";
    public string strFileForward = "";
    public string strFileSendDay = "";
    public string strDetail = "";
    public string strTotalPage = "";
    public string strTransFail = "";
    public string strTransInspect = "";
    public string strTitleInputInfo = "";

    bool bUseDlpDataView = true;

    @*public string strFromDay = "";
        public string strToDay = "";*@
    //private int m_currentDownloadCount = 0;

    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGSiteConfigService siteConfig;
    ISGAppConfigService AppConfigSvc;

    // 목적지 Data
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    public string strDestNetWork = "";
    public string _strDestNetWork
    {
        get { return strDestNetWork; }
        set
        {
            strDestNetWork = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    TransferParam param = new TransferParam();

    List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정

    public string strTransKindValue = "";
    public string _strTransKindValue
    {
        get { return strTransKindValue; }
        set
        {
            strTransKindValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    public string strTransStatusValue = "";
    public string _strTransStatusValue
    {
        get { return strTransStatusValue; }
        set
        {
            strTransStatusValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    public string strApprStatusValue = "";
    public string _strApprStatusValue
    {
        get { return strApprStatusValue; }
        set
        {
            strApprStatusValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }
    //데이타타입
    public string strDataTypeValue = "";
    public string _strDataTypeValue
    {
        get { return strDataTypeValue; }
        set
        {
            strDataTypeValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }
    public string strTitleValue = "";
    public string strSystemName = "";
    public string curUserID = "";
    @*public string curFromDay = "";
        public string curToDay = "";*@
    public string curTransKind = "";
    public string curTransStatus = "";
    public string curApprStatus = "";
    public string curDataType = "";
    public string curTitle = "";
    public string curDestNetWork = "";

    private async void openCustomSelect(string opt)
    {
        if (opt == "TransKind")
            await refSGCustomSelect.openPopUp(opt, strTransKindValue);
        else if (opt == "TransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransStatusValue);
        else if (opt == "ApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strApprStatusValue);
        else if (opt == "DataType")
            await refSGCustomSelect.openPopUp(opt, strDataTypeValue);
        else if (opt == "DestNetwork")
            await refSGCustomSelect.openPopUp(opt, strDestNetWork, dicDestSysPos);
    }

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransKind")
            _strTransKindValue = stValue;
        else if (stOption == "TransStatus")
            _strTransStatusValue = stValue;
        else if (stOption == "ApproveStatus")
            _strApprStatusValue = stValue;
        else if (stOption == "DataType")
            _strDataTypeValue = stValue;
        else if (stOption == "DestNetwork")
            _strDestNetWork = stValue;
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    private void UpdateList(int pageNumber)
    {
        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip((pageNumber - 1) * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="updatePageNum"></param>
    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }

    /// <summary>
    ///
    /// </summary>
    private void UpdateData()
    {
        TransSearchData(nViewPageNo);
    }

    //원데이타라고 가정함
    public List<transData> ListData = new List<transData>();

    /// <summary>
    ///
    /// </summary>
    /// <param name="transSeq"></param>
    /// <returns></returns>
    public async Task OpenDetailPopup(string transSeq)
    {
        Console.WriteLine("Open Detail Start" + transSeq);
        long ltransSeq = Convert.ToInt64(transSeq);
        refClipboardManagePopUp.bUseDlpDataView = bUseDlpDataView;
        await refClipboardManagePopUp.openPopUp(ltransSeq);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="transSeq"></param>
    public void DetailSearch(string transSeq)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        HSCmdCenter.sgPageEvent.SetDetailSearchEventAdd(groupID, DetailSearchResult);           // 상세보기 조회 결과

        SGLoginData sgLoginData = null;
        sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData == null)
            return;

        string strUserID = sgLoginData.GetUserID();

        HSCmdCenter.SendTransDetail(groupID, strUserID, transSeq);
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void DetailSearchResult(int groupId, PageEventArgs e)
    {
        int nRet = e.result;
        string strMsg = e.strMsg;
        if (nRet != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        SGDetailData sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupId);
        if (sgDetailData == null)
            return;

        transData tData = null;
        tData = GetTransListData(strMsg);
        if (tData != null)
        {
            string sTransSeq = tData.TransSeq;
            string sApprSeq = "";
            int nDataForwarded = 0; // GetForwarded(tData.IsFile);
            bool bTransCancel = false;  //!tData.bCheckDisable;
            bool bApprove = false;
            bool bReject = false;

            sgDetailData.SetInit(false, sTransSeq, sApprSeq, nDataForwarded, bTransCancel, bApprove, bReject);
            HSCmdCenter.SetDetailDataChange(groupId, sgDetailData);

            refClipboardManagePopUp.m_downloadCount = 0; //m_currentDownloadCount;
            refClipboardManagePopUp.SetBindingData(tData.DataType);
            OpenDetailPopup(sTransSeq).Wait();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;

        ////파라미터 핸들링 클래스 초기화
        //param.XmlConf = XmlConf;
        //param.jsRuntime = jsRuntime;

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        // 조회방식변경
        @*HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchResult);           // 조회 데이터 결과.
            HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCount);           // 조회 데이터 수 결과.*@

        // 전송관리 처럼
        HSCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, SearchResult);                  // 조회 데이터 결과.
        HSCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, SearchCount);              // 조회 데이터 수 결과.
        HSCmdCenter.sgPageEvent.SetTransCancelEventAdd(groupID, TransCancelResult);             // 전송 취소 결과.

        strDestNetWork = strTotal;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData.GetUseOverNetwork2())
        {
            dicDestSysPos = pageService.GetTargetSystemList(groupID);
        }

        bUseDlpDataView = SGAppMgrSvc.OpConfigInfoService.GetUseUIdlpData(groupIDbyParam);

        @*GetInitDateTime();*@
        base.OnInitialized();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            @*   object[] param = { "datepicker13", "datepicker14" };
                jsRuntime.InvokeAsync<object>("initDatePicker", param);*@
            jsRuntime.InvokeAsync<object>("initPageLeft");
            await TransSearchCount();
        }
        base.OnAfterRender(firstRender);
    }

    public void InitText()
    {
        strTransManTitleGap = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                       // 클립보드 관리
        strTransManageTitle = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                     // 전송관리
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                                    // 기간
        strTransKind = XmlConf.GetTitle("T_COMMON_TRANSKIND");                              // 전송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                        // 전체
        strCarryIn = XmlConf.GetTitle("T_COMMON_IMPORT");                                   // 반입
        strCarryOut = XmlConf.GetTitle("T_COMMON_EXPORT");                                  // 반출
        strTransStatus = XmlConf.GetTitle("T_TRANS_STATUS");                                // 전송상태
        strTransComplete = XmlConf.GetTitle("T_TRANS_COMPLETE");                            // PC수신완료
        strTransWait = XmlConf.GetTitle("T_COMMON_TRANSWAIT");                              // 전송대기
        strTransCancle = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");                          // 전송취소
        strApprStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                         // 승인상태
        strDataTypeStatus = @XmlConf.GetTitle("T_DATA_TYPE");                               // 데이타 타입
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                                  // 승인
        strApprWait = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                            // 승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                                 // 반려
        strApprCancle = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");                         // 요청취소
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                                       // 제목
        strReflesh = XmlConf.GetTitle("T_COMMON_REFRESH");                                  // 새로고침
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                                    // 조회
        strDownload = XmlConf.GetTitle("T_TRANS_MANUAL_DOWNLOAD");                          // 다운로드
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                         // 결재종류
        strFileForward = XmlConf.GetTitle("T_ETC_FILEFORWARD");                             // 파일전달
        strFileSendDay = XmlConf.GetTitle("T_TRANS_DATE");                                  // 전송요청일
        strDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                                // 상세보기
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                               // 총페이지
        strTransFail = XmlConf.GetTitle("T_COMMON_TRANSFAIL");                              // 전송실패
        strTransInspect = XmlConf.GetTitle("T_COMMON_TRANSCHECKING");                       // 검사중
        strTitleInputInfo = XmlConf.GetWarnMsg("W_0021");                                   // 제목을 입력하여 주십시오.

        strTransKindValue = strTotal;
        strTransStatusValue = strTotal;
        strApprStatusValue = strTotal;
        strDataTypeValue = strTotal;
        strTitleValue = "";
    }

    public async Task TransSearchCount()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();
        @*await GetDateTime();*@
        curTransKind = GetTransKind();
        curTransStatus = GetTransStatus();
        curApprStatus = GetApprStatus();
        curDataType = GetDataTypeCode();
        string[] strArrClipDataType = curDataType.Equals("3") ? null : new string[] { curDataType };

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
            curDestNetWork = GetDestNetWorkSysID();

        curTitle = strTitleValue;
        byte[] temp = Encoding.Default.GetBytes(curTitle);
        curTitle = Encoding.UTF8.GetString(temp);

        nViewPageNo = 1;

        await refPeriodDatePicker.RetriveDateFromJS();
        string curFromDay = refPeriodDatePicker.FromDateSearchValue;
        string curToDay = refPeriodDatePicker.ToDateSearchValue;

        TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curTitle, curFromDay, curToDay, curUserID, nPageListCount, nViewPageNo);
        string strQueryCount = "";

        param.Src_system_id = "";
        param.Dest_system_id = "";

        // 3망상황일때
        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {
            foreach (var item in dicDestSysPos)
            {
                // src - 소스가 분명히 분리되어 계산될 대에만 사용
                if (item.Value.nIdx == 0)
                {
                    param.Src_system_id = item.Value.strDestSysid;
                }

                // Dest
                if (item.Key == strDestNetWork)
                {
                    param.Dest_system_id = item.Value.strDestSysid;
                    if (param.Src_system_id == param.Dest_system_id)    // 현재망으로 수신된 경우만 검색
                        param.Src_system_id = "";
                }
            }

            TransferDao dao = new TransferDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Multiple;
            strQueryCount = dao.TotalCount(param, false);   // 쿼리 데이터 카운트
        }
        else
        {
            TransferDao dao = new TransferDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Single;
            strQueryCount = dao.TotalCount(param, false, strArrClipDataType);   // 쿼리 데이터 카운트
        }

        // 조회방식 변경
        //HSCmdCenter.SendCountQuery(groupID, curUserID, strQueryCount);
        HSCmdCenter.SendTransListCountQuery(groupID, curUserID, strQueryCount);
    }

    public void TransSearchData(int pageNum)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        if (pageService.GetConnectStatus(groupID) == false)
        {
            string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        Task.Run(async () => { await refPeriodDatePicker.RetriveDateFromJS(); });
        string curFromDay = refPeriodDatePicker.FromDateSearchValue;
        string curToDay = refPeriodDatePicker.ToDateSearchValue;

        TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curTitle, curFromDay, curToDay, curUserID, nPageListCount, pageNum);
        string strQuery = "";
        param.Src_system_id = "";
        param.Dest_system_id = "";
        string[] strArrClipDataType = curDataType.Equals("3") ? null : new string[] { curDataType };


        // 3망상황일때
        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {

            foreach (var item in dicDestSysPos)
            {
                // src
                if (item.Value.nIdx == 0)
                {
                    param.Src_system_id = item.Value.strDestSysid;
                }

                // Dest
                if (item.Key == strDestNetWork)
                {
                    param.Dest_system_id = item.Value.strDestSysid;
                    if (param.Src_system_id == param.Dest_system_id)    // 현재망으로 수신된 경우만 검색
                        param.Src_system_id = "";
                }

            }

            TransferDao dao = new TransferDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Multiple;
            strQuery = dao.List(param, false);   // 쿼리 데이터 리스트
        }
        else
        {
            TransferDao dao = new TransferDao();
            param.NetWorkType = Common.Enums.EnumNetWorkType.Single;
            strQuery = dao.List(param, false, strArrClipDataType);   // 쿼리 데이터 리스트
        }

        // 조회방식 변경
        //HSCmdCenter.SendListQuery(groupID, curUserID, strQuery);
        HSCmdCenter.SendTransListQuery(groupID, curUserID, strQuery);
    }
    @*

        public void GetInitDateTime()
        {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
        }

        private async Task RetriveDateFromJS()
        {
        object[] param = { "datepicker13" };
        string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
        if (vStr != null && vStr.Length > 0)
        strFromDay = vStr;
        object[] param2 = { "datepicker14" };
        string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
        if (vStr2 != null && vStr2.Length > 0)
        strToDay = vStr2;
        }

        public async Task GetDateTime()
        {
        await RetriveDateFromJS();

        char sep = '-';
        string[] splitFrom = strFromDay.Split(sep);
        curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
        string[] splitTo = strToDay.Split(sep);
        curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
        }
    *@
    /// <summary>
    /// 전송구분 가져오기
    /// </summary>
    /// <returns>전송구분명</returns>
    public string GetTransKind()
    {
        string strValue = "";

        if (strTransKindValue.Equals(strTotal))                         // 전체
            strValue = "";
        else if (strTransKindValue.Equals(strCarryOut))                 // 반출
            strValue = "1";
        else if (strTransKindValue.Equals(strCarryIn))                  // 반입
            strValue = "2";
        else
            strValue = "";

        return strValue;
    }

    /// <summary>
    /// 전송상태 가져오기
    /// </summary>
    /// <returns>전송상태명</returns>
    public string GetTransStatus()
    {
        string strValue = "";

        if (strTransStatusValue.Equals(strTotal))                                 // 전체
            strValue = "";
        else if (strTransStatusValue.Equals(strTransComplete))                      // PC수신완료
            strValue = "S";
        else if (strTransStatusValue.Equals(strTransWait))                          // 전송대기
            strValue = "W";
        else if (strTransStatusValue.Equals(strTransCancle))                        // 전송취소
            strValue = "C";
        else if (strTransStatusValue.Equals(strTransFail))                        // 전송실패
            strValue = "F";
        else if (strTransStatusValue.Equals(strTransInspect))                      // 검사중
            strValue = "V";
        else
            strValue = "";

        return strValue;
    }

    /// <summary>
    /// 승인상태 가져오기
    /// </summary>
    /// <returns>승인상태명</returns>
    public string GetApprStatus()
    {
        string strValue = "";

        if (strApprStatusValue.Equals(strTotal))                                // 전체
            strValue = "";
        else if (strApprStatusValue.Equals(strApprWait))                        // 승인대기
            strValue = "1";
        else if (strApprStatusValue.Equals(strApprove))                         // 승인
            strValue = "2";
        else if (strApprStatusValue.Equals(strReject))                          // 반려
            strValue = "3";
        else if (strApprStatusValue.Equals(strApprCancle))                      // 요청취소
            strValue = "4";

        return strValue;
    }

    /// <summary>
    /// 목적지(망)에서 선택한 망의 system_ID 값을 넘겨준다. 전체를 선택했을때에는 "" 공백리턴
    /// </summary>
    /// <returns></returns>
    public string GetDestNetWorkSysID()
    {
        string strValue = "";

        if (strDestNetWork.Equals(strTotal))                                // 전체
        {
            strValue = "";
            return strValue;
        }

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {
            foreach (var item in dicDestSysPos)
            {
                if (item.Key == strDestNetWork)
                {
                    strValue = item.Value.strDestSysid;
                    break;
                }
            }
        }

        return strValue;
    }

    /// <summary>
    /// 데이터타입 가져오기
    /// </summary>
    /// <returns>데이터타입명</returns>
    private string GetDataTypeCode()
    {
        string strValue = "";

        if (strDataTypeValue == XmlConf.GetTitle("T_DATA_TYPE_TEXT"))   //텍스트
            strValue = "1";
        else if (strDataTypeValue == XmlConf.GetTitle("T_DATA_TYPE_IMAGE")) // 이미지
            strValue = "2";
        else
            strValue = "3";

        return strValue;
    }


    public void SearchCount(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        if (e.count <= 0)
        {
            ShowMessage("warn", strMsg);            // 검색결과가 존재하지 않습니다.
            ListData.Clear();


            UpdateList(0);
            SetPageinfo(e.count);
            StateHasChanged();
            return;
        }

        SetPageinfo(e.count);    // 페이징 계산
        UpdateData();
    }


    @*public void SearchCount(int groupId, SGData e)
        {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");
        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        if (result != "0")
        {
        ShowMessage("error", reason);
        return;
        }
        if (totalCnt <= 0)
        {
        //ShowMessage("warn", reason);            // 검색결과가 존재하지 않습니다.
        //if (listData != null) listData.Clear();
        //SetPageinfo(totalCnt);
        //StateHasChanged();
        //return;

        ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.
        ListData.Clear();

        UpdateList(0);
        SetPageinfo(totalCnt);
        StateHasChanged();
        return;
        }
        SetPageinfo(totalCnt);
        //리스트 쿼리 호출
        UpdateData();
        }*@

    private void doSearchList()
    {
        TransSearchData(nViewPageNo);
    }


    public void SearchResult(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupId);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();


        ListData.Clear();

        SGTransManageData sgData = null;
        sgData = (SGTransManageData)HSCmdCenter.GetTransManageData(groupId);
        if (sgData == null)
            return;


        List<Dictionary<int, string>> TransSearchList = null;
        TransSearchList = sgData.GetQuerySearchData();
        int nCount = TransSearchList.Count;

        for (int i = 0; i < nCount; i++)
        {
            Dictionary<int, string> dic = TransSearchList[i];
            if (dic == null)
                continue;

            string tmpStr = "";
            if (dic.TryGetValue(0, out tmpStr) != true)
            {
                if (tmpStr.Equals(""))
                    continue;
            }


            transData tData = new transData();
            tData.bCheck = false;
            tData.bCheckDisable = !(sgData.GetTransCancelEnableChk(curUserID, dic));
            tData.TransSeq = sgData.GetTransSeq(dic);                   // TransSeq;
            tData.ApvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
            tData.TransferType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
            tData.TransferStatus = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
            tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)
            tData.IsFile = sgData.GetFileForwardKind(dic);              // 파일전달.


            if (dicDestSysPos != null && dicDestSysPos.Count > 0)
                tData.strDestNet = sgData.GetDestNetworkName(dic, dicDestSysPos);          // 목적지 값

            tData.DataType = sgData.GetDataType(dic);
            tData.Title = sgData.GetTitle(dic);                         // 제목
            FileAddManage fileAddManage = new FileAddManage();
            tData.Title = fileAddManage.GetConvertTitleDesc(false, tData.Title);
            tData.RequestTime = sgData.GetQueryTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
            tData.TransStatusCode = sgData.GetTransStatusCode(dic);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
            tData.ApprStatusCode = sgData.GetApprStausCode(dic);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
            tData.downloadCount = Int32.Parse(sgData.GetDownloadCount(dic));  //다운로드 카운트
            tData.stDLP = sgData.GetDlp(dic);

            ListData.Add(tData);
        }

        UpdateInitList(nViewPageNo);
        StateHasChanged();
    }

    @*public void SearchResult(int groupId, SGData e)
        {
        string result = e.GetTagData("RESULT");
        string reason = e.GetTagData("REASON");
        int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
        listData = e.GetSvrRecordData2("RECORD");

        if (result != "0")
        {
        ShowMessage("error", XmlConf.GetWarnMsg("W_0242"));
        return;
        }
        SGData sgLoginData = HSCmdCenter.GetLoginData(groupId);
        string curUserID = "";
        if (sgLoginData != null)
        curUserID = sgLoginData.GetUserID();

        ListData.Clear();

        SGTransManageData sgData = null;
        sgData = (SGTransManageData)HSCmdCenter.GetTransManageData(groupId);
        //sgData = (SGTransManageData)e;

        if (sgData == null)
        return;

        int nCount = listData.Count;

        for (int i = 0; i < nCount; i++)
        {
        Dictionary<int, string> dic = listData[i];
        if (dic == null)
        continue;

        string tmpStr = "";
        if (dic.TryGetValue(0, out tmpStr) != true)
        {
        if (tmpStr.Equals(""))
        continue;
        }

        clipBoardData tData = new clipBoardData();
        tData.TransSeq = sgData.GetTransSeq(dic);                   // TransSeq;
        tData.ApvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
        tData.TransType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
        tData.TransStatus = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
        tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)

        //if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        //    tData.strDestNet = sgData.GetDestNetworkName(dic, dicDestSysPos);          // 목적지 값

        tData.Title = sgData.GetTitle(dic);                         // 제목
        FileAddManage fileAddManage = new FileAddManage();
        tData.Title = fileAddManage.GetConvertTitleDesc(false, tData.Title);
        tData.RequestTime = sgData.GetQueryTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
        tData.TransStatusCode = sgData.GetTransStatusCode(dic);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
        tData.ApprStatusCode = sgData.GetApprStausCode(dic);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
        tData.downloadCount = Int32.Parse(sgData.GetDownloadCount(dic));  //다운로드 카운트
        tData.stDLP = sgData.GetDlp(dic);
        tData.DataType = sgData.GetDataType(dic);   //데이터타입
        ListData.Add(tData);
        }

        UpdateInitList(nViewPageNo);
        StateHasChanged();
        }*@

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public transData GetTransListData(string strTransSeq)
    {
        transData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
            return tdata;

        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.TransSeq.Equals(strTransSeq))
            {
                tdata = temp;
                break;
            }
        }
        return tdata;
    }

    public class clipBoardData
    {

        public bool bCheckDisable { get; set; }           //체크 가능 불가능
        public bool bCheck { get; set; }                  //체크 상태

        public string TransSeq { get; set; }
        public string ApvType { get; set; }
        public string TransType { get; set; }
        public string TransStatus { get; set; }
        public string ApvStatus { get; set; }
        public string DataType { get; set; }
        public string Title { get; set; }                   //제목
        public string RequestTime { get; set; }
        public string TransStatusCode { get; set; }         //전송상태 원본 ( W : 전송대기 , C : 전송취소 , S : 수신완료 , F : 전송실패 )
        public string ApprStatusCode { get; set; }          //승인상태 원본 ( 1 : 승인대기 , 2 : 승인 , 3 : 반려 )
        public int downloadCount { get; set; }              //다운로드 카운트
        public string stDLP { get; set; }                   //개인정보 포함여부


        public clipBoardData()
        {
            bCheckDisable = bCheck = false;
            TransSeq = ApvType = TransType = TransStatus = ApvStatus = Title = RequestTime = "";
            //strDestNet = "";
        }

        public clipBoardData(string seq, string apvtype, string transtype, string transstatus, string apvstatus, string datatype, string title, string requesttime, string strTransStatusCode, string strApprStatusCode, string strDestNetData)
        {
            TransSeq = seq;
            ApvType = apvtype;
            TransType = transtype;
            TransStatus = transstatus;
            ApvStatus = apvstatus;
            DataType = datatype;
            Title = title;
            RequestTime = requesttime;
            TransStatusCode = strTransStatusCode;
            ApprStatusCode = strApprStatusCode;
            // strDestNet = strDestNetData;
        }
    }

    private void HomeMove()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        //string strNavigateWithGroupID = "";
        //if (siteConfig.GetUseDashBoard())
        //    strNavigateWithGroupID = "/Welcome/";
        //else
        //    strNavigateWithGroupID = "/Transfer/";

        //ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        string strNavigateWithGroupID = SGAppMgrSvc.OpConfigInfoService.GetMainPage() + "/";
        string strNavigateUrl = strNavigateWithGroupID.ToLower();
        if (strNavigateUrl.IndexOf("transfer") > 0)
        {
            strNavigateUrl = pageService.GetFileTransPage(groupID);
            if (strNavigateUrl != null && strNavigateUrl.Length > 0)
                strNavigateWithGroupID = strNavigateUrl;
            else
                strNavigateWithGroupID = "/Transfer/";
        }
        strNavigateWithGroupID += groupID.ToString();
        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        foreach (var MenuItem in SideBarUISvc.MenuList)
        {
            if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
            {
                SideBarUISvc.ActiveMenu = MenuItem;
                break;
            }
        }
    }

    /// <summary>
    /// TransSeq에 해당하는 transData 를 찾아준다
    /// </summary>
    /// <param name="strTransSeq">TransSeq</param>
    /// <returns>TransData</returns>
    @*public transData GetTransListData(string strTransSeq)
        {
        transData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
        return tdata;

        for (int i = 0; i < nCount; i++)
        {
        transData temp = ListData[i];
        if (temp.TransSeq.Equals(strTransSeq))
        {
        tdata = temp;
        break;
        }
        }
        return tdata;
        }*@

    /// <summary>
    /// List상에 Checked(체크된) 항목들중 제일 마지막 항목을 준다.
    /// </summary>
    /// <returns>TransSeq</returns>
    public string GetCheckTransSeq()
    {
        string strTransSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.bCheck)
            {
                strTransSeq = temp.TransSeq;
            }
        }
        return strTransSeq;
    }

    /// <summary>
    /// 전송취소 명령실행
    /// </summary>
    public void TransCancel()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strTransSeq = GetCheckTransSeq();
        if (strTransSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();
        string curTransSeq = "";
        if (!strTransSeq.Equals(""))
            curTransSeq = strTransSeq;
        string curAction = "2";
        string curReason = "사유";

        HSCmdCenter.SendTransCancel(groupID, curUserID, curTransSeq, curAction, curReason);
    }

    /// <summary>
    /// item 항목만 List에서 check 상태를 변경, 나머지는 check 상태 false로 설정
    /// </summary>
    /// <param name="item"></param>
    public void CheckStateUpdate(transData item)
    {
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
            }
            else
                temp.bCheck = false;

            ListData[i] = temp;
        }
        StateHasChanged();

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void TransCancelResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        string strMsg = e.strMsg;
        if (ret != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        ShowMessage("info", strMsg);
        UpdateData();

        //InsertMessage(NOTI_TYPE.USER, groupId, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileCancel, "", strMsg);
    }

}
