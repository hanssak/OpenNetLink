@page "/clipBoardManage"
@page "/clipBoardManage/{groupIDbyParam:int}"

@using OpenNetLinkApp.Data.SGQuery
@using HsNetWorkSGData
@using System.Diagnostics
@using HsNetWorkSG
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGDomain
@using System.Text
@using AgLogManager

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject HSCmdCenter HSCmdCenter

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@strTransManTitleGap</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@strTransManTitleGap</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">
                        <table>
                            <tr>
                                <th class="p-2">@strPeriod</th> <!--기간-->
                                <td style="width:28%;">
                                    @*  <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker13" readonly="readonly" value="@strFromDay">
                                        <span class="float-left col-md-1">-</span>
                                        <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker14" readonly="readonly" value="@strToDay">*@
                                    <PeriodDatePicker @ref="refPeriodDatePicker" FromPeriodRange=-7 ToPeriodRange=0></PeriodDatePicker>
                                </td>
                                <th class="p-2"> @strTransKind </th> <!--전송구분-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransKindValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransKind"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransKindValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransKind"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransKindValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2"> @strTransStatus </th>     <!-- 전송상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strTransStatusValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("TransStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strTransStatusValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("TransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransStatusValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                                <th class="p-2"> @strApprStatus </th>         <!-- 승인상태-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strApprStatusValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("ApproveStatus"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strApprStatusValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("ApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApprStatusValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                            </tr>
                            <tr>
                                <th class="p-2"> @strDataTypeStatus </th>         <!-- 데이타타입-->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @strDataTypeValue
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenu4">
                                            @foreach (string str in Common.CsFunction.GetOptionValue("DataType"))
                                            {
                                                <button class="dropdown-item dropdown-footer text-xs p-2" type="button" @onclick="@(()=>Common.CsFunction.SetFilterString(ref strDataTypeValue, str, TransSearchCount))">@str</button>
                                            }
                                        </div>
                                    </div>
                                    <!--<button type="button" @onclick="@(()=>openCustomSelect("DataType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDataTypeValue<i class="fas fa-angle-down pl-2"></i></button>-->
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                <div class="col-sm-12 text-right">
                    <button type="button" class="btn btn-md btn-black" @onclick="TransSearchCount"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                    <button type="button" class="btn btn-md btn-red" @onclick="@TransCancel"><i class="fas fa-times-circle"></i>@XmlConf.GetTitle("T_COMMON_TRANSCANCLE")</button>
                </div>
            </div>
        </div>

        <!-- list -->

        <div class="row">
            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">
                    <form class="form-horizontal">
                        <div class="card-body p-0">
                            <table class="table table-head-fixed table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th style="text-align:center; vertical-align:middle;width:5%;">
                                            @*체크박스*@
                                            @*<input class="input" type="checkbox">*@
                                        </th>
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strApproveKind</th>                        <!--결재종류-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strTransKind</th>                          <!--전송구분-->
                                        <th style="text-align:center; vertical-align:middle;width:8%;">@strTransStatus</th>                        <!--전송상태-->
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strApprStatus</th>                         <!--승인상태-->
                                        <th style="text-align:center; vertical-align:middle; width: 7%;">@strDataTypeStatus</th>                   <!--데이터타입-->
                                        <th style="text-align:center; vertical-align:middle;width:15%;">@strTitle</th>                             <!--제목-->
                                        <th style="text-align:center; vertical-align:middle;width:14%;">@strFileSendDay</th>                       <!--전송요청일-->
                                        @if (bUseDlpDataView)
                                        {
                                            <th style="text-align:center; vertical-align:middle;width:7%;">@XmlConf.GetTitle("T_COMMON_PRIVACY")</th>
                                            <!--개인정보-->
                                        }
                                        <th style="text-align:center; vertical-align:middle;width:7%;">@strDetail</th>                             <!--상세보기-->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (transData item in mData)
                                    {
                                        <tr>
                                            <td style="text-align:center; vertical-align:middle">
                                                <input class="input" type="checkbox" disabled="@item.bCheckDisable" checked="@item.bCheck" @onclick="(e=>CheckStateUpdate(item))">
                                            </td>
                                            <td style="text-align:center; vertical-align:middle">@item.ApvType</td>
                                            <td style="text-align:center; vertical-align:middle">@item.TransferType</td>
                                            <td style="text-align:center; vertical-align:middle">@item.TransferStatus</td>
                                            <td style="text-align:center; vertical-align:middle">@item.ApvStatus</td>
                                            <td style="text-align:center; vertical-align:middle">@item.DataType</td>
                                            <td style="vertical-align: middle; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.Title</td>
                                            <td style="text-align:center; vertical-align:middle">@item.RequestTime</td>
                                            @if (bUseDlpDataView)
                                            {
                                                <td style="text-align:center; vertical-align:middle">@item.stDLP</td>
                                            }
                                            <td style="text-align:center; vertical-align:middle"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>DetailSearch(item))"><i class="fas fa-search"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="card-body pt-0">
                            <!--S page -->
                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">@strTotalPage : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>
                        </div>
                        <Footer></Footer>
                    </form>
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>
<ClipboardManagePopUp @ref="refClipboardManagePopUp"></ClipboardManagePopUp>

@code {

    [Parameter]
    public int groupIDbyParam { get; set; }
    SGCustomSelect refSGCustomSelect;
    ClipboardManagePopUp refClipboardManagePopUp;
    PeriodDatePicker refPeriodDatePicker;

    public int TotalCount { get; set; }
    public List<transData> mData = new List<transData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;

    public string strTransManTitleGap = "";
    public string strTransManageTitle = "";
    public string strPeriod = "";
    public string strTransKind = "";
    public string strTotal = "";
    public string strCarryIn = "";
    public string strCarryOut = "";
    public string strTransStatus = "";
    public string strTransComplete = "";
    public string strTransWait = "";
    public string strTransCancle = "";
    public string strApprStatus = "";
    public string strDataTypeStatus = "";
    public string strApprove = "";
    public string strApprWait = "";
    public string strReject = "";
    public string strApprCancle = "";
    public string strTitle = "";
    public string strReflesh = "";
    public string strSearch = "";
    public string strDownload = "";
    public string strApproveKind = "";
    public string strFileForward = "";
    public string strFileSendDay = "";
    public string strDetail = "";
    public string strTotalPage = "";
    public string strTransFail = "";
    public string strTransInspect = "";
    public string strTitleInputInfo = "";

    bool bUseDlpDataView = true;

    //  public string strFromDay = "";
    //  public string strToDay = "";
    //private int m_currentDownloadCount = 0;

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<ClipboardManageUI>();
    int nDrawPageGroupID = -1;

    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;
    ISGopConfigService siteConfig;

    // 목적지 Data
    Dictionary<string, SGNetOverData> dicDestSysPos = null;
    public string strDestNetWork = "";
    public string _strDestNetWork
    {
        get { return strDestNetWork; }
        set
        {
            strDestNetWork = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    TransferParam param = new TransferParam();

    List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정

    public string strTransKindValue = "";
    public string _strTransKindValue
    {
        get { return strTransKindValue; }
        set
        {
            strTransKindValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    public string strTransStatusValue = "";
    public string _strTransStatusValue
    {
        get { return strTransStatusValue; }
        set
        {
            strTransStatusValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    public string strApprStatusValue = "";
    public string _strApprStatusValue
    {
        get { return strApprStatusValue; }
        set
        {
            strApprStatusValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }
    //데이타타입
    public string strDataTypeValue = "";
    public string _strDataTypeValue
    {
        get { return strDataTypeValue; }
        set
        {
            strDataTypeValue = value;
            Task.Run(async () => { await TransSearchCount(); });
        }
    }
    public string strTitleValue = "";
    public string strSystemName = "";
    public string curUserID = "";
    //　public string curFromDay = "";
    //  public string curToDay = "";
    public string curTransKind = "";
    public string curTransStatus = "";
    public string curApprStatus = "";
    public string curDataType = "";
    public string curTitle = "";
    public string curDestNetWork = "";

    private async void openCustomSelect(string opt)
    {
        if (opt == "TransKind")
            await refSGCustomSelect.openPopUp(opt, strTransKindValue);
        else if (opt == "TransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransStatusValue);
        else if (opt == "ApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strApprStatusValue);
        else if (opt == "DataType")
            await refSGCustomSelect.openPopUp(opt, strDataTypeValue);
        else if (opt == "DestNetwork")
            await refSGCustomSelect.openPopUp(opt, strDestNetWork, dicDestSysPos);
    }

    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransKind")
            _strTransKindValue = stValue;
        else if (stOption == "TransStatus")
            _strTransStatusValue = stValue;
        else if (stOption == "ApproveStatus")
            _strApprStatusValue = stValue;
        else if (stOption == "DataType")
            _strDataTypeValue = stValue;
        else if (stOption == "DestNetwork")
            _strDestNetWork = stValue;
    }

    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Task.Run(async () => { await TransSearchCount(); });
        }
    }

    private void UpdateList(int pageNumber)
    {
        if (nViewPageNo != (pageNumber + 1))
        {
            nViewPageNo = pageNumber + 1;
            UpdateData();
            return;
        }
        else
        {
            nViewPageNo = pageNumber;
            //mData = ListData.Skip((pageNumber - 1) * nPageListCount).Take(nPageListCount).ToList();
            mData = ListData.Take(nPageListCount).ToList();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="updatePageNum"></param>
    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }

    /// <summary>
    ///
    /// </summary>
    private void UpdateData()
    {
        TransSearchData(nViewPageNo).Wait();
    }

    //원데이타라고 가정함
    public List<transData> ListData = new List<transData>();

    /// <summary>
    ///
    /// </summary>
    /// <param name="transSeq"></param>
    public void DetailSearch(transData data)
    {
        refClipboardManagePopUp.data = data;
        refClipboardManagePopUp.openPopUp().Wait();
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        InitText();

        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        siteConfig = SGAppMgrSvc.OpConfigInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;

        ////파라미터 핸들링 클래스 초기화
        //param.XmlConf = XmlConf;
        //param.jsRuntime = jsRuntime;

        @*GetInitDateTime();*@
        base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("exitLogIn", new object[] { "" });
        await jsRuntime.InvokeAsync<object>("adJustWindowsize", new object[] { "" });


        int groupID = groupIDbyParam;
        CLog.Here().Information($"ClipboardManageUI - OnAfterRenderAsync - Called (groupID : {groupIDbyParam})! ");

        // 처음 실행됐거나 다른 GroupID 일때 다시 data 받아서 처리
        if (nDrawPageGroupID < 0 || nDrawPageGroupID != groupIDbyParam)
        {
            nDrawPageGroupID = groupIDbyParam;


            // 조회방식변경
            // HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchResult);           // 조회 데이터 결과.
            // HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCount);           // 조회 데이터 수 결과.

            // 전송관리 처럼
            HSCmdCenter.sgPageEvent.SetTransSearchEventAdd(groupID, SearchResult);                  // 조회 데이터 결과.
                                                                                                    //HSCmdCenter.sgPageEvent.SetTransSearchCountEventAdd(groupID, SearchCount);              // 조회 데이터 수 결과.
            HSCmdCenter.sgPageEvent.SetTransCancelEventAdd(groupID, TransCancelResult);             // 전송 취소 결과.

            strDestNetWork = strTotal;

            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
            if (sgLoginData.GetUseOverNetwork2())
            {
                dicDestSysPos = pageService.GetTargetSystemList(groupID);
            }

            bUseDlpDataView = SGAppMgrSvc.OpConfigInfoService.GetUseUIdlpData(groupIDbyParam);

            jsRuntime.InvokeAsync<object>("initPageLeft");
            await TransSearchCount();

            StateHasChanged();

        }

        if (firstRender)
        {
        }
        base.OnAfterRender(firstRender);
    }


    public void InitText()
    {
        strTransManTitleGap = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                       // 클립보드 관리
        strTransManageTitle = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                     // 전송관리
        strPeriod = XmlConf.GetTitle("T_COMMON_PERIOD");                                    // 기간
        strTransKind = XmlConf.GetTitle("T_COMMON_TRANSKIND");                              // 전송구분
        strTotal = XmlConf.GetTitle("T_COMMON_ALL");                                        // 전체
        strCarryIn = XmlConf.GetTitle("T_COMMON_IMPORT");                                   // 반입
        strCarryOut = XmlConf.GetTitle("T_COMMON_EXPORT");                                  // 반출
        strTransStatus = XmlConf.GetTitle("T_TRANS_STATUS");                                // 전송상태
        strTransComplete = XmlConf.GetTitle("T_TRANS_COMPLETE");                            // PC수신완료
        strTransWait = XmlConf.GetTitle("T_COMMON_TRANSWAIT");                              // 전송대기
        strTransCancle = XmlConf.GetTitle("T_COMMON_TRANSCANCLE");                          // 전송취소
        strApprStatus = XmlConf.GetTitle("T_COMMON_APPROVESTATUS");                         // 승인상태
        strDataTypeStatus = @XmlConf.GetTitle("T_DATA_TYPE");                               // 데이타 타입
        strApprove = XmlConf.GetTitle("T_COMMON_APPROVE");                                  // 승인
        strApprWait = XmlConf.GetTitle("T_COMMON_APPROVE_WAIT");                            // 승인대기
        strReject = XmlConf.GetTitle("T_COMMON_REJECTION");                                 // 반려
        strApprCancle = XmlConf.GetTitle("T_COMMON_REQUESTCANCEL");                         // 요청취소
        strTitle = XmlConf.GetTitle("T_TRANS_TITLE");                                       // 제목
        strReflesh = XmlConf.GetTitle("T_COMMON_REFRESH");                                  // 새로고침
        strSearch = XmlConf.GetTitle("T_COMMON_SEARCH");                                    // 조회
        strDownload = XmlConf.GetTitle("T_TRANS_MANUAL_DOWNLOAD");                          // 다운로드
        strApproveKind = XmlConf.GetTitle("T_COMMON_APPROVE_KIND");                         // 결재종류
        strFileForward = XmlConf.GetTitle("T_ETC_FILEFORWARD");                             // 파일전달
        strFileSendDay = XmlConf.GetTitle("T_TRANS_DATE");                                  // 전송요청일
        strDetail = XmlConf.GetTitle("T_COMMON_DETAILVIEW");                                // 상세보기
        strTotalPage = XmlConf.GetTitle("T_TRANS_TOTALPAGE");                               // 총페이지
        strTransFail = XmlConf.GetTitle("T_COMMON_TRANSFAIL");                              // 전송실패
        strTransInspect = XmlConf.GetTitle("T_COMMON_TRANSCHECKING");                       // 검사중
        strTitleInputInfo = XmlConf.GetWarnMsg("W_0021");                                   // 제목을 입력하여 주십시오.

        strTransKindValue = strTotal;
        strTransStatusValue = strTotal;
        strApprStatusValue = strTotal;
        strDataTypeValue = strTotal;
        strTitleValue = "";
    }

    public async Task TransSearchCount()
    {
        await TransSearchData(1);
    }

    public async Task TransSearchData(int pageNum)
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        if (!strTitleValue.ValidationSqlInjection())
        {
            ShowMessage("warning", XmlConf.GetWarnMsg("W_0295"));
            return;
        }
        //int groupID = 0;

        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();
        @*await GetDateTime();*@
        curTransKind = GetTransKind();
        curTransStatus = GetTransStatus();
        curApprStatus = GetApprStatus();
        curDataType = GetDataTypeCode();

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
            curDestNetWork = GetDestNetWorkSysID();

        curTitle = strTitleValue;
        byte[] temp = Encoding.Default.GetBytes(curTitle);
        curTitle = Encoding.UTF8.GetString(temp);

        await refPeriodDatePicker.RetriveDateFromJS();
        string curFromDay = refPeriodDatePicker.FromDateSearchValue;
        string curToDay = refPeriodDatePicker.ToDateSearchValue;


        TransferParam param = new TransferParam(curTransKind, curTransStatus, curApprStatus, curDataType, curTitle, curFromDay, curToDay, curUserID, nPageListCount, pageNum);

        param.Src_system_id = "";
        param.Dest_system_id = "";

        // 3망상황일때
        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {

            foreach (var item in dicDestSysPos)
            {
                // src - 소스가 분명히 분리되어 계산될 대에만 사용
                if (item.Value.nIdx == 0)
                {
                    param.Src_system_id = item.Value.strDestSysid;
                }

                // Dest
                if (item.Key == strDestNetWork)
                {
                    param.Dest_system_id = item.Value.strDestSysid;
                    if (param.Src_system_id == param.Dest_system_id)    // 현재망으로 수신된 경우만 검색
                        param.Src_system_id = "";
                }
            }
        }

        Dictionary<string, object> dicTransListParams = GetAdTransferParam(param);

        HSCmdCenter.SendFileTransInfo(groupID, dicTransListParams);
    }

    /// <summary>
    /// 전송구분 가져오기
    /// </summary>
    /// <returns>전송구분명</returns>
    public string GetTransKind()
    {
        string strValue = "";

        if (strTransKindValue.Equals(strTotal))                         // 전체
            strValue = "";
        else if (strTransKindValue.Equals(strCarryOut))                 // 반출
            strValue = "1";
        else if (strTransKindValue.Equals(strCarryIn))                  // 반입
            strValue = "2";
        else
            strValue = "";

        return strValue;
    }

    public Dictionary<string, object> GetAdTransferParam(TransferParam param)
    {
        string periodDate = $"{param.SearchFromDay}-{param.SearchToDay}";
        string transStatue = param.TransStatus;
        string title = param.Title;
        string dataType = param.DataType;
        string approveStatus = param.ApprStatus;
        int pageNo = param.ViewPageNo;
        int pageListCount = param.PageListCount;

        Dictionary<string, object> dicParam = new Dictionary<string, object>();
        dicParam.Add("period_date", periodDate);
        dicParam.Add("trans_state", transStatue);
        dicParam.Add("title", title);
        dicParam.Add("data_type", dataType);
        //dicParam.Add("period_date", approveStatus);
        dicParam.Add("page_info", new Dictionary<string, object>() { { "page_no", pageNo }, { "page_limit", pageListCount } });

        return dicParam;
    }

    /// <summary>
    /// 전송상태 가져오기
    /// </summary>
    /// <returns>전송상태명</returns>
    public string GetTransStatus()
    {
        string strValue = "";

        if (strTransStatusValue.Equals(strTotal))                                 // 전체
            strValue = "all";
        else if (strTransStatusValue.Equals(strTransComplete))                      // PC수신완료
            strValue = "received";
        else if (strTransStatusValue.Equals(strTransWait))                          // 전송대기
            strValue = "wait";
        else if (strTransStatusValue.Equals(strTransCancle))                        // 전송취소
            strValue = "cancel";
        else if (strTransStatusValue.Equals(strTransFail))                        // 전송실패
            strValue = "fail";
        else if (strTransStatusValue.Equals(strTransInspect))                      // 검사중
            strValue = "scanning";
        else
            strValue = "";

        return strValue;
    }

    /// <summary>
    /// 승인상태 가져오기
    /// </summary>
    /// <returns>승인상태명</returns>
    public string GetApprStatus()
    {
        string strValue = "";

        if (strApprStatusValue.Equals(strTotal))                                // 전체
            strValue = "all";
        else if (strApprStatusValue.Equals(strApprWait))                        // 승인대기
            strValue = "wait";
        else if (strApprStatusValue.Equals(strApprove))                         // 승인
            strValue = "confirm";
        else if (strApprStatusValue.Equals(strReject))                          // 반려
            strValue = "reject";
        else if (strApprStatusValue.Equals(strApprCancle))                      // 요청취소
            strValue = "cancel";

        return strValue;
    }

    /// <summary>
    /// 목적지(망)에서 선택한 망의 system_ID 값을 넘겨준다. 전체를 선택했을때에는 "" 공백리턴
    /// </summary>
    /// <returns></returns>
    public string GetDestNetWorkSysID()
    {
        string strValue = "";

        if (strDestNetWork.Equals(strTotal))                                // 전체
        {
            strValue = "";
            return strValue;
        }

        if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        {
            foreach (var item in dicDestSysPos)
            {
                if (item.Key == strDestNetWork)
                {
                    strValue = item.Value.strDestSysid;
                    break;
                }
            }
        }

        return strValue;
    }

    /// <summary>
    /// 데이터타입 가져오기
    /// </summary>
    /// <returns>데이터타입명</returns>
    private string GetDataTypeCode()
    {
        string strValue = "";

        if (strDataTypeValue == XmlConf.GetTitle("T_DATA_TYPE_TEXT"))   //텍스트
            strValue = "cliptxt";
        else if (strDataTypeValue == XmlConf.GetTitle("T_DATA_TYPE_IMAGE")) // 이미지
            strValue = "clipimg";
        else
            strValue = "clip";

        return strValue;
    }

    public void SearchCount(int count)
    {
        if (count <= 0)
        {
            ShowMessage("warn", "검색결과가 존재하지 않습니다.");            // 검색결과가 존재하지 않습니다.
            ListData.Clear();


            UpdateList(0);
            SetPageinfo(count);
            StateHasChanged();
            return;
        }

        SetPageinfo(count);    // 페이징 계산
    }


    @*public void SearchCount(int groupId, SGData e)
        {
        string result = e.GetSvrRecordTagData("RESULT");
        int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
        string reason = e.GetSvrRecordTagData("REASON");
        List<Dictionary<int, string>> listCnt = null;
        listCnt = e.GetSvrRecordData("RECORD");
        string cnt = "";                        //총 레코드 카운트
        listCnt[0].TryGetValue(0, out cnt);
        int totalCnt = Int32.Parse(cnt);

        if (result != "0")
        {
        ShowMessage("error", reason);
        return;
        }
        if (totalCnt <= 0)
        {
        //ShowMessage("warn", reason);            // 검색결과가 존재하지 않습니다.
        //if (listData != null) listData.Clear();
        //SetPageinfo(totalCnt);
        //StateHasChanged();
        //return;

        ShowMessage("warn", XmlConf.GetWarnMsg("W_0242"));            // 검색결과가 존재하지 않습니다.
        ListData.Clear();

        UpdateList(0);
        SetPageinfo(totalCnt);
        StateHasChanged();
        return;
        }
        SetPageinfo(totalCnt);
        //리스트 쿼리 호출
        UpdateData();
        }*@

    private void doSearchList()
    {
        TransSearchData(nViewPageNo);
    }


    public void SearchResult(int groupId, PageEventArgs e)
    {
        string strMsg = e.strMsg;
        if (e.result != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }
        SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
        SGUserInfo sgUserInfo = (SGUserInfo)SGAppMgrSvc.UserInfoService.GetUserInfo(groupId);
        List<SGNetOverData> destinationInfoList = sgLoginData.GetDestinationInfo(false);

        string curUserID = "";
        string curUserSeq = sgUserInfo.UserSeq;

        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        ListData.Clear();

        SGTransManageData sgData = null;
        sgData = (SGTransManageData)HSCmdCenter.GetTransManageData(groupId);
        if (sgData == null)
            return;

        int totalCount = sgData.GetSearchResultCount();
        SearchCount(totalCount);

        List<object> TransSearchList = null;
        //string strSelTransStatus = GetTransStatus();
        //string strSelApprStatus = GetApprStatus();
        //TransSearchList = sgData.GetSearchData(strSelTransStatus, strSelApprStatus);
        TransSearchList = sgData.GetQuerySearchData();
        int nCount = TransSearchList.Count;

        int nowDate = Int32.Parse(DateTime.Now.ToString("yyyyMMdd"));
        foreach (object value in TransSearchList)
        {
            object transReq = value.GetTagDataObject("trans_req");
            List<object> forwordList = value.GetTagDataObjectList("forward_user_list");
            object destinationInfo = value.GetTagDataObject("destination");
            List<object> scanList = value.GetTagDataObjectList("scan_list");
            transData tData = new transData();
            tData.bCheck = false;
            tData.bCheckDisable = !(sgData.GetTransCancelEnableChk(curUserSeq, transReq));
            tData.TransSeq = sgData.GetTransSeq(transReq);                   // TransSeq;
            tData.ApvType = sgData.GetApprKind(transReq);                    // 결재종류 (선결/후결)
            tData.TransferType = sgData.GetTransKind(transReq);              // 전송구분 (반출/반입)
            tData.TransferStatus = sgData.GetTransStatus(transReq);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
            tData.ApvStatus = sgData.GetApprStatus(transReq);                 // 승인상태 (요청취소,승인대기,승인,반려)
            tData.IsFile = sgData.GetFileForwardKind(forwordList, curUserSeq);              // 파일전달.


            if (destinationInfoList != null && destinationInfoList.Count > 0)
                tData.strDestNet = sgData.GetDestNetworkName(destinationInfo, destinationInfoList);          // 목적지 값

            tData.Title = sgData.GetTitle(transReq);                         // 제목
            FileAddManage fileAddManage = new FileAddManage();
            tData.Title = fileAddManage.GetConvertTitleDesc(false, tData.Title);
            tData.RequestTime = sgData.GetQueryTransReqDay(transReq);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
            tData.TransStatusCode = sgData.GetTransStatusCode(transReq);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
            tData.ApprStatusCode = sgData.GetApprStatusCode(transReq);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
            tData.downloadCount = Int32.Parse(sgData.GetDownloadCount(transReq));  //다운로드 카운트
            tData.expiredDate = sgData.GetExpiredDate(transReq);             //파일저장 만료일
            tData.stDLP = sgData.GetDlp(transReq);
            tData.requestUserName = sgData.GetRequestUserName(transReq);
            tData.Desc = sgData.GetDesc(transReq);
            tData.scanList = scanList;
            List<FileInfoData> fileInfoList = new List<FileInfoData>();
            sgData.GetFileInfo(value, out fileInfoList);
            tData.fileInfoList = fileInfoList;
            bool isVisibleFileApproveReason = SGAppMgrSvc.OpConfigInfoService.GetUseFileApproveReason(groupId);
            tData.apprHisList = sgData.GetApproverInfoHist(value, isVisibleFileApproveReason);
            tData.lastApprovalInfo = sgData.GetLastApprInfo(value, isVisibleFileApproveReason);
            tData.forwordList = forwordList;
            tData.DataType = sgData.GetDataType(value);

            ListData.Add(tData);
        }

        UpdateInitList(nViewPageNo);
        StateHasChanged();
    }

    public void SetPageinfo(int nDataCount)
    {
        nTotalPages = (int)nDataCount / nPageListCount;
        if (nDataCount % nPageListCount > 0)
            nTotalPages++;

        if (nTotalPages <= 0)
            nTotalPages = 1;
    }

    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        jsRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

    public transData GetTransListData(string strTransSeq)
    {
        transData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
            return tdata;

        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.TransSeq.Equals(strTransSeq))
            {
                tdata = temp;
                break;
            }
        }
        return tdata;
    }

    private void HomeMove()
    {

        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;

        string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
        strNavigateWithGroupID += groupID.ToString();
        ChangeActiveMenuEvent changeActiveMenuEvent = HSCmdCenter.sgPageEvent.GetChangeActiveMenu();
        if (changeActiveMenuEvent != null)
            changeActiveMenuEvent(groupID, strNavigateWithGroupID);
        MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        //foreach (var MenuItem in SideBarUISvc.MenuList)
        //{
        //    if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
        //    {
        //        SideBarUISvc.ActiveMenu = MenuItem;
        //        break;
        //    }
        //}
    }

    /// <summary>
    /// TransSeq에 해당하는 transData 를 찾아준다
    /// </summary>
    /// <param name="strTransSeq">TransSeq</param>
    /// <returns>TransData</returns>
    @*public transData GetTransListData(string strTransSeq)
        {
        transData tdata = null;
        int nCount = ListData.Count;
        if (nCount <= 0)
        return tdata;

        for (int i = 0; i < nCount; i++)
        {
        transData temp = ListData[i];
        if (temp.TransSeq.Equals(strTransSeq))
        {
        tdata = temp;
        break;
        }
        }
        return tdata;
        }*@

    /// <summary>
    /// List상에 Checked(체크된) 항목들중 제일 마지막 항목을 준다.
    /// </summary>
    /// <returns>TransSeq</returns>
    public string GetCheckTransSeq()
    {
        string strTransSeq = "";
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.bCheck)
            {
                strTransSeq = temp.TransSeq;
            }
        }
        return strTransSeq;
    }

    /// <summary>
    /// 전송취소 명령실행
    /// </summary>
    public void TransCancel()
    {
        ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
        int groupID = 0;
        if (sgSideBar != null)
            groupID = sgSideBar.GroupId;
        string strMsg = "";
        if (pageService.GetConnectStatus(groupID) == false)
        {
            strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
            strMsg = strMsg.Replace("/r/n", "<br>");
            ShowMessage("error", strMsg);
            return;
        }

        string strTransSeq = GetCheckTransSeq();
        if (strTransSeq.Equals(""))
        {
            strMsg = XmlConf.GetWarnMsg("W_0068"); // 선택된 항목이 없습니다.
            ShowMessage("info", strMsg);
            return;
        }

        /*SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();
        string curTransSeq = "";
        if (!strTransSeq.Equals(""))
            curTransSeq = strTransSeq;
        string curAction = "2";
        string curReason = "사유";
        HSCmdCenter.SendTransCancel(groupID, curUserID, curTransSeq, curAction, curReason);*/

        HSCmdCenter.RestSendTransCancel(groupID, strTransSeq, "clip");

    }

    /// <summary>
    /// item 항목만 List에서 check 상태를 변경, 나머지는 check 상태 false로 설정
    /// </summary>
    /// <param name="item"></param>
    public void CheckStateUpdate(transData item)
    {
        int nCount = ListData.Count;
        for (int i = 0; i < nCount; i++)
        {
            transData temp = ListData[i];
            if (temp.TransSeq.Equals(item.TransSeq))
            {
                temp.bCheck = !temp.bCheck;
            }
            else
                temp.bCheck = false;

            ListData[i] = temp;
        }
        StateHasChanged();

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void TransCancelResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        string strMsg = e.strMsg;
        if (ret != 0)
        {
            ShowMessage("error", strMsg);
            return;
        }

        ShowMessage("info", strMsg);
        UpdateData();

        //InsertMessage(NOTI_TYPE.USER, groupId, LSIDEBAR.MENU_CATE_FILE, eMsgType.eMsgFileCancel, "", strMsg);
    }

}
