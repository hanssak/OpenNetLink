@page "/clipBoardManage"
@page "/clipBoardManage/{groupIDbyParam:int}"

@using OpenNetLinkApp.Data.SGQuery
@using HsNetWorkSGData
@using System.Diagnostics
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Services.SGAppManager
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using OpenNetLinkApp.Data.SGDomain
@using System.Text

@inject IJSRuntime jsRuntime
@inject XmlConfService XmlConf
@inject NavigationManager MyNavigationManager
@inject ISGAppManagerService SGAppMgrSvc
@inject PageStatusService pageService
@inject HSCmdCenter HSCmdCenter

<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@XmlConf.GetTitle("T_COMMON_CLIPTRANS")</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item" style="color:blue;" @onclick="(e=>HomeMove())"><i class="fas fa-home mr-1"></i>HOME</li>
                    <li class="breadcrumb-item active">@XmlConf.GetTitle("T_COMMON_CLIPTRANS")</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- S file content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->

        <div class="row">
            <div class="col-12 col-sm-6 col-md-12">

                <div class="card card-primary card-outline mb-2 ">
                    <div class="card-body">


                        <table>

                            <tr>
                                <th class="p-2">@XmlConf.GetTitle("T_COMMON_PERIOD")</th> <!--기간-->
                                <td style="width:28%;">
                                    <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker13" readonly="readonly" value="@strFromDay">
                                    <span class="float-left col-md-1">-</span>
                                    <input type="text" style="color:black" class="form-control col-md-5 float-left" id="datepicker14" readonly="readonly" value="@strToDay">
                                </td>
                                <th class="p-2"> @XmlConf.GetTitle("T_COMMON_TRANSKIND") </th> <!--전송구분-->
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("TransType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransTypeText<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                                <th class="p-2"> @XmlConf.GetTitle("T_TRANS_STATUS") </th>     <!-- 전송상태-->
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("TransStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strTransStatusValue<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                                <th class="p-2"> @XmlConf.GetTitle("T_COMMON_APPROVESTATUS") </th>         <!-- 승인상태-->
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("ApproveStatus"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strApprStatusValue<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                            </tr>
                            <tr>
                                <th class="p-2"> @XmlConf.GetTitle("T_DATA_TYPE") </th>         <!-- 데이타타입-->
                                <td>
                                    <button type="button" @onclick="@(()=>openCustomSelect("DataType"))" class="btn btn-md btn_white" style="padding:.3rem .5rem .2rem;">@strDataTypeValue<i class="fas fa-angle-down pl-2"></i></button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                <div class="col-sm-12 text-right">
                    <button type="button" class="btn btn-md btn-black" @onclick="doSearch"><i class="fas fa-search"></i>@XmlConf.GetTitle("T_COMMON_SEARCH")</button>
                </div>
            </div>
        </div>

        <!-- list -->

        <div class="row">
            <div class="col-md-12">
                <div class="card card-secondary card-outline" style="height:100%;">


                    <form class="form-horizontal">

                        <div class="card-body p-0">
                            <table class="table table-head-fixed table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <!--<th>
                                            <input class="input" type="checkbox">
                                        </th>-->
                                        <th style="text-align:center">결재 종류</th>
                                        <th style="text-align:center">전송 구분</th>
                                        <th style="text-align:center">전송 상태</th>
                                        <th style="text-align:center">승인 상태</th>
                                        <th style="text-align:center">데이타 타입</th>
                                        <th style="text-align:center">전송 요청일</th>
                                        <th style="text-align:center">상세보기</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (clipBoardData item in mData)
                                    {
                                        <tr>
                                            <!--<td>
                                                <input class="input" type="checkbox">
                                            </td>-->
                                            <td style="text-align:center">@item.ApvType</td>
                                            <td style="text-align:center">@item.TransType</td>
                                            <td style="text-align:center">@item.TransStatus</td>
                                            <td style="text-align:center">@item.ApvStatus</td>
                                            <td style="text-align:center">@item.DataType</td>
                                            <td style="text-align:center">@item.RequestTime</td>
                                            <td style="text-align:center"><button type="button" class="btn btn-default btn-xs pl-2 pr-2 pt-0 pb-0" @onclick="@(e=>DetailSearch(item.TransSeq))"><i class="fas fa-search"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="card-body pt-0">
                            <!--S page -->
                            <div style="padding-top:1.25rem;">
                                <div style="float:left;">
                                    <div class="dataTables_info" id="example2_info" role="status" aria-live="polite">총페이지 : @nViewPageNo/@nTotalPages</div>
                                </div>
                                <Pagenator ViewPageCount="@viewPageCount" DispLimit=@dispLimit NViewPageNo="@nViewPageNo"
                                           NTotalPages="@nTotalPages" NStartPage="@nStartPage"
                                           UpdateListPagingInvoke="UpdateList"></Pagenator>
                            </div>
                        </div>
                        <Footer></Footer>
                    </form>
                </div>
            </div>

        </div>

        <!--/.list -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
<!-- /S. file content -->
<SGCustomSelect @ref="refSGCustomSelect" ChangeTargetSelect="onChangeSelectOption"></SGCustomSelect>
<ClipboardManagePopUp @ref="refClipboardManagePopUp"></ClipboardManagePopUp>

@code {

    [Parameter]
    public int groupIDbyParam { get; set; }
    SGCustomSelect refSGCustomSelect;
    ClipboardManagePopUp refClipboardManagePopUp;
    public int TotalCount { get; set; }
    public List<clipBoardData> mData = new List<clipBoardData>();
    private int nPageListCount = 10;    //리스트에 뿌려질 단위갯수
    private int nViewPageNo = 1;
    private int nTotalPages = 1;
    private int viewPageCount = 10;  //pageing 에 뿌려질 앵커갯수
    private int nStartPage = 1;
    private int dispLimit = 1;
    ISGSideBarUIService SideBarUISvc;
    ISGSiteConfigService siteConfig;
    TransferParam param = new TransferParam();
    public string strFromDay = "";
    public string strToDay = "";
    List<Dictionary<int, string>> listData = null;          //DB 데이타 직접 사용하는걸로 수정

    public string strTransTypeText = "";
    public string _strTransTypeText
    {
        get { return strTransTypeText; }
        set
        {
            strTransTypeText = value;
            doSearch();
        }
    }
    public string strTransStatusValue = "";
    public string _strTransStatusValue
    {
        get { return strTransStatusValue; }
        set
        {
            strTransStatusValue = value;
            doSearch();
        }
    }
    public string strApprStatusValue = "";
    public string _strApprStatusValue
    {
        get { return strApprStatusValue; }
        set
        {
            strApprStatusValue = value;
            doSearch();
        }
    }
    //데이타타입
    public string strDataTypeValue = "";
    public string _strDataTypeValue
    {
        get { return strDataTypeValue; }
        set
        {
            strDataTypeValue = value;
            doSearch();
        }
    }
    public string strTitleValue = "";

    public string curUserID = "";
    public string curFromDay = "";
    public string curToDay = "";
    public string curTransKind = "";
    public string curTransStatus = "";
    public string curApprStatus = "";
    public string curTitle = "";
    public string curDestNetWork = "";


    private async void openCustomSelect(string opt)
    {
        if (opt == "TransType")
            await refSGCustomSelect.openPopUp(opt, strTransTypeText);
        else if (opt == "TransStatus")
            await refSGCustomSelect.openPopUp(opt, strTransStatusValue);
        else if (opt == "ApproveStatus")
            await refSGCustomSelect.openPopUp(opt, strApprStatusValue);
        else if (opt == "DataType")
            await refSGCustomSelect.openPopUp(opt, strDataTypeValue);
    }
    private void onChangeSelectOption(List<string> arg)
    {
        string stOption = arg[0];
        string stValue = arg[1];
        if (stOption == "TransType")
            _strTransTypeText = stValue;
        else if (stOption == "TransStatus")
            _strTransStatusValue = stValue;
        else if (stOption == "ApproveStatus")
            _strApprStatusValue = stValue;
        else if (stOption == "DataType")
            _strDataTypeValue = stValue;
    }

    public void GetInitDateTime()
    {
        strToDay = DateTime.Now.ToString("yyyy-MM-dd");
        string year = DateTime.Now.ToString("yyyy");
        string month = DateTime.Now.ToString("MM");
        string day = DateTime.Now.ToString("dd");
        int nYear = Convert.ToInt32(year);
        int nMonth = Convert.ToInt32(month);
        int nDay = Convert.ToInt32(day);
        System.DateTime Time_toDay = new System.DateTime(nYear, nMonth, nDay);
        strFromDay = Time_toDay.AddDays(-7).ToString("yyyy-MM-dd");
    }

    private void UpdateInitList(int updatePageNum)
    {
        nViewPageNo = updatePageNum;
        mData = ListData.Take(nPageListCount).ToList();
    }

    private void UpdateList(int pageNumber)
    {
        nViewPageNo = pageNumber + 1;
        mData = ListData.Skip(pageNumber * nPageListCount).Take(nPageListCount).ToList();
    }

    //원데이타라고 가정함
    public List<clipBoardData> ListData = new List<clipBoardData>();

    public async Task OpenDetailPopup(string transSeq)
    {
        Console.WriteLine("Open Detail Start" + transSeq);
        long ltransSeq = Convert.ToInt64(transSeq);
        await refClipboardManagePopUp.openPopUp(ltransSeq);
    }

    protected override void OnInitialized()
    {
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        siteConfig = SGAppMgrSvc.SiteConfigInfoService;
        //파라미터 핸들링 클래스 초기화
        param.XmlConf = XmlConf;
        param.jsRuntime = jsRuntime;
        strTransTypeText = XmlConf.GetTitle("T_COMMON_ALL");
        strTransStatusValue = XmlConf.GetTitle("T_COMMON_ALL");
        strApprStatusValue = XmlConf.GetTitle("T_COMMON_ALL");
        strDataTypeValue = XmlConf.GetTitle("T_COMMON_ALL");

        strTitleValue = "";

        @*TransferParam param = new TransferParam("", "", "", "", "20190101", "20201231", "uglyice", 20, 1);
            param.DataType = 2;
            ClipboardTransferDao dao = new ClipboardTransferDao();
            System.Diagnostics.Debug.WriteLine(dao.TotalCount(param));   // 쿼리 데이터 카운트
            System.Diagnostics.Debug.WriteLine(dao.List(param));         // 데이터 요청 쿼리*@

    GetInitDateTime();
    base.OnInitialized();
}

protected override void OnAfterRender(bool firstRender)
{
    if (firstRender)
    {
        object[] param = { "datepicker13", "datepicker14" };
        jsRuntime.InvokeAsync<object>("initDatePicker", param);
        jsRuntime.InvokeAsync<object>("initPageLeft");
        doSearch();
    }
    base.OnAfterRender(firstRender);
}

public async void doSearch()
{
    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    int groupID = 0;
    if (sgSideBar != null)
        groupID = sgSideBar.GroupId;

    //LIST 요청응답
    HSCmdCenter.sgPageEvent.SetQueryListEvent(groupID, SearchListResult);
    //COUNT 요청응답
    HSCmdCenter.sgPageEvent.SetQueryCountEvent(groupID, SearchCountResult);

    SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
    string curUserID = "";
    if (sgLoginData != null)
        curUserID = sgLoginData.GetUserID();

    string systemid = (sgLoginData.GetSystemPosition() == true ? "I" : "E");

    param.UserID = curUserID;
    param.Src_system_id = systemid;
    await param.SetSearchStartDate("datepicker13");
    await param.SetSearchEndDate("datepicker14");
    param.DataType = GetDataTypeCode();

    ClipboardTransferDao dao = new ClipboardTransferDao();
    string strQueryCount = dao.TotalCount(param);
    HSCmdCenter.SendCountQuery(groupID, curUserID, strQueryCount);
}

public void DetailSearch(string transSeq)
{
    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    int groupID = 0;
    if (sgSideBar != null)
        groupID = sgSideBar.GroupId;

    if (pageService.GetConnectStatus(groupID) == false)
    {
        string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
        strMsg = strMsg.Replace("/r/n", "<br>");
        ShowMessage("error", strMsg);
        return;
    }

    HSCmdCenter.sgPageEvent.SetDetailSearchEventAdd(groupID, DetailSearchResult);           // 상세보기 조회 결과

    SGLoginData sgLoginData = null;
    sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupID);
    if (sgLoginData == null)
        return;

    string strUserID = sgLoginData.GetUserID();

    HSCmdCenter.SendTransDetail(groupID, strUserID, transSeq);
}

/**
    *@brief 
    */
public void DetailSearchResult(int groupId, PageEventArgs e)
{
    int nRet = e.result;
    string strMsg = e.strMsg;
    if (nRet != 0)
    {
        ShowMessage("error", strMsg);
        return;
    }

    SGDetailData sgDetailData = (SGDetailData)HSCmdCenter.GetDetailData(groupId);
    if (sgDetailData == null)
        return;

    clipBoardData tData = null;
    tData = GetTransListData(strMsg);
    if (tData != null)
    {
        string sTransSeq = tData.TransSeq;
        string sApprSeq = "";
        int nDataForwarded = 0;
        bool bTransCancel = false;
        bool bApprove = false;
        bool bReject = false;

        sgDetailData.SetInit(false, sTransSeq, sApprSeq, nDataForwarded, bTransCancel, bApprove, bReject);
        HSCmdCenter.SetDetailDataChange(groupId, sgDetailData);


        refClipboardManagePopUp.m_downloadCount = 0;
        refClipboardManagePopUp.SetBindingData();
        OpenDetailPopup(sTransSeq).Wait();
    }
}

private int GetDataTypeCode()
{
    if (strDataTypeValue == XmlConf.GetTitle("T_DATA_TYPE_TEXT"))
        return 1;
    else if (strDataTypeValue == XmlConf.GetTitle("T_DATA_TYPE_IMAGE"))
        return 2;
    else
        return 3;
}

public void SearchCountResult(int groupId, SGData e)
{
    string result = e.GetSvrRecordTagData("RESULT");
    int count = Int32.Parse(e.GetSvrRecordTagData("COUNT"));  //결과레코드수
    string reason = e.GetSvrRecordTagData("REASON");
    List<Dictionary<int, string>> listCnt = null;
    listCnt = e.GetSvrRecordData("RECORD");
    string cnt = "";                        //총 레코드 카운트
    listCnt[0].TryGetValue(0, out cnt);
    int totalCnt = Int32.Parse(cnt);

    if (result != "0")
    {
        ShowMessage("error", reason);
        return;
    }
    if (count <= 0)
    {
        ShowMessage("warn", reason);            // 검색결과가 존재하지 않습니다.
        if (listData != null) listData.Clear();
        SetPageinfo(totalCnt);
        StateHasChanged();
        return;
    }
    SetPageinfo(totalCnt);
    //리스트 쿼리 호출
    doSearchList();
}

private void doSearchList()
{
    TransSearchData(nViewPageNo);
}

public void TransSearchData(int pageNum)
{
    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    int groupID = 0;
    if (sgSideBar != null)
        groupID = sgSideBar.GroupId;

    if (pageService.GetConnectStatus(groupID) == false)
    {
        string strMsg = XmlConf.GetErrMsg("E_0218");           // 현재 오프라인 상태입니다./r/n재접속 중이오니 잠시만 기다려 주십시요.
        strMsg = strMsg.Replace("/r/n", "<br>");
        ShowMessage("error", strMsg);
        return;
    }

    SGData sgLoginData = HSCmdCenter.GetLoginData(groupID);
    if (sgLoginData != null)
        curUserID = sgLoginData.GetUserID();
    //await GetDateTime();
    //curTransKind = GetTransKind();
    //curTransStatus = GetTransStatus();
    //curApprStatus = GetApprStatus();

    //if (dicDestSysPos != null && dicDestSysPos.Count > 0)
    //    curDestNetWork = GetDestNetWorkSysID();

    curTitle = strTitleValue;
    byte[] temp = Encoding.Default.GetBytes(curTitle);
    curTitle = Encoding.UTF8.GetString(temp);

    TransferParam param = new TransferParam("", "", "", curTitle, "20220320000000", "20220323235959", curUserID, nPageListCount, pageNum);
    string strQuery = "";
    param.Src_system_id = "";
    param.Dest_system_id = "";

    //// 3망상황일때
    //if (dicDestSysPos != null && dicDestSysPos.Count > 0)
    //{

    //    foreach (var item in dicDestSysPos)
    //    {
    //        // src
    //        if (item.Value.nIdx == 0)
    //        {
    //            param.Src_system_id = item.Value.strDestSysid;
    //        }

    //        // Dest
    //        if (item.Key == strDestNetWork)
    //        {
    //            param.Dest_system_id = item.Value.strDestSysid;
    //            if (param.Src_system_id == param.Dest_system_id)    // 현재망으로 수신된 경우만 검색
    //                param.Src_system_id = "";
    //        }

    //    }

    //    TransferDao2 dao = new TransferDao2();
    //    strQuery = dao.List(param, true);   // 쿼리 데이터 리스트
    //}
    //else
    //{
    ClipboardTransferDao dao = new ClipboardTransferDao();
    strQuery = dao.List(param, true);   // 쿼리 데이터 리스트
                                        //}

    HSCmdCenter.SendListQuery(groupID, curUserID, strQuery);
    // HSCmdCenter.SendTransListQuery(groupID, curUserID, strQuery);

}

private async Task RetriveDateFromJS()
{
    object[] param = { "datepicker3" };
    string vStr = await jsRuntime.InvokeAsync<string>("getElementValue", param);
    if (vStr != null && vStr.Length > 0)
        strFromDay = vStr;
    object[] param2 = { "datepicker4" };
    string vStr2 = await jsRuntime.InvokeAsync<string>("getElementValue", param2);
    if (vStr2 != null && vStr2.Length > 0)
        strToDay = vStr2;
}

public async Task GetDateTime()
{
    await RetriveDateFromJS();

    char sep = '-';
    string[] splitFrom = strFromDay.Split(sep);
    curFromDay = String.Format("{0}{1}{2}000000", splitFrom[0], splitFrom[1], splitFrom[2]);
    string[] splitTo = strToDay.Split(sep);
    curToDay = String.Format("{0}{1}{2}235959", splitTo[0], splitTo[1], splitTo[2]);
}

/**
*@brief
*/
public string GetTransKind()
{
    string strValue = "";

    //if (strTransKindValue.Equals(strTotal))                         // 전체
    //    strValue = "";
    //else if (strTransKindValue.Equals(strCarryOut))                 // 반출
    //    strValue = "1";
    //else if (strTransKindValue.Equals(strCarryIn))                  // 반입
    //    strValue = "2";
    //else
    //    strValue = "";

    return strValue;
}

/**
*@brief
*/
public string GetTransStatus()
{
    string strValue = "";

    //if (strTransStatusValue.Equals(strTotal))                                 // 전체
    //    strValue = "";
    //else if (strTransStatusValue.Equals(strTransComplete))                      // PC수신완료
    //    strValue = "S";
    //else if (strTransStatusValue.Equals(strTransWait))                          // 전송대기
    //    strValue = "W";
    //else if (strTransStatusValue.Equals(strTransCancle))                        // 전송취소
    //    strValue = "C";
    //else if (strTransStatusValue.Equals(strTransFail))                        // 전송실패
    //    strValue = "F";
    //else if (strTransStatusValue.Equals(strTransInspect))                      // 검사중
    //    strValue = "V";
    //else
    //    strValue = "";

    return strValue;
}

/**
*@brief
*/
public string GetApprStatus()
{
    string strValue = "";

    //if (strApprStatusValue.Equals(strTotal))                                // 전체
    //    strValue = "";
    //else if (strApprStatusValue.Equals(strApprWait))                        // 승인대기
    //    strValue = "1";
    //else if (strApprStatusValue.Equals(strApprove))                         // 승인
    //    strValue = "2";
    //else if (strApprStatusValue.Equals(strReject))                          // 반려
    //    strValue = "3";
    //else if (strApprStatusValue.Equals(strApprCancle))                      // 요청취소
    //    strValue = "4";

    return strValue;
}

/**
*@brief 목적지(망)에서 선택한 망의 system_ID 값을 넘겨준다. 전체를 선택했을때에는 "" 공백리턴
*/
public string GetDestNetWorkSysID()
{
    string strValue = "";

    //if (strDestNetWork.Equals(strTotal))                                // 전체
    //{
    //    strValue = "";
    //    return strValue;
    //}

    //if (dicDestSysPos != null && dicDestSysPos.Count > 0)
    //{
    //    foreach (var item in dicDestSysPos)
    //    {
    //        if (item.Key == strDestNetWork)
    //        {
    //            strValue = item.Value.strDestSysid;
    //            break;
    //        }
    //    }
    //}

    return strValue;
}

public void SearchListResult(int groupId, SGData e)
{
    string result = e.GetTagData("RESULT");
    string reason = e.GetTagData("REASON");
    int count = Int32.Parse(e.GetTagData("COUNT"));  //결과레코드수
    listData = e.GetSvrRecordData2("RECORD");

    if (result != "0")
    {
        ShowMessage("error", "dddd");
        return;
    }
    SGData sgLoginData = HSCmdCenter.GetLoginData(groupId);
    string curUserID = "";
    if (sgLoginData != null)
        curUserID = sgLoginData.GetUserID();

    ListData.Clear();

    SGTransManageData sgData = null;
    sgData = (SGTransManageData)HSCmdCenter.GetTransManageData(groupId);
    if (sgData == null)
        return;

    int nCount = listData.Count;

    for (int i = 0; i < nCount; i++)
    {
        Dictionary<int, string> dic = listData[i];
        if (dic == null)
            continue;

        string tmpStr = "";
        if (dic.TryGetValue(0, out tmpStr) != true)
        {
            if (tmpStr.Equals(""))
                continue;
        }

        clipBoardData tData = new clipBoardData();
        tData.TransSeq = sgData.GetTransSeq(dic);                   // TransSeq;
        tData.ApvType = sgData.GetApprKind(dic);                    // 결재종류 (선결/후결)
        tData.TransType = sgData.GetTransKind(dic);              // 전송구분 (반출/반입)
        tData.TransStatus = sgData.GetTransStatus(dic);          // 전송상태 (전송취소,전송대기,수신완료,전송실패,검사중)
        tData.ApvStatus = sgData.GetApprStaus(dic);                 // 승인상태 (요청취소,승인대기,승인,반려)

        //if (dicDestSysPos != null && dicDestSysPos.Count > 0)
        //    tData.strDestNet = sgData.GetDestNetworkName(dic, dicDestSysPos);          // 목적지 값

        tData.Title = sgData.GetTitle(dic);                         // 제목
        FileAddManage fileAddManage = new FileAddManage();
        tData.Title = fileAddManage.GetConvertTitleDesc(false, tData.Title);
        tData.RequestTime = sgData.GetQueryTransReqDay(dic);        // 전송요청일(type : YYYY-MM-DD hh:mm:ss)
        tData.TransStatusCode = sgData.GetTransStatusCode(dic);     // 전송상태 원본 ( W : 전송대기, S : 수신완료, C: 전송취소, F : 전송실패, V : 검사중 )
        tData.ApprStatusCode = sgData.GetApprStausCode(dic);        // 결재상태 원본 ( 1 : 승인대기, 2 : 승인, 3 : 반려 )
        tData.downloadCount = Int32.Parse(sgData.GetDownloadCount(dic));  //다운로드 카운트
        tData.stDLP = sgData.GetDlp(dic);

        ListData.Add(tData);
    }

    UpdateInitList(nViewPageNo);
    StateHasChanged();
}

public void SetPageinfo(int nDataCount)
{
    nTotalPages = (int)nDataCount / nPageListCount;
    if (nDataCount % nPageListCount > 0)
        nTotalPages++;

    if (nTotalPages <= 0)
        nTotalPages = 1;
}
private void HomeMove()
{
    ISGAppConfigService AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;
    ISGSideBarUI sgSideBar = SideBarUISvc.ActiveMenu;
    int groupID = 0;
    if (sgSideBar != null)
        groupID = sgSideBar.GroupId;

    //string strNavigateWithGroupID = "";

    //if (siteConfig.GetUseDashBoard())
    //    strNavigateWithGroupID = "/Welcome/";
    //else
    //    strNavigateWithGroupID = "/Transfer/";

    string strNavigateWithGroupID = AppConfigSvc.GetMainPage(siteConfig.m_enMainPage, siteConfig.m_bUseDashBoard) + "/";
    strNavigateWithGroupID += groupID.ToString();
    MyNavigationManager.NavigateTo(strNavigateWithGroupID);

    foreach (var MenuItem in SideBarUISvc.MenuList)
    {
        if ((MenuItem.CategoryId == LSIDEBAR.MENU_CATE_ROOT) && (MenuItem.GroupId == groupID))
        {
            SideBarUISvc.ActiveMenu = MenuItem;
            break;
        }
    }
}
private void ShowMessage(string strType, string strMsg)
{
    //type: success, info, waring, error 2020/07/02 YKH
    string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
    object[] param = { strType, strSystemName, strMsg };
    jsRuntime.InvokeAsync<object>("fireToastMessage", param);
}

public clipBoardData GetTransListData(string strTransSeq)
{
    clipBoardData tdata = null;
    int nCount = ListData.Count;
    if (nCount <= 0)
        return tdata;

    for (int i = 0; i < nCount; i++)
    {
        clipBoardData temp = ListData[i];
        if (temp.TransSeq.Equals(strTransSeq))
        {
            tdata = temp;
            break;
        }
    }
    return tdata;
}

public class clipBoardData
{
    public string TransSeq { get; set; }
    public string ApvType { get; set; }
    public string TransType { get; set; }
    public string TransStatus { get; set; }
    public string ApvStatus { get; set; }
    public string DataType { get; set; }
    public string Title { get; set; }                   //제목
    public string RequestTime { get; set; }
    public string TransStatusCode { get; set; }         //전송상태 원본 ( W : 전송대기 , C : 전송취소 , S : 수신완료 , F : 전송실패 )
    public string ApprStatusCode { get; set; }          //승인상태 원본 ( 1 : 승인대기 , 2 : 승인 , 3 : 반려 )
    public int downloadCount { get; set; }              //다운로드 카운트 
    public string stDLP { get; set; }                   //개인정보 포함여부 


    public clipBoardData()
    {
        TransSeq = ApvType = TransType = TransStatus = ApvStatus = Title = RequestTime = "";
        //strDestNet = "";
    }

    public clipBoardData(string seq, string apvtype, string transtype, string transstatus, string apvstatus, string datatype, string title, string requesttime, string strTransStatusCode, string strApprStatusCode, string strDestNetData)
    {
        TransSeq = seq;
        ApvType = apvtype;
        TransType = transtype;
        TransStatus = transstatus;
        ApvStatus = apvstatus;
        DataType = datatype;
        Title = title;
        RequestTime = requesttime;
        TransStatusCode = strTransStatusCode;
        ApprStatusCode = strApprStatusCode;
        // strDestNet = strDestNetData;
    }
}
}
