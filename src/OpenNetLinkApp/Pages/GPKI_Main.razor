@page "/GPKI_LogIn"
@page "/GPKI_LogIn/{Mode}"
@using System.Diagnostics
@using OpenNetLinkApp.Data.SGDicData.SGGpki
@using OpenNetLinkApp.Services
@using System.Security.Authentication
@using OpenNetLinkApp.PageEvent
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data.SGDicData.SGUnitData
@using HsNetWorkSGData
@using HsNetWorkSG
@using OpenNetLinkApp.Data.SGQuery
@using OpenNetLinkApp.Data.SGSettings
@using OpenNetLinkApp.Models.SGSettings
@using System.Threading
@using System.Runtime.InteropServices
@using NetSparkleUpdater
@using Serilog
@using Serilog.Events
@using AgLogManager
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject ISGAppManagerService SGAppMgrSvc
@inject WebWindow Window
@inject PageStatusService pageService
@inject HSCmdCenter HsCmdCenter


<div class="hold-transition login-page" style="background:url('/images/adminlte/login_full.png')no-repeat center center; background-size:cover;">
    <div class="login-box  p-0 m-0" style=" height:600px!important; width:980px !important;">
        <div class="card p-0" style="border-radius:.7rem !important; background-color: #ececec;">
            <div class="card-body login-card-body  p-0">
                <div class="row1">
                    <div class="col-md-5 login-card-body  pt-0 pb-0" style="border-radius:.7rem 0rem 0rem .7rem !important;">
                        <ul class="full_login_left" style="background-color: rgb(30 47 77) !important; padding-top:180px !important;">
                            <li> <img src="/images/adminlte/SecureGate_logo.png" style="padding-bottom: 40px;"></li>
                            <li>
                                <span style="color:#9bddf3 !important;">
                                    This is a solution providing <br>the data transmission service
                                    among networks<br> with the highest level of security<br>
                                    in the separated network environment.
                                </span>
                            </li>
                            <li><img src="/images/adminlte/login_full_2.png" style=" padding-top:100px !important;"></li>
                        </ul>
                    </div>

                    <div class="col-md-7 login-card-body" style="height:600px; padding-left:0 !important; border-radius:0rem .7rem .7rem 0rem !important;">

                        <div style=" width:100%;">
                            <p class="login-box-msg1" style=" padding-top:30px;color:#222; font-size:1.5rem;">
                                @XmlConf.GetTitle("T_SYSTEMNAME2") <span style="color:#0576c5;">@XmlConf.GetTitle(Mode == "1" ? "T_ETC_GPKILOGIN" : "T_GPKI_CERT_REGISTER")</span>
                            </p>

                            <div class="mb-1">
                                <div class="mb-1 mt-2" style="line-height: 1.5; font-size: .9rem;font-weight: bold; color: #222;"> @XmlConf.GetInfoMsg("I_0187") </div>
                                <div class="col-md-12 p-0" style="height:100px; margin-bottom:15px;">
                                    <button class="btn btn-outline-blue1 col-md-6 m1 @(stMedia == "hard" ? "active1" : "")" disabled=@bGpkiBtnDisable @onclick="@(e=>LocationSelect("hard"))">
                                        <label class="mt-80">@XmlConf.GetTitle("T_COMMON_DRIVEFIXED")</label>
                                    </button>
                                    <button class="btn btn-outline-blue2 col-md-6 m1 @(stMedia == "usb" ? "active2" : "")" disabled=@bGpkiBtnDisable @onclick="@(e=>LocationSelect("usb"))">
                                        <label class="mt-80">@XmlConf.GetTitle("T_COMMON_DRIVEREMOVABLE")</label>
                                    </button>
                                    <select class="form-control float-right col-md-3 p-0 mt-1" disabled=@bGpkiBtnDisable style="background-color:none !important; font-size:12px !important; padding:2px !important;" @onchange="SelectMoveDisk">
                                        @foreach (string strDriveName in driveList)
                                        {
                                            <option>@strDriveName</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="mb-1">
                                <div class="mb-1" style="line-height: 1.5; font-size: 10px;font-weight: bold; color: #222;"> @XmlConf.GetInfoMsg("I_0188") </div>

                                <div style="height:150px;overflow:auto;">
                                    <table class="table table-head-fixed table-bordered table-hover white_pop   p-0" style="table-layout: fixed;overflow:auto;">

                                        <thead class="text-center">
                                            <tr>
                                                <th style="width:28%;padding-left:0px;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_ID")</th>
                                                <th style="width:16%;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_EXPIREDATE") </th>
                                                <th style="width:20%;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_USE") </th>
                                                <th style="width:20%;text-align:center;">@XmlConf.GetTitle("T_GPKI_LIST_ISSUER") </th>
                                                <th style="width:16%;padding-right:0px;text-align:center;">@XmlConf.GetTitle("T_GPKI_CERT_REGISTER_YN") </th>
                                            </tr>
                                        </thead>
                                        <tbody class="text-center">
                                            @foreach (GPKIFileInfo item in listViewGpkiFileList)
                                            {
                                                <tr style="cursor:pointer;" class="@item.m_selected" @onclick="@(e => selectGPKIItem(item.m_strUserID))">
                                                    @if (item.m_nRemainDay > 0)
                                                    {
                                                        <td style="padding-top: 4px; text-align: left; padding-left: 0px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><img src="/images/gpki_icon.png" class="p-1">@item.m_strUserID</td>
                                                    }
                                                    else
                                                    {
                                                        <td style="padding-top: 4px; text-align: left; padding-left: 0px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden; "><img src="/images/gpki_expired_icon.png" class="p-1">@item.m_strUserID</td>
                                                    }
                                                    <td style="padding-top: 4px;">@item.m_strExpiredDate</td>
                                                    <td style="padding-top: 4px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.m_strKeyUse</td>
                                                    <td style="padding-top: 4px;">@item.m_strOrg</td>
                                                    <td style="padding-top: 4px; padding-right: 0px;">@XmlConf.GetCommon(bGetResponseGpkiCNatServer ? (item.m_bIsRegisteredServer ? "T_YES" : "T_NO") : "T_IDENTIFING")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="col-md-12 mt-3 p-0">
                                    <div class="row m-0 p-0">
                                        <label class=" pt-2 p-0 pr-2" style="color:#222;">@XmlConf.GetTitle("T_GPKI_CERT_PASSWD")</label>
                                        <input type="password" class="form-control col-md-10 mb-2" id="1" disabled=@bGpkiBtnDisable placeholder="" @bind="strUserinputGPKIPW" @onkeyup="HandleKeyEvent" />
                                        <div style="padding-left:70px; font-size:12px;"><i class="fas fa-star-of-life fa-xs mb-2"></i> @XmlConf.GetInfoMsg("I_0124")</div>
                                    </div>
                                </div>

                                <div style="text-align:center; padding-top:1px;">

                                    @if (Mode == "1")
                                    {
                                        <button @onclick="goLogInPage" type="button" class="btn btn-md btn-navy mr-1" disabled=@bGpkiBtnDisable><i class="fas fa-unlock-alt"></i>@XmlConf.GetTitle("T_GPKI_CERT_NEW_REGISTER")</button> <!-- 인증서 신규 등록 -->
                                        @if (bViewBackButton == false)
                                        {
                                            <button @onclick="identifyGPki" type="button" class="btn btn-md btn-blue mr-1" disabled=@bGpkiBtnDisable><i class="fas fa-check"></i>@XmlConf.GetTitle("T_GPKI_CERT_LOGIN")</button> <!-- 인증서 로그인 -->
                                        }
                                        else
                                        {
                                            <button @onclick="identifyGPki" type="button" class="btn btn-md btn-blue mr-1" disabled=@bGpkiBtnDisable><i class="fas fa-check"></i>@XmlConf.GetTitle("T_GPKI_CERT_LOGIN")</button> <!-- 인증서 로그인 -->
                                            <button type="button" class="btn btn-md btn-black mr-0"><i class="fas fa-times"></i>로그인 취소</button> <!--로그인 취소-->
                                        }
                                    }
                                    else
                                    {
                                        <button @onclick="RegisterGpki" type="button" class="btn btn-md btn-navy mr-1" disabled=@bGpkiBtnDisable><i class="fas fa-unlock-alt"></i>@XmlConf.GetTitle("T_GPKI_CERT_REGISTER")</button> <!--인증서등록-->
                                    }

                                </div>


                            </div>






                        </div>
                    </div>

                </div>
            </div>
            <!-- /.login-card-body -->
        </div>
    </div>




</div>
@code {
    [Parameter]
    public string Mode { get; set; } //1:로그인 모드 2: 인증서 등록모드
    private string stMedia = "hard";
    private List<GPKIFileInfo> listViewGpkiFileList = new List<GPKIFileInfo>();
    private bool bViewBackButton = false; //로그인 취소버튼 표시여부
    public bool bGetResponseGpkiCNatServer = false;         // 서버에서 gpki 파일들 등록되었는지 유무 response를 받았는지 유무

    public bool bIsGpkiCNatServer = false;                  // 목록에 gpki 파일들중 하나라도 서버에 등록되어 있는지 유무

    ISGUserInfoService sgUserSvr;
    ISGSideBarUIService SideBarUISvc;
    ISGNetworkService NetWorkSvc;
    ISGAppConfigService AppConfigSvc;

    public string strUserinputGPKIPW = "";              // 사용자가 입력한 gpki-password
    public bool bGpkiBtnDisable = false;                        // 버튼 사용 disable 유무 설정, true : 사용못함, false : 사용함

    public string strCurSelDriveName = "";              // 현재 사용자가 선택한 드라이브명
    public GPKIFileInfo objUserSelectedGpki;            // 사용자가 선택한 GPKI 인증서 정보

    public List<string> driveList = new List<string>();

    SGGpkiLib sgGpkiLib = new SGGpkiLib();

    private static Serilog.ILogger CLog => Serilog.Log.ForContext<GPKI_Main>();

    private void goLogInPage()
    {
        MyNavigationManager.NavigateTo("/LogIn/GPKI");

    }

    private void selectGPKIItem(string userId)
    {

        if (bGpkiBtnDisable)
        {
            ShowMessage("info", XmlConf.GetInfoMsg("I_0211"));
            return;
        }

        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            if (item.m_strUserID == userId)
            {
                item.m_selected = "select-row";
                UserSelectItem(item);
            }
            else
                item.m_selected = "";
        }
        StateHasChanged();
    }


    /// <summary>
    /// key 눌렀을때 동작
    /// </summary>
    /// <param name="e"></param>
    private void HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (Mode == "1")
                identifyGPki();
            else
                RegisterGpki();
        }
    }


    /// <summary>
    ///
    /// </summary>
    public void identifyGPki()
    {

        if (GPkiFiltering() == false)
            return;

        ShowMessage("info", XmlConf.GetTitle("T_GPKI_LOGIN_DO"));

        HsCmdCenter.SendSVRGPKIRandomKey(pageService.m_nCurViewPageGroupID, objUserSelectedGpki.m_strUserID);

        bGpkiBtnDisable = true;

    }


    /// <summary>
    ///
    /// </summary>
    public void RegisterGpki()
    {

        if (Mode == "1")
        {
            // Login 모드 창으로 떴을때
            CLog.Here().Information("인증 모드에서 GPKI 등록버튼 사용 불가능. UI 동작 ERROR!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0222"));
        }
        else
        {

            // 등록 창으로 떴을때

            // 배포후 설정변경(KKW)
            if (GPkiFiltering(false, true, false, false) == false)
                return;

            if (objUserSelectedGpki.m_strUserID.Length < 1)
            {
                CLog.Here().Information("선택한 인증서의 Gpki cn을 알 수 없습니다!");
                ShowMessage("error", XmlConf.GetErrMsg("E_0223"));
                return;
            }

            bGpkiBtnDisable = true;

            // 먼저 입력된 data에서 얻은 사용자정보
            if (RequestGpkiCNregisterNchange())
            {
                CLog.Here().Information("Gpki 인증서 서버에 등록 진행합니다!");
                ShowMessage("info", XmlConf.GetInfoMsg("I_0210"));
            }

        }

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="strType"></param>
    /// <param name="strMsg"></param>
    private void ShowMessage(string strType, string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        string strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        object[] param = { strType, strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="bCheckPassWord"></param>
    /// <param name="bCheckGetResponse"></param>
    /// <param name="bCheckDriveAllReg"></param>
    /// <param name="bCheckSelectRegistered"></param>
    /// <returns></returns>
    public bool GPkiFiltering(bool bCheckPassWord = true, bool bCheckGetResponse = true, bool bCheckDriveAllReg = true, bool bCheckSelectRegistered = true)
    {

        // 인증서 선택 실패
        if (objUserSelectedGpki == null)
        {
            CLog.Here().Information("인증 실패 : 인증서를 선택하지 않고 시도!");
            ShowMessage("error", XmlConf.GetInfoMsg("I_0124"));     // 인증서를 선택하고 암호를 입력하세요.
            return false;
        }

        string strReason = "";

        // 인증서 passWord 검증동작 실패
        if (bCheckPassWord && sgGpkiLib.IsValiedGPKIFile(objUserSelectedGpki, strUserinputGPKIPW, ref strReason) == false)
        {
            CLog.Here().Information("인증 실패 : 인증서 패스워드 틀림!");
            ShowMessage("error", strReason);
            return false;
        }

        // 인증서 등록유무 서버에서 아직 결과값 받지 못했음.
        if (bCheckGetResponse && bGetResponseGpkiCNatServer == false)
        {
            CLog.Here().Information("인증 실패 : 인증서가 서버에 등록됐는지 유무 결과를 받지 못했음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0224"));
            return false;
        }


        // 등록확인.1
        if (bCheckDriveAllReg && bIsGpkiCNatServer == false)
        {
            CLog.Here().Information("인증 실패 : 해당 드라이브의 모든 인증서가 등록되어 있지 않음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0225"));
            return false;
        }


        // 등록확인.2
        if (bCheckSelectRegistered && objUserSelectedGpki.m_bIsRegisteredServer == false)
        {
            CLog.Here().Information("인증 실패 : 선택된 인증서는 서버에 등록되어 있지 않음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0226"));
            return false;
        }
        else if (bCheckSelectRegistered == false && objUserSelectedGpki.m_bIsRegisteredServer)
        {
            CLog.Here().Information("등록 실패 : 선택된 인증서는 서버에 이미 등록되어 있음!");
            ShowMessage("error", XmlConf.GetErrMsg("E_0227"));
            return false;
        }


        return true;

    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="strSelectGpki"></param>
    private void UserSelectItem(GPKIFileInfo strSelectGpki)
    {
        objUserSelectedGpki = strSelectGpki;
    }


    /// <summary>
    /// Drive 선택
    /// </summary>
    /// <param name="media"></param>
    private void LocationSelect(string media)
    {
        stMedia = media;

        selectGPKIItemClean();

        listViewGpkiFileList.Clear();
        if (stMedia == "hard")
        {
            InitGPKIHardDiskFileList();
        }
        else if (stMedia == "usb")
        {
            InitGPKIMoveDiskFileList();
        }

        StateHasChanged();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            object[] param = { "none" };
            await JSRuntime.InvokeAsync<object>("initLogIn", param);

            await JSRuntime.InvokeAsync<object>("InitDragAndDrop");
            await JSRuntime.InvokeAsync<object>("addMouseDown");
            await JSRuntime.InvokeAsync<object>("addMouseUp");
            await JSRuntime.InvokeAsync<object>("addDragStart");
            await JSRuntime.InvokeAsync<object>("addKeyDown");
        }
    }


    /// <summary>
    ///
    /// </summary>
    private void selectGPKIItemClean()
    {
        foreach (GPKIFileInfo item in listViewGpkiFileList)
        {
            item.m_selected = "";
        }

        objUserSelectedGpki = null;

        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    public void InitGPKIHardDiskFileList()
    {
        sgGpkiLib.LoadHardDiskGPKICertWithKeyFile();
        sgGpkiLib.RequestGPKILocalCNStatus();

        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Here().Information("HardDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }


    /// <summary>
    ///
    /// </summary>
    public void InitGPKIMoveDiskFileList()
    {
        sgGpkiLib.LoadMoveDiskGPKICertWithKeyFile(strCurSelDriveName);
        listViewGpkiFileList = sgGpkiLib.GetGpkiFileList();
        if ((listViewGpkiFileList == null) || (listViewGpkiFileList.Count <= 0))
        {
            CLog.Here().Information("MoveDisk Gpki Cert File Empty!!");
            return;
        }

        GetRegisteredGpkiCNdata();

        StateHasChanged();
    }


    /// <summary>
    /// GPKI CN이 등록되어 있는지 확인한다.
    /// </summary>
    /// <returns></returns>
    public bool GetRegisteredGpkiCNdata()
    {

        if (listViewGpkiFileList.Count > 0)
        {

            string strGpkiCnRegisterFind = "";

            foreach (GPKIFileInfo item in listViewGpkiFileList)
            {
                if (item.m_strUserID.Length > 0)
                {
                    strGpkiCnRegisterFind += item.m_strUserID;
                    strGpkiCnRegisterFind += "\x2";
                }
            }

            //HsCmdCenter.SendSVRGPKIRegInfo(0, "619유강희001\x2031이재혁002\x2");
            //031이재혁002031이창협001619유강희001999드림시큐리티001
            bGetResponseGpkiCNatServer = false;
            bIsGpkiCNatServer = false;
            HsCmdCenter.SendSVRGPKIRegInfo(pageService.m_nCurViewPageGroupID, strGpkiCnRegisterFind);


            return true;
        }

        return false;
    }


    /// <summary>
    ///
    /// </summary>
    protected override void OnInitialized()
    {
        sgGpkiLib.GPKI_Init();
        InitDriveList();
        HsCmdCenter.sgPageEvent.SetSvrGPKIEventAdd(pageService.m_nCurViewPageGroupID, GPKIInfoResult);      // gpki 등록여부
        HsCmdCenter.sgPageEvent.SetSvrGPKIRandomEventAdd(pageService.m_nCurViewPageGroupID, GPKIRandomKeyResult);   // gpki Random Key 요청
        HsCmdCenter.sgPageEvent.SetSvrGPKICertEventAdd(pageService.m_nCurViewPageGroupID, GPKICertResult);
        HsCmdCenter.sgPageEvent.SetSvrGPKIRegEventAdd(pageService.m_nCurViewPageGroupID, GPKIRegChangeResult);          // gpki 등록요청 결과 확인
        HsCmdCenter.sgPageEvent.SetLoginEventAdd(pageService.m_nCurViewPageGroupID, GpkiLoginResult);                       // gpki 로그인 결과 확인

        if (pageService.m_nCurViewPageGroupID > 0)
            bViewBackButton = true;

        LocationSelect("hard");
        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        NetWorkSvc = SGAppMgrSvc.NetworkInfoService;
        AppConfigSvc = SGAppMgrSvc.AppConfigInfoService;

        CLog.Here().Information("Gpki_Main - OnInitialized!");
    }


    /// <summary>
    ///
    /// </summary>
    public void InitDriveList()
    {
        driveList.Clear();

        string strOSDrive = Path.GetPathRoot(Environment.SystemDirectory);
        var dList = DriveInfo.GetDrives();
        foreach (DriveInfo drive in dList)
        {
            if (drive.Name.Equals(strOSDrive))
                continue;
            driveList.Add(drive.Name.Substring(0, drive.Name.Length - 1));
        }

        if (driveList.Count > 0)
            strCurSelDriveName = driveList[0];
    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKIInfoResult(int groupID)
    {

        bIsGpkiCNatServer = false;
        bGetResponseGpkiCNatServer = true;

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGSvrData(groupID);
        if (tmpData != null)
        {

            string strGpkiCN = tmpData.GetBasicTagData("GPKI_CN");

            if (strGpkiCN.Length > 0)
            {

                // ex)
                // strGpkiCN = "031이재혁002\x20\x1619유강희001\x21\x1";

                string[] words = strGpkiCN.Split('\x1');


                foreach (string strWordOne in words)
                {

                    string[] strCNreg = strWordOne.Split('\x2');
                    if (strCNreg.Length == 2 && Convert.ToInt32(strCNreg[1]) > 0)
                    {

                        foreach (GPKIFileInfo item in listViewGpkiFileList)
                        {
                            if (item.m_strUserID == strCNreg[0])
                            {
                                item.m_bIsRegisteredServer = true;
                                bIsGpkiCNatServer = true;
                            }
                        }
                    }
                }

            }// if (strGpkiCN.Length > 0)

            StateHasChanged();
        }

    } // public void GPKIInfoResult(int groupID)


    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    public void SelectMoveDisk(ChangeEventArgs e)
    {
        strCurSelDriveName = e.Value.ToString();

        selectGPKIItemClean();

        LocationSelect("usb");
    }


    /// <summary>
    /// 서버에서 RandomKey 결과값 받아 Cert 인증 요청하는 함수
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKIRandomKeyResult(int groupID)
    {

        CLog.Here().Information("$GPKI_RANDOM_ACK - Result!!");

        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(groupID);
        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strSessionKey = tmpData.GetBasicTagData("SESSIONKEY");
            string strRandomKey = tmpData.GetBasicTagData("RANDOM");

            if (strResult == "2")
            {
                bGpkiBtnDisable = false;
                ShowMessage("error", XmlConf.GetErrMsg("E_0228"));
                return;
            }

            // 진짜 인증서 받고는 20 혹은 21로 값조정
            byte[] pDataRandom = Convert.FromBase64String(strRandomKey);
            if (pDataRandom.Length > 21)
            {
                byte[] pByteTmp = new byte[20];
                System.Buffer.BlockCopy(pDataRandom, 0, pByteTmp, 0, 20);
                pDataRandom = pByteTmp;
            }

            byte[] pSignedData = null;

            //pSignedData.hsClear();
            // string strSignedData = "";

            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Here().Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Here().Information(strLog);
            strLog = "SESSIONKEY: " + strSessionKey;
            CLog.Here().Information(strLog);
            strLog = "RANDOM: " + strRandomKey;
            CLog.Here().Information(strLog);

            // ref pSignedData
            if (sgGpkiLib.GetGpkiSignedData(objUserSelectedGpki, ref pDataRandom, ref pSignedData) == false)
            {
                CLog.Here().Information("sgGpkiLib.GetGpkiSignedData error : 서명된 인증 데이티 가져오기 실패.");
                ShowMessage("error", XmlConf.GetErrMsg("E_0229"));
                bGpkiBtnDisable = false;
                StateHasChanged();
                return;
            }

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Here().Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Here().Information(strLog);
            strLog = "SESSIONKEY: " + strSessionKey;
            CLog.Here().Information(strLog);
            strLog = "RANDOM: " + strRandomKey;
            CLog.Here().Information(strLog);

            HsCmdCenter.SendSVRGPKICert(groupID, objUserSelectedGpki.m_strUserID, strSessionKey, pSignedData);

        }




    }


    /// <summary>
    /// 인증서로 알아낸 사용자ID로 로그인 진행
    /// </summary>
    /// <param name="strID"></param>
    /// <returns></returns>
    public bool Login_GPKI(string strID)
    {

        try
        {
            ISGVersionConfigService VersionConfigSvc = SGAppMgrSvc.VersionConfigInfoService;
            string strCurCliVersion = "";
            string strPlatform = "";
            if (VersionConfigSvc != null)
            {
                strCurCliVersion = VersionConfigSvc.GetSWVersion();
                strCurCliVersion = "OpenNetLink " + strCurCliVersion;
                //strConfirmID = AppConfigSvc.GetSWCommitId();
                //strCurCliVersion = "OpenNetLink " + strCurCliVersion + "+" + strConfirmID;

                strPlatform = VersionConfigSvc.GetUpdatePlatform();
                strCurCliVersion = strCurCliVersion + ":" + strPlatform;
                //strCurCliVersion = strCurCliVersion + ":" + "debian";
            }

            if (strCurCliVersion.Equals(""))
                return false;

            HsCmdCenter.SetCliVersion(strCurCliVersion);

            CLog.Here().Information("Login Platform  : {0}", strPlatform);
            CLog.Here().Information("Login strCurCliVersion {0}", strCurCliVersion);
            HsCmdCenter.LoginGpki(pageService.m_nCurViewPageGroupID, strID, strCurCliVersion);
            //HsCmdCenter.Login(0, id, pw, "NetLink 2.01");
        }
        catch (Exception ex)
        {
            //Debug.WriteLine(ex.Message);
            string strMsg = "Gpki_Main - Exception : ";
            strMsg += ex.Message;
            CLog.Here().Information(strMsg);
        }


        return true;
    }


    /// <summary>
    /// GPKI Cert 인증 결과 확인 / 처리
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKICertResult(int groupID)
    {

        CLog.Here().Information("$GPKI_CERT_ACK - Result!!");


        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(groupID);

        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strUserID = tmpData.GetBasicTagData("USERID");
            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Here().Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Here().Information(strLog);
            strLog = "USERID: " + strUserID;
            CLog.Here().Information(strLog);


            if (strResult != "0")
            {
                bGpkiBtnDisable = false;
                ShowMessage("error", XmlConf.GetErrMsg("E_0230"));
                return;
            }

            CLog.Here().Information("Gpki_Main - 실행!!");

            if (Login_GPKI(strUserID) == false)
            {
                bGpkiBtnDisable = false;
                CLog.Here().Information("Gpki_Main - 인증 실패!");
                ShowMessage("error", XmlConf.GetErrMsg("E_0230") + "(1)");
                return;
            }

        }


    }


    /// <summary>
    /// GPKI Cert 인증 결과 확인 / 처리
    /// </summary>
    /// <returns></returns>
    public bool RequestGpkiCNregisterNchange()
    {
        CLog.Here().Information("$CHANGEGPKI_CN - Request!!");

        int groupID = pageService.m_nCurViewPageGroupID;

        SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupID);
        string curUserID = "";
        if (sgLoginData != null)
            curUserID = sgLoginData.GetUserID();

        if (curUserID.Length < 1)
            return false;

        HsCmdCenter.SendSVRGPKIRegChange(groupID, curUserID, objUserSelectedGpki.m_strUserID);
        return true;
    }


    /// <summary>
    /// GPKI Cert 인증 결과 확인 / 처리
    /// </summary>
    /// <param name="groupID"></param>
    public void GPKIRegChangeResult(int groupID)
    {

        CLog.Here().Information("CHANGEGPKI_CN_ACK - Result!!");


        SGData tmpData = null;
        tmpData = HsCmdCenter.GetSGGpkiData(groupID);
        bGpkiBtnDisable = false;

        if (tmpData != null)
        {
            string strResult = tmpData.GetBasicTagData("RESULT");
            string strReason = tmpData.GetBasicTagData("REASON");
            string strLog = "";

            // Log로 확인
            strLog = "RESULT: " + strResult;
            CLog.Here().Information(strLog);
            strLog = "REASON: " + strReason;
            CLog.Here().Information(strLog);

            if (strResult != "0")
            {
                ShowMessage("error", XmlConf.GetErrMsg("E_0231"));
                return;
            }

            CLog.Here().Information("Register_GPKI - 실행!!");
            ShowMessage("info", XmlConf.GetErrMsg("E_0232"));

            // 인증서 등록모드 완료
            string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
            strNavigateWithGroupID += groupID.ToString();
            MyNavigationManager.NavigateTo(strNavigateWithGroupID);

        }


    }


    /// <summary>
    /// Reconnect 동작할 수 있게 설정변경
    /// </summary>
    /// <param name="groupId"></param>
    public void SetReconnectStart(int groupId)
    {
        // sessionCheck 동작하게 적용
        HsNetWork hsNetWork = null;
        hsNetWork = HsCmdCenter.GetConnectNetWork(groupId);
        if (hsNetWork != null)
        {
            hsNetWork.SetReconnectStop(false);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="groupId"></param>
    /// <param name="e"></param>
    public void GpkiLoginResult(int groupId, PageEventArgs e)
    {

        CLog.Here().Information("Gpki_Main - LoginResult - 실행!!");

        int ret = e.result;
        if (ret == 0)
        {
            SGLoginData sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(groupId);

            pageService.ConnectCountAdd(groupId);
            pageService.SetConnectStatus(groupId, true);
            pageService.SetLogoutStatus(groupId, false);

            CLog.Here().Information($"groupID : {groupId} - User Do Login(GPKI_Main), UrlRedirection LogIn State ReSet !!!");

            HsNetWorkSG.HsHttpWatcher.SetLoginOutState(groupId, true);


            /*if (ClientPatch(sgLoginData))
            {
                string strSvrVersion = sgLoginData.GetServClientVersion();
                refUpdate_PopUp.SetVersionText(strSvrVersion);
                refUpdate_PopUp.SetType(0);
                refUpdate_PopUp.SetLoginUpdateEventAdd(LoginUpdateExe);
                await refUpdate_PopUp.openPopUp();
                return;
            }*/


            SGUserData sgUserData = (SGUserData)HsCmdCenter.GetUserData(groupId);
            SGData sfmData = HsCmdCenter.GetSFMListData(groupId);

            while (true)
            {
                sfmData = HsCmdCenter.GetSFMListData(groupId);
                if (sfmData != null)
                    break;
                Thread.Sleep(50);
            }
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData, sfmData);

            // CLIENT_ZIP_DEPTH 정보 가져옴
            SGQueryExtend sgQueryExtend = null;
            sgQueryExtend = new SGQueryExtend();
            if (sgQueryExtend != null)
            {
                string strQuery = sgQueryExtend.GetZipDepthSQLsystemEnv();
                HsCmdCenter.SendZipDepthInfo(groupId, sgLoginData.GetUserID(), strQuery);
            }

            InitSideMenu(groupId);
            // MyNavigationManager.NavigateTo("/Welcome");

            bool bUseClipBoard = sgLoginData.GetClipboard();
            if (bUseClipBoard)
            {
                List<bool> listModKey = AppConfigSvc.GetClipBoardModifier(groupId);
                char chVKey = AppConfigSvc.GetClipBoardVKey(groupId);

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    bool bAlt = listModKey[(int)HOTKEY_MOD.ALT];
                    bool bCtrl = listModKey[(int)HOTKEY_MOD.CTRL];
                    bool bShift = listModKey[(int)HOTKEY_MOD.SHIFT];
                    bool bWin = listModKey[(int)HOTKEY_MOD.WINDOW];
                    Window.WinRegClipboardHotKey(groupId, bAlt, bCtrl, bShift, bWin, chVKey);
                }


                else
                {
                    Window.RegClipboardHotKey(groupId,
                                    listModKey[(int)HOTKEY_MOD.ALT],
                                    listModKey[(int)HOTKEY_MOD.CTRL],
                                    listModKey[(int)HOTKEY_MOD.SHIFT],
                                    listModKey[(int)HOTKEY_MOD.WINDOW],
                                    chVKey);
                }

                // clipboard 선택전송기능 사용유무설정
                if (SGAppMgrSvc.OpConfigInfoService.GetUseClipTypeSelectSend(groupId))
                    Window.UseClipBoardSelect(groupId);

                // ClipBoard(Type Mixed 일때) Text 우선송신 사용
                if (SGAppMgrSvc.OpConfigInfoService.GetUseClipTypeTextFirstSend(groupId))
                    Window.UseClipFirstSendType(groupId);

            }


            DateTime dt = (SGAppMgrSvc.OpConfigInfoService.GetUseOneAClockChangeAgentTimer(0)) ? DateTime.Now : sgLoginData.GetSvrTimeConvert();
            pageService.SetSvrTime(groupId, dt, sgLoginData);
            bool bAfterApprChkHIde = sgLoginData.GetAfterChkHide();
            bool bAfterApprEnable = sgLoginData.GetUseAfterApprove(dt);
            pageService.SetAfterApprChkHIde(groupId, bAfterApprChkHIde);
            pageService.SetAfterApprEnable(groupId, bAfterApprEnable);
            bool bAfterCheck = false;
            if (!bAfterApprEnable)
                bAfterCheck = false;
            else
                bAfterCheck = SGAppMgrSvc.AppConfigInfoService.GetAfterBasicChk();

            pageService.SetAfterApproveCheck(groupId, bAfterCheck);

            Int64 DayFileMaxSize = sgLoginData.GetDayFileTransferLimitSize();
            int DayFileMaxCount = sgLoginData.GetDayFileTransferLimitCount();
            Int64 DayClipMaxSize = sgLoginData.GetDayClipboardLimitSize();
            int DayClipMaxCount = sgLoginData.GetDayClipboardLimitCount();
            pageService.SetDayFileAndClipMax(groupId, DayFileMaxSize, DayFileMaxCount, DayClipMaxSize, DayClipMaxCount);


            ScreenTimeInitNotiEvent screenTimeInitEvent = HsCmdCenter.sgPageEvent.GetScreenTimeInitNotiEvent();
            if (screenTimeInitEvent != null)
            {
                ConfigArgs config = new ConfigArgs();
                config.ScreenTime = sgLoginData.GetSCRLimit();
                screenTimeInitEvent(groupId, config);
            }

            // 자동로그인 관련 소스 제거

            HsNetWork hsNetWork = null;
            hsNetWork = HsCmdCenter.GetConnectNetWork(groupId);
            if (hsNetWork != null)
            {
                pageService.SetSessionKey(groupId, hsNetWork.GetSeedKey());

                SGData tmpData = null;
                // tmpData = HsCmdCenter.GetSGSvrData(groupId);
                tmpData = HsCmdCenter.GetUserData(groupId);
                if (tmpData != null)
                {
                    // gpki_login때는 id 사용
                    pageService.SetCurUserPassWD(groupId, sgLoginData.GetUserID());
                }

            }

            // 초기 password 관련 소스 제거

            // password 만기 관련 소스 제거
            {

                string strNavigateWithGroupID = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
                strNavigateWithGroupID += groupId.ToString();
                MyNavigationManager.NavigateTo(strNavigateWithGroupID);

                if (SGAppMgrSvc.AppConfigInfoService.GetStartTrayMove())
                {
                    if (pageService.GetConnectCount(groupId) <= 0)                                                                     // 재접속이 아닐 경우에만 트레이 이동
                    {
                        // 트레이 이동.
                        // 트레이 아이콘으로 이동합니다
                        HsCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, XmlConf.GetTitle("T_ETC_TRAYMOVE"), XmlConf.GetInfoMsg("I_0051"));

                        Window.MoveWebWindowToTray();
                    }
                    else
                        HsCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                }
                else
                {
                    HsCmdCenter.sgPageEvent.OSNotification(groupId, OS_NOTI.ONLINE, pageService.m_strLoginToastTitle, pageService.m_strLoginToastMsg, "");
                }
            }

            CtrlSideEvent ctrlSideEvent = null;
            ctrlSideEvent = HsCmdCenter.sgPageEvent.GetCtrlSideNotiEvent();
            if (ctrlSideEvent != null)
                ctrlSideEvent();

            // Move WebWindow To Tray.
            //if (SGAppMgrSvc.OpConfigInfoService.GetStartTrayMove()) Window.MoveWebWindowToTray();

            // Reconnect, Menu 재생성 못하도게 수정
            pageService.SetStatusSideMenuReBuildTime(groupId, false);

            SetReconnectStart(groupId);

        }
        else
        {
            bGpkiBtnDisable = false;

            string strPopupMsg = "";
            // 다중망일때에는 실패한 망이름 표현
            if (pageService.m_bIsMultiNetWork)
            {
                string strFromNet = "";
                string strToNet = "";
                XmlConf.GetNetworkTitle(groupId, out strFromNet, out strToNet);
                strPopupMsg = $"{strFromNet}<i class=\"fas fa-long-arrow-alt-right p-1\"></i> {strToNet}<br/>";
            }
            strPopupMsg += e.strMsg;

            strPopupMsg = strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
            HsCmdCenter.SendLogOut(groupId, "");
            StateHasChanged();
        }

        bGpkiBtnDisable = false;

    }


    /// <summary>
    /// 왼쪽 Side 메뉴 설정
    /// </summary>
    /// <param name="groupid"></param>
    public void InitSideMenu(int groupid)
    {

        if (pageService.GetStatusSideMenuReBuildTime(groupid) == false)
        {
            //Reconnect 이상현상
            CLog.Here().Information($"InitSideMenu, groupid : {groupid}, SideBar Build Skip!");
            SideBarUISvc.EmitNotifyStateChangedActMenu();
            return;
        }

        string strDataTrans = XmlConf.GetTitle("T_COMMON_FILETRANS_BASIC");                     // 자료전송
        string strFileTrans = XmlConf.GetTitle("T_COMMON_FILETRANS");                           // 파일전송
        string strTransManage = XmlConf.GetTitle("T_COMMON_TRANSMANAGE");                       // 전송관리
        string strApprManage = XmlConf.GetTitle("T_COMMON_APPROVEMANAGE");                      // 결재관리
        string strSecurityApprManage = XmlConf.GetTitle("T_COMMON_APPROVESECURITY");            // 보안결재
        string strClipboard = XmlConf.GetTitle("T_COMMON_CLIPBOARD");                           // 클립보드
        string strClipboardTransManage = XmlConf.GetTitle("T_COMMON_CLIPTRANS");                // 클립보드 관리
        string strClipboardApprManage = XmlConf.GetTitle("T_COMMON_CLIPAPPR");                  // 클립보드 결재
        string strEmail = XmlConf.GetTitle("T_COMMON_EMAIL");                                   // 메일
        string strEmailTransManage = XmlConf.GetTitle("T_COMMON_EMAILMANAGE_GAP");              // 메일 관리
        string strEmailApprManage = XmlConf.GetTitle("T_COMMON_EMAILAPPROVE_GAP");              // 메일 결재
        string strPCURL = XmlConf.GetTitle("T_COMMON_URL");                                     // PCURL
        string strPCURLTransManage = XmlConf.GetTitle("T_COMMON_URLMANAGE");                    // PCURL 관리
        string strPCURLApprManage = XmlConf.GetTitle("T_COMMON_URLAPPROVE");                    // PCURL 결재
        string strEnvSetInfo = XmlConf.GetTitle("T_COMMON_OPTION");                             // 환경설정.
        string strNetSetInfo = XmlConf.GetTitle("T_ETC_CONNTCTINFO_TITLE");                         // 접속환경
        string strBasicSetInfo = XmlConf.GetTitle("T_ETC_BASICSET_TITLE");                      // 기본설정.
        string strBoardNotiInfo = XmlConf.GetTitle("T_COMMON_NOTIFY");                          // 공지사항

        SideBarUISvc.DeleteAllItem();
        List<ISGNetwork> listNetWork = NetWorkSvc.NetWorkInfo;
        int count = listNetWork.Count;


        bool bFileTransMenuUse = false;
        bool bFileTransUse = false;
        bool bApprMenuUse = false;
        bool bSecurityApprMenuUse = false;
        bool bPCURLUse = false;
        bool bClipBoardApprUse = false;
        bool bEmailUse = false;
        bool bPublicBoard = false;
        bool bBasicConf = false;

        bool bDeputyApprove = false;


        for (int i = 0; i < count; i++)
        {
            int gID = listNetWork[i].GroupID;
            string strNetFromName = listNetWork[i].FromName;
            string strNetToName = listNetWork[i].ToName;

            bool bExpand = false;
            bool bActived = false;
            if (groupid == gID)
            {
                bExpand = true;
                bActived = true;
            }

            SGLoginData sgLoginData = null;
            SGUserData sgUserData = null;
            sgLoginData = (SGLoginData)HsCmdCenter.GetLoginData(i);
            sgUserData = (SGUserData)HsCmdCenter.GetUserData(i);
            ISGUserInfo sgUserInfo = sgUserSvr.GetUserInfo(groupid);

            if ((sgLoginData != null) && (sgUserData != null))
            {
                bFileTransMenuUse = sgLoginData.GetFileTrans();

                //if (sgLoginData.GetApprove() == true)
                // 3망 정책고려한 결재사용유무 설정
                if ((pageService.GetUseApproveNetOver(groupid, sgLoginData) && SGAppMgrSvc.OpConfigInfoService.GetNoApproveManageUI(groupid) == false) || SGAppMgrSvc.OpConfigInfoService.GetUseApproveManageUIForce(groupid)) // 결재관리 UI 않나오는 설정추가
                    if ((sgLoginData.GetApproveProxyRight() == true) || (sgUserInfo.GetUserApprPos(false, SGAppMgrSvc.OpConfigInfoService.GetUseAllProxyAuthority(groupid)) > 0))
                        bApprMenuUse = true;

                bSecurityApprMenuUse = sgUserData.GetUserPrivacyApprPos();
                bPCURLUse = sgLoginData.GetPCURLUse();
            }


            string strRootPath = SGAppMgrSvc.AppConfigInfoService.GetMainPage() + "/";
            bFileTransUse = SGAppMgrSvc.OpConfigInfoService.GetUseFileTrans(groupid);
            bEmailUse = SGAppMgrSvc.OpConfigInfoService.GetUseEmailManageApprove(groupid);  // siteConfig. json으로 이동

            bPCURLUse = SGAppMgrSvc.OpConfigInfoService.GetUsePCURL(groupid);
            bClipBoardApprUse = SGAppMgrSvc.OpConfigInfoService.GetUseFileClipManageUI(groupid);
            bPublicBoard = SGAppMgrSvc.OpConfigInfoService.GetUsePublicBoard(groupid);
            //bPublicBoard = true;

            bDeputyApprove = false;
            if (sgLoginData != null)
                bDeputyApprove = sgLoginData.GetDeputyApprove();
            bool bCertSend = SGAppMgrSvc.OpConfigInfoService.GetUseCertSend(groupid);
            bool bAutoLogin = SGAppMgrSvc.OpConfigInfoService.GetUseAutoLogin(groupid);     // siteConfig // json 으로 설정이동

            bBasicConf = (bDeputyApprove | bCertSend | bAutoLogin);

            int nParentID = 0;

            // 우선 모든 메뉴가 나오도록 임시 설정.
            //bFileTransMenuUse = bApprMenuUse = bSecurityApprMenuUse = bPCURLUse = bClipBoardApprUse = bEmailUse = bPublicBoard = true;

            string strNavigatePathWithGroupID = "";
            string strUserSeq = "";
            if (sgUserData != null)
                strUserSeq = sgUserData.GetUserSequence();

            strNavigatePathWithGroupID = strRootPath;
            strNavigatePathWithGroupID += gID.ToString();
            SideBarUISvc.AddRoot(groupId: gID, categoryId: LSIDEBAR.MENU_CATE_ROOT, fromName: strNetFromName, toName: strNetToName, icon: "fas fa-cloud-upload-alt", path: strNavigatePathWithGroupID, badgeType: "right badge badge-danger", badgeValue: "N", "", bActived, bExpand, strUserSeq);

            if (pageService.GetConnectStatus(i) == false)
            {
                nParentID++;
            }
            else
            {

                if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                    SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: "", icon: "fas fa-copy", path: "", badgeType: "left badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                if (bFileTransUse)
                {
                    strNavigatePathWithGroupID = "/transfer/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strFileTrans, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bFileTransMenuUse, strUserSeq: strUserSeq);                                 // 파일전송


                    strNavigatePathWithGroupID = "/transManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strTransManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", strUserSeq: strUserSeq);                                                     // 전송관리



                    strNavigatePathWithGroupID = "/transferApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bApprMenuUse, strUserSeq: strUserSeq);                              // 결재관리

                    strNavigatePathWithGroupID = "/securityApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 3) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 3, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_FILE, name: strSecurityApprManage, icon: "fas fa-copy", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bSecurityApprMenuUse, strUserSeq: strUserSeq);              // 보안결재관리

                    nParentID++;
                }


                if (bEmailUse)
                {
                    // 메일 관리
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: "", icon: "fas fa-envelope", path: "", badgeType: "left badge badge-warning", bUse: bEmailUse, strUserSeq: strUserSeq);

                    // 메일 관리
                    strNavigatePathWithGroupID = "/mailManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailTransManage, icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bEmailUse, strUserSeq: strUserSeq);

                    // 메일 결재
                    strNavigatePathWithGroupID = "/mailApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_MAIL, name: strEmailApprManage, icon: "fas fa-envelope", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bEmailUse & bApprMenuUse), strUserSeq: strUserSeq);
                    nParentID++;
                }

                if (bPCURLUse)
                {
                    // PCURL 관리
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: "", icon: "fas fa-globe", path: "", badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strUserSeq);

                    // PCURL 관리
                    strNavigatePathWithGroupID = "/pcurlManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLTransManage, icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPCURLUse, strUserSeq: strUserSeq);

                    // PCURL 결재
                    strNavigatePathWithGroupID = "/pcurlApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_PCURL, name: strPCURLApprManage, icon: "fas fa-globe", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bPCURLUse & bApprMenuUse), strUserSeq: strUserSeq);

                    nParentID++;
                }

                if (bClipBoardApprUse)
                {
                    // 클립보드 관리
                    if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                        SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: "", icon: "fas fa-object-ungroup", path: "", badgeType: "right badge badge-warning", bUse: bClipBoardApprUse, strUserSeq: strUserSeq);

                    // 클립보드 관리
                    strNavigatePathWithGroupID = "/clipBoardManage/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardTransManage, icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bClipBoardApprUse, strUserSeq: strUserSeq);

                    // 클립보드 결재
                    strNavigatePathWithGroupID = "/clipBoardApprove/";
                    strNavigatePathWithGroupID += gID.ToString();
                    if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                        SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_CLIP, name: strClipboardApprManage, icon: "fas fa-object-ungroup", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: (bClipBoardApprUse & bApprMenuUse), strUserSeq: strUserSeq);

                    nParentID++;
                }

                // 접속환경
                strNavigatePathWithGroupID = "/viewConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindMenu(gID, nParentID) == null)
                    SideBarUISvc.AddMenu(groupId: gID, Id: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // 공지사항
                strNavigatePathWithGroupID = "/publicBoard/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 0) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 0, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBoardNotiInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bPublicBoard, strUserSeq: strUserSeq);

                // 접속환경
                strNavigatePathWithGroupID = "/viewConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 1) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 1, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strNetSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: true, strUserSeq: strUserSeq);

                // 기본설정
                strNavigatePathWithGroupID = "/netConf/";
                strNavigatePathWithGroupID += gID.ToString();
                if (SideBarUISvc.FindSubMenu(gID, nParentID, 2) == null)
                    SideBarUISvc.AddSubMenu(groupId: gID, Id: 2, parentId: nParentID, categoryId: LSIDEBAR.MENU_CATE_ENVSET, name: strBasicSetInfo, icon: "fas fa-cog", path: strNavigatePathWithGroupID, badgeType: "right badge badge-warning", bUse: bBasicConf, strUserSeq: strUserSeq);

            }

        }

        SideBarUISvc.EmitNotifyStateChangedActMenu();

    }


    /// <summary>
    /// 로그인실패시 처리
    /// </summary>
    /// <param name="strMsg"></param>
    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        strMsg = strMsg.Replace("/r/n", "<br>");
        object[] param = { "error", XmlConf.GetTitle("T_SYSTEMNAME2"), strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }


}
